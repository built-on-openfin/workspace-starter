var e={d:(o,t)=>{for(var n in t)e.o(t,n)&&!e.o(o,n)&&Object.defineProperty(o,n,{enumerable:!0,get:t[n]})},o:(e,o)=>Object.prototype.hasOwnProperty.call(e,o)},o={};e.d(o,{k:()=>t});const t={platformOverride:new class{async initialize(e,o,t){this._definition=e,this._logger=o("GetUserDecisionForBeforeunload"),this._helpers=t,this._logger.info("Initializing")}async closedown(){this._logger?.info("Closedown")}async getConstructorOverride(e){return o=>{const t=this._definition?.data??{},n=this._logger,s=this._helpers;return class extends o{constructor(){super(),n?.info(`Options passed: ${JSON.stringify(e)} and module data: ${JSON.stringify(t)} with session id: ${s?.sessionId}`)}async getUserDecisionForBeforeUnload(e){if(n?.info("getUserDecisionForBeforeUnload called:",e),e.viewsPreventingUnload.length>0&&s?.getDialogClient){const o=await(s?.getDialogClient());let n="Unsaved content changes",i="You have unsaved changes. Are you sure you want to close?",l="Cancel",a="Close";t?.title&&t.title.trim().length>0&&(n=t.title),t?.message&&t.message.trim().length>0?i=t.message.replace("{CLOSE_TYPE}",e.closeType):"window"===e.closeType?i="You have unsaved changes in your content. Are you sure you want to close this window?":"page"===e.closeType?i="You have unsaved changes in your content. Are you sure you want to close this page?":"view"===e.closeType&&(i="You have unsaved changes. Are you sure you want to close this view?"),t?.cancelButtonLabel&&t.cancelButtonLabel.trim().length>0&&(l=t.cancelButtonLabel),t?.closeButtonLabel&&t.closeButtonLabel.trim().length>0&&(a=t.closeButtonLabel);const r=await(o?.showConfirmation({title:n,message:i,buttons:[{label:l,id:"cancel"},{label:a,id:"close"}]},e.windowId));if(r)return"close"===r.id?{windowShouldClose:!0,viewsToClose:[...e.viewsNotPreventingUnload,...e.viewsPreventingUnload]}:{windowShouldClose:!1,viewsToClose:[]}}return super.getUserDecisionForBeforeUnload(e)}}}}}};var n=o.k;export{n as entryPoints};
//# sourceMappingURL=get-user-decision-for-beforeunload.bundle.js.map