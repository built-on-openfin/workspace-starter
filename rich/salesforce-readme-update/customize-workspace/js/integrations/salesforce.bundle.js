/******/ var __webpack_modules__ = ({

/***/ "../../node_modules/@openfin/salesforce/openfin.salesforce.js":
/*!********************************************************************!*\
  !*** ../../node_modules/@openfin/salesforce/openfin.salesforce.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApiError": () => (/* binding */ o),
/* harmony export */   "AuthorizationError": () => (/* binding */ s),
/* harmony export */   "ConnectionError": () => (/* binding */ i),
/* harmony export */   "ObjectDataError": () => (/* binding */ a),
/* harmony export */   "ParameterError": () => (/* binding */ c),
/* harmony export */   "QueryError": () => (/* binding */ u),
/* harmony export */   "RestApiError": () => (/* binding */ l),
/* harmony export */   "SearchError": () => (/* binding */ f),
/* harmony export */   "WorkspaceError": () => (/* binding */ d),
/* harmony export */   "connect": () => (/* binding */ p),
/* harmony export */   "disableLogging": () => (/* binding */ h),
/* harmony export */   "enableLogging": () => (/* binding */ w),
/* harmony export */   "getConnection": () => (/* binding */ m)
/* harmony export */ });
var e={421:(e,t,r)=>{e.exports=r(448)},994:(e,t,r)=>{var n=r(446),o=r(322),s=r(58),i=r(982),a=r(63),c=r(541),u=r(497),l=r(988),f=r(242),d=r(14);e.exports=function(e){return new Promise((function(t,r){var p,h=e.data,w=e.headers,m=e.responseType;function v(){e.cancelToken&&e.cancelToken.unsubscribe(p),e.signal&&e.signal.removeEventListener("abort",p)}n.isFormData(h)&&delete w["Content-Type"];var g=new XMLHttpRequest;if(e.auth){var y=e.auth.username||"",b=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";w.Authorization="Basic "+btoa(y+":"+b)}var x=a(e.baseURL,e.url);function E(){if(g){var n="getAllResponseHeaders"in g?c(g.getAllResponseHeaders()):null,s={data:m&&"text"!==m&&"json"!==m?g.response:g.responseText,status:g.status,statusText:g.statusText,headers:n,config:e,request:g};o((function(e){t(e),v()}),(function(e){r(e),v()}),s),g=null}}if(g.open(e.method.toUpperCase(),i(x,e.params,e.paramsSerializer),!0),g.timeout=e.timeout,"onloadend"in g?g.onloadend=E:g.onreadystatechange=function(){g&&4===g.readyState&&(0!==g.status||g.responseURL&&0===g.responseURL.indexOf("file:"))&&setTimeout(E)},g.onabort=function(){g&&(r(l("Request aborted",e,"ECONNABORTED",g)),g=null)},g.onerror=function(){r(l("Network Error",e,null,g)),g=null},g.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",n=e.transitional||f.transitional;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),r(l(t,e,n.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",g)),g=null},n.isStandardBrowserEnv()){var k=(e.withCredentials||u(x))&&e.xsrfCookieName?s.read(e.xsrfCookieName):void 0;k&&(w[e.xsrfHeaderName]=k)}"setRequestHeader"in g&&n.forEach(w,(function(e,t){void 0===h&&"content-type"===t.toLowerCase()?delete w[t]:g.setRequestHeader(t,e)})),n.isUndefined(e.withCredentials)||(g.withCredentials=!!e.withCredentials),m&&"json"!==m&&(g.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&g.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&g.upload&&g.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(p=function(e){g&&(r(!e||e&&e.type?new d("canceled"):e),g.abort(),g=null)},e.cancelToken&&e.cancelToken.subscribe(p),e.signal&&(e.signal.aborted?p():e.signal.addEventListener("abort",p))),h||(h=null),g.send(h)}))}},448:(e,t,r)=>{var n=r(446),o=r(962),s=r(495),i=r(149),a=function e(t){var r=new s(t),a=o(s.prototype.request,r);return n.extend(a,s.prototype,r),n.extend(a,r),a.create=function(r){return e(i(t,r))},a}(r(242));a.Axios=s,a.Cancel=r(14),a.CancelToken=r(543),a.isCancel=r(181),a.VERSION=r(474).version,a.all=function(e){return Promise.all(e)},a.spread=r(67),a.isAxiosError=r(726),e.exports=a,e.exports.default=a},14:e=>{function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},543:(e,t,r)=>{var n=r(14);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;this.promise.then((function(e){if(r._listeners){var t,n=r._listeners.length;for(t=0;t<n;t++)r._listeners[t](e);r._listeners=null}})),this.promise.then=function(e){var t,n=new Promise((function(e){r.subscribe(e),t=e})).then(e);return n.cancel=function(){r.unsubscribe(t)},n},e((function(e){r.reason||(r.reason=new n(e),t(r.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},o.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},181:e=>{e.exports=function(e){return!(!e||!e.__CANCEL__)}},495:(e,t,r)=>{var n=r(446),o=r(982),s=r(582),i=r(862),a=r(149),c=r(166),u=c.validators;function l(e){this.defaults=e,this.interceptors={request:new s,response:new s}}l.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=a(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var r=t.transitional;void 0!==r&&c.assertOptions(r,{silentJSONParsing:u.transitional(u.boolean),forcedJSONParsing:u.transitional(u.boolean),clarifyTimeoutError:u.transitional(u.boolean)},!1);var n=[],o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,n.unshift(e.fulfilled,e.rejected))}));var s,l=[];if(this.interceptors.response.forEach((function(e){l.push(e.fulfilled,e.rejected)})),!o){var f=[i,void 0];for(Array.prototype.unshift.apply(f,n),f=f.concat(l),s=Promise.resolve(t);f.length;)s=s.then(f.shift(),f.shift());return s}for(var d=t;n.length;){var p=n.shift(),h=n.shift();try{d=p(d)}catch(e){h(e);break}}try{s=i(d)}catch(e){return Promise.reject(e)}for(;l.length;)s=s.then(l.shift(),l.shift());return s},l.prototype.getUri=function(e){return e=a(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],(function(e){l.prototype[e]=function(t,r){return this.request(a(r||{},{method:e,url:t,data:(r||{}).data}))}})),n.forEach(["post","put","patch"],(function(e){l.prototype[e]=function(t,r,n){return this.request(a(n||{},{method:e,url:t,data:r}))}})),e.exports=l},582:(e,t,r)=>{var n=r(446);function o(){this.handlers=[]}o.prototype.use=function(e,t,r){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){n.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},63:(e,t,r)=>{var n=r(452),o=r(123);e.exports=function(e,t){return e&&!n(t)?o(e,t):t}},988:(e,t,r)=>{var n=r(477);e.exports=function(e,t,r,o,s){var i=new Error(e);return n(i,t,r,o,s)}},862:(e,t,r)=>{var n=r(446),o=r(255),s=r(181),i=r(242),a=r(14);function c(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new a("canceled")}e.exports=function(e){return c(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),n.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return c(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return s(t)||(c(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},477:e=>{e.exports=function(e,t,r,n,o){return e.config=t,r&&(e.code=r),e.request=n,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}},149:(e,t,r)=>{var n=r(446);e.exports=function(e,t){t=t||{};var r={};function o(e,t){return n.isPlainObject(e)&&n.isPlainObject(t)?n.merge(e,t):n.isPlainObject(t)?n.merge({},t):n.isArray(t)?t.slice():t}function s(r){return n.isUndefined(t[r])?n.isUndefined(e[r])?void 0:o(void 0,e[r]):o(e[r],t[r])}function i(e){if(!n.isUndefined(t[e]))return o(void 0,t[e])}function a(r){return n.isUndefined(t[r])?n.isUndefined(e[r])?void 0:o(void 0,e[r]):o(void 0,t[r])}function c(r){return r in t?o(e[r],t[r]):r in e?o(void 0,e[r]):void 0}var u={url:i,method:i,data:i,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:c};return n.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=u[e]||s,o=t(e);n.isUndefined(o)&&t!==c||(r[e]=o)})),r}},322:(e,t,r)=>{var n=r(988);e.exports=function(e,t,r){var o=r.config.validateStatus;r.status&&o&&!o(r.status)?t(n("Request failed with status code "+r.status,r.config,null,r.request,r)):e(r)}},255:(e,t,r)=>{var n=r(446),o=r(242);e.exports=function(e,t,r){var s=this||o;return n.forEach(r,(function(r){e=r.call(s,e,t)})),e}},242:(e,t,r)=>{var n=r(446),o=r(964),s=r(477),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var c,u={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(c=r(994)),c),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)||t&&"application/json"===t["Content-Type"]?(a(t,"application/json"),function(e,t,r){if(n.isString(e))try{return(0,JSON.parse)(e),n.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||u.transitional,r=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,i=!r&&"json"===this.responseType;if(i||o&&n.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(i){if("SyntaxError"===e.name)throw s(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};n.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),n.forEach(["post","put","patch"],(function(e){u.headers[e]=n.merge(i)})),e.exports=u},474:e=>{e.exports={version:"0.26.0"}},962:e=>{e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},982:(e,t,r)=>{var n=r(446);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var s;if(r)s=r(t);else if(n.isURLSearchParams(t))s=t.toString();else{var i=[];n.forEach(t,(function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,(function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),s=i.join("&")}if(s){var a=e.indexOf("#");-1!==a&&(e=e.slice(0,a)),e+=(-1===e.indexOf("?")?"?":"&")+s}return e}},123:e=>{e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},58:(e,t,r)=>{var n=r(446);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,s,i){var a=[];a.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),n.isString(o)&&a.push("path="+o),n.isString(s)&&a.push("domain="+s),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},452:e=>{e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},726:(e,t,r)=>{var n=r(446);e.exports=function(e){return n.isObject(e)&&!0===e.isAxiosError}},497:(e,t,r)=>{var n=r(446);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=o(window.location.href),function(t){var r=n.isString(t)?o(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},964:(e,t,r)=>{var n=r(446);e.exports=function(e,t){n.forEach(e,(function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])}))}},541:(e,t,r)=>{var n=r(446),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,s,i={};return e?(n.forEach(e.split("\n"),(function(e){if(s=e.indexOf(":"),t=n.trim(e.substr(0,s)).toLowerCase(),r=n.trim(e.substr(s+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([r]):i[t]?i[t]+", "+r:r}})),i):i}},67:e=>{e.exports=function(e){return function(t){return e.apply(null,t)}}},166:(e,t,r)=>{var n=r(474).version,o={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){o[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}}));var s={};o.transitional=function(e,t,r){function o(e,t){return"[Axios v"+n+"] Transitional option '"+e+"'"+t+(r?". "+r:"")}return function(r,n,i){if(!1===e)throw new Error(o(n," has been removed"+(t?" in "+t:"")));return t&&!s[n]&&(s[n]=!0,console.warn(o(n," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(r,n,i)}},e.exports={assertOptions:function(e,t,r){if("object"!=typeof e)throw new TypeError("options must be an object");for(var n=Object.keys(e),o=n.length;o-- >0;){var s=n[o],i=t[s];if(i){var a=e[s],c=void 0===a||i(a,s,e);if(!0!==c)throw new TypeError("option "+s+" must be "+c)}else if(!0!==r)throw Error("Unknown option "+s)}},validators:o}},446:(e,t,r)=>{var n=r(962),o=Object.prototype.toString;function s(e){return Array.isArray(e)}function i(e){return void 0===e}function a(e){return"[object ArrayBuffer]"===o.call(e)}function c(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function l(e){return"[object Function]"===o.call(e)}function f(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:s,isArrayBuffer:a,isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"[object FormData]"===o.call(e)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&a(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:c,isPlainObject:u,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:l,isStream:function(e){return c(e)&&l(e.pipe)},isURLSearchParams:function(e){return"[object URLSearchParams]"===o.call(e)},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:f,merge:function e(){var t={};function r(r,n){u(t[n])&&u(r)?t[n]=e(t[n],r):u(r)?t[n]=e({},r):s(r)?t[n]=r.slice():t[n]=r}for(var n=0,o=arguments.length;n<o;n++)f(arguments[n],r);return t},extend:function(e,t,r){return f(t,(function(t,o){e[o]=r&&"function"==typeof t?n(t,r):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,r),s.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var n={};(()=>{r.d(n,{MS:()=>o,M_:()=>s,hY:()=>i,G4:()=>a,_W:()=>c,o:()=>u,C3:()=>f,fB:()=>l,if:()=>d,$j:()=>T,U$:()=>w,U7:()=>m,B5:()=>$});var e=r(421),t=r.n(e);class o extends Error{constructor(e="An unexpected error has occurred",t){var r;super(e),t&&(this.innerError=t&&t),this.stack=null===(r=this.stack)||void 0===r?void 0:r.replace(/^(\w*Error)/,`${this.constructor.name}`)}}class s extends o{constructor(e="Unable to authorize connection to Salesforce",t){var r,n,o;super(e,t),t&&t.isAxiosError&&(t.message=null!==(o=null===(n=null===(r=t.response)||void 0===r?void 0:r.data)||void 0===n?void 0:n.error_description)&&void 0!==o?o:t.message)}}class i extends o{constructor(e="Not connected to Salesforce",t){super(e,t)}}class a extends o{constructor(e="Retrieve Salesforce object data failed",t){super(e,t)}}class c extends o{constructor(e="Invalid parameter detected",t){super(e,t)}}class u extends o{constructor(e="Execute Salesforce query failed",t){super(e,t)}}class l extends o{constructor(e="Unable to retrieve search results from Salesforce",t){super(e,t)}}class f extends o{constructor(e,t="Execute Salesforce REST API request failed"){var r,n,o,s,i;super(t,null!=e?e:void 0),this.restApiErrorCode="",this.restApiErrorDescription="",this.restApiResponseStatus=void 0;const a=e;if(null==a?void 0:a.isAxiosError){if(this.restApiResponseStatus=null===(r=a.response)||void 0===r?void 0:r.status,!(null===(o=null===(n=a.response)||void 0===n?void 0:n.data)||void 0===o?void 0:o.length))return;const e=null===(i=null===(s=a.response)||void 0===s?void 0:s.data)||void 0===i?void 0:i[0];if(e){const{errorCode:t,message:r}=e;this.restApiErrorCode=t,this.restApiErrorDescription=r}}}}class d extends o{constructor(e="An unexpected error occurred",t){super(e,t)}}let p=!1;const h="[@openfin/salesforce]",w=()=>{p=!1},m=()=>{p=!0,g("v2.1.3")},v=e=>{if(p&&(e.innerError?console.error(h,e,"\n\n(inner)",e.innerError):console.error(h,e),e instanceof f)){const{restApiErrorCode:t,restApiErrorDescription:r}=e;if(r){const e=r.replace(/\n/g," ").trim(),n=t?`${t}: ${e}`:e;console.warn(h,n)}}},g=(...e)=>{p&&console.log(h,...e)},y=(...e)=>{p&&console.warn(h,...e)};window.fin||Object.assign(window,{fin:{}}),Object.assign(window.fin,{Integrations:{Salesforce:{enableLogging:m,disableLogging:w}}});const b="54.0",x=/vXX\.X/i,E=e=>(Array.isArray(e)?e:Object.entries(e)).reduce(((e,t)=>{const r=Array.isArray(e)?t:t[1];let n;switch(!0){case null==r:n=r;break;case"string"==typeof r:n=r.replace(x,"v54.0");break;case Array.isArray(r):case"object"==typeof r:n=E(r);break;default:n=r}return Array.isArray(e)?e.push(n):e[t[0]]=n,e}),Array.isArray(e)?[]:{}),k="salesforce-auth",S="https://login.salesforce.com/services/oauth2/success",A=(e,t,r)=>{e.accessToken&&window.localStorage.setItem(_(t,r),e.accessToken),e.refreshToken&&window.localStorage.setItem(L(t,r),e.refreshToken)},T=async(e,t,r=!1)=>{let n;try{n=new URL(e).origin}catch(e){throw new c("Invalid Salesforce URL")}if(!/salesforce.com$/i.test(n))throw new c("Invalid Salesforce URL");if(void 0===(null!=t?t:void 0)||""===t.trim())throw new c("Consumer key not provided");g(`Connecting to ${n} using key ${t}`);const o=await $(e,t);if(o)return o;g("No existing connection found, starting auth flow");const a=(await fin.Application.getCurrentSync().getChildWindows()).find((e=>e.identity.name===k));a&&await a.close(!0);const u=r?"https://test.salesforce.com":"https://login.salesforce.com",l=(new Date).getTime().toString(),f=j(),d=await O(f),p=`${u}/services/oauth2/authorize?\n    client_id=${t}&\n    redirect_uri=${S}&\n    response_type=code&\n    scope=api+refresh_token&\n    state=${l}&\n    code_challenge=${d}&\n    display=popup&\n    prompt=select_account\n    `.replace(/\s/g,""),h=await fin.Window.create({alwaysOnTop:!0,maximizable:!1,minimizable:!1,autoShow:!1,defaultCentered:!0,defaultHeight:700,defaultWidth:600,includeInSnapshots:!1,name:k,resizable:!1,saveWindowState:!1,showTaskbarIcon:!1,url:p}),w=await new Promise(((e,t)=>{let r;const n=window.setTimeout((()=>{window.clearInterval(r),window.clearTimeout(n),h.removeAllListeners(),h.close(!0);const e=new s("Authorization timed out");v(e),t(e)}),3e5);h.addListener("closing",(async()=>{g("User closed auth window"),window.clearInterval(r),window.clearTimeout(n),h.removeAllListeners();const e=new s("Failed to complete authorization");v(e),t(e)})),r=window.setInterval((()=>(async(e,t,r,n,o,i)=>{let a;try{a=await e.getInfo()}catch(e){window.clearInterval(t),window.clearTimeout(r);const n=new s("Could not locate oauth flow window");return v(n),i(n)}const c=new URL(a.url);if(0===new URL(a.url).href.toLowerCase().indexOf(S.toLowerCase())){if(window.clearInterval(t),window.clearTimeout(r),e.removeAllListeners(),e.close(!0),c.searchParams.get("state")!==n){const e=new s("State mismatch");return v(e),i(e)}const a=c.searchParams.get("code");if(!a){const e=new s("Authorization code missing");return v(e),i(e)}return g("Authorization code received"),o(a)}const u=await e.executeJavaScript("window.document.body.innerText"),l=new URLSearchParams(u).get("error_description");if(l){window.clearInterval(t),window.clearTimeout(r),e.removeAllListeners(),e.close(!0);const n=l[0].toUpperCase()+l.slice(1),o=new s(n);v(o),i(o)}else await e.isShowing()||(g("Showing auth window"),await e.show(!0),await e.focus())})(h,r,n,l,e,t)),500)})),m=await R(w,f,n,t);if(g("Checking connection with new access token"),!await D(m.accessToken,n)){const e=new i("Invalid Salesforce org URL or access token");throw v(e),e}return g("Connection established"),A(m,n,t),{consumerKey:t,disconnect:C(n,t),getAuthTokens:()=>U(n,t),orgUrl:n,executeApiRequest:P(n,t)}},C=(e,r)=>async()=>{g("Disconnecting from Salesforce");let n=window.localStorage.getItem(L(e,r));if(n)g("Revoking refresh token");else{if(n=window.localStorage.getItem(_(e,r)),!n)return void g("No tokens found in storage");g("Revoking access token")}try{await t().get(`${e}/services/oauth2/revoke?token=${n}`)}catch(e){y("Failed to revoke tokens",null==e?void 0:e.message)}B(e,r)},R=async(e,r,n,o)=>{g("Exchanging auth code for tokens");const i=`${n}/services/oauth2/token`,a=`\n    grant_type=authorization_code&\n    client_id=${o}&\n    code=${e}&\n    code_verifier=${r}&\n    redirect_uri=${S}\n    `.replace(/\s/g,"");let c;try{c=(await t().post(i,a,{headers:{"Content-Type":"application/x-www-form-urlencoded"}})).data}catch(e){const t=new s("Failed to exchange authorization code for auth tokens",e);throw v(t),t}const{access_token:u,refresh_token:l}=c;if(!u||!l)throw new s("Missing access token or refresh token during code exchange");return g("Tokens received"),{accessToken:u,refreshToken:l}},O=async e=>{const t=(new TextEncoder).encode(e),r=await window.crypto.subtle.digest("SHA-256",t);return btoa(String.fromCharCode.apply(null,Array.from(new Uint8Array(r)))).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+\$/,"")},j=()=>{const e=new Uint32Array(64);return window.crypto.getRandomValues(e),Array.from(e,(e=>`0${e.toString(16)}`.substr(-2))).join("")},_=(e,t)=>`access-token_#_${new URL(e).hostname}_#_${t}`,U=(e,t)=>({accessToken:window.localStorage.getItem(_(e,t)),refreshToken:window.localStorage.getItem(L(e,t))}),$=async(e,t)=>{let r;if(g("Checking for existing connection"),!e||!t)return null;try{r=new URL(e).origin}catch(e){return null}const{accessToken:n}=U(r,t);if(!n)return null;if(!await D(n,r))try{await I(r,t)}catch(e){return null}return g(`Connection exists to ${e}`),{consumerKey:t,disconnect:C(r,t),getAuthTokens:()=>U(r,t),orgUrl:r,executeApiRequest:P(r,t)}},P=(e,r)=>async(n,o,s,a,u)=>{const{accessToken:l}=U(e,r);if(!l){const e=new i;throw v(e),e}const d=r=>(async(e,r,n,o="GET",s={},i={},a=!0)=>{var u,l;if(!n)throw new c("API endpoint not provided");let d;if(n=(l=n).startsWith("/")?l:`/${l}`,/^\/services\/data\//i.test(n)){const e=null===(u=/\/v(\w{2}\.\w)\//.exec(n))||void 0===u?void 0:u[1];if(!e)throw new f(null,"REST API version not specified");x.test(n)?n=n.replace(e,b):e!==b&&y(`Requested REST API version (${e}) is different to the current supported version (54.0). Using an API version other than current supported version may cause errors.`),d=new RegExp("/services/data/v54.0/composite","i").test(n)?E(s):s}else d=s;g(`Executing ${o.toUpperCase()} API request to ${n}`,d,i),a&&Object.assign(i,{Authorization:`Bearer ${r}`});try{let r;switch(o.toUpperCase()){case"DELETE":r=await t().delete(`${e}${n}`,{headers:i});break;case"GET":r=await t().get(`${e}${n}`,{headers:i});break;case"HEAD":r=await t().head(`${e}${n}`,{headers:i});break;case"PATCH":r=await t().patch(`${e}${n}`,s,{headers:i});break;case"POST":r=await t().post(`${e}${n}`,d,{headers:i});break;default:throw new f(null,"Invalid HTTP method")}return{data:r.data,status:r.status}}catch(e){if(e instanceof f)throw e;throw new f(e)}})(e,r,n,o,s,a,u);let p;try{p=await d(l)}catch(t){if(!(t instanceof f))throw v(t),t;return await N(t,e,r,l,d)}return p},L=(e,t)=>`refresh-token_#_${new URL(e).hostname}_#_${t}`,N=async(e,t,r,n,o)=>{if(v(e),await q(e,t,n))try{const e=await I(t,r);return g("Retrying request"),await o(e.accessToken)}catch(e){throw v(e),e}throw e},I=async(e,r)=>{var n,o;const{refreshToken:s}=U(e,r);if(!s)throw B(e,r),new i("No refresh token available");g("Refreshing access token");const a=`${e}/services/oauth2/token`,c=`\n    grant_type=refresh_token&\n    client_id=${r}&\n    refresh_token=${s}\n    `.replace(/\s/g,"");let u;try{u=(await t().post(a,c,{headers:{"Content-Type":"application/x-www-form-urlencoded"}})).data}catch(t){const s=null===(o=null===(n=t.response)||void 0===n?void 0:n.data)||void 0===o?void 0:o.error_description,a="Failed to refresh access token";throw g(s?`${a}: ${s}`:a),B(e,r),new i(a)}const{access_token:l}=u;if(!l)throw new i("Missing access token after refreshing");const f={accessToken:l,refreshToken:s};return A(f,e,r),f},B=(e,t)=>{window.localStorage.removeItem(_(e,t)),window.localStorage.removeItem(L(e,t))},q=async(e,t,r)=>{var n;return("Network Error"===(null===(n=e.innerError)||void 0===n?void 0:n.message)||"Network Error"===e.message)&&!await D(r,t)},D=async(e,r)=>{try{await t().get(`${r}/services/oauth2/userinfo?oauth_token=${e}`)}catch(e){return!1}return!0}})();var o=n.MS,s=n.M_,i=n.hY,a=n.G4,c=n._W,u=n.o,l=n.C3,f=n.fB,d=n.if,p=n.$j,h=n.U$,w=n.U7,m=n.B5;

/***/ }),

/***/ "../../node_modules/@openfin/workspace/index.js":
/*!******************************************************!*\
  !*** ../../node_modules/@openfin/workspace/index.js ***!
  \******************************************************/
/***/ ((module) => {

(()=>{"use strict";var e={3133:(e,t,n)=>{n.r(t),n.d(t,{CLIAction:()=>ze.Pt,CLIFilterOptionType:()=>ze.el,CLITemplate:()=>ze.yW,deregister:()=>Ye,hide:()=>tt,register:()=>Qe,show:()=>et});var r={};n.r(r),n.d(r,{subscribe:()=>oe});var o={};n.r(o),n.d(o,{create:()=>Ge});var i=n(6532),s=n(7405);const a="home";var c;!function(e){e.Commands="home-commands"}(c||(c={}));var d,u=n(5806);n(7564);!function(e){e[e.Initial=0]="Initial",e[e.Open=1]="Open",e[e.Close=2]="Close"}(d||(d={}));const f="all",l="0",p="5",g="6",w=()=>{};function h(e,t){return e?`${e}-${t}`:t}function y(e){return`__search-${e}-topic__`}const v=new Map;function m(e,t){v.has(e)||v.set(e,new Set),v.get(e).add(t)}function S(e,t){const n=v.get(e);n&&n.delete(t)}const C=new Map;function P(e,t){C.has(e)||C.set(e,new Set),C.get(e).add(t)}function R(e,t){const n=C.get(e);n&&n.delete(t)}const b=new Map;async function T(e,t){b.has(e)||b.set(e,new Map),b.get(e).set(t.id,t);const n=v.get(e);if(!n)return;const r=[...n].map((e=>e()));await Promise.all(r)}async function I(e,t){const n=b.get(e);if(!n)return;n.delete(t);const r=C.get(e);if(!r)return;const o=[...r].map((e=>e()));await Promise.all(o)}function L(e){return b.get(e)?[...b.get(e).values()]:[]}function k(e){const t=b.get(e);t&&t.clear()}function M(e,t){const n=b.get(e);return n?n.get(t):null}function B(e,t,n){return{...e,action:n||e.actions[0],dispatcherIdentity:t}}function O(e,t,n="ascending"){const r=e||[];if(!t?.length)return r;const o=[],i=new Map;t.forEach((e=>{if(e.key)return i.set(e.key,e);o.push(e)}));let s=r.map((e=>{const{key:t}=e;if(t&&i.has(t)){const e=i.get(t);return i.delete(t),e}return e}));return s.push(...i.values(),...o),s="ascending"===n?s.sort(((e,t)=>(null!==e.score&&void 0!==e.score?e.score:1/0)-(null!==t.score&&void 0!==t.score?t.score:1/0))):s.sort(((e,t)=>(null!==t.score&&void 0!==t.score?t.score:1/0)-(null!==e.score&&void 0!==e.score?e.score:1/0))),s}function W(e){const t={};let n=[];let r=[];let o=d.Initial;t.getStatus=()=>o,t.getResultBuffer=()=>n,t.setResultBuffer=e=>{n=e,n?.length&&t.onChange()},t.getRevokedBuffer=()=>r,t.setRevokedBuffer=e=>{r=e,r?.length&&t.onChange()},t.onChange=w;const i={};return t.res=i,i.close=()=>{o!==d.Close&&(o=d.Close,t.onChange())},i.open=()=>{o!==d.Open&&(o=d.Open,t.onChange())},i.respond=n=>{const r=O(t.getResultBuffer(),n,e);t.setResultBuffer(r)},i.revoke=(...e)=>{const n=new Set(e),r=t.getResultBuffer().filter((({key:e})=>{const t=n.has(e);return t&&n.delete(e),!t}));t.setResultBuffer(r),n.size&&(t.getRevokedBuffer().forEach((e=>n.add(e))),t.setRevokedBuffer([...n]))},t}function D(e,t,n){const r=new Set;let o=!1;return{close:()=>{o=!0;for(const e of r)e()},req:{id:t,topic:e,...n,context:n?.context||{},onClose:e=>{r.add(e),o&&e()},removeListener:e=>{r.delete(e)}}}}function x(){return{name:fin.me.name,uuid:fin.me.uuid}}function A(){let e;try{const t=fin.Platform.getCurrentSync();if(!t?.identity)return;e=t.identity.uuid}catch(e){}return e}const E="deregistered or does not exist",F=new Error(`provider ${E}`),_=new Error("provider with name already exists"),$=new Error("bad payload"),q=new Error("subscription rejected"),G=new Error(`channel ${E}`),N=new Map;function H(e){const t=U(e);if(t)return t;throw G}function U(e){const t=N.get(e);if(t)return t}function V(e,t){N.set(e,t)}const j=new Map;function K(e){j.has(e)||j.set(e,new Map);const t=j.get(e);return{getRequestsForIdentity:e=>{const n=function(e){return`${e.uuid}:${e.name}`}(e);return t.has(n)||t.set(n,new Map),t.get(n)}}}async function X(e,t){return(await H(e)).dispatch(l,t)}function J({namespacedTopic:e,topic:t}){const n=M.bind(null,e),r=K(e),o=X.bind(null,e);return async(e,i)=>{if(!e||!e.id||!e.providerId){const e=$;return{error:e.message}}const{id:s,providerId:a}=e,c=n(a);if(!c){const e=F;return{error:e.message}}const d=r.getRequestsForIdentity(i);let u=d.get(e.id);u||(u=D(t,s,e),d.set(e.id,u));const f=W(),l=()=>{const e=f.getResultBuffer();f.setResultBuffer([]);const t=f.getRevokedBuffer();f.setRevokedBuffer([]);const n=f.getStatus();o({id:s,providerId:a,results:e,revoked:t,status:n})};let p=!0,g=!1;f.onChange=()=>{if(p)return p=!1,void l();g||(g=!0,setTimeout((()=>{g=!1,l()}),100))};try{const{results:e,context:t}=await c.onUserInput(u.req,f.res),n=f.getStatus();return{id:s,providerId:a,status:n,results:e,context:t}}catch(e){return{id:s,providerId:a,error:e.message}}}}async function Z(e,t,n){const r=n||await H(e),o=x(),i={identity:o,...t,onUserInput:void 0,onResultDispatch:void 0};await r.dispatch("2",i),await T(e,{identity:o,...t})}async function z(e,t){const n=await H(e);return await n.dispatch("3",t),I(e,t)}async function Q(e,t,n,r){const o=B(n,x(),r),i=M(e,t);if(i){const{onResultDispatch:e}=i;if(!e)return;return e(o)}const s={providerId:t,result:o};return(await H(e)).dispatch(p,s)}async function Y(e,t){const n={...t,context:t?.context||{}},r={},o=async function*(e,t,{setState:n}){const r=await H(e);for(;;){const e=await r.dispatch("1",t),o=e.error;if(o)throw new Error(o);const i=e;if(t.id=i.id,n(i.state),i.done)return i.value;yield i.value}}(e,n,{setState:e=>{r.state=e}});let i=await o.next();return r.id=n.id,r.close=()=>{!async function(e,t){(await H(e)).dispatch(g,{id:t})}(e,r.id)},r.next=()=>{if(i){const e=i;return i=void 0,e}return o.next()},r}async function ee(e){return(await H(e)).dispatch("4",null)}async function te(e){const t=await H(e);var n;n=e,N.delete(n),k(e),await t.disconnect()}function ne(e){const{namespacedTopic:t}=e,n=K(t);return async r=>{if(!U(t))return;const o=n.getRequestsForIdentity(r);for(const{req:e,close:t}of o.values())t(),o.delete(e.id);V(t,(async e=>{const{namespacedTopic:t}=e,n=await re(e);for(const e of L(t))await Z(t,e,n);return n})(e))}}async function re(e){const{namespacedTopic:t}=e,n=y(t),r=await async function(e){for(let t=0;t<50;t++)try{return await fin.InterApplicationBus.Channel.connect(e,{wait:!1})}catch(e){if(49===t)throw e;await new Promise((e=>setTimeout(e,1e3)))}}(n);return r.register(l,J(e)),r.register(g,function(e){const t=K(e);return(e,n)=>{const r=t.getRequestsForIdentity(n),o=r.get(e.id);o&&(o.close(),r.delete(e.id))}}(t)),r.register(p,function(e){return async(t,n)=>{if(!t||!t.providerId||!t.result)return;const r=M(e,t.providerId);if(!r)return;const{onResultDispatch:o}=r;return o?(t.result.dispatcherIdentity=n,o(t.result)):void 0}}(t)),r.onDisconnection(ne(e)),r}async function oe(e){const t=("string"==typeof e?e:e?.topic)||f,n=("string"==typeof e?null:e?.uuid)||A(),r=h(n,t),o={topic:t,namespace:n,namespacedTopic:r};let i=U(r);return i||(i=re(o),V(r,i),await i),{getAllProviders:ee.bind(null,r),register:Z.bind(null,r),search:Y.bind(null,r),deregister:z.bind(null,r),dispatch:Q.bind(null,r),disconnect:te.bind(null,r)}}const ie=new Map;function se(e){const t=ae(e);if(t)return t;throw G}function ae(e){const t=ie.get(e);if(t)return t}const ce=new Map;function de(e,t){ce.has(e)||ce.set(e,new Set),ce.get(e).add(t)}function ue(e,t){const n=ce.get(e);n&&n.delete(t)}var fe=n(5316);function le(e){return[...L(e)].map((e=>({...e,onUserInput:void 0,onResultDispatch:void 0})))}async function pe(e,t){if(M(e,t.id))throw new Error("provider with name already exists");const n=x();await T(e,{identity:n,...t})}function ge(e,t){I(e,t)}async function we(e,t,n,r){const o=M(e,t);if(!o)throw F;const{onResultDispatch:i}=o;if(!i)return;return i(B(n,x(),r))}async function*he(e,t,n){const r=function(e,t){const n=[],r=[],o=[],i=[];for(const s of e){const e=W(s.scoreOrder),a={results:[],provider:{id:s.id,identity:s.identity,title:s.title,scoreOrder:s.scoreOrder,icon:s.icon}};n.push(a),r.push(e);const c=(async()=>{try{const{results:n,context:r}=await s.onUserInput(t,e.res);a.results=O(a.results,n),a.context={...a.context,...r}}catch(e){a.error=e}c.done=!0})();i.push(c),o.push(o.length)}return{providerResponses:n,listenerResponses:r,openListenerResponses:o,initialResponsePromises:i}}(t.targets?t.targets.map((t=>M(e,t))).filter((e=>!!e)):[...L(e).filter((e=>!e.hidden))],t),{providerResponses:o,listenerResponses:i}=r;let{openListenerResponses:s,initialResponsePromises:a}=r,c=fe.D.Fetching;const u=e=>{c=e,n.setState(c)};let f,l=!1;t.onClose((()=>{l=!0,f&&f()}));do{let e=!1;if(a.length){const t=[];for(const n of a)n.done?e=!0:t.push(n);a=t,a.length||(u(fe.D.Fetched),e=!0)}let t,n=!1;const r=()=>{n=!0,t&&t()},p=[];for(const t of s){const n=i[t],s=o[t],a=n.getStatus();(a===d.Open||c===fe.D.Fetching&&a===d.Initial)&&(p.push(t),n.onChange=r);const u=n.getResultBuffer();u.length&&(n.setResultBuffer([]),s.results=O(s.results,u),e=!0);const f=n.getRevokedBuffer();if(f.length){n.setRevokedBuffer([]);const t=new Set(f);s.results=s.results.filter((({key:e})=>!t.has(e))),e=!0}}if(s=p,e&&(yield o),l)break;n||(s.length||a.length)&&await Promise.race([...a,new Promise((e=>{t=e})),new Promise((e=>{f=e}))])}while(s.length||a.length);return u(fe.D.Complete),o}let ye=0;function ve({namespacedTopic:e,topic:t},n){ye+=1;const r=D(t,ye.toString(),n),o=he(e,r.req,{setState:e=>{o.state=e}});return o.id=ye.toString(),o.close=r.close,o.state=fe.D.Fetching,o}const me=new Map;function Se(e,t){return`${e}:${t}`}function Ce(e){return async(t,...n)=>{if(!t)return{error:$.message};let r;if(t.id)r=Se(e.namespacedTopic,t.id);else{const n=ve(e,t);r=Se(e.namespacedTopic,n.id),t.id=n.id,me.set(r,{generator:n})}const o=me.get(r);clearTimeout(o.timeout);const i=await o.generator.next();return o.timeout=function(e){return window.setTimeout((()=>{me.delete(e)}),1e4)}(r),{...i,id:t.id,state:o.generator.state}}}function Pe(e,t,n){return se(e).dispatch(t,g,{id:n})}function Re(e){return t=>function(e,t){const n=Se(e,t),r=me.get(n);r&&r.generator.close()}(e,t.id)}async function be(e,t,{id:n,query:r,context:o,targets:i}){const s=se(e),a={id:n,query:r,context:o,targets:i,providerId:t.id},c=await s.dispatch(t.identity,l,a),d=c.error;if(d)throw new Error(d);return c}const Te=new Map;function Ie(e,t,n){return`${e}:${t.name}:${t.uuid}:${n}`}const Le=new Map;function ke(e,t,n){return`${e}:${t}:${n}`}function Me(e,t){const n=Ie.bind(null,e,t.identity),r=Pe.bind(null,e,t.identity),o=be.bind(null,e,t);return async(i,s)=>{const a=n(i.id);if(!Te.has(a)){const e=()=>{r(i.id),Te.delete(a)};Te.set(a,e),i.onClose(e)}const c=ke(e,t.id,i.id),u=()=>{Le.delete(c),s.close()};i.onClose(u),Le.set(c,(e=>{e.results?.length&&s.respond(e.results),e.revoked?.length&&s.revoke(...e.revoked),e.status===d.Open&&s.open(),e.status===d.Close&&u()}));const f=await o(i);return f.status===d.Open&&s.open(),f.status!==d.Close&&f.status!==d.Initial||u(),f}}function Be(e,t){return async n=>{const r=se(e),o={providerId:t.id,result:n};return r.dispatch(t.identity,p,o)}}const Oe=new Map;function We(e,t){return`${e}-${t.name}-${t.uuid}`}function De(e){return async(t,n)=>{if(!t||!t.id)return void new Error(JSON.stringify(t));if(M(e,t.id))throw _;t.identity=n,await async function(e,t){const n=We(e,t.identity);Oe.has(n)||Oe.set(n,[]),Oe.get(n).push(t.id),await T(e,{...t,onUserInput:Me(e,t),onResultDispatch:Be(e,t)})}(e,t)}}function xe(e){return t=>{t&&function(e,t){const n=M(e,t);if(!n)return;const r=We(e,n.identity),o=Oe.get(r);if(o){const n=o.findIndex((e=>e===t));-1!==n&&(o.splice(n,1),I(e,t))}}(e,t)}}const Ae=new Map;function Ee(e,t){Ae.has(e)||Ae.set(e,new Set),Ae.get(e).add(t)}function Fe(e,t){const n=Ae.get(e);n&&n.delete(t)}function _e(e){return async t=>{!function(e,t){const n=We(e,t),r=Oe.get(n);if(r){for(const t of r)I(e,t);Oe.delete(n)}}(e,t);const n=Ae.get(e);n&&n.forEach((e=>e(t)))}}async function $e(e){const{namespacedTopic:t}=e,n=y(e.namespacedTopic),r=await(o=n,fin.InterApplicationBus.Channel.create(o));var o;return r.onConnection(function({namespacedTopic:e}){return async t=>{const n=ce.get(e);if(n)for(const e of n)if(!await e(t))throw q}}(e)),r.onDisconnection(_e(t)),r.register(g,Re(t)),r.register(l,function(e){return t=>{const n=ke(e,t.providerId,t.id),r=Le.get(n);r&&r(t)}}(t)),r.register("2",De(t)),r.register("3",xe(t)),r.register("4",function(e){return async()=>le(e)}(t)),r.register("1",Ce(e)),r.register(p,function(e){return async(t,n)=>{if(!t||!t.providerId||!t.result)return;const r=M(e,t.providerId);if(!r)throw F;const{onResultDispatch:o}=r;return o?(t.result.dispatcherIdentity=n,o(t.result)):void 0}}(t)),r}async function qe(e){const t=se(e);var n;n=e,ie.delete(n),await t.destroy(),k(e)}async function Ge(e){const t=("string"==typeof e?e:e?.topic)||f,n=A(),r=h(n,t),o={topic:t,namespace:n,namespacedTopic:r};let i=ae(r);i||(i=await $e(o),function(e,t){ie.set(e,t)}(r,i));const s=ue.bind(null,r),a=Fe.bind(null,r),c=S.bind(null,r),d=R.bind(null,r);return{getAllProviders:le.bind(null,r),search:ve.bind(null,o),register:pe.bind(null,r),deregister:ge.bind(null,r),onSubscription:de.bind(null,r),onDisconnect:Ee.bind(null,r),onRegister:m.bind(null,r),onDeregister:P.bind(null,r),dispatch:we.bind(null,o),disconnect:qe.bind(null,r),removeListener:e=>{s(e),a(e),c(e),d(e)}}}const{create:Ne}=o,{subscribe:He}=r,Ue={create:Ne,subscribe:He,defaultTopic:"all"},Ve=()=>{const e=window;e.search=Ue,e.fin&&(e.fin.Search=Ue)},je=e=>{const t=()=>{Ve(),window.removeEventListener(e,t)};return t};if("undefined"!=typeof window){Ve();const e="load",t=je(e);window.addEventListener(e,t);const n="DOMContentLoaded",r=je(n);window.addEventListener(n,r)}const Ke=new Map;async function Xe(){await async function(e){Ke.set(e,await He({topic:e,uuid:u.q9.Workspace}))}(a)}let Je;async function Ze(e){return await async function(){return Je||(Je=Xe()),Je}(),Ke.get(e)}var ze=n(3758);const Qe=async e=>{if(!e.icon)throw new Error(`${e.id} provider needs to have icon property defined.`);await(0,s.aB)();const t=await Ze(a);try{const n=await t.register(e);return(0,i.ck)({allowed:!0}),n}catch(e){throw(0,i.ck)({allowed:!1,rejectionCode:e.message}),e}},Ye=async e=>{await(0,s.aB)();return(await Ze(a)).deregister(e)};async function et(){return(await(0,s.Xl)()).dispatch(s.Ml.ShowHome,void 0)}async function tt(){return(await(0,s.Xl)()).dispatch(s.Ml.HideHome,void 0)}},3298:(e,t,n)=>{n.d(t,{w:()=>r.w});var r=n(5316)},3758:(e,t,n)=>{var r,o,i;n.d(t,{Pt:()=>r,yW:()=>o,el:()=>i}),function(e){e.Suggestion="suggestion"}(r||(r={})),function(e){e.Contact="Contact",e.Custom="Custom",e.List="List",e.Plain="Plain",e.SimpleText="SimpleText"}(o||(o={})),function(e){e.MultiSelect="MultiSelect"}(i||(i={}))},7564:(e,t,n)=>{n(3298),n(3758),n(6114),n(2109)},6114:(e,t,n)=>{var r,o;n.d(t,{L:()=>r,T:()=>o}),function(e){e.Snapshot="snapshot",e.Manifest="manifest",e.View="view",e.External="external"}(r||(r={})),function(e){e.LandingPage="landingPage",e.AppGrid="appGrid"}(o||(o={}))},2109:(e,t,n)=>{n.d(t,{p6:()=>r,Go:()=>o,bI:()=>i,ZJ:()=>s});const r={Container:"Container",Button:"Button"},o={Text:"Text",Image:"Image",List:"List"},i={...r,...o};var s;!function(e){e.Primary="primary",e.Secondary="secondary",e.TextOnly="textOnly"}(s||(s={}))},317:(e,t,n)=>{n.r(t),n.d(t,{AppManifestType:()=>i.L,StorefrontTemplate:()=>i.T,deregister:()=>f,hide:()=>l,register:()=>u,show:()=>p});var r=n(6532),o=n(7405);n(7564);var i=n(6114);let s;const a=new Map,c=e=>{if(!a.has(e))throw new Error(`Storefront Provider with id ${e} is not registered`);return a.get(e)},d=async e=>{const t=await(0,o.Xl)();if(a.has(e.id))throw new Error(`Storefront provider with id ${e.id} already registered`);return a.set(e.id,e),(e=>{e.isStorefrontActionsRegistered||(e.isStorefrontActionsRegistered=!0,e.register(o.Ml.GetStorefrontProviderApps,(e=>c(e).getApps())),e.register(o.Ml.GetStorefrontProviderFooter,(e=>c(e).getFooter())),e.register(o.Ml.GetStorefrontProviderLandingPage,(e=>c(e).getLandingPage())),e.register(o.Ml.GetStorefrontProviderNavigation,(e=>c(e).getNavigation())),e.register(o.Ml.LaunchStorefrontProviderApp,(({id:e,app:t})=>c(e).launchApp(t))))})(t),t.dispatch(o.Ml.RegisterStorefrontProvider,e)},u=e=>(s=d(e),(0,r.d9)({allowed:!0}),s),f=async e=>{await s,a.delete(e);return(await(0,o.Xl)()).dispatch(o.Ml.DeregisterStorefrontProvider,e)},l=async()=>{await s,await(0,o.aB)(),await(async()=>(await(0,o.Dm)()).dispatch(o.Ml.HideStorefront,void 0))()},p=async()=>{await s,await(0,o.aB)(),await(async()=>(await(0,o.Dm)()).dispatch(o.Ml.ShowStorefront,null))()}},7405:(e,t,n)=>{n.d(t,{Ml:()=>s,Dm:()=>a,Xl:()=>f,aB:()=>u});var r=n(6678);const o=r.Ax&&"complete"!==document.readyState&&new Promise((e=>document.addEventListener("readystatechange",(()=>{"complete"===document.readyState&&e()}))));var i=n(121);var s;!function(e){e.RegisterStorefrontProvider="register-storefront-provider",e.DeregisterStorefrontProvider="deregister-storefront-provider",e.GetStorefrontProviders="get-storefront-providers",e.HideStorefront="hide-storefront",e.GetStorefrontProviderApps="get-storefront-provider-apps",e.GetStorefrontProviderLandingPage="get-storefront-provider-landing-page",e.GetStorefrontProviderFooter="get-storefront-provider-footer",e.GetStorefrontProviderNavigation="get-storefront-provider-navigation",e.LaunchStorefrontProviderApp="launch-storefront-provider-app",e.ShowStorefront="show-storefront",e.CreateStorefrontWindow="create-storefront-window",e.ShowHome="show-home",e.HideHome="hide-home",e.AssignHomeSearchContext="assign-home-search-context",e.GetLegacyPages="get-legacy-pages",e.GetLegacyWorkspaces="get-legacy-workspaces",e.GetComputedPlatformTheme="get-computed-platform-theme"}(s||(s={}));const a=function(e){let t;return()=>{if(!r.sS)throw new Error("getChannelClient cannot be used outside an OpenFin env. Avoid using this method during pre-rendering.");return t||(t=(async()=>{await o;const n=await fin.InterApplicationBus.Channel.connect(e);return n.onDisconnection((async()=>{t=void 0})),n})().then((e=>e)).catch((n=>{throw t=void 0,new Error(`failed to connect to channel provider ${e}: ${n}`)}))),t}}("__of_workspace_protocol__"),c="isLaunchedViaLib",d=e=>{const t=new URL(e);return t.searchParams.append(c,"true"),t.toString()},u=async()=>{if(!await(0,i.JV)(i.iW))return(r.ZK||-1===navigator.userAgent.indexOf("Win"))&&await fin.Application.startFromManifest(d(r.aW)),fin.System.openUrlWithBrowser(d(r.GX))},f=async()=>(await u(),a())},5806:(e,t,n)=>{n.d(t,{q9:()=>r});var r,o,i,s=n(6678);!function(e){e.Workspace="openfin-browser"}(r||(r={})),function(e){e.RunRequested="run-requested",e.WindowOptionsChanged="window-options-changed",e.WindowClosed="window-closed",e.WindowCreated="window-created"}(o||(o={})),function(e){e.FinProtocol="fin-protocol"}(i||(i={}));s.AB,s.AB,r.Workspace,r.Workspace},6678:(e,t,n)=>{var r;n.d(t,{sS:()=>o,Ax:()=>i,AB:()=>a,oC:()=>c,ZK:()=>d,GX:()=>u,aW:()=>f,u0:()=>p}),function(e){e.Local="local",e.Dev="dev",e.Staging="staging",e.Prod="prod"}(r||(r={}));const o="undefined"!=typeof window&&"undefined"!=typeof fin,i=("undefined"==typeof process||process.env?.JEST_WORKER_ID,"undefined"!=typeof window),s=i?window.origin:r.Local,a=o&&fin.me.uuid,c=o&&fin.me.name,d=(o&&fin.me.entityType,"prod"===r.Local),u=(r.Dev,r.Staging,r.Prod,"fins://system-apps/workspace"),f="https://cdn.openfin.co/workspace/7.3.10/app.json",l=e=>e.startsWith("http://")||e.startsWith("https://")?e:s+e,p=(l("https://cdn.openfin.co/workspace/7.3.10"),l("https://cdn.openfin.co/workspace/7.3.10"),"undefined"!=typeof WORKSPACE_DOCS_PLATFORM_URL&&l(WORKSPACE_DOCS_PLATFORM_URL),"undefined"!=typeof WORKSPACE_DOCS_CLIENT_URL&&l(WORKSPACE_DOCS_CLIENT_URL),"7.3.10")},6532:(e,t,n)=>{n.d(t,{ck:()=>a,d9:()=>c});var r,o=n(6678),i=n(121);!function(e){e.Browser="Browser",e.Home="Home",e.Notification="Notification",e.Storefront="Storefront",e.Platform="Platform",e.Theming="Theming"}(r||(r={}));const s=async(e,t)=>{const n={apiVersion:t.apiVersion||o.u0,componentName:e,componentVersion:o.u0,...t};fin.System.registerUsage({type:"workspace-licensing",data:n})},a=async e=>{i.OI.uuid===i.Gi.uuid&&i.OI.name===i.Gi.name||s(r.Home,e)},c=async e=>{s(r.Storefront,e)}},121:(e,t,n)=>{n.d(t,{Gi:()=>c,OI:()=>d,iW:()=>u,JV:()=>f});var r,o,i=n(5806),s=n(6678);!function(e){e.Home="openfin-home",e.Dock="openfin-dock",e.Storefront="openfin-storefront",e.HomeInternal="openfin-home-internal",e.BrowserMenu="openfin-browser-menu",e.BrowserIndicator="openfin-browser-indicator",e.BrowserWindow="internal-generated-window"}(r||(r={})),function(e){e.Shown="shown",e.BoundsChanged="bounds-changed",e.LayoutReady="layout-ready",e.EndUserBoundsChanging="end-user-bounds-changing",e.Blurred="blurred",e.CloseRequested="close-requested",e.Focused="focused",e.ShowRequested="show-requested",e.ViewCrashed="view-crashed",e.ViewAttached="view-attached",e.ViewDetached="view-detached",e.ViewPageTitleUpdated="view-page-title-updated",e.ViewDestroyed="view-destroyed",e.OptionsChanged="options-changed"}(o||(o={}));function a(e){if(!s.sS)throw new Error("getOFWindow can only be used in an OpenFin env. Avoid calling this method during pre-rendering.");return fin.Window.wrapSync(e)}const c={name:s.oC,uuid:s.AB};const d={name:r.Home,uuid:i.q9.Workspace},u=(r.Dock,i.q9.Workspace,r.Storefront,i.q9.Workspace,{name:i.q9.Workspace,uuid:i.q9.Workspace});const f=e=>a(e).getOptions().then((()=>!0)).catch((()=>!1))},5316:(e,t,n)=>{var r,o;n.d(t,{D:()=>r,w:()=>o}),function(e){e.Fetching="fetching",e.Fetched="fetched",e.Complete="complete"}(r||(r={})),function(e){e.Active="active",e.Default="default"}(o||(o={}))}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{n.r(r),n.d(r,{AppManifestType:()=>p.L,ButtonStyle:()=>f.ZJ,CLIAction:()=>l.Pt,CLIFilterOptionType:()=>l.el,CLITemplate:()=>l.yW,ContainerTemplateFragmentNames:()=>f.p6,Home:()=>o,Legacy:()=>e,PresentationTemplateFragmentNames:()=>f.Go,SearchTagBackground:()=>u.w,Storefront:()=>d,StorefrontTemplate:()=>p.T,TemplateFragmentTypes:()=>f.bI});var e={};n.r(e),n.d(e,{getPages:()=>a,getWorkspaces:()=>c});var t,o=n(3133);n(6678),n(121);!function(e){e.TabCreated="tab-created",e.ContainerCreated="container-created",e.ContainerResized="container-resized"}(t||(t={}));new Map;var i;!function(e){e.CurrentWorkspaceId="currentWorkspaceId",e.LastFocusedBrowserWindow="lastFocusedBrowserWindow",e.MachineName="machineName",e.NewTabPageLayout="NewTabPageLayout",e.NewTabPageSort="NewTabPageSort"}(i||(i={}));var s=n(7405);const a=()=>async function(){return(await(0,s.Dm)()).dispatch(s.Ml.GetLegacyPages,void 0)}(),c=()=>(async()=>(await(0,s.Dm)()).dispatch(s.Ml.GetLegacyWorkspaces,void 0))();var d=n(317),u=n(3298),f=n(2109),l=n(3758),p=n(6114)})(),module.exports=r})();
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./client/src/integrations/salesforce/integration-provider.ts":
/*!********************************************************************!*\
  !*** ./client/src/integrations/salesforce/integration-provider.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SalesForceIntegrationProvider": () => (/* binding */ SalesForceIntegrationProvider)
/* harmony export */ });
/* harmony import */ var _openfin_salesforce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openfin/salesforce */ "../../node_modules/@openfin/salesforce/openfin.salesforce.js");
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @openfin/workspace */ "../../node_modules/@openfin/workspace/index.js");
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_openfin_workspace__WEBPACK_IMPORTED_MODULE_1__);


/**
 * Implement the integration provider for SalesForce.
 */
class SalesForceIntegrationProvider {
    /**
     * The module is being registered.
     * @param integrationManager The manager for the integration.
     * @param integration The integration details.
     * @returns Nothing.
     */
    async register(integrationManager, integration) {
        this._integrationManager = integrationManager;
        console.log("Registering SalesForce");
        try {
            await this.openConnection(integration);
        }
        catch (err) {
            console.error("Error connecting to SalesForce", err);
        }
    }
    /**
     * The module is being deregistered.
     * @param integration The integration details.
     * @returns Nothing.
     */
    async deregister(integration) {
        await this.closeConnection();
    }
    /**
     * Get a list of the static application entries.
     * @param integration The integration details.
     * @returns The list of application entries.
     */
    async getAppSearchEntries(integration) {
        const results = [];
        if (integration?.data?.orgUrl) {
            results.push({
                actions: [{ name: "Browse", hotkey: "enter" }],
                data: {
                    providerId: SalesForceIntegrationProvider._PROVIDER_ID,
                    pageUrl: integration?.data?.orgUrl,
                    tags: [SalesForceIntegrationProvider._PROVIDER_ID]
                },
                icon: integration.icon,
                key: SalesForceIntegrationProvider._BROWSE_SEARCH_RESULT_KEY,
                template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Plain,
                templateContent: undefined,
                title: "Browse Salesforce"
            });
            if (!this._salesForceConnection) {
                results.push(this.getReconnectSearchResult(integration));
            }
        }
        return results;
    }
    /**
     * An entry has been selected.
     * @param integration The integration details.
     * @param result The dispatched result.
     * @param lastResponse The last response.
     * @returns True if the item was handled.
     */
    async itemSelection(integration, result, lastResponse) {
        // if the user clicked the reconnect result, reconnect to salesforce and re-run query
        if (result.key === SalesForceIntegrationProvider._NOT_CONNECTED_SEARCH_RESULT_KEY) {
            await this.openConnection(integration);
            if (result.data?.query) {
                const results = await this.getSearchResults(integration, result.data?.query, result.data?.filters, lastResponse);
                if (lastResponse) {
                    lastResponse.revoke(SalesForceIntegrationProvider._NOT_CONNECTED_SEARCH_RESULT_KEY);
                    lastResponse.respond(results.results);
                }
            }
            return true;
        }
        // otherwise open the result page url in browser
        const data = result.data;
        if (data !== undefined && this._integrationManager && this._integrationManager.rootUrl && this._integrationManager.launchView) {
            const preload = `${this._integrationManager.rootUrl}/views/salesforce/preload.js`;
            const viewOptions = {
                url: data.pageUrl,
                fdc3InteropApi: "1.2",
                interop: {
                    currentContextGroup: "green"
                },
                customData: { buttonLabel: "Process Participant" },
                preloadScripts: [{ url: preload }],
                target: { name: "", url: "", uuid: "" }
            };
            await this._integrationManager.launchView(viewOptions);
            return true;
        }
        return false;
    }
    /**
     * Get a list of search results based on the query and filters.
     * @param integration The integration details.
     * @param query The query to search for.
     * @param filters The filters to apply.
     * @param lastResponse The last search response used for updating existing results.
     * @returns The list of results and new filters.
     */
    async getSearchResults(integration, query, filters, lastResponse) {
        if (this._salesForceConnection) {
            let searchResults;
            let selectedObjects = [];
            if (Array.isArray(filters) && filters.length > 0) {
                const objectsFilter = filters.find(x => x.id === SalesForceIntegrationProvider._OBJECTS_FILTER_ID);
                if (objectsFilter) {
                    selectedObjects = (Array.isArray(objectsFilter.options) ? objectsFilter.options : [objectsFilter.options])
                        .filter(x => Boolean(x.isSelected))
                        .map(x => (x.value === "Note" ? "ContentNote" : x.value));
                }
            }
            try {
                searchResults = await this.getApiSearchResults(query, selectedObjects);
                const results = searchResults.map(searchResult => {
                    if ("Website" in searchResult) {
                        return {
                            actions: [{ name: "View", hotkey: "enter" }],
                            label: searchResult.attributes.type,
                            key: searchResult.Id,
                            title: searchResult.Name,
                            icon: integration?.data?.iconMap.account,
                            data: {
                                providerId: SalesForceIntegrationProvider._PROVIDER_ID,
                                pageUrl: this.getObjectUrl(searchResult.Id, integration.data?.orgUrl),
                                tags: [SalesForceIntegrationProvider._PROVIDER_ID]
                            },
                            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Contact,
                            templateContent: {
                                name: searchResult.Name,
                                title: searchResult.Industry,
                                details: [
                                    [
                                        ["Phone", searchResult.Phone],
                                        ["Type", searchResult.Type],
                                        ["Website", searchResult.Website]
                                    ]
                                ]
                            }
                        };
                    }
                    else if ("Email" in searchResult) {
                        return {
                            actions: [{ name: "View", hotkey: "enter" }],
                            label: searchResult.attributes.type,
                            key: searchResult.Id,
                            title: searchResult.Name,
                            icon: integration?.data?.iconMap.contact,
                            data: {
                                providerId: SalesForceIntegrationProvider._PROVIDER_ID,
                                pageUrl: this.getObjectUrl(searchResult.Id, integration.data?.orgUrl),
                                tags: [SalesForceIntegrationProvider._PROVIDER_ID]
                            },
                            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Contact,
                            templateContent: {
                                name: searchResult.Name,
                                title: searchResult.Title,
                                useInitials: true,
                                details: [
                                    [
                                        ["Department", searchResult.Department],
                                        ["Email", searchResult.Email],
                                        ["Work #", searchResult.Phone]
                                    ]
                                ]
                            }
                        };
                    }
                    else if ("Description" in searchResult) {
                        return {
                            actions: [{ name: "View", hotkey: "enter" }],
                            label: searchResult.attributes.type,
                            key: searchResult.Id,
                            title: searchResult.Subject,
                            icon: integration?.data?.iconMap.task,
                            data: {
                                providerId: SalesForceIntegrationProvider._PROVIDER_ID,
                                pageUrl: this.getObjectUrl(searchResult.Id, integration.data?.orgUrl),
                                tags: [SalesForceIntegrationProvider._PROVIDER_ID]
                            },
                            template: "List",
                            templateContent: [
                                ["Subject", searchResult.Subject],
                                ["Comments", searchResult.Description]
                            ]
                        };
                    }
                    else if ("TextPreview" in searchResult) {
                        return {
                            actions: [{ name: "View", hotkey: "enter" }],
                            label: "Note",
                            key: searchResult.Id,
                            title: searchResult.Title,
                            icon: integration?.data?.iconMap.note,
                            data: {
                                providerId: SalesForceIntegrationProvider._PROVIDER_ID,
                                pageUrl: this.getObjectUrl(searchResult.Id, integration.data?.orgUrl),
                                tags: [SalesForceIntegrationProvider._PROVIDER_ID]
                            },
                            template: "List",
                            templateContent: [
                                ["Title", searchResult.Title],
                                ["Content", searchResult?.TextPreview]
                            ]
                        };
                    }
                    else if ("actor" in searchResult &&
                        (searchResult.type === "TextPost" || searchResult.type === "ContentPost")) {
                        return {
                            actions: [{ name: "View", hotkey: "enter" }],
                            label: "Chatter",
                            key: searchResult.id,
                            title: searchResult.actor?.displayName,
                            icon: integration?.data?.iconMap.chatter,
                            data: {
                                providerId: SalesForceIntegrationProvider._PROVIDER_ID,
                                pageUrl: this.getObjectUrl(searchResult.id, integration.data?.orgUrl),
                                tags: [SalesForceIntegrationProvider._PROVIDER_ID]
                            },
                            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Contact,
                            templateContent: {
                                name: searchResult.actor?.displayName,
                                useInitials: true,
                                details: [
                                    [
                                        ["Header", searchResult?.header?.text],
                                        ["Note", searchResult?.body?.text]
                                    ]
                                ]
                            }
                        };
                    }
                    // in this case we are only searching for accounts, contacts, tasks, content notes and chatter
                });
                const filteredResults = results.filter(Boolean);
                // eslint-disable-next-line no-confusing-arrow
                const objects = searchResults.map(result => "attributes" in result ? result.attributes.type : "Chatter");
                return {
                    results: filteredResults,
                    context: {
                        filters: this.getSearchFilters(objects.map(c => (c === "ContentNote" ? "Note" : c)))
                    }
                };
            }
            catch (err) {
                await this.closeConnection();
                if (err instanceof _openfin_salesforce__WEBPACK_IMPORTED_MODULE_0__.ConnectionError) {
                    return {
                        results: [this.getReconnectSearchResult(integration, query, filters)]
                    };
                }
                console.error("Error retrieving SalesForce search results", err);
            }
        }
        return {
            results: []
        };
    }
    /**
     * Open the connection to SaleForce.
     * @param integration The integration details.
     * @internal
     */
    async openConnection(integration) {
        if (integration?.data?.orgUrl && !this._salesForceConnection) {
            (0,_openfin_salesforce__WEBPACK_IMPORTED_MODULE_0__.enableLogging)();
            this._salesForceConnection = await (0,_openfin_salesforce__WEBPACK_IMPORTED_MODULE_0__.connect)(integration?.data.orgUrl, integration?.data.consumerKey, integration?.data.isSandbox);
        }
    }
    /**
     * Close the connection to SalesForce.
     * @internal
     */
    async closeConnection() {
        if (this._salesForceConnection) {
            try {
                await this._salesForceConnection.disconnect();
            }
            catch (err) {
                console.error("Error disconnecting SalesForce", err);
            }
            finally {
                this._salesForceConnection = undefined;
            }
        }
    }
    /**
     * Create the object url from the if and origin.
     * @param objectId The object id.
     * @param salesforceOrgOrigin The origin url.
     * @returns Then object url.
     * @internal
     */
    getObjectUrl(objectId, salesforceOrgOrigin) {
        if (!salesforceOrgOrigin) {
            return "";
        }
        return `${salesforceOrgOrigin}/${objectId}`;
    }
    /**
     * Get results from the API using a query.
     * @param query The query to call the API with.
     * @param selectedObjects The selected filters.
     * @returns The search result objects from the API.
     * @internal
     */
    async getApiSearchResults(query, selectedObjects) {
        const accountFieldSpec = "Account(Id, Industry, Name, Phone, Type, Website)";
        const contactFieldSpec = "Contact(Department, Email, Id, Name, Phone, Title)";
        const taskFieldSpec = "Task(Id, Subject, Description)";
        const contentNoteFieldSpec = "ContentNote(Id, Title, Content, TextPreview)";
        const fieldSpecMap = new Map([
            ["Account", accountFieldSpec],
            ["Contact", contactFieldSpec],
            ["Task", taskFieldSpec],
            ["ContentNote", contentNoteFieldSpec]
        ]);
        const fieldSpec = [...fieldSpecMap]
            .filter(x => {
            if (Array.isArray(selectedObjects) && selectedObjects.length > 0) {
                return selectedObjects.includes(x[0]);
            }
            return true;
        })
            .map(x => x[1])
            .join(", ");
        const batch = [];
        if (fieldSpec.length > 0) {
            const salesforceSearchQuery = `FIND {${this.escapeQuery(query)}} IN ALL FIELDS RETURNING ${fieldSpec} LIMIT 25`;
            batch.push({
                method: "GET",
                url: `/services/data/vXX.X/search?q=${encodeURIComponent(salesforceSearchQuery)}`
            });
        }
        const includeChatter = !selectedObjects?.length || selectedObjects.includes("Chatter");
        if (includeChatter) {
            batch.push({
                method: "GET",
                url: `/services/data/vXX.X/chatter/feed-elements?q=${query}&pageSize=25&sort=LastModifiedDateDesc`
            });
        }
        const batchedResults = await this.getBatchedResults(batch);
        let results = [];
        if (batchedResults.length > 0) {
            let idx = 0;
            if (fieldSpec.length > 0) {
                const searchResponse = batchedResults[idx++];
                if (searchResponse.searchRecords) {
                    results = results.concat(searchResponse.searchRecords);
                }
            }
            if (includeChatter) {
                const chatterResponse = batchedResults[idx++];
                if (chatterResponse.elements) {
                    results = results.concat(chatterResponse.elements);
                }
            }
        }
        return results;
    }
    /**
     * Get batched results from SalesForce api.
     * @param batchRequests The batch requests to send.
     * @returns The results from the batch request.
     * @internal
     */
    async getBatchedResults(batchRequests) {
        if (batchRequests.length === 0 || !this._salesForceConnection) {
            return [];
        }
        const batch = { batchRequests, haltOnError: false };
        const response = await this._salesForceConnection.executeApiRequest("/services/data/vXX.X/composite/batch/", "POST", batch, { "Content-Type": "application/json" });
        return response.data?.results.map(r => r.result) ?? [];
    }
    /**
     * Escape any characters needed in SalesForce API calls.
     * @param query The query to escape.
     * @returns The escaped query.
     * @internal
     */
    escapeQuery(query) {
        // There are some reserved characters for queries so we need to escape them
        // https://developer.salesforce.com/docs/atlas.en-us.soql_sosl.meta/soql_sosl/sforce_api_calls_sosl_find.htm
        return query.replace(/[!"&'()*+:?[\\\]^{|}~-]/gm, "\\$&");
    }
    /**
     * Get the search result to display when SalesForce needs to reconnect.
     * @param integration The integration details.
     * @param query The query that needs to reconnect.
     * @param filters The filter for the reconnect.
     * @returns The search result entry.
     * @internal
     */
    getReconnectSearchResult(integration, query, filters) {
        return {
            actions: [{ name: "Reconnect", hotkey: "enter" }],
            key: SalesForceIntegrationProvider._NOT_CONNECTED_SEARCH_RESULT_KEY,
            icon: integration?.icon,
            title: "Reconnect to Salesforce",
            data: {
                providerId: SalesForceIntegrationProvider._PROVIDER_ID,
                query,
                filters
            }
        };
    }
    /**
     * Get the search filters based on the results.
     * @param objects The object types to create the filters from.
     * @returns The filters.
     * @internal
     */
    getSearchFilters(objects) {
        if (Array.isArray(objects) && objects.length > 0) {
            const filters = [];
            const uniqueObjects = [...new Set(objects.sort())];
            const objectFilter = {
                id: SalesForceIntegrationProvider._OBJECTS_FILTER_ID,
                title: "Objects",
                type: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLIFilterOptionType.MultiSelect,
                options: []
            };
            for (const object of uniqueObjects) {
                if (Array.isArray(objectFilter.options)) {
                    objectFilter.options.push({
                        value: object,
                        isSelected: false
                    });
                }
            }
            filters.push(objectFilter);
            return filters;
        }
        return [];
    }
}
/**
 * Provider id.
 * @internal
 */
SalesForceIntegrationProvider._PROVIDER_ID = "salesforce";
/**
 * The key to use for a SalesForce result.
 * @internal
 */
SalesForceIntegrationProvider._BROWSE_SEARCH_RESULT_KEY = "browse-salesforce";
/**
 * The id for the SaleForce filters.
 * @internal
 */
SalesForceIntegrationProvider._OBJECTS_FILTER_ID = "salesforce-objects";
/**
 * The id of the not connected result.
 * @internal
 */
SalesForceIntegrationProvider._NOT_CONNECTED_SEARCH_RESULT_KEY = "salesforce-not-connected-result";


/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/compat get default export */
/******/ (() => {
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = (module) => {
/******/ 		var getter = module && module.__esModule ?
/******/ 			() => (module['default']) :
/******/ 			() => (module);
/******/ 		__webpack_require__.d(getter, { a: getter });
/******/ 		return getter;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*****************************************************!*\
  !*** ./client/src/integrations/salesforce/index.ts ***!
  \*****************************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "integration": () => (/* binding */ integration)
/* harmony export */ });
/* harmony import */ var _integration_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./integration-provider */ "./client/src/integrations/salesforce/integration-provider.ts");

const integration = new _integration_provider__WEBPACK_IMPORTED_MODULE_0__.SalesForceIntegrationProvider();

})();

var __webpack_exports__integration = __webpack_exports__.integration;
export { __webpack_exports__integration as integration };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,