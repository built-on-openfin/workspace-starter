/******/ var __webpack_modules__ = ({

/***/ "../../node_modules/@openfin/workspace/index.js":
/*!******************************************************!*\
  !*** ../../node_modules/@openfin/workspace/index.js ***!
  \******************************************************/
/***/ ((module) => {

(()=>{"use strict";var e={3133:(e,t,n)=>{n.r(t),n.d(t,{CLIAction:()=>ze.Pt,CLIFilterOptionType:()=>ze.el,CLITemplate:()=>ze.yW,deregister:()=>Ye,hide:()=>tt,register:()=>Qe,show:()=>et});var o={};n.r(o),n.d(o,{subscribe:()=>ie});var r={};n.r(r),n.d(r,{create:()=>Ge});var i=n(6532),s=n(7405);const a="home";var c;!function(e){e.Commands="home-commands"}(c||(c={}));var d,u=n(5806);n(7564);!function(e){e[e.Initial=0]="Initial",e[e.Open=1]="Open",e[e.Close=2]="Close"}(d||(d={}));var f=n(5316);const l="all",p="0",g="5",w="6",h=()=>{};function y(e,t){return e?`${e}-${t}`:t}function v(e){return`__search-${e}-topic__`}const m=new Map;function S(e,t){m.has(e)||m.set(e,new Set),m.get(e).add(t)}function C(e,t){const n=m.get(e);n&&n.delete(t)}const P=new Map;function R(e,t){P.has(e)||P.set(e,new Set),P.get(e).add(t)}function b(e,t){const n=P.get(e);n&&n.delete(t)}const T=new Map;async function I(e,t){T.has(e)||T.set(e,new Map),T.get(e).set(t.id,t);const n=m.get(e);if(!n)return;const o=[...n].map((e=>e()));await Promise.all(o)}async function L(e,t){const n=T.get(e);if(!n)return;n.delete(t);const o=P.get(e);if(!o)return;const r=[...o].map((e=>e()));await Promise.all(r)}function k(e){return T.get(e)?[...T.get(e).values()]:[]}function M(e){const t=T.get(e);t&&t.clear()}function B(e,t){const n=T.get(e);return n?n.get(t):null}function O(e,t,n){return{...e,action:n||{...e.actions[0],trigger:f.px.UserAction},dispatcherIdentity:t}}function x(e,t,n="ascending"){const o=e||[];if(!t?.length)return o;const r=[],i=new Map;t.forEach((e=>{if(e.key)return i.set(e.key,e);r.push(e)}));let s=o.map((e=>{const{key:t}=e;if(t&&i.has(t)){const e=i.get(t);return i.delete(t),e}return e}));return s.push(...i.values(),...r),s="ascending"===n?s.sort(((e,t)=>(null!==e.score&&void 0!==e.score?e.score:1/0)-(null!==t.score&&void 0!==t.score?t.score:1/0))):s.sort(((e,t)=>(null!==t.score&&void 0!==t.score?t.score:1/0)-(null!==e.score&&void 0!==e.score?e.score:1/0))),s}function A(e){const t={};let n=[];let o=[];let r=d.Initial;t.getStatus=()=>r,t.getResultBuffer=()=>n,t.setResultBuffer=e=>{n=e,n?.length&&t.onChange()},t.getRevokedBuffer=()=>o,t.setRevokedBuffer=e=>{o=e,o?.length&&t.onChange()},t.onChange=h;const i={};return t.res=i,i.close=()=>{r!==d.Close&&(r=d.Close,t.onChange())},i.open=()=>{r!==d.Open&&(r=d.Open,t.onChange())},i.respond=n=>{const o=x(t.getResultBuffer(),n,e);t.setResultBuffer(o)},i.revoke=(...e)=>{const n=new Set(e),o=t.getResultBuffer().filter((({key:e})=>{const t=n.has(e);return t&&n.delete(e),!t}));t.setResultBuffer(o),n.size&&(t.getRevokedBuffer().forEach((e=>n.add(e))),t.setRevokedBuffer([...n]))},t}function W(e,t,n){const o=new Set;let r=!1;return{close:()=>{r=!0;for(const e of o)e()},req:{id:t,topic:e,...n,context:n?.context||{},onClose:e=>{o.add(e),r&&e()},removeListener:e=>{o.delete(e)}}}}function D(){return{name:fin.me.name,uuid:fin.me.uuid}}function E(){let e;try{const t=fin.Platform.getCurrentSync();if(!t?.identity)return;e=t.identity.uuid}catch(e){}return e}const F="deregistered or does not exist",_=new Error(`provider ${F}`),$=new Error("provider with name already exists"),q=new Error("bad payload"),G=new Error("subscription rejected"),N=new Error(`channel ${F}`),H=new Map;function U(e){const t=V(e);if(t)return t;throw N}function V(e){const t=H.get(e);if(t)return t}function j(e,t){H.set(e,t)}const K=new Map;function X(e){K.has(e)||K.set(e,new Map);const t=K.get(e);return{getRequestsForIdentity:e=>{const n=function(e){return`${e.uuid}:${e.name}`}(e);return t.has(n)||t.set(n,new Map),t.get(n)}}}async function J(e,t){return(await U(e)).dispatch(p,t)}function Z({namespacedTopic:e,topic:t}){const n=B.bind(null,e),o=X(e),r=J.bind(null,e);return async(e,i)=>{if(!e||!e.id||!e.providerId){const e=q;return{error:e.message}}const{id:s,providerId:a}=e,c=n(a);if(!c){const e=_;return{error:e.message}}const d=o.getRequestsForIdentity(i);let u=d.get(e.id);u||(u=W(t,s,e),d.set(e.id,u));const f=A(),l=()=>{const e=f.getResultBuffer();f.setResultBuffer([]);const t=f.getRevokedBuffer();f.setRevokedBuffer([]);const n=f.getStatus();r({id:s,providerId:a,results:e,revoked:t,status:n})};let p=!0,g=!1;f.onChange=()=>{if(p)return p=!1,void l();g||(g=!0,setTimeout((()=>{g=!1,l()}),100))};try{const{results:e,context:t}=await c.onUserInput(u.req,f.res),n=f.getStatus();return{id:s,providerId:a,status:n,results:e,context:t}}catch(e){return{id:s,providerId:a,error:e.message}}}}async function z(e,t,n){const o=n||await U(e),r=D(),i={identity:r,...t,onUserInput:void 0,onResultDispatch:void 0};await o.dispatch("2",i),await I(e,{identity:r,...t})}async function Q(e,t){const n=await U(e);return await n.dispatch("3",t),L(e,t)}async function Y(e,t,n,o){const r=O(n,D(),o),i=B(e,t);if(i){const{onResultDispatch:e}=i;if(!e)return;return e(r)}const s={providerId:t,result:r};return(await U(e)).dispatch(g,s)}async function ee(e,t){const n={...t,context:t?.context||{}},o={},r=async function*(e,t,{setState:n}){const o=await U(e);for(;;){const e=await o.dispatch("1",t),r=e.error;if(r)throw new Error(r);const i=e;if(t.id=i.id,n(i.state),i.done)return i.value;yield i.value}}(e,n,{setState:e=>{o.state=e}});let i=await r.next();return o.id=n.id,o.close=()=>{!async function(e,t){(await U(e)).dispatch(w,{id:t})}(e,o.id)},o.next=()=>{if(i){const e=i;return i=void 0,e}return r.next()},o}async function te(e){return(await U(e)).dispatch("4",null)}async function ne(e){const t=await U(e);var n;n=e,H.delete(n),M(e),await t.disconnect()}function oe(e){const{namespacedTopic:t}=e,n=X(t);return async o=>{if(!V(t))return;const r=n.getRequestsForIdentity(o);for(const{req:e,close:t}of r.values())t(),r.delete(e.id);j(t,(async e=>{const{namespacedTopic:t}=e,n=await re(e);for(const e of k(t))await z(t,e,n);return n})(e))}}async function re(e){const{namespacedTopic:t}=e,n=v(t),o=await async function(e){for(let t=0;t<50;t++)try{return await fin.InterApplicationBus.Channel.connect(e,{wait:!1})}catch(e){if(49===t)throw e;await new Promise((e=>setTimeout(e,1e3)))}}(n);return o.register(p,Z(e)),o.register(w,function(e){const t=X(e);return(e,n)=>{const o=t.getRequestsForIdentity(n),r=o.get(e.id);r&&(r.close(),o.delete(e.id))}}(t)),o.register(g,function(e){return async(t,n)=>{if(!t||!t.providerId||!t.result)return;const o=B(e,t.providerId);if(!o)return;const{onResultDispatch:r}=o;return r?(t.result.dispatcherIdentity=n,r(t.result)):void 0}}(t)),o.onDisconnection(oe(e)),o}async function ie(e){const t=("string"==typeof e?e:e?.topic)||l,n=("string"==typeof e?null:e?.uuid)||E(),o=y(n,t),r={topic:t,namespace:n,namespacedTopic:o};let i=V(o);return i||(i=re(r),j(o,i),await i),{getAllProviders:te.bind(null,o),register:z.bind(null,o),search:ee.bind(null,o),deregister:Q.bind(null,o),dispatch:Y.bind(null,o),disconnect:ne.bind(null,o)}}const se=new Map;function ae(e){const t=ce(e);if(t)return t;throw N}function ce(e){const t=se.get(e);if(t)return t}const de=new Map;function ue(e,t){de.has(e)||de.set(e,new Set),de.get(e).add(t)}function fe(e,t){const n=de.get(e);n&&n.delete(t)}function le(e){return[...k(e)].map((e=>({...e,onUserInput:void 0,onResultDispatch:void 0})))}async function pe(e,t){if(B(e,t.id))throw new Error("provider with name already exists");const n=D();await I(e,{identity:n,...t})}function ge(e,t){L(e,t)}async function we(e,t,n,o){const r=B(e,t);if(!r)throw _;const{onResultDispatch:i}=r;if(!i)return;return i(O(n,D(),o))}async function*he(e,t,n){const o=function(e,t){const n=[],o=[],r=[],i=[];for(const s of e){const e=A(s.scoreOrder),a={results:[],provider:{id:s.id,identity:s.identity,title:s.title,scoreOrder:s.scoreOrder,icon:s.icon,dispatchFocusEvents:s.dispatchFocusEvents}};n.push(a),o.push(e);const c=(async()=>{try{const{results:n,context:o}=await s.onUserInput(t,e.res);a.results=x(a.results,n),a.context={...a.context,...o}}catch(e){a.error=e}})();c.finally((()=>{c.done=!0})),i.push(c),r.push(r.length)}return{providerResponses:n,listenerResponses:o,openListenerResponses:r,initialResponsePromises:i}}(t.targets?t.targets.map((t=>B(e,t))).filter((e=>!!e)):[...k(e).filter((e=>!e.hidden))],t),{providerResponses:r,listenerResponses:i}=o;let{openListenerResponses:s,initialResponsePromises:a}=o,c=f.De.Fetching;const u=e=>{c=e,n.setState(c)};let l,p=!1;t.onClose((()=>{p=!0,l&&l()}));do{let e=!1;if(a.length){const t=[];for(const n of a)n.done?e=!0:t.push(n);a=t,a.length||(u(f.De.Fetched),e=!0)}let t,n=!1;const o=()=>{n=!0,t&&t()},g=[];for(const t of s){const n=i[t],s=r[t],a=n.getStatus();(a===d.Open||c===f.De.Fetching&&a===d.Initial)&&(g.push(t),n.onChange=o);const u=n.getResultBuffer();u.length&&(n.setResultBuffer([]),s.results=x(s.results,u),e=!0);const l=n.getRevokedBuffer();if(l.length){n.setRevokedBuffer([]);const t=new Set(l);s.results=s.results.filter((({key:e})=>!t.has(e))),e=!0}}if(s=g,e&&(yield r),p)break;n||(s.length||a.length)&&await Promise.race([...a,new Promise((e=>{t=e})),new Promise((e=>{l=e}))])}while(s.length||a.length);return u(f.De.Complete),r}let ye=0;function ve({namespacedTopic:e,topic:t},n){ye+=1;const o=W(t,ye.toString(),n),r=he(e,o.req,{setState:e=>{r.state=e}});return r.id=ye.toString(),r.close=o.close,r.state=f.De.Fetching,r}const me=new Map;function Se(e,t){return`${e}:${t}`}function Ce(e){return async(t,...n)=>{if(!t)return{error:q.message};let o;if(t.id)o=Se(e.namespacedTopic,t.id);else{const n=ve(e,t);o=Se(e.namespacedTopic,n.id),t.id=n.id,me.set(o,{generator:n})}const r=me.get(o);clearTimeout(r.timeout);const i=await r.generator.next();return r.timeout=function(e){return window.setTimeout((()=>{me.delete(e)}),1e4)}(o),{...i,id:t.id,state:r.generator.state}}}function Pe(e,t,n){return ae(e).dispatch(t,w,{id:n})}function Re(e){return t=>function(e,t){const n=Se(e,t),o=me.get(n);o&&o.generator.close()}(e,t.id)}async function be(e,t,{id:n,query:o,context:r,targets:i}){const s=ae(e),a={id:n,query:o,context:r,targets:i,providerId:t.id},c=await s.dispatch(t.identity,p,a),d=c.error;if(d)throw new Error(d);return c}const Te=new Map;function Ie(e,t,n){return`${e}:${t.name}:${t.uuid}:${n}`}const Le=new Map;function ke(e,t,n){return`${e}:${t}:${n}`}function Me(e,t){const n=Ie.bind(null,e,t.identity),o=Pe.bind(null,e,t.identity),r=be.bind(null,e,t);return async(i,s)=>{const a=n(i.id);if(!Te.has(a)){const e=()=>{o(i.id),Te.delete(a)};Te.set(a,e),i.onClose(e)}const c=ke(e,t.id,i.id),u=()=>{Le.delete(c),s.close()};i.onClose(u),Le.set(c,(e=>{e.results?.length&&s.respond(e.results),e.revoked?.length&&s.revoke(...e.revoked),e.status===d.Open&&s.open(),e.status===d.Close&&u()}));const f=await r(i);return f.status===d.Open&&s.open(),f.status!==d.Close&&f.status!==d.Initial||u(),f}}function Be(e,t){return async n=>{const o=ae(e),r={providerId:t.id,result:n};return o.dispatch(t.identity,g,r)}}const Oe=new Map;function xe(e,t){return`${e}-${t.name}-${t.uuid}`}function Ae(e){return async(t,n)=>{if(!t||!t.id)return void new Error(JSON.stringify(t));if(B(e,t.id))throw $;t.identity=n,await async function(e,t){const n=xe(e,t.identity);Oe.has(n)||Oe.set(n,[]),Oe.get(n).push(t.id),await I(e,{...t,onUserInput:Me(e,t),onResultDispatch:Be(e,t)})}(e,t)}}function We(e){return t=>{t&&function(e,t){const n=B(e,t);if(!n)return;const o=xe(e,n.identity),r=Oe.get(o);if(r){const n=r.findIndex((e=>e===t));-1!==n&&(r.splice(n,1),L(e,t))}}(e,t)}}const De=new Map;function Ee(e,t){De.has(e)||De.set(e,new Set),De.get(e).add(t)}function Fe(e,t){const n=De.get(e);n&&n.delete(t)}function _e(e){return async t=>{!function(e,t){const n=xe(e,t),o=Oe.get(n);if(o){for(const t of o)L(e,t);Oe.delete(n)}}(e,t);const n=De.get(e);n&&n.forEach((e=>e(t)))}}async function $e(e){const{namespacedTopic:t}=e,n=v(e.namespacedTopic),o=await(r=n,fin.InterApplicationBus.Channel.create(r));var r;return o.onConnection(function({namespacedTopic:e}){return async t=>{const n=de.get(e);if(n)for(const e of n)if(!await e(t))throw G}}(e)),o.onDisconnection(_e(t)),o.register(w,Re(t)),o.register(p,function(e){return t=>{const n=ke(e,t.providerId,t.id),o=Le.get(n);o&&o(t)}}(t)),o.register("2",Ae(t)),o.register("3",We(t)),o.register("4",function(e){return async()=>le(e)}(t)),o.register("1",Ce(e)),o.register(g,function(e){return async(t,n)=>{if(!t||!t.providerId||!t.result)return;const o=B(e,t.providerId);if(!o)throw _;const{onResultDispatch:r}=o;return r?(t.result.dispatcherIdentity=n,r(t.result)):void 0}}(t)),o}async function qe(e){const t=ae(e);var n;n=e,se.delete(n),await t.destroy(),M(e)}async function Ge(e){const t=("string"==typeof e?e:e?.topic)||l,n=E(),o=y(n,t),r={topic:t,namespace:n,namespacedTopic:o};let i=ce(o);i||(i=await $e(r),function(e,t){se.set(e,t)}(o,i));const s=fe.bind(null,o),a=Fe.bind(null,o),c=C.bind(null,o),d=b.bind(null,o);return{getAllProviders:le.bind(null,o),search:ve.bind(null,r),register:pe.bind(null,o),deregister:ge.bind(null,o),onSubscription:ue.bind(null,o),onDisconnect:Ee.bind(null,o),onRegister:S.bind(null,o),onDeregister:R.bind(null,o),dispatch:we.bind(null,r),disconnect:qe.bind(null,o),removeListener:e=>{s(e),a(e),c(e),d(e)}}}const{create:Ne}=r,{subscribe:He}=o,Ue={create:Ne,subscribe:He,defaultTopic:"all"},Ve=()=>{const e=window;e.search=Ue,e.fin&&(e.fin.Search=Ue)},je=e=>{const t=()=>{Ve(),window.removeEventListener(e,t)};return t};if("undefined"!=typeof window){Ve();const e="load",t=je(e);window.addEventListener(e,t);const n="DOMContentLoaded",o=je(n);window.addEventListener(n,o)}const Ke=new Map;async function Xe(){await async function(e){Ke.set(e,await He({topic:e,uuid:u.q9.Workspace}))}(a)}let Je;async function Ze(e){return await async function(){return Je||(Je=Xe()),Je}(),Ke.get(e)}var ze=n(3758);const Qe=async e=>{if(!e.icon)throw new Error(`${e.id} provider needs to have icon property defined.`);await(0,s.aB)();const t=await Ze(a);try{const n=await t.register(e);return(0,i.ck)({allowed:!0}),n}catch(e){throw(0,i.ck)({allowed:!1,rejectionCode:e.message}),e}},Ye=async e=>{await(0,s.aB)();return(await Ze(a)).deregister(e)};async function et(){return(await(0,s.Xl)()).dispatch(s.Ml.ShowHome,void 0)}async function tt(){return(await(0,s.Xl)()).dispatch(s.Ml.HideHome,void 0)}},3298:(e,t,n)=>{n.d(t,{w:()=>o.wt});var o=n(5316)},3758:(e,t,n)=>{var o,r,i;n.d(t,{Pt:()=>o,yW:()=>r,el:()=>i}),function(e){e.Suggestion="suggestion"}(o||(o={})),function(e){e.Contact="Contact",e.Custom="Custom",e.List="List",e.Plain="Plain",e.SimpleText="SimpleText",e.Loading="Loading",e.Error="Error"}(r||(r={})),function(e){e.MultiSelect="MultiSelect"}(i||(i={}))},7564:(e,t,n)=>{n(3298),n(3758),n(6114),n(2109)},6114:(e,t,n)=>{var o,r;n.d(t,{L:()=>o,T:()=>r}),function(e){e.Snapshot="snapshot",e.Manifest="manifest",e.View="view",e.External="external"}(o||(o={})),function(e){e.LandingPage="landingPage",e.AppGrid="appGrid"}(r||(r={}))},2109:(e,t,n)=>{n.d(t,{p6:()=>o,Go:()=>r,bI:()=>i,ZJ:()=>s});const o={Container:"Container",Button:"Button"},r={Text:"Text",Image:"Image",List:"List"},i={...o,...r};var s;!function(e){e.Primary="primary",e.Secondary="secondary",e.TextOnly="textOnly"}(s||(s={}))},317:(e,t,n)=>{n.r(t),n.d(t,{AppManifestType:()=>i.L,StorefrontTemplate:()=>i.T,deregister:()=>f,hide:()=>l,register:()=>u,show:()=>p});var o=n(6532),r=n(7405);n(7564);var i=n(6114);let s;const a=new Map,c=e=>{if(!a.has(e))throw new Error(`Storefront Provider with id ${e} is not registered`);return a.get(e)},d=async e=>{const t=await(0,r.Xl)();if(a.has(e.id))throw new Error(`Storefront provider with id ${e.id} already registered`);return a.set(e.id,e),(e=>{e.isStorefrontActionsRegistered||(e.isStorefrontActionsRegistered=!0,e.register(r.Ml.GetStorefrontProviderApps,(e=>c(e).getApps())),e.register(r.Ml.GetStorefrontProviderFooter,(e=>c(e).getFooter())),e.register(r.Ml.GetStorefrontProviderLandingPage,(e=>c(e).getLandingPage())),e.register(r.Ml.GetStorefrontProviderNavigation,(e=>c(e).getNavigation())),e.register(r.Ml.LaunchStorefrontProviderApp,(({id:e,app:t})=>c(e).launchApp(t))))})(t),t.dispatch(r.Ml.RegisterStorefrontProvider,e)},u=e=>(s=d(e),(0,o.d9)({allowed:!0}),s),f=async e=>{await s,a.delete(e);return(await(0,r.Xl)()).dispatch(r.Ml.DeregisterStorefrontProvider,e)},l=async()=>{await s,await(0,r.aB)(),await(async()=>(await(0,r.Dm)()).dispatch(r.Ml.HideStorefront,void 0))()},p=async()=>{await s,await(0,r.aB)(),await(async()=>(await(0,r.Dm)()).dispatch(r.Ml.ShowStorefront,null))()}},7405:(e,t,n)=>{n.d(t,{Ml:()=>s,Dm:()=>a,Xl:()=>f,aB:()=>u});var o=n(6678);const r=o.Ax&&"complete"!==document.readyState&&new Promise((e=>document.addEventListener("readystatechange",(()=>{"complete"===document.readyState&&e()}))));var i=n(121);var s;!function(e){e.RegisterStorefrontProvider="register-storefront-provider",e.DeregisterStorefrontProvider="deregister-storefront-provider",e.GetStorefrontProviders="get-storefront-providers",e.HideStorefront="hide-storefront",e.GetStorefrontProviderApps="get-storefront-provider-apps",e.GetStorefrontProviderLandingPage="get-storefront-provider-landing-page",e.GetStorefrontProviderFooter="get-storefront-provider-footer",e.GetStorefrontProviderNavigation="get-storefront-provider-navigation",e.LaunchStorefrontProviderApp="launch-storefront-provider-app",e.ShowStorefront="show-storefront",e.CreateStorefrontWindow="create-storefront-window",e.ShowHome="show-home",e.HideHome="hide-home",e.AssignHomeSearchContext="assign-home-search-context",e.GetLegacyPages="get-legacy-pages",e.GetLegacyWorkspaces="get-legacy-workspaces",e.GetComputedPlatformTheme="get-computed-platform-theme"}(s||(s={}));const a=function(e){let t;return()=>{if(!o.sS)throw new Error("getChannelClient cannot be used outside an OpenFin env. Avoid using this method during pre-rendering.");return t||(t=(async()=>{await r;const n=await fin.InterApplicationBus.Channel.connect(e);return n.onDisconnection((async()=>{t=void 0})),n})().then((e=>e)).catch((n=>{throw t=void 0,new Error(`failed to connect to channel provider ${e}: ${n}`)}))),t}}("__of_workspace_protocol__"),c="isLaunchedViaLib",d=e=>{const t=new URL(e);return t.searchParams.append(c,"true"),t.toString()},u=async()=>{if(!await(0,i.JV)(i.iW))return(o.ZK||-1===navigator.userAgent.indexOf("Win"))&&await fin.Application.startFromManifest(d(o.aW)),fin.System.openUrlWithBrowser(d(o.GX))},f=async()=>(await u(),a())},5806:(e,t,n)=>{n.d(t,{q9:()=>o});var o,r,i,s=n(6678);!function(e){e.Workspace="openfin-browser"}(o||(o={})),function(e){e.RunRequested="run-requested",e.WindowOptionsChanged="window-options-changed",e.WindowClosed="window-closed",e.WindowCreated="window-created"}(r||(r={})),function(e){e.FinProtocol="fin-protocol"}(i||(i={}));s.AB,s.AB,o.Workspace,o.Workspace},6678:(e,t,n)=>{var o;n.d(t,{sS:()=>r,Ax:()=>i,AB:()=>a,oC:()=>c,ZK:()=>d,GX:()=>u,aW:()=>f,u0:()=>p}),function(e){e.Local="local",e.Dev="dev",e.Staging="staging",e.Prod="prod"}(o||(o={}));const r="undefined"!=typeof window&&"undefined"!=typeof fin,i=("undefined"==typeof process||process.env?.JEST_WORKER_ID,"undefined"!=typeof window),s=i?window.origin:o.Local,a=r&&fin.me.uuid,c=r&&fin.me.name,d=(r&&fin.me.entityType,"prod"===o.Local),u=(o.Dev,o.Staging,o.Prod,"fins://system-apps/workspace"),f="https://cdn.openfin.co/workspace/8.1.7/app.json",l=e=>e.startsWith("http://")||e.startsWith("https://")?e:s+e,p=(l("https://cdn.openfin.co/workspace/8.1.7"),l("https://cdn.openfin.co/workspace/8.1.7"),"undefined"!=typeof WORKSPACE_DOCS_PLATFORM_URL&&l(WORKSPACE_DOCS_PLATFORM_URL),"undefined"!=typeof WORKSPACE_DOCS_CLIENT_URL&&l(WORKSPACE_DOCS_CLIENT_URL),"8.1.7")},6532:(e,t,n)=>{n.d(t,{ck:()=>a,d9:()=>c});var o,r=n(6678),i=n(121);!function(e){e.Browser="Browser",e.Home="Home",e.Notification="Notification",e.Storefront="Storefront",e.Platform="Platform",e.Theming="Theming"}(o||(o={}));const s=async(e,t)=>{const n={apiVersion:t.apiVersion||r.u0,componentName:e,componentVersion:r.u0,...t};fin.System.registerUsage({type:"workspace-licensing",data:n})},a=async e=>{i.OI.uuid===i.Gi.uuid&&i.OI.name===i.Gi.name||s(o.Home,e)},c=async e=>{s(o.Storefront,e)}},121:(e,t,n)=>{n.d(t,{Gi:()=>c,OI:()=>d,iW:()=>u,JV:()=>f});var o,r,i=n(5806),s=n(6678);!function(e){e.Home="openfin-home",e.Dock="openfin-dock",e.Storefront="openfin-storefront",e.HomeInternal="openfin-home-internal",e.BrowserMenu="openfin-browser-menu",e.BrowserIndicator="openfin-browser-indicator",e.BrowserWindow="internal-generated-window"}(o||(o={})),function(e){e.Shown="shown",e.BoundsChanged="bounds-changed",e.LayoutReady="layout-ready",e.EndUserBoundsChanging="end-user-bounds-changing",e.Blurred="blurred",e.CloseRequested="close-requested",e.Focused="focused",e.ShowRequested="show-requested",e.ViewCrashed="view-crashed",e.ViewAttached="view-attached",e.ViewDetached="view-detached",e.ViewPageTitleUpdated="view-page-title-updated",e.ViewDestroyed="view-destroyed",e.OptionsChanged="options-changed"}(r||(r={}));function a(e){if(!s.sS)throw new Error("getOFWindow can only be used in an OpenFin env. Avoid calling this method during pre-rendering.");return fin.Window.wrapSync(e)}const c={name:s.oC,uuid:s.AB};const d={name:o.Home,uuid:i.q9.Workspace},u=(o.Dock,i.q9.Workspace,o.Storefront,i.q9.Workspace,{name:i.q9.Workspace,uuid:i.q9.Workspace});const f=e=>a(e).getOptions().then((()=>!0)).catch((()=>!1))},5316:(e,t,n)=>{var o,r,i;n.d(t,{De:()=>o,px:()=>r,wt:()=>i}),function(e){e.Fetching="fetching",e.Fetched="fetched",e.Complete="complete"}(o||(o={})),function(e){e.UserAction="user-action",e.FocusChange="focus-change",e.Reload="reload"}(r||(r={})),function(e){e.Active="active",e.Default="default"}(i||(i={}))}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,n),i.exports}n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{n.r(o),n.d(o,{AppManifestType:()=>p.L,ButtonStyle:()=>f.ZJ,CLIAction:()=>l.Pt,CLIFilterOptionType:()=>l.el,CLITemplate:()=>l.yW,ContainerTemplateFragmentNames:()=>f.p6,Home:()=>r,Legacy:()=>e,PresentationTemplateFragmentNames:()=>f.Go,SearchTagBackground:()=>u.w,Storefront:()=>d,StorefrontTemplate:()=>p.T,TemplateFragmentTypes:()=>f.bI});var e={};n.r(e),n.d(e,{getPages:()=>a,getWorkspaces:()=>c});var t,r=n(3133);n(6678),n(121);!function(e){e.TabCreated="tab-created",e.ContainerCreated="container-created",e.ContainerResized="container-resized"}(t||(t={}));new Map;var i;!function(e){e.CurrentWorkspaceId="currentWorkspaceId",e.LastFocusedBrowserWindow="lastFocusedBrowserWindow",e.MachineName="machineName",e.NewTabPageLayout="NewTabPageLayout",e.NewTabPageSort="NewTabPageSort"}(i||(i={}));var s=n(7405);const a=()=>async function(){return(await(0,s.Dm)()).dispatch(s.Ml.GetLegacyPages,void 0)}(),c=()=>(async()=>(await(0,s.Dm)()).dispatch(s.Ml.GetLegacyWorkspaces,void 0))();var d=n(317),u=n(3298),f=n(2109),l=n(3758),p=n(6114)})(),module.exports=o})();
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./client/src/integrations/async/integration-provider.ts":
/*!***************************************************************!*\
  !*** ./client/src/integrations/async/integration-provider.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AsyncIntegrationProvider": () => (/* binding */ AsyncIntegrationProvider)
/* harmony export */ });
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openfin/workspace */ "../../node_modules/@openfin/workspace/index.js");
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_openfin_workspace__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../templates */ "./client/src/templates.ts");


/**
 * Implement the integration provider for async results.
 */
class AsyncIntegrationProvider {
    /**
     * The module is being registered.
     * @param integrationManager The manager for the integration.
     * @param integration The integration details.
     * @returns Nothing.
     */
    async register(integrationManager, integration) {
        this._integrationManager = integrationManager;
    }
    /**
     * The module is being deregistered.
     * @param integration The integration details.
     * @returns Nothing.
     */
    async deregister(integration) {
    }
    /**
     * Get a list of the static application entries.
     * @param integration The integration details.
     * @returns The list of application entries.
     */
    async getAppSearchEntries(integration) {
        const results = [];
        return results;
    }
    /**
     * Get a list of the static help entries.
     * @param integration The integration details.
     * @returns The list of help entries.
     */
    async getHelpSearchEntries(integration) {
        return [
            {
                key: `${AsyncIntegrationProvider._PROVIDER_ID}-help1`,
                title: "/contacts-sync",
                label: "Help",
                actions: [],
                data: {
                    providerId: AsyncIntegrationProvider._PROVIDER_ID
                },
                template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLITemplate.Custom,
                templateContent: (0,_templates__WEBPACK_IMPORTED_MODULE_1__.createHelp)("/contacts-sync", [
                    "The contacts-sync command can be used to search for a contact.",
                    "It demonstrates how a long running retrieval would have to wait for the response before anything is display.",
                    "For example to search for a contact containing the letter a."
                ], [
                    "/contacts-sync a"
                ])
            },
            {
                key: `${AsyncIntegrationProvider._PROVIDER_ID}-help2`,
                title: "/contacts-partial",
                label: "Help",
                actions: [],
                data: {
                    providerId: AsyncIntegrationProvider._PROVIDER_ID
                },
                template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLITemplate.Custom,
                templateContent: (0,_templates__WEBPACK_IMPORTED_MODULE_1__.createHelp)("/contacts-partial", [
                    "The contacts-partial command can be used to search for a contact.",
                    "It demonstrates how we would display results instantly while asynchronously retrieving all the results.",
                    "For example to search for a contact containing the letter a."
                ], [
                    "/contacts-partial a"
                ])
            },
            {
                key: `${AsyncIntegrationProvider._PROVIDER_ID}-help3`,
                title: "/contacts",
                label: "Help",
                actions: [],
                data: {
                    providerId: AsyncIntegrationProvider._PROVIDER_ID
                },
                template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLITemplate.Custom,
                templateContent: (0,_templates__WEBPACK_IMPORTED_MODULE_1__.createHelp)("/contacts", [
                    "The contacts command can be used to search for a contact.",
                    "It demonstrates how we would display results instantly and only retrieve full data on entry selection.",
                    "Contacts starting with E will show error on first load.",
                    "For example to search for a contact containing the letter a."
                ], [
                    "/contacts a",
                    "/contacts e"
                ])
            }
        ];
    }
    /**
     * An entry has been selected.
     * @param integration The integration details.
     * @param result The dispatched result.
     * @param lastResponse The last response.
     * @returns True if the item was handled.
     */
    async itemSelection(integration, result, lastResponse) {
        if (result.action.trigger === "user-action" &&
            result.action.name === AsyncIntegrationProvider._ASYNC_PROVIDER_DETAILS_ACTION &&
            result.data.url &&
            this._integrationManager.openUrl) {
            await this._integrationManager.openUrl(result.data.url);
            return true;
        }
        else if ((result.action.trigger === "focus-change" && result.data?.state === "loading") ||
            (result.action.trigger === "reload" && result.data?.state === "error")) {
            setTimeout(async () => {
                const contactResponse = await fetch(`${integration.data?.rootUrl}${result.data.contact.id}.json`);
                const contactFull = await contactResponse.json();
                lastResponse.respond([this.createResult(contactFull)]);
            }, 0);
        }
        return false;
    }
    /**
     * Get a list of search results based on the query and filters.
     * @param integration The integration details.
     * @param query The query to search for.
     * @param filters The filters to apply.
     * @param lastResponse The last search response used for updating existing results.
     * @returns The list of results and new filters.
     */
    async getSearchResults(integration, query, filters, lastResponse) {
        const results = [];
        if (query.startsWith("/contacts-sync ")) {
            await this.contactsSync(query.slice(15), integration, results);
        }
        else if (query.startsWith("/contacts-partial ")) {
            await this.contactsPartial(query.slice(18), integration, results, lastResponse);
        }
        else if (query.startsWith("/contacts ")) {
            await this.contactsAsync(query.slice(10), integration, results, lastResponse);
        }
        return {
            results
        };
    }
    /**
     * Retrieve the contacts in a synchronous manner.
     * @param query The query to search for
     * @param integration The integration details.
     * @param results The result list to populate.
     */
    async contactsSync(query, integration, results) {
        const wildcard = query.trim().toLowerCase();
        if (wildcard.length > 0) {
            try {
                const response = await fetch(`${integration.data?.rootUrl}index.json`);
                const json = await response.json();
                for (const contact of json.data) {
                    if (contact.firstName.toLowerCase().includes(wildcard) || contact.lastName.toLowerCase().includes(wildcard)) {
                        const contactResponse = await fetch(`${integration.data?.rootUrl}${contact.id}.json`);
                        const contactFull = await contactResponse.json();
                        results.push(this.createResult(contactFull));
                    }
                }
                // Add an artificial pause to simulate slow retrieval
                await new Promise(r => setTimeout(r, 3000));
            }
            catch (err) {
                console.error(err);
            }
        }
    }
    /**
     * Retrieve the contacts in a partially asynchronous manner.
     * @param query The query to search for
     * @param integration The integration details.
     * @param results The result list to populate.
     * @param lastResponse The last response to use for updating results.
     */
    async contactsPartial(query, integration, results, lastResponse) {
        const wildcard = query.trim().toLowerCase();
        if (wildcard.length > 0) {
            try {
                const response = await fetch(`${integration.data?.rootUrl}index.json`);
                const json = await response.json();
                const finalContacts = [];
                for (const contact of json.data) {
                    if (contact.firstName.toLowerCase().includes(wildcard) || contact.lastName.toLowerCase().includes(wildcard)) {
                        finalContacts.push(contact);
                        results.push(this.createResult(contact));
                    }
                }
                setTimeout(async () => {
                    for (const contact of finalContacts) {
                        const contactResponse = await fetch(`${integration.data?.rootUrl}${contact.id}.json`);
                        const contactFull = await contactResponse.json();
                        lastResponse.respond([this.createResult(contactFull)]);
                        // Add an artificial pause to simulate slow retrieval
                        await new Promise(r => setTimeout(r, 1000));
                    }
                }, 0);
            }
            catch (err) {
                console.error(err);
            }
        }
    }
    /**
     * Retrieve the contacts in an asynchronous manner.
     * @param query The query to search for
     * @param integration The integration details.
     * @param results The result list to populate.
     * @param lastResponse The last response to use for updating results.
     */
    async contactsAsync(query, integration, results, lastResponse) {
        const wildcard = query.trim().toLowerCase();
        if (wildcard.length > 0) {
            try {
                const response = await fetch(`${integration.data?.rootUrl}index.json`);
                const json = await response.json();
                const finalContacts = [];
                for (const contact of json.data) {
                    if (contact.firstName.toLowerCase().includes(wildcard) || contact.lastName.toLowerCase().includes(wildcard)) {
                        finalContacts.push(contact);
                        // If a contact starts with E show it in errored state
                        if (contact.firstName.startsWith("E")) {
                            results.push(this.createResultErrored(contact));
                        }
                        else {
                            results.push(this.createResultLoading(contact));
                        }
                    }
                }
            }
            catch (err) {
                console.error(err);
            }
        }
    }
    /**
     * Create a search result.
     * @param contact The contact.
     * @returns The search result.
     */
    createResult(contact) {
        const fullName = `${contact.firstName} ${contact.lastName}`;
        const details = [];
        if (contact.email) {
            details.push(["E-mail", contact.email]);
        }
        return {
            key: `contact-${contact.id}`,
            title: fullName,
            label: "Information",
            actions: [],
            data: {
                providerId: AsyncIntegrationProvider._PROVIDER_ID,
                contact
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLITemplate.Contact,
            templateContent: {
                name: fullName,
                details: [details]
            }
        };
    }
    /**
     * Create a search result in loading state.
     * @param contact The contact.
     * @returns The search result.
     */
    createResultLoading(contact) {
        const fullName = `${contact.firstName} ${contact.lastName}`;
        return {
            key: `contact-${contact.id}`,
            title: fullName,
            label: "Information",
            actions: [],
            data: {
                providerId: AsyncIntegrationProvider._PROVIDER_ID,
                contact,
                state: "loading"
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLITemplate.Loading,
            templateContent: undefined
        };
    }
    /**
     * Create a search result in errored state.
     * @param contact The contact.
     * @returns The search result.
     */
    createResultErrored(contact) {
        const fullName = `${contact.firstName} ${contact.lastName}`;
        return {
            key: `contact-${contact.id}`,
            title: fullName,
            label: "Information",
            actions: [],
            data: {
                providerId: AsyncIntegrationProvider._PROVIDER_ID,
                contact,
                state: "error"
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLITemplate.Error,
            templateContent: "Unable to load data"
        };
    }
}
/**
 * Provider id.
 * @internal
 */
AsyncIntegrationProvider._PROVIDER_ID = "async";
/**
 * The key to use for a async result.
 * @internal
 */
AsyncIntegrationProvider._ASYNC_PROVIDER_DETAILS_ACTION = "Async Details";


/***/ }),

/***/ "./client/src/templates.ts":
/*!*********************************!*\
  !*** ./client/src/templates.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createButton": () => (/* binding */ createButton),
/* harmony export */   "createContainer": () => (/* binding */ createContainer),
/* harmony export */   "createHelp": () => (/* binding */ createHelp),
/* harmony export */   "createImage": () => (/* binding */ createImage),
/* harmony export */   "createText": () => (/* binding */ createText)
/* harmony export */ });
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openfin/workspace */ "../../node_modules/@openfin/workspace/index.js");
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_openfin_workspace__WEBPACK_IMPORTED_MODULE_0__);

function createHelp(title, description, examples) {
    const additionalData = {};
    const fragments = [];
    for (let i = 0; i < description.length; i++) {
        const descriptionKey = `desc-${i}`;
        additionalData[descriptionKey] = description[i];
        fragments.push(createText(descriptionKey, 12, {
            padding: "6px 0px"
        }));
    }
    const exampleFragments = [];
    for (let i = 0; i < examples.length; i++) {
        const exampleKey = `line-${i}`;
        additionalData[exampleKey] = examples[i];
        exampleFragments.push(createText(exampleKey, 12, {
            fontFamily: "monospace"
        }));
    }
    if (exampleFragments.length > 0) {
        fragments.push(createContainer("column", exampleFragments, {
            padding: "10px",
            marginTop: "6px",
            backgroundColor: "var(--openfin-ui-inputBackground)",
            color: "var(--openfin-ui-inputColor)",
            borderRadius: "5px"
        }));
    }
    return {
        layout: createContainer("column", [
            createText("title", 16, { color: "var(--openfin-ui-brandPrimary)", fontWeight: "bold" }),
            ...fragments
        ], {
            padding: "10px"
        }),
        data: {
            title,
            ...additionalData
        }
    };
}
function createContainer(containerType, children, style) {
    return {
        type: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.TemplateFragmentTypes.Container,
        style: {
            display: "flex",
            flexDirection: containerType,
            ...style
        },
        children
    };
}
function createText(dataKey, fontSize = 14, style) {
    return {
        type: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.TemplateFragmentTypes.Text,
        dataKey,
        style: {
            fontSize: `${fontSize ?? 14}px`,
            ...style
        }
    };
}
function createImage(dataKey, alternativeText, style) {
    return {
        type: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.TemplateFragmentTypes.Image,
        dataKey,
        alternativeText,
        style: {
            ...style
        }
    };
}
function createButton(buttonStyle, titleKey, action, style) {
    return {
        type: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.TemplateFragmentTypes.Button,
        buttonStyle,
        children: [
            createText(titleKey, 12)
        ],
        action: action,
        style: {
            ...style
        }
    };
}


/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/compat get default export */
/******/ (() => {
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = (module) => {
/******/ 		var getter = module && module.__esModule ?
/******/ 			() => (module['default']) :
/******/ 			() => (module);
/******/ 		__webpack_require__.d(getter, { a: getter });
/******/ 		return getter;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!************************************************!*\
  !*** ./client/src/integrations/async/index.ts ***!
  \************************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "integration": () => (/* binding */ integration)
/* harmony export */ });
/* harmony import */ var _integration_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./integration-provider */ "./client/src/integrations/async/integration-provider.ts");

const integration = new _integration_provider__WEBPACK_IMPORTED_MODULE_0__.AsyncIntegrationProvider();

})();

var __webpack_exports__integration = __webpack_exports__.integration;
export { __webpack_exports__integration as integration };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,