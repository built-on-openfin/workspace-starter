/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@openfin/workspace/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@openfin/workspace/index.js ***!
  \**************************************************/
/***/ ((module) => {

(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{AppManifestType:()=>vt,CLIAction:()=>mt,CLIFilterOptionType:()=>Rt,CLITemplate:()=>St,Home:()=>_t,SearchTagBackground:()=>$e,Storefront:()=>Tt,StorefrontTemplate:()=>yt,launchApp:()=>Wt});var n={};e.r(n),e.d(n,{subscribe:()=>Ae});var o={};e.r(o),e.d(o,{create:()=>rt});var r={};e.r(r),e.d(r,{deregister:()=>gt,hide:()=>ht,register:()=>pt,show:()=>wt});var i,s,a={};e.r(a),e.d(a,{deregister:()=>Et,hide:()=>Lt,register:()=>kt,show:()=>It}),function(e){e.Local="local",e.Dev="dev",e.Staging="staging",e.Prod="prod"}(s||(s={}));const c="undefined"!=typeof window&&"undefined"!=typeof fin,d=("undefined"==typeof process||null===(i=process.env)||void 0===i||i.JEST_WORKER_ID,"undefined"!=typeof window),u=d?window.origin:s.Local,l=(c&&fin.me.uuid,c&&fin.me.name,c&&fin.me.entityType,"undefined"!=typeof ENV?ENV:s.Local,s.Local,s.Dev,s.Staging,s.Prod,!0),f=e=>e.startsWith("http://")||e.startsWith("https://")?e:u+e,p=("undefined"!=typeof WORKSPACE_APPS_URL&&f(WORKSPACE_APPS_URL),"undefined"!=typeof WORKSPACE_STOREFRONT_FOOTER_URL&&f(WORKSPACE_STOREFRONT_FOOTER_URL),"undefined"!=typeof WORKSPACE_STOREFRONT_LANDING_PAGE_URL&&f(WORKSPACE_STOREFRONT_LANDING_PAGE_URL),"undefined"!=typeof WORKSPACE_STOREFRONT_NAVIGATION_URL&&f(WORKSPACE_STOREFRONT_NAVIGATION_URL),"undefined"!=typeof WORKSPACE_SHARE_URL&&f(WORKSPACE_SHARE_URL),"#7795f7"),g={trace:!0,debug:"undefined"!=typeof LOG_DEBUG&&LOG_DEBUG,info:!1,warn:!0,error:!0,fatal:!0};function w(e,t){const n=void 0===t?g:{...g,...t},o=e?`${e} : `:"",r=`color:${p}`;return{trace:n.trace?(e,...t)=>{console.trace(`%c${o}${e}`,r,...t)}:(e,...t)=>{},debug:n.debug?(e,...t)=>{console.info(`%c${o}${e}`,"color:#86db94",...t)}:(e,...t)=>{},info:n.info?(e,...t)=>{console.debug(`%c${o}${e}`,"color:#ffffff",...t)}:(e,...t)=>{},warn:n.warn?(e,...t)=>{console.warn(`%c${o}${e}`,"color:#edad68",...t)}:(e,...t)=>{},error:n.error?(e,t,...n)=>{console.error(`%c${o}${e}`,"color:#f55d67",...n,t)}:(e,t,...n)=>{},fatal:n.fatal?(e,t,...n)=>{console.error(`%c${o}${e}`,"color:#f70723",...n,t)}:(e,t,...n)=>{}}}const h=w("utils.channels"),v=d&&"complete"!==document.readyState&&new Promise((e=>document.addEventListener("readystatechange",(()=>{"complete"===document.readyState&&e()}))));var y,m,S,R,P;!function(e){e.Workspace="openfin-browser"}(y||(y={})),function(e){e.ViewPageTitleUpdated="view-page-title-updated",e.ViewDestroyed="view-destroyed",e.ViewAttached="view-attached",e.RunRequested="run-requested",e.WindowOptionsChanged="window-options-changed",e.WindowClosed="window-closed",e.WindowCreated="window-created"}(m||(m={})),function(e){e.FinProtocol="fin-protocol"}(S||(S={})),y.Workspace,y.Workspace,function(e){e.Home="openfin-home",e.Dock="openfin-dock",e.Storefront="openfin-storefront",e.HomeInternal="openfin-home-internal",e.BrowserMenu="openfin-browser-menu",e.BrowserIndicator="openfin-browser-indicator",e.BrowserWindow="internal-generated-window"}(R||(R={})),function(e){e.Shown="shown",e.BoundsChanged="bounds-changed",e.LayoutReady="layout-ready",e.EndUserBoundsChanging="end-user-bounds-changing",e.Blurred="blurred",e.CloseRequested="close-requested",e.Focused="focused",e.ShowRequested="show-requested",e.ViewCrashed="view-crashed",e.ViewAttached="view-attached",e.ViewDetached="view-detached"}(P||(P={})),R.Home,y.Workspace,R.Dock,y.Workspace,R.Storefront,y.Workspace;const b={name:y.Workspace,uuid:y.Workspace},C=e=>function(e){if(!c)throw new Error("getOFWindow can only be used in an OpenFin env. Avoid calling this method during pre-rendering.");return fin.Window.wrapSync(e)}(e).getOptions().then((()=>!0)).catch((()=>!1));var O,A;(A=O||(O={})).LaunchApp="launch-app",A.CreateWorkspace="create-workspace",A.UpdateWorkspace="update-workspace",A.DeleteWorkspace="delete-workspace",A.LaunchWorkspace="launch-workspace",A.ShareWorkspace="share-workspace",A.GetWorkspace="get-workspace",A.GetWorkspaceList="get-workspace-list",A.GetActiveWorkspace="get-active-workspace",A.GetPage="get-page",A.CreatePage="create-page",A.UpdatePage="update-page",A.RenamePage="rename-page",A.DeletePage="delete-page",A.SharePage="share-page",A.LaunchPage="launch-page",A.AttachPagesToWindow="attach-pages-to-window",A.DetachPagesFromWindow="detach-pages-from-window",A.ReorderPagesForWindow="reorder-pages-for-window",A.SetActivePageForWindow="set-active-page-for-window",A.GetSavedPageList="get-saved-page-list",A.GetAttachedPageList="get-running-page-list",A.GetAllPageList="get-all-page-list",A.GetActivePageIdForWindow="get-active-page-id-for-window",A.GetPagesForWindow="get-pages-for-window",A.GetSavedPageMetadata="get-saved-page-metadata",A.RegisterStorefrontProvider="register-storefront-provider",A.DeregisterStorefrontProvider="deregister-storefront-provider",A.GetStorefrontProviders="get-storefront-providers",A.HideStorefront="hide-storefront",A.GetStorefrontProviderApps="get-storefront-provider-apps",A.GetStorefrontProviderLandingPage="get-storefront-provider-landing-page",A.GetStorefrontProviderFooter="get-storefront-provider-footer",A.GetStorefrontProviderNavigation="get-storefront-provider-navigation",A.LaunchStorefrontProviderApp="launch-storefront-provider-app",A.ShowStorefront="show-storefront",A.CreateStorefrontWindow="create-storefront-window",A.CreateBrowserWindow="create-browser-window",A.ShowHome="show-home",A.HideHome="hide-home",A.AssignHomeSearchContext="assign-home-search-context";const k=function(e){let t;return()=>{if(!c)throw new Error("getChannelClient cannot be used outside an OpenFin env. Avoid using this method during pre-rendering.");return t||(h.debug(`connecting to channel provider ${e}`),t=(async()=>{await v;const n=await fin.InterApplicationBus.Channel.connect(e);return n.onDisconnection((async()=>{h.warn(`disconnected from channel provider ${e}`),t=void 0})),n})().then((t=>(h.debug(`connected to channel provider ${e}`),t))).catch((t=>{h.error(`failed to connect to channel provider ${e}`,t)}))),t}}("__of_workspace_protocol__"),E=e=>{const t=new URL(e);return t.searchParams.append("isLaunchedViaLib",l.toString()),t.toString()},L=async()=>{if(!await C(b))return-1===navigator.userAgent.indexOf("Win")&&await fin.Application.startFromManifest(E("https://cdn.openfin.co/workspace/app.json")),fin.System.openUrlWithBrowser(E("fins://system-apps/workspace"))},I=async()=>(await L(),k()),W="home";var T,_;!function(e){e.Commands="home-commands",e.Workspaces="home-workspaces",e.Pages="home-pages"}(T||(T={})),function(e){e[e.Initial=0]="Initial",e[e.Open=1]="Open",e[e.Close=2]="Close"}(_||(_={}));const $="0",F="5",B="6",G=()=>{};function D(e,t){return e?`${e}-${t}`:t}function M(e){return`__search-${e}-topic__`}const x=new Map;function U(e,t){x.has(e)||x.set(e,new Set),x.get(e).add(t)}function N(e,t){const n=x.get(e);n&&n.delete(t)}const q=new Map;function H(e,t){q.has(e)||q.set(e,new Set),q.get(e).add(t)}function V(e,t){const n=q.get(e);n&&n.delete(t)}const K=new Map;function j(e,t){K.has(e)||K.set(e,new Map),K.get(e).set(t.id,t);const n=x.get(e);n&&n.forEach((e=>e()))}function z(e,t){const n=K.get(e);if(!n)return;n.delete(t);const o=q.get(e);o&&o.forEach((e=>e()))}function J(e){return K.get(e)?[...K.get(e).values()]:[]}function Q(e){const t=K.get(e);t&&t.clear()}function X(e,t){const n=K.get(e);return n?n.get(t):null}function Y(e,t,n){return{...e,action:n||e.actions[0],dispatcherIdentity:t}}function Z(e,t,n="ascending"){const o=e||[];if(!(null==t?void 0:t.length))return o;const r=[],i=new Map;t.forEach((e=>{if(e.key)return i.set(e.key,e);r.push(e)}));let s=o.map((e=>{const{key:t}=e;if(t&&i.has(t)){const e=i.get(t);return i.delete(t),e}return e}));return s.push(...i.values(),...r),s="ascending"===n?s.sort(((e,t)=>(null!==e.score&&void 0!==e.score?e.score:1/0)-(null!==t.score&&void 0!==t.score?t.score:1/0))):s.sort(((e,t)=>(null!==t.score&&void 0!==t.score?t.score:1/0)-(null!==e.score&&void 0!==e.score?e.score:1/0))),s}function ee(e){const t={};let n=[],o=[],r=_.Initial;t.getStatus=()=>r,t.getResultBuffer=()=>n,t.setResultBuffer=e=>{n=e,(null==n?void 0:n.length)&&t.onChange()},t.getRevokedBuffer=()=>o,t.setRevokedBuffer=e=>{o=e,(null==o?void 0:o.length)&&t.onChange()},t.onChange=G;const i={};return t.res=i,i.close=()=>{r!==_.Close&&(r=_.Close,t.onChange())},i.open=()=>{r!==_.Open&&(r=_.Open,t.onChange())},i.respond=n=>{const o=Z(t.getResultBuffer(),n,e);t.setResultBuffer(o)},i.revoke=(...e)=>{const n=new Set(e),o=t.getResultBuffer().filter((({key:e})=>{const t=n.has(e);return t&&n.delete(e),!t}));t.setResultBuffer(o),n.size&&(t.getRevokedBuffer().forEach((e=>n.add(e))),t.setRevokedBuffer([...n]))},t}function te(e,t,n){const o=new Set;let r=!1;return{close:()=>{r=!0;for(const e of o)e()},req:{id:t,topic:e,...n,context:(null==n?void 0:n.context)||{},onClose:e=>{o.add(e),r&&e()},removeListener:e=>{o.delete(e)}}}}function ne(){return{name:fin.me.name,uuid:fin.me.uuid}}function oe(){let e;try{const t=fin.Platform.getCurrentSync();if(!(null==t?void 0:t.identity))return;e=t.identity.uuid}catch(e){}return e}const re="deregistered or does not exist",ie=new Error(`provider ${re}`),se=new Error("provider with name already exists"),ae=new Error("bad payload"),ce=new Error("subscription rejected"),de=new Error(`channel ${re}`),ue=new Map;function le(e){const t=fe(e);if(t)return t;throw de}function fe(e){const t=ue.get(e);if(t)return t}function pe(e,t){ue.set(e,t)}function ge(e){console.error("OpenFin Search API: ",e)}const we=new Map;function he(e){we.has(e)||we.set(e,new Map);const t=we.get(e);return{getRequestsForIdentity:e=>{const n=function(e){return`${e.uuid}:${e.name}`}(e);return t.has(n)||t.set(n,new Map),t.get(n)}}}async function ve(e,t){return(await le(e)).dispatch($,t)}function ye({namespacedTopic:e,topic:t}){const n=X.bind(null,e),o=he(e),r=ve.bind(null,e);return async(e,i)=>{if(!e||!e.id||!e.providerId){const e=ae;return ge(e),{error:e.message}}const{id:s,providerId:a}=e,c=n(a);if(!c){const e=ie;return ge(e),{error:e.message}}const d=o.getRequestsForIdentity(i);let u=d.get(e.id);u||(u=te(t,s,e),d.set(e.id,u));const l=ee(),f=()=>{const e=l.getResultBuffer();l.setResultBuffer([]);const t=l.getRevokedBuffer();l.setRevokedBuffer([]);const n=l.getStatus();r({id:s,providerId:a,results:e,revoked:t,status:n})};let p=!0,g=!1;l.onChange=()=>{if(p)return p=!1,void f();g||(g=!0,setTimeout((()=>{g=!1,f()}),100))};try{const{results:e,context:t}=await c.onUserInput(u.req,l.res),n=l.getStatus();return{id:s,providerId:a,status:n,results:e,context:t}}catch(e){return ge(e),{id:s,providerId:a,error:e.message}}}}async function me(e,t,n){const o=n||await le(e),r=ne(),i={identity:r,...t,onUserInput:void 0,onResultDispatch:void 0};await o.dispatch("2",i),j(e,{identity:r,...t})}async function Se(e,t){const n=await le(e);return await n.dispatch("3",t),z(e,t)}async function Re(e,t,n,o){const r=Y(n,ne(),o),i=X(e,t);if(i){const{onResultDispatch:e}=i;if(!e)return;return e(r)}const s={providerId:t,result:r};return(await le(e)).dispatch(F,s)}async function Pe(e,t){const n={...t,context:(null==t?void 0:t.context)||{}},o={},r=async function*(e,t,{setState:n}){const o=await le(e);for(;;){const e=await o.dispatch("1",t),r=e.error;if(r)throw new Error(r);const i=e;if(t.id=i.id,n(i.state),i.done)return i.value;yield i.value}}(e,n,{setState:e=>{o.state=e}});let i=await r.next();return o.id=n.id,o.close=()=>{!async function(e,t){(await le(e)).dispatch(B,{id:t})}(e,o.id)},o.next=()=>{if(i){const e=i;return i=void 0,e}return r.next()},o}async function be(e){return(await le(e)).dispatch("4",null)}async function Ce(e){const t=await le(e);var n;n=e,ue.delete(n),Q(e),await t.disconnect()}async function Oe(e){const{namespacedTopic:t}=e,n=M(t),o=await async function(e){for(let t=0;t<50;t++)try{return await fin.InterApplicationBus.Channel.connect(e,{wait:!1})}catch(e){if(49===t)throw e;await new Promise((e=>setTimeout(e,1e3)))}}(n);return o.register($,ye(e)),o.register(B,function(e){const t=he(e);return(e,n)=>{const o=t.getRequestsForIdentity(n),r=o.get(e.id);r&&(r.close(),o.delete(e.id))}}(t)),o.register(F,function(e){return async(t,n)=>{if(!t||!t.providerId||!t.result)return void ge(ae);const o=X(e,t.providerId);if(!o)return void ge(ie);const{onResultDispatch:r}=o;return r?(t.result.dispatcherIdentity=n,r(t.result)):void 0}}(t)),o.onDisconnection(function(e){const{namespacedTopic:t}=e,n=he(t);return async o=>{if(!fe(t))return;const r=n.getRequestsForIdentity(o);for(const{req:e,close:t}of r.values())t(),r.delete(e.id);pe(t,(async e=>{const{namespacedTopic:t}=e,n=await Oe(e);for(const e of J(t))await me(t,e,n);return n})(e))}}(e)),o}async function Ae(e){const t=("string"==typeof e?e:null==e?void 0:e.topic)||"all",n=("string"==typeof e?null:null==e?void 0:e.uuid)||oe(),o=D(n,t),r={topic:t,namespace:n,namespacedTopic:o};let i=fe(o);return i||(i=Oe(r),pe(o,i),await i),{getAllProviders:be.bind(null,o),register:me.bind(null,o),search:Pe.bind(null,o),deregister:Se.bind(null,o),dispatch:Re.bind(null,o),disconnect:Ce.bind(null,o)}}const ke=new Map;function Ee(e){const t=Le(e);if(t)return t;throw de}function Le(e){const t=ke.get(e);if(t)return t}const Ie=new Map;function We(e,t){Ie.has(e)||Ie.set(e,new Set),Ie.get(e).add(t)}function Te(e,t){const n=Ie.get(e);n&&n.delete(t)}var _e,$e;function Fe(e){return[...J(e)].map((e=>({...e,onUserInput:void 0,onResultDispatch:void 0})))}function Be(e,t){if(X(e,t.id))throw new Error("provider with name already exists");j(e,{identity:ne(),...t})}function Ge(e,t){z(e,t)}async function De(e,t,n,o){const r=X(e,t);if(!r)throw ie;const{onResultDispatch:i}=r;if(i)return i(Y(n,ne(),o))}!function(e){e.Fetching="fetching",e.Fetched="fetched",e.Complete="complete"}(_e||(_e={})),function(e){e.Active="active",e.Default="default"}($e||($e={}));let Me=0;function xe({namespacedTopic:e,topic:t},n){Me+=1;const o=te(t,Me.toString(),n);let r;return r=async function*(e,t,n){const o=function(e,t){const n=[],o=[],r=[],i=[];for(const s of e){const e=ee(s.scoreOrder),a={results:[],provider:{id:s.id,identity:s.identity,title:s.title,scoreOrder:s.scoreOrder,icon:s.icon}};n.push(a),o.push(e);const c=(async()=>{try{const{results:n,context:o}=await s.onUserInput(t,e.res);a.results=Z(a.results,n),a.context={...a.context,...o}}catch(e){a.error=e}c.done=!0})();i.push(c),r.push(r.length)}return{providerResponses:n,listenerResponses:o,openListenerResponses:r,initialResponsePromises:i}}(t.targets?t.targets.map((t=>X(e,t))).filter((e=>!!e)):[...J(e).filter((e=>!e.hidden))],t),{providerResponses:r,listenerResponses:i}=o;let{openListenerResponses:s,initialResponsePromises:a}=o,c=_e.Fetching;const d=e=>{c=e,n.setState(c)};let u,l=!1;t.onClose((()=>{l=!0,u&&u()}));do{let e=!1;if(a.length){const t=[];for(const n of a)n.done?e=!0:t.push(n);a=t,a.length||(d(_e.Fetched),e=!0)}let t,n=!1;const o=()=>{n=!0,t&&t()},f=[];for(const t of s){const n=i[t],s=r[t],a=n.getStatus();(a===_.Open||c===_e.Fetching&&a===_.Initial)&&(f.push(t),n.onChange=o);const d=n.getResultBuffer();d.length&&(n.setResultBuffer([]),s.results=Z(s.results,d),e=!0);const u=n.getRevokedBuffer();if(u.length){n.setRevokedBuffer([]);const t=new Set(u);s.results=s.results.filter((({key:e})=>!t.has(e))),e=!0}}if(s=f,e&&(yield r),l)break;n||(s.length||a.length)&&await Promise.race([...a,new Promise((e=>{t=e})),new Promise((e=>{u=e}))])}while(s.length||a.length);return d(_e.Complete),r}(e,o.req,{setState:e=>{r.state=e}}),r.id=Me.toString(),r.close=o.close,r.state=_e.Fetching,r}const Ue=new Map;function Ne(e,t){return`${e}:${t}`}function qe(e,t,n){return Ee(e).dispatch(t,B,{id:n})}async function He(e,t,{id:n,query:o,context:r,targets:i}){const s=Ee(e),a={id:n,query:o,context:r,targets:i,providerId:t.id},c=await s.dispatch(t.identity,$,a),d=c.error;if(d)throw new Error(d);return c}const Ve=new Map;function Ke(e,t,n){return`${e}:${t.name}:${t.uuid}:${n}`}const je=new Map;function ze(e,t,n){return`${e}:${t}:${n}`}function Je(e,t){const n=Ke.bind(null,e,t.identity),o=qe.bind(null,e,t.identity),r=He.bind(null,e,t);return async(i,s)=>{const a=n(i.id);if(!Ve.has(a)){const e=()=>{o(i.id),Ve.delete(a)};Ve.set(a,e),i.onClose(e)}const c=ze(e,t.id,i.id),d=()=>{je.delete(c),s.close()};i.onClose(d),je.set(c,(e=>{var t,n;(null===(t=e.results)||void 0===t?void 0:t.length)&&s.respond(e.results),(null===(n=e.revoked)||void 0===n?void 0:n.length)&&s.revoke(...e.revoked),e.status===_.Open&&s.open(),e.status===_.Close&&d()}));const u=await r(i);return u.status===_.Open&&s.open(),u.status!==_.Close&&u.status!==_.Initial||d(),u}}function Qe(e,t){return async n=>{const o=Ee(e),r={providerId:t.id,result:n};return o.dispatch(t.identity,F,r)}}const Xe=new Map;function Ye(e,t){return`${e}-${t.name}-${t.uuid}`}const Ze=new Map;function et(e,t){Ze.has(e)||Ze.set(e,new Set),Ze.get(e).add(t)}function tt(e,t){const n=Ze.get(e);n&&n.delete(t)}async function nt(e){const{namespacedTopic:t}=e,n=M(e.namespacedTopic),o=await(r=n,fin.InterApplicationBus.Channel.create(r));var r;return o.onConnection(function({namespacedTopic:e}){return async t=>{const n=Ie.get(e);if(n)for(const e of n)if(!await e(t))throw ce}}(e)),o.onDisconnection(function(e){return async t=>{!function(e,t){const n=Ye(e,t),o=Xe.get(n);if(o){for(const t of o)z(e,t);Xe.delete(n)}}(e,t);const n=Ze.get(e);n&&n.forEach((e=>e(t)))}}(t)),o.register(B,function(e){return t=>function(e,t){const n=Ne(e,t),o=Ue.get(n);o&&o.generator.close()}(e,t.id)}(t)),o.register($,function(e){return t=>{const n=ze(e,t.providerId,t.id),o=je.get(n);o&&o(t)}}(t)),o.register("2",function(e){return(t,n)=>{if(t&&t.id){if(X(e,t.id))throw se;t.identity=n,function(e,t){const n=Ye(e,t.identity);Xe.has(n)||Xe.set(n,[]),Xe.get(n).push(t.id),j(e,{...t,onUserInput:Je(e,t),onResultDispatch:Qe(e,t)})}(e,t)}else ge(ae)}}(t)),o.register("3",function(e){return t=>{t?function(e,t){const n=X(e,t);if(!n)return;const o=Ye(e,n.identity),r=Xe.get(o);if(r){const n=r.findIndex((e=>e===t));-1!==n&&(r.splice(n,1),z(e,t))}}(e,t):ge(ae)}}(t)),o.register("4",function(e){return async()=>Fe(e)}(t)),o.register("1",function(e){return async t=>{if(!t)return ge(ae),{error:ae.message};let n;if(t.id)n=Ne(e.namespacedTopic,t.id);else{const o=xe(e,t);n=Ne(e.namespacedTopic,o.id),t.id=o.id,Ue.set(n,{generator:o})}const o=Ue.get(n);clearTimeout(o.timeout);const r=await o.generator.next();return o.timeout=function(e){return window.setTimeout((()=>{Ue.delete(e)}),1e4)}(n),{...r,id:t.id,state:o.generator.state}}}(e)),o.register(F,function(e){return async(t,n)=>{if(!t||!t.providerId||!t.result)return void ge(ae);const o=X(e,t.providerId);if(!o)throw ie;const{onResultDispatch:r}=o;return r?(t.result.dispatcherIdentity=n,r(t.result)):void 0}}(t)),o}async function ot(e){const t=Ee(e);var n;n=e,ke.delete(n),await t.destroy(),Q(e)}async function rt(e){const t=("string"==typeof e?e:null==e?void 0:e.topic)||"all",n=oe(),o=D(n,t),r={topic:t,namespace:n,namespacedTopic:o};let i=Le(o);i||(i=await nt(r),function(e,t){ke.set(e,t)}(o,i));const s=Te.bind(null,o),a=tt.bind(null,o),c=N.bind(null,o),d=V.bind(null,o);return{getAllProviders:Fe.bind(null,o),search:xe.bind(null,r),register:Be.bind(null,o),deregister:Ge.bind(null,o),onSubscription:We.bind(null,o),onDisconnect:et.bind(null,o),onRegister:U.bind(null,o),onDeregister:H.bind(null,o),dispatch:De.bind(null,r),disconnect:ot.bind(null,o),removeListener:e=>{s(e),a(e),c(e),d(e)}}}const{create:it}=o,{subscribe:st}=n,at={create:it,subscribe:st,defaultTopic:"all"},ct=()=>{const e=window;e.search=at,e.fin&&(e.fin.Search=at)},dt=e=>{const t=()=>{ct(),window.removeEventListener(e,t)};return t};if("undefined"!=typeof window){ct();const e="load",t=dt(e);window.addEventListener(e,t);const n="DOMContentLoaded",o=dt(n);window.addEventListener(n,o)}w("api.common.search");const ut=new Map;let lt;async function ft(e){return await async function(){return lt||(lt=async function(){await async function(e){ut.set(e,await st({topic:e,uuid:y.Workspace}))}(W)}()),lt}(),ut.get(e)}const pt=async e=>{if(!e.icon)throw new Error(`${e.id} provider needs to have icon property defined.`);return await L(),(await ft(W)).register(e)},gt=async e=>(await L(),(await ft(W)).deregister(e));async function wt(){return(await I()).dispatch(O.ShowHome,void 0)}async function ht(){return(await I()).dispatch(O.HideHome,void 0)}var vt,yt,mt,St,Rt,Pt;let bt;!function(e){e.Snapshot="snapshot",e.Manifest="manifest",e.View="view",e.External="external"}(vt||(vt={})),(Pt=yt||(yt={})).LandingPage="landingPage",Pt.AppGrid="appGrid",function(e){e.Suggestion="suggestion"}(mt||(mt={})),function(e){e.Contact="Contact",e.List="List",e.Plain="Plain",e.SimpleText="SimpleText"}(St||(St={})),function(e){e.MultiSelect="MultiSelect"}(Rt||(Rt={}));const Ct=new Map;let Ot=!1;const At=e=>{if(!Ct.has(e))throw new Error(`Storefront Provider with id ${e} is not registered`);return Ct.get(e)},kt=e=>(bt=(async e=>{const t=await I();if(Ct.has(e.id))throw new Error(`Storefront provider with id ${e.id} already registered`);return Ct.set(e.id,e),(e=>{Ot||(Ot=!0,e.register(O.GetStorefrontProviderApps,(e=>At(e).getApps())),e.register(O.GetStorefrontProviderFooter,(e=>At(e).getFooter())),e.register(O.GetStorefrontProviderLandingPage,(e=>At(e).getLandingPage())),e.register(O.GetStorefrontProviderNavigation,(e=>At(e).getNavigation())),e.register(O.LaunchStorefrontProviderApp,(({id:e,app:t})=>At(e).launchApp(t))))})(t),t.dispatch(O.RegisterStorefrontProvider,e)})(e),bt),Et=async e=>(await bt,Ct.delete(e),(await I()).dispatch(O.DeregisterStorefrontProvider,e)),Lt=async()=>{await bt,await L(),await(async()=>(await k()).dispatch(O.HideStorefront,void 0))()},It=async()=>{await bt,await L(),await(async()=>(await k()).dispatch(O.ShowStorefront,null))()},Wt=async e=>(await I()).dispatch(O.LaunchApp,{app:e}),Tt=a,_t=r;module.exports=t})();
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./client/src/apps.ts":
/*!****************************!*\
  !*** ./client/src/apps.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getApps": () => (/* binding */ getApps),
/* harmony export */   "experoApp": () => (/* binding */ experoApp),
/* harmony export */   "notificationStudio": () => (/* binding */ notificationStudio),
/* harmony export */   "processManager": () => (/* binding */ processManager),
/* harmony export */   "developerContent": () => (/* binding */ developerContent)
/* harmony export */ });
async function getApps() {
    return [experoApp, notificationStudio, processManager, developerContent];
}
const experoApp = {
    appId: "expero-company-news",
    title: "Gateway - Company News",
    manifest: "https://openfin-iex.experolabs.com/openfin/manifests/company-news.json",
    manifestType: "view",
    icons: [
        {
            src: "https://openfin-iex.experolabs.com/favicon.ico"
        }
    ],
    contactEmail: "contact@example.com",
    supportEmail: "support@example.com",
    publisher: "Expero",
    intents: [],
    images: [{
            src: "http://localhost:8080/images/previews/expero-news-view.png"
        }],
    tags: ["expero", "view", "interop"]
};
const notificationStudio = {
    appId: "notifications-generator",
    title: "OpenFin Notifications Studio",
    manifestType: "manifest",
    description: "Notifications Studio: This is OpenFin's tool for demonstrating the power of our Notification Center. Use it to create local notifications or use some of the examples shown in our Catalog. Experiment with our features and see the power that OpenFin Notification Center can bring to your applications.",
    manifest: "https://cdn.openfin.co/studio/notification/app.json",
    icons: [
        { src: "https://cdn.openfin.co/demos/notifications/generator/images/icon-blue.png" }
    ],
    contactEmail: "contact@example.com",
    supportEmail: "support@example.com",
    publisher: "OpenFin",
    intents: [],
    images: [{
            src: "http://localhost:8080/images/previews/openfin-notification-studio.png"
        }],
    tags: ["hero", "manifest", "tools"]
};
const processManager = {
    appId: "openfin-process-manager",
    title: "OpenFin Process Manager",
    manifestType: "manifest",
    description: "Process Manager: This is OpenFin's tool for helping developers build OpenFin Applications. It lets you see the OpenFin applications that are running, the performance of the applications (memory and cpu) and easy access to the dev tools for the Windows of your application.",
    manifest: "https://cdn.openfin.co/process-manager/app.json",
    icons: [
        { src: "https://cdn.openfin.co/process-manager/img/proc-mgr-icon.png" }
    ],
    contactEmail: "contact@example.com",
    supportEmail: "support@example.com",
    publisher: "OpenFin",
    intents: [],
    images: [{
            src: "http://localhost:8080/images/previews/openfin-process-manager.png"
        }],
    tags: ["hero", "manifest", "tools"]
};
const developerContent = {
    appId: "openfin-developer-page",
    title: "OpenFin Developer Docs",
    manifestType: "snapshot",
    description: "Shows a collection of OpenFin developer pages and provides an example of how you can present a pre-built page as a launch target in OpenFin Home. This entry has a manifest type of 'snapshot'.",
    manifest: "http://localhost:8080/snapshot.json",
    icons: [
        { src: "http://localhost:8080/images/icon-blue.png" }
    ],
    contactEmail: "contact@example.com",
    supportEmail: "support@example.com",
    publisher: "OpenFin",
    intents: [],
    images: [{
            src: "http://localhost:8080/images/previews/openfin-page-docs.png"
        }],
    tags: ["page"]
};


/***/ }),

/***/ "./client/src/home.ts":
/*!****************************!*\
  !*** ./client/src/home.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "register": () => (/* binding */ register),
/* harmony export */   "deregister": () => (/* binding */ deregister),
/* harmony export */   "show": () => (/* binding */ show),
/* harmony export */   "hide": () => (/* binding */ hide)
/* harmony export */ });
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openfin/workspace */ "./node_modules/@openfin/workspace/index.js");
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_openfin_workspace__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _apps__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./apps */ "./client/src/apps.ts");


const providerId = "register-with-home-basic";
async function getResults(query) {
    let apps = await (0,_apps__WEBPACK_IMPORTED_MODULE_1__.getApps)();
    if (Array.isArray(apps)) {
        let initialResults = [];
        for (let i = 0; i < apps.length; i++) {
            if (apps[i].description !== undefined) {
                let entry = {
                    key: apps[i].appId,
                    title: apps[i].title,
                    actions: [{ name: "launch-app", hotkey: 'enter' }],
                    data: apps[i],
                    description: apps[i].description,
                    shortDescription: apps[i].description,
                    template: "SimpleText",
                    templateContent: apps[i].description,
                };
                initialResults.push(entry);
            }
            else {
                let entry = {
                    key: apps[i].appId,
                    title: apps[i].title,
                    actions: [{ name: "launch-app", hotkey: 'enter' }],
                    data: apps[i],
                    template: "Plain"
                };
                initialResults.push(entry);
            }
        }
        let finalResults;
        if (query === undefined || query === null || query.length === 0) {
            finalResults = initialResults;
        }
        else {
            finalResults = initialResults.filter(entry => {
                let targetValue = entry.title;
                if (targetValue !== undefined && targetValue !== null && typeof targetValue === "string") {
                    return targetValue.toLowerCase().indexOf(query) > -1;
                }
                return false;
            });
        }
        let response = {
            results: finalResults
        };
        return response;
    }
    else {
        return {
            results: []
        };
    }
}
async function register() {
    console.log("Initialising home.");
    const queryMinLength = 3;
    const onUserInput = async (request, response) => {
        let query = request.query.toLowerCase();
        if (query.indexOf("/") === 0) {
            return { results: [] };
        }
        if (query.length < queryMinLength) {
            return getResults();
        }
        return getResults(query);
    };
    const onSelection = async (result) => {
        if (result.data !== undefined) {
            await (0,_openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.launchApp)(result.data);
        }
        else {
            console.warn("Unable to execute result without data being passed");
        }
    };
    const cliProvider = {
        title: "Basic Workspace Platform",
        id: providerId,
        icon: "http://localhost:8080/favicon.ico",
        onUserInput: onUserInput,
        onResultDispatch: onSelection,
    };
    console.log("Home configured.");
    return _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.Home.register(cliProvider);
}
async function deregister() {
    return _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.Home.deregister(providerId);
}
async function show() {
    return _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.Home.show();
}
async function hide() {
    return _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.Home.hide();
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!********************************!*\
  !*** ./client/src/provider.ts ***!
  \********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _home__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./home */ "./client/src/home.ts");

async function init() {
    let registerHome = document.getElementById("register");
    let deregisterHome = document.getElementById("deregister");
    let showHome = document.getElementById("show");
    let hideHome = document.getElementById("hide");
    registerHome.onclick = async () => {
        await (0,_home__WEBPACK_IMPORTED_MODULE_0__.register)();
        showHome.style.display = "unset";
        hideHome.style.display = "unset";
        deregisterHome.style.display = "unset";
        registerHome.style.display = "none";
    };
    deregisterHome.onclick = async () => {
        showHome.style.display = "none";
        hideHome.style.display = "none";
        deregisterHome.style.display = "none";
        registerHome.style.display = "unset";
        await (0,_home__WEBPACK_IMPORTED_MODULE_0__.deregister)();
    };
    showHome.onclick = async () => {
        await (0,_home__WEBPACK_IMPORTED_MODULE_0__.show)();
    };
    hideHome.onclick = async () => {
        await (0,_home__WEBPACK_IMPORTED_MODULE_0__.hide)();
    };
}
window.addEventListener('DOMContentLoaded', async () => {
    await init();
});

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,