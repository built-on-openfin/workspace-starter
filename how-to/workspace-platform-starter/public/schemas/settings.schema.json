{
    "$ref": "#/definitions/CustomSettings",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "ActionConnection": {
            "additionalProperties": false,
            "description": "Specific type for an action connection.",
            "properties": {
                "supportedActions": {
                    "description": "If you want to provide a different set of available actions to a specific connection then you can do so here.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "The actions connection type allows connections to execute a list of actions that the platform will carry out e.g.\nshow-home",
                    "enum": [
                        "actions"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "ActionsProviderOptions": {
            "$ref": "#/definitions/ModuleList_3",
            "description": "List of modules."
        },
        "AnalyticsProviderOptions": {
            "$ref": "#/definitions/ModuleList_6",
            "description": "List of modules."
        },
        "Api": {
            "$ref": "#/definitions/__type_14"
        },
        "AppAssetInfo": {
            "$ref": "#/definitions/__type_40"
        },
        "AppEndpointOptions": {
            "anyOf": [
                {
                    "additionalProperties": false,
                    "properties": {
                        "inputId": {
                            "type": "string"
                        },
                        "outputId": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "inputId"
                    ],
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Application endpoint which can be a string, or a mapping."
        },
        "AppIntent": {
            "additionalProperties": false,
            "properties": {
                "contexts": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "displayName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "contexts",
                "displayName",
                "name"
            ],
            "type": "object"
        },
        "AppIntents": {
            "additionalProperties": false,
            "description": "Application intents.",
            "properties": {
                "contexts": {
                    "description": "Required. A comma separated list of the types of contexts the intent offered by the application can process,\nwhere the first part of the context type is the namespace e.g.\"fdc3.contact, org.companyname.contact\"",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "customConfig": {
                    "additionalProperties": {},
                    "description": "Custom configuration for the intent that may be required for a particular desktop agent.",
                    "type": "object"
                },
                "displayName": {
                    "description": "An optional display name for the intent that may be used in UI instead of the name.",
                    "type": "string"
                },
                "resultType": {
                    "description": "An optional type for output returned by the application, if any, when resolving this intent. May indicate a\ncontext type by type name (e.g. \"fdc3.instrument\"), a channel (e.g. \"channel\") or a combination that indicates a\nchannel that returns a particular context type (e.g. \"channel<fdc3.instrument>\").",
                    "type": "string"
                }
            },
            "required": [
                "contexts"
            ],
            "type": "object"
        },
        "AppInterop": {
            "additionalProperties": false,
            "description": "Application interop.",
            "properties": {
                "appChannels": {
                    "description": "Describes the application's use of App Channels.",
                    "items": {
                        "additionalProperties": false,
                        "properties": {
                            "broadcasts": {
                                "description": "Context type names that are broadcast by the application on the channel.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "description": {
                                "description": "A description of how the channel is used.",
                                "type": "string"
                            },
                            "listensFor": {
                                "description": "Context type names that the application listens for on the channel.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "name": {
                                "description": "The name of the App Channel.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "intents": {
                    "additionalProperties": false,
                    "description": "Describes the app's interactions with intents.",
                    "properties": {
                        "listensFor": {
                            "additionalProperties": {
                                "$ref": "#/definitions/AppIntents"
                            },
                            "description": "A mapping of Intents names that an app listens for via fdc3.addIntentListener() or\nfin.me.interop.registerIntentHandler. Used to support intent resolution by the interop broker. Replaces the\nintents array used previously.",
                            "type": "object"
                        },
                        "raises": {
                            "additionalProperties": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "description": "A mapping of Intent names that an app raises (via fdc3.raiseIntent) to an array of context type names that it\nmay be raised with. Use the intent name \"any\" to represent use of the fdc3.raiseIntentForContext and\nfdc3.findIntentForContext functions, which allow the user to select from intents available for a specified\ncontext type.",
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "userChannels": {
                    "additionalProperties": false,
                    "description": "Describes the application's use of context types on User Channels.",
                    "properties": {
                        "broadcasts": {
                            "description": "Context type names that are broadcast by the application.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "listensFor": {
                            "description": "Context type names that the application listens for.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "AppProviderOptions": {
            "additionalProperties": false,
            "description": "App Provider settings to configure where apps are fetched from.",
            "properties": {
                "appsSourceUrl": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Legacy - Where should we fetch the apps from. It is a url or an array of urls from which to get apps data from.\nIf present it will be used instead of endpointIds."
                },
                "cacheDurationInMinutes": {
                    "description": "Once all apps are fetched and processed from the one or more sources specified, how long should the result be\ncached for in minutes (can be used with the seconds setting).",
                    "type": "number"
                },
                "cacheDurationInSeconds": {
                    "description": "Once all apps are fetched and processed from the one or more sources specified, how long should the result be\ncached for in seconds (can be used on it's own or in addition to the minutes setting).",
                    "type": "number"
                },
                "endpointIds": {
                    "description": "An array of endpoints that should be used to request a list of apps. The array entry can be a string\n(representing the array id) or an object with an inputId that maps to an endpoint id and gets passed to the\nendpoint specified using the outputId (this is useful for mapping apps from one format to another)",
                    "items": {
                        "$ref": "#/definitions/AppEndpointOptions"
                    },
                    "type": "array"
                },
                "includeCredentialOnSourceRequest": {
                    "description": "Legacy - Used when appsSourceUrl is used. This is specified as part of the options of the fetch request.",
                    "enum": [
                        "include",
                        "omit",
                        "same-origin"
                    ],
                    "type": "string"
                },
                "manifestTypes": {
                    "description": "The specified app sources may include apps of many different manifest types. Which manifest types do you want\nyour platform to support (only the ones listed will be included in the end result).",
                    "items": {
                        "$ref": "#/definitions/ManifestTypeId"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AppSourceConnection": {
            "additionalProperties": false,
            "description": "Specific type for an app source connection.",
            "properties": {
                "manifestTypes": {
                    "description": "If a connection is allowed to provide apps do you wish to limit the manifest types they can provide you with. The\nconnection type must be supported if it is an app entry where the selection should go back to the connection.",
                    "items": {
                        "$ref": "#/definitions/ManifestTypeId"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "The appSource connection type allows connections to provide a list of apps that can show up in home and the\nstore. Apps with manifest type id connection will be send back to the connection on selection (e.g. a child view)",
                    "enum": [
                        "appSource"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "ApplicationIdentity": {
            "$ref": "#/definitions/__type_29"
        },
        "Array": {
            "items": {
                "anyOf": [
                    {
                        "$ref": "#/definitions/LayoutItemConfig",
                        "description": "Represents the arrangement of Views within a Platform window's Layout.  We do not recommend trying\nto build Layouts or LayoutItems by hand and instead use calls such as {@link Platform#getSnapshot getSnapshot} or our\n{@link https://openfin.github.io/golden-prototype/config-gen Layout Config Generation Tool}.."
                    },
                    {
                        "$ref": "#/definitions/LayoutRow"
                    },
                    {
                        "$ref": "#/definitions/LayoutColumn"
                    },
                    {
                        "$ref": "#/definitions/LayoutComponent"
                    }
                ]
            },
            "type": "array"
        },
        "Array_1": {
            "items": {
                "$ref": "#/definitions/PrebuiltContextMenuItem"
            },
            "type": "array"
        },
        "Array_2": {
            "description": "List of extended custom themes.",
            "items": {
                "$ref": "#/definitions/PlatformCustomTheme"
            },
            "type": "array"
        },
        "AuthProviderOptions": {
            "$ref": "#/definitions/ModuleList",
            "description": "List of modules."
        },
        "AutoResizeOptions": {
            "$ref": "#/definitions/__type_24"
        },
        "AutoplayPolicyOptions": {
            "description": "Autoplay policy to apply to content in the window, can be\n`no-user-gesture-required`, `user-gesture-required`,\n`document-user-activation-required`. Defaults to `no-user-gesture-required`.",
            "enum": [
                "document-user-activation-required",
                "no-user-gesture-required",
                "user-gesture-required"
            ],
            "type": "string"
        },
        "BaseEndpointDefinition.O": {
            "$ref": "#/definitions/FetchOptions",
            "description": "Options for fetching"
        },
        "BaseEndpointDefinition.O_1": {},
        "BootstrapComponents": {
            "description": "The components that can be bootstrapped.",
            "enum": [
                "dock",
                "home",
                "none",
                "store"
            ],
            "type": "string"
        },
        "BootstrapOptions": {
            "additionalProperties": false,
            "description": "Bootstrap provider options.",
            "properties": {
                "autoShow": {
                    "description": "Which components should auto show after the bootstrapping process. As home vanishes on blur we suggest adding\nhome last if you wish it to show.",
                    "items": {
                        "$ref": "#/definitions/BootstrapComponents"
                    },
                    "type": "array"
                },
                "autostartApps": {
                    "description": "Should the platform launch one or more apps at the end of the bootstrapping process if they have declared\nautostart as true in their metadata? Default behavior is true.",
                    "type": "boolean"
                },
                "dock": {
                    "description": "Should the platform register against the dock component?",
                    "type": "boolean"
                },
                "home": {
                    "description": "Should the platform register against the home component?",
                    "type": "boolean"
                },
                "notifications": {
                    "description": "Should the platform register itself against the notification center and have a platform specific tab show up?",
                    "type": "boolean"
                },
                "store": {
                    "description": "Should the platform register against the store component?",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Bounds": {
            "$ref": "#/definitions/__type_23"
        },
        "BrokerConnection": {
            "additionalProperties": false,
            "description": "Specific type for a broker connection.",
            "properties": {
                "type": {
                    "description": "The broker connection type allows connections to connect to our broker in order to react to context sharing.",
                    "enum": [
                        "broker"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "BrowserButtonType": {
            "description": "Types of buttons on browser windows",
            "enum": [
                "Close",
                "ColorLinking",
                "Custom",
                "LockUnlockPage",
                "Maximise",
                "Minimise",
                "PresetLayouts",
                "SaveMenu",
                "SavePage",
                "ShowHideTabs"
            ],
            "type": "string"
        },
        "BrowserButtonType.Custom": {
            "enum": [
                "Custom"
            ],
            "type": "string"
        },
        "BrowserButtonType.LockUnlockPage": {
            "enum": [
                "LockUnlockPage"
            ],
            "type": "string"
        },
        "BrowserButtonType.ShowHideTabs": {
            "enum": [
                "ShowHideTabs"
            ],
            "type": "string"
        },
        "BrowserProviderOptions": {
            "additionalProperties": false,
            "description": "Browser Provider Options includes the default window/page and view options.",
            "properties": {
                "defaultPageOptions": {
                    "$ref": "#/definitions/Pick",
                    "description": "Default options when creating a new page. If `iconUrl`, `unsavedIconUrl`, `panels` or `closeButton` are not defined when creating a page, setting will default to `defaultPageOptions`."
                },
                "defaultViewOptions": {
                    "$ref": "#/definitions/ViewOptions",
                    "description": "The default options when creating a new browser window. Any option not included in WorkspacePlatform.getCurrentSync().Browser.createView(options) call will default to the value provided in this field."
                },
                "defaultWindowOptions": {
                    "$ref": "#/definitions/Partial",
                    "description": "Default options for creating a new browser window. Any option not included in WorkspacePlatform.getCurrentSync().Browser.createWindow(options) call will default to the value provided in this field."
                },
                "globalMenu": {
                    "description": "This setting lets you customize the default workspace browser main menu and specify your own.",
                    "items": {
                        "$ref": "#/definitions/MenuEntry<GlobalContextMenuOptionType>"
                    },
                    "type": "array"
                },
                "menuOptions": {
                    "additionalProperties": false,
                    "description": "This setting lets you configure options related to the menus shown in the browser.",
                    "properties": {
                        "includeDefaults": {
                            "additionalProperties": false,
                            "description": "Should the workspace default options be included or do you want to be specific about what should show in the\nmenu.",
                            "properties": {
                                "globalMenu": {
                                    "description": "Should we include all the default options for the global menu? Default is true.",
                                    "type": "boolean"
                                },
                                "pageMenu": {
                                    "description": "Should we include all the default options for the page menu? Default is true.",
                                    "type": "boolean"
                                },
                                "viewMenu": {
                                    "description": "Should we include all the default options for the view menu? Default is true.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "pageMenu": {
                    "description": "This setting lets you customize the page right click context menu and add your own entries.",
                    "items": {
                        "$ref": "#/definitions/MenuEntry<PageTabContextMenuOptionType>"
                    },
                    "type": "array"
                },
                "toolbarButtons": {
                    "description": "This setting lets you override the default workspace browser buttons and specify your own.",
                    "items": {
                        "$ref": "#/definitions/WorkspacePlatformToolbarButton"
                    },
                    "type": "array"
                },
                "viewMenu": {
                    "description": "This setting lets you customize the view right click context menu and add your own entries.",
                    "items": {
                        "$ref": "#/definitions/MenuEntry<ViewTabMenuOptionType>"
                    },
                    "type": "array"
                },
                "windowOptions": {
                    "additionalProperties": false,
                    "description": "deprecated use `defaultWindowOptions` instead to specify settings that will apply to all workspace browser\nwindows",
                    "properties": {
                        "icon": {
                            "description": "deprecated use `defaultWindowOptions.icon` instead.",
                            "type": "string"
                        },
                        "newPageUrl": {
                            "description": "deprecated use `defaultWindowOptions.workspacePlatform.newPageUrl` instead.",
                            "type": "string"
                        },
                        "newTabUrl": {
                            "description": "deprecated use `defaultWindowOptions.workspacePlatform.newTabUrl` instead.",
                            "type": "string"
                        },
                        "title": {
                            "description": "deprecated use `defaultWindowOptions.workspacePlatform.title` instead.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "windowPositioningStrategy": {
                    "$ref": "#/definitions/CascadingWindowOffsetStrategy",
                    "description": "The strategy for window positioning."
                }
            },
            "type": "object"
        },
        "CascadingWindowOffsetStrategy": {
            "additionalProperties": false,
            "description": "The cascading window strategy for positioning new windows.",
            "properties": {
                "maxIncrements": {
                    "description": "The maximum number increment, before resetting to start, defaults to 8.",
                    "type": "number"
                },
                "x": {
                    "description": "The x offset to increment by for each new window, defaults to 30.",
                    "type": "number"
                },
                "y": {
                    "description": "The y offset to increment by for each new window, defaults to 30.",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "CertificationInfo": {
            "$ref": "#/definitions/__type_39"
        },
        "ColorSchemeOption": {
            "enum": [
                "dark",
                "light",
                "system"
            ],
            "type": "string"
        },
        "ConditionsProviderOptions": {
            "$ref": "#/definitions/ModuleList_4",
            "description": "List of modules."
        },
        "Connection": {
            "additionalProperties": false,
            "description": "The connection details.",
            "properties": {
                "connectionTypes": {
                    "description": "An array of the connection types this connection will be permitted to use.",
                    "items": {
                        "$ref": "#/definitions/ConnectionTypes"
                    },
                    "type": "array"
                },
                "identity": {
                    "$ref": "#/definitions/Identity",
                    "description": "The identity uuid of the incoming connection or * as a wildcard. We currently do not restrict down to the name\nlevel so it can be blank or omitted."
                },
                "validatePayload": {
                    "description": "Should we check the payload be validated for this connection when it connects.",
                    "type": "boolean"
                }
            },
            "required": [
                "connectionTypes",
                "identity"
            ],
            "type": "object"
        },
        "ConnectionProviderOptions": {
            "additionalProperties": false,
            "description": "Options for the connection provider.",
            "properties": {
                "connectionId": {
                    "description": "The channel id that external apps will use to connect to this platform (it will be prefixed with your platform's\nuuid e.g. your-uuid-connection-id)",
                    "type": "string"
                },
                "connectionValidationEndpoint": {
                    "description": "If you want to validate the payload passed by connecting apps you can specify the endpoint id that should receive\nthe payload and return whether or not it is valid.",
                    "type": "string"
                },
                "connections": {
                    "description": "An array of connections that this platform allows being connected from. By specifying * as the uuid you can allow\nany connection and give it certain capabilities. You can then specify specific uuids with more capabilities.",
                    "items": {
                        "$ref": "#/definitions/Connection"
                    },
                    "type": "array"
                },
                "supportedActions": {
                    "description": "The connection provider can have actions registered against it from the platform. This provides a default list of\nactions that connections should be able to use if actions are enabled for that connection.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "connectionId",
                "connections",
                "supportedActions"
            ],
            "type": "object"
        },
        "ConnectionTypes": {
            "anyOf": [
                {
                    "$ref": "#/definitions/AppSourceConnection"
                },
                {
                    "$ref": "#/definitions/SnapshotSourceConnection"
                },
                {
                    "$ref": "#/definitions/ActionConnection"
                },
                {
                    "$ref": "#/definitions/BrokerConnection"
                }
            ],
            "description": "All the types of connections."
        },
        "ContentCreationOptions": {
            "$ref": "#/definitions/__type_4"
        },
        "ContentCreationRule<ContentCreationBehaviorNames>": {
            "additionalProperties": false,
            "description": "A rule for creating content in OpenFin; maps a content type to the way in which\nnewly-opened content of that type will be handled.",
            "properties": {
                "behavior": {
                    "$ref": "#/definitions/T",
                    "description": "Behavior to use when opening matched content."
                },
                "match": {
                    "description": "List of [match patterns](https://developer.chrome.com/extensions/match_patterns) that indicate the specified\nbehavior should be used",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "options": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Partial_2"
                        },
                        {
                            "$ref": "#/definitions/Partial_9"
                        }
                    ],
                    "description": "Options for newly-created view or window (if applicable)."
                }
            },
            "required": [
                "behavior",
                "match"
            ],
            "type": "object"
        },
        "ContentNavigation": {
            "$ref": "#/definitions/__type_15"
        },
        "ContextGroupStates": {
            "$ref": "#/definitions/__type_36"
        },
        "ContextMenuOptions": {
            "$ref": "#/definitions/__type_8"
        },
        "ContextMenuSettings": {
            "$ref": "#/definitions/__type_7"
        },
        "CustomActionSpecifier": {
            "additionalProperties": false,
            "description": "Configures a custom action when the control is invoked",
            "properties": {
                "customData": {
                    "description": "Any data necessary for the functioning of specified custom action"
                },
                "id": {
                    "description": "Identifier of a custom action defined at platform initialization",
                    "type": "string"
                }
            },
            "required": [
                "id"
            ],
            "type": "object"
        },
        "CustomActionSpecifier_1": {
            "additionalProperties": false,
            "description": "Configures a custom action when the control is invoked",
            "properties": {
                "customData": {
                    "description": "Any data necessary for the functioning of specified custom action"
                },
                "id": {
                    "description": "Identifier of a custom action defined at platform initialization",
                    "type": "string"
                }
            },
            "required": [
                "id"
            ],
            "type": "object"
        },
        "CustomBrowserButtonConfig": {
            "additionalProperties": false,
            "description": "Custom browser buttons",
            "properties": {
                "action": {
                    "$ref": "#/definitions/CustomActionSpecifier",
                    "description": "Custom action once the button is clicked"
                },
                "disabled": {
                    "description": "Disable custom button true or false",
                    "type": "boolean"
                },
                "iconUrl": {
                    "description": "icon URL for icon image",
                    "type": "string"
                },
                "tooltip": {
                    "description": "Button name text when hovered over",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/BrowserButtonType.Custom",
                    "description": "Type of cutom browser button"
                }
            },
            "required": [
                "action",
                "tooltip",
                "type"
            ],
            "type": "object"
        },
        "CustomPaletteSet": {
            "additionalProperties": false,
            "properties": {
                "background1": {
                    "type": "string"
                },
                "background2": {
                    "type": "string"
                },
                "background3": {
                    "type": "string"
                },
                "background4": {
                    "type": "string"
                },
                "background5": {
                    "type": "string"
                },
                "background6": {
                    "type": "string"
                },
                "backgroundPrimary": {
                    "type": "string"
                },
                "brandPrimary": {
                    "type": "string"
                },
                "brandSecondary": {
                    "type": "string"
                },
                "contentBackground1": {
                    "type": "string"
                },
                "contentBackground2": {
                    "type": "string"
                },
                "contentBackground3": {
                    "type": "string"
                },
                "contentBackground4": {
                    "type": "string"
                },
                "contentBackground5": {
                    "type": "string"
                },
                "functional1": {
                    "type": "string"
                },
                "functional10": {
                    "type": "string"
                },
                "functional2": {
                    "type": "string"
                },
                "functional3": {
                    "type": "string"
                },
                "functional4": {
                    "type": "string"
                },
                "functional5": {
                    "type": "string"
                },
                "functional6": {
                    "type": "string"
                },
                "functional7": {
                    "type": "string"
                },
                "functional8": {
                    "type": "string"
                },
                "functional9": {
                    "type": "string"
                },
                "inputBackground": {
                    "type": "string"
                },
                "inputColor": {
                    "type": "string"
                },
                "inputDisabled": {
                    "type": "string"
                },
                "inputFocused": {
                    "type": "string"
                },
                "inputPlaceholder": {
                    "type": "string"
                },
                "linkDefault": {
                    "type": "string"
                },
                "linkHover": {
                    "type": "string"
                },
                "statusActive": {
                    "type": "string"
                },
                "statusCritical": {
                    "type": "string"
                },
                "statusSuccess": {
                    "type": "string"
                },
                "statusWarning": {
                    "type": "string"
                },
                "textDefault": {
                    "type": "string"
                },
                "textHelp": {
                    "type": "string"
                },
                "textInactive": {
                    "type": "string"
                }
            },
            "required": [
                "backgroundPrimary",
                "brandPrimary",
                "brandSecondary"
            ],
            "type": "object"
        },
        "CustomSettings": {
            "additionalProperties": false,
            "description": "The custom settings section defined in the manifest.",
            "properties": {
                "$schema": {
                    "description": "The schema for the settings.",
                    "type": "string"
                },
                "actionsProvider": {
                    "$ref": "#/definitions/ActionsProviderOptions",
                    "description": "The actions provider options."
                },
                "analyticsProvider": {
                    "$ref": "#/definitions/AnalyticsProviderOptions",
                    "description": "The analytics provider options."
                },
                "appProvider": {
                    "$ref": "#/definitions/AppProviderOptions",
                    "description": "The app provider options."
                },
                "authProvider": {
                    "$ref": "#/definitions/AuthProviderOptions",
                    "description": "The auth provider options."
                },
                "bootstrap": {
                    "$ref": "#/definitions/BootstrapOptions",
                    "description": "The bootstrap options."
                },
                "browserProvider": {
                    "$ref": "#/definitions/BrowserProviderOptions",
                    "description": "The browser provider options."
                },
                "conditionsProvider": {
                    "$ref": "#/definitions/ConditionsProviderOptions",
                    "description": "The conditions provider options."
                },
                "connectionProvider": {
                    "$ref": "#/definitions/ConnectionProviderOptions",
                    "description": "The connection provider options."
                },
                "dockProvider": {
                    "$ref": "#/definitions/DockProviderOptions",
                    "description": "The dock provider options."
                },
                "endpointProvider": {
                    "$ref": "#/definitions/EndpointProviderOptions",
                    "description": "The endpoint provider options."
                },
                "homeProvider": {
                    "$ref": "#/definitions/HomeProviderOptions",
                    "description": "The home provider options."
                },
                "initOptionsProvider": {
                    "$ref": "#/definitions/InitOptionsProviderOptions",
                    "description": "The init options provider options."
                },
                "integrationProvider": {
                    "$ref": "#/definitions/IntegrationProviderOptions",
                    "description": "The integration provider options."
                },
                "lifecycleProvider": {
                    "$ref": "#/definitions/LifecycleProviderOptions",
                    "description": "The lifecycle provider options."
                },
                "loggerProvider": {
                    "$ref": "#/definitions/LoggerProviderOptions",
                    "description": "The logger provider options."
                },
                "menusProvider": {
                    "$ref": "#/definitions/MenusProviderOptions",
                    "description": "The menus provider options."
                },
                "notificationProvider": {
                    "$ref": "#/definitions/NotificationProviderOptions",
                    "description": "The notification provider options."
                },
                "platformProvider": {
                    "$ref": "#/definitions/PlatformProviderOptions",
                    "description": "The platform provider options."
                },
                "storefrontProvider": {
                    "$ref": "#/definitions/StorefrontProviderOptions",
                    "description": "The storefront provider options."
                },
                "themeProvider": {
                    "$ref": "#/definitions/ThemeProviderOptions",
                    "description": "The theme provider options."
                },
                "versionProvider": {
                    "$ref": "#/definitions/VersionProviderOptions",
                    "description": "The version provider options."
                }
            },
            "type": "object"
        },
        "DipRect": {
            "additionalProperties": false,
            "properties": {
                "dipRect": {
                    "$ref": "#/definitions/RectangleByEdgePositions"
                },
                "scaledRect": {
                    "$ref": "#/definitions/RectangleByEdgePositions"
                }
            },
            "required": [
                "dipRect",
                "scaledRect"
            ],
            "type": "object"
        },
        "DipScaleRects": {
            "$ref": "#/definitions/__type_33"
        },
        "DockButtonAction": {
            "additionalProperties": false,
            "description": "A button which launched an app or action.",
            "properties": {
                "action": {
                    "additionalProperties": false,
                    "description": "If an appId isn't provided then provide details related to the action",
                    "properties": {
                        "customData": {
                            "description": "data that should be passed to the action"
                        },
                        "id": {
                            "description": "The id of the action to fire",
                            "type": "string"
                        }
                    },
                    "required": [
                        "customData",
                        "id"
                    ],
                    "type": "object"
                },
                "appId": {
                    "description": "Should this action launch a specific app (the icon and tooltip will be pulled from the app if possible)",
                    "type": "string"
                },
                "iconUrl": {
                    "description": "The icon to use to distinguish this entry from others",
                    "type": "string"
                },
                "tooltip": {
                    "description": "The tooltip to be shown for this button/entry",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DockButtonApp": {
            "additionalProperties": false,
            "description": "A single app or a list of apps",
            "properties": {
                "display": {
                    "description": "Should this entry show a single app or a group of apps.",
                    "enum": [
                        "group",
                        "individual"
                    ],
                    "type": "string"
                },
                "iconUrl": {
                    "description": "The icon to use to distinguish this entry from others",
                    "type": "string"
                },
                "tags": {
                    "description": "The tags to use to find the single app or a collection of apps that need to be listed. This will be compared\nagainst the tags associated with apps returned from the app data sources.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "tooltip": {
                    "description": "The tooltip to be shown for this button/entry",
                    "type": "string"
                }
            },
            "required": [
                "display"
            ],
            "type": "object"
        },
        "DockButtonDropdown": {
            "additionalProperties": false,
            "description": "Button type which shows a drop down.",
            "properties": {
                "iconUrl": {
                    "description": "The icon to use to distinguish this entry from others",
                    "type": "string"
                },
                "options": {
                    "description": "List of button options",
                    "items": {
                        "$ref": "#/definitions/Omit<DockButtonAction,\"iconUrl\">"
                    },
                    "type": "array"
                },
                "tooltip": {
                    "description": "The tooltip to be shown for this button/entry",
                    "type": "string"
                }
            },
            "required": [
                "options"
            ],
            "type": "object"
        },
        "DockProviderOptions": {
            "additionalProperties": false,
            "description": "Options for the dock provider.",
            "properties": {
                "apps": {
                    "description": "What apps should be made available via the dock",
                    "items": {
                        "$ref": "#/definitions/DockButtonApp"
                    },
                    "type": "array"
                },
                "buttons": {
                    "description": "What custom actions should be made available via the dock",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/DockButtonAction"
                            },
                            {
                                "$ref": "#/definitions/DockButtonDropdown"
                            }
                        ]
                    },
                    "type": "array"
                },
                "icon": {
                    "description": "The icon to show in the dock component",
                    "type": "string"
                },
                "id": {
                    "description": "The id to use when registering against the dock component",
                    "type": "string"
                },
                "title": {
                    "description": "The title for your dock registration",
                    "type": "string"
                },
                "workspaceComponents": {
                    "additionalProperties": false,
                    "description": "Which workspace related icons should be hidden from the dock",
                    "properties": {
                        "hideHomeButton": {
                            "type": "boolean"
                        },
                        "hideNotificationsButton": {
                            "type": "boolean"
                        },
                        "hideStorefrontButton": {
                            "type": "boolean"
                        },
                        "hideWorkspacesButton": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "icon",
                "id",
                "title"
            ],
            "type": "object"
        },
        "EndpointDefinition<unknown>": {
            "anyOf": [
                {
                    "$ref": "#/definitions/FetchEndpointDefinition",
                    "description": "Specific endpoint type for fetching."
                },
                {
                    "$ref": "#/definitions/ModuleEndpointDefinition",
                    "description": "Specific endpoint type for modules."
                }
            ],
            "description": "All the types for endpoints."
        },
        "EndpointProviderOptions": {
            "additionalProperties": false,
            "description": "Endpoint provider options",
            "properties": {
                "endpoints": {
                    "description": "An array of endpoint definitions that can either use the built in fetch support or load modules that provide\ndifferent implementations for executing actions or performing request/response actions",
                    "items": {
                        "$ref": "#/definitions/EndpointDefinition<unknown>"
                    },
                    "type": "array"
                },
                "modules": {
                    "description": "The list of modules.",
                    "items": {
                        "$ref": "#/definitions/ModuleDefinition<unknown>"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ExternalProcessRequestType": {
            "$ref": "#/definitions/__type_37"
        },
        "FetchEndpointDefinition": {
            "additionalProperties": false,
            "description": "Specific endpoint type for fetching.",
            "properties": {
                "id": {
                    "description": "A unique id for this endpoint. This ID will be called by the platform. In the future you may change what the\nimplementation for this endpoint is but you can keep the same endpoint id and request/response objects in order\nto not require changes from the platform.",
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/BaseEndpointDefinition.O",
                    "description": "The data to be passed to this endpoint when it is called so that it knows how to act"
                },
                "type": {
                    "description": "This uses the built in support for fetch and the options will be the fetch options",
                    "enum": [
                        "fetch"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "id",
                "options",
                "type"
            ],
            "type": "object"
        },
        "FetchOptions": {
            "additionalProperties": false,
            "description": "Options for fetching",
            "properties": {
                "body": {
                    "description": "The body to send with the fetch.",
                    "type": "string"
                },
                "cache": {
                    "description": "Caching for the connection.",
                    "enum": [
                        "default",
                        "force-cache",
                        "no-cache",
                        "only-if-cached",
                        "reload"
                    ],
                    "type": "string"
                },
                "credentials": {
                    "description": "Credentials to send with the fetch.",
                    "enum": [
                        "include",
                        "omit",
                        "same-origin"
                    ],
                    "type": "string"
                },
                "headers": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional headers to send with the fetch.",
                    "type": "object"
                },
                "method": {
                    "description": "The HTTP methods for fetch.",
                    "enum": [
                        "GET",
                        "POST"
                    ],
                    "type": "string"
                },
                "mode": {
                    "description": "Cors mode for requests.",
                    "enum": [
                        "cors",
                        "no-cors",
                        "same-origin"
                    ],
                    "type": "string"
                },
                "redirect": {
                    "description": "How to handle redirects.",
                    "enum": [
                        "error",
                        "follow",
                        "manual"
                    ],
                    "type": "string"
                },
                "referrerPolicy": {
                    "description": "The referrer policy to use.",
                    "enum": [
                        "no-referrer",
                        "no-referrer-when-downgrade",
                        "origin",
                        "origin-when-cross-origin",
                        "same-origin",
                        "strict-origin",
                        "strict-origin-when-cross-origin",
                        "unsafe-url"
                    ],
                    "type": "string"
                },
                "url": {
                    "description": "The url to fetch from.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GlobalContextMenuOptionType": {
            "description": "Types of global context menu options, including pre-defined ones.\nUser-defined context menu items should use the value `Custom`",
            "enum": [
                "Appearance",
                "CloseWindow",
                "Custom",
                "DeleteWorkspace",
                "NewPage",
                "NewWindow",
                "OpenStorefront",
                "Quit",
                "RenameWorkspace",
                "RestoreChanges",
                "SavePage",
                "SavePageAs",
                "SaveWorkspace",
                "SaveWorkspaceAs",
                "SwitchWorkspace"
            ],
            "type": "string"
        },
        "HomeProviderOptions": {
            "additionalProperties": false,
            "description": "HomeProvider Options",
            "properties": {
                "commandCode": {
                    "description": "A keycode that can be used to interact with this Search Provider.",
                    "type": "string"
                },
                "description": {
                    "description": "A short description of the Search Provider.",
                    "type": "string"
                },
                "hidden": {
                    "description": "A flag to indicate this provider will not be displayed as a command.",
                    "type": "boolean"
                },
                "icon": {
                    "description": "An icon that a UI can display for the Search Provider.",
                    "type": "string"
                },
                "id": {
                    "description": "A unique ID used to identify the search provider.",
                    "type": "string"
                },
                "inputPlaceholder": {
                    "description": "The placeholder string to be displayed in a UI when targeting this specific Search Provider.",
                    "type": "string"
                },
                "listTitle": {
                    "description": "A title to display above the result list in a UI when targeting this specific Search Provider.",
                    "type": "string"
                },
                "logoUrl": {
                    "description": "Logo to show render when targeting this specific Search Provider.",
                    "type": "string"
                },
                "queryAgainst": {
                    "description": "What do you wish to run the query against when filtering apps. An array of entries. If not specified it will\ndefault to [\"title\"]. Since we store the app definition inside of a cli search result's data field you can add\ndata.tags to the array so that it will see if the query matches the start of a tag e.g. [\"title\",\"data.tags\"]",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "queryMinLength": {
                    "description": "How many characters need to be entered before filtering the available apps",
                    "type": "number"
                },
                "scoreOrder": {
                    "$ref": "#/definitions/ScoreOrder",
                    "description": "The order to sort the score in. The default is `ascending`."
                },
                "sourceFilter": {
                    "additionalProperties": false,
                    "description": "Options for the source filters displayed in home.",
                    "properties": {
                        "disabled": {
                            "description": "Should we disable the source filters, defaults to false.",
                            "type": "boolean"
                        },
                        "label": {
                            "description": "The label to display in home, defaults to Source.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "title": {
                    "description": "A UI friendly title for the search provider.",
                    "type": "string"
                }
            },
            "required": [
                "icon",
                "id",
                "title"
            ],
            "type": "object"
        },
        "Identity": {
            "$ref": "#/definitions/__type_3"
        },
        "Image": {
            "additionalProperties": false,
            "description": "Detailed metadata describing an image.",
            "properties": {
                "purpose": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "src": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "src"
            ],
            "type": "object"
        },
        "InitOptionsProviderOptions": {
            "$ref": "#/definitions/ModuleList_1",
            "description": "List of modules."
        },
        "IntegrationModuleDefinition": {
            "additionalProperties": false,
            "description": "Integration definition.",
            "properties": {
                "autoStart": {
                    "description": "Does the integration start automatically if enabled (default is true).",
                    "type": "boolean"
                },
                "data": {
                    "$ref": "#/definitions/ModuleDefinition.O",
                    "description": "Custom data for the module."
                },
                "description": {
                    "description": "The description of the module.",
                    "type": "string"
                },
                "enabled": {
                    "description": "Is the module enabled.",
                    "type": "boolean"
                },
                "excludeFromSourceFilter": {
                    "description": "If this property is set then the module will not show in the source filter\nand its results will always be included.",
                    "type": "boolean"
                },
                "icon": {
                    "description": "The icon for the module.",
                    "type": "string"
                },
                "id": {
                    "description": "The id of the module.",
                    "type": "string"
                },
                "info": {
                    "description": "Url to more information.",
                    "type": "string"
                },
                "moduleUrl": {
                    "description": "This is the old property, it will be remapped to url.",
                    "type": "string"
                },
                "title": {
                    "description": "The title of the module.",
                    "type": "string"
                },
                "url": {
                    "description": "The url to load the module from.",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "title",
                "url"
            ],
            "type": "object"
        },
        "IntegrationProviderOptions": {
            "additionalProperties": false,
            "description": "Integration provider settings.",
            "properties": {
                "command": {
                    "description": "What command should we look for in order to return the list of integrations",
                    "type": "string"
                },
                "commandDescription": {
                    "description": "What description should accompany the command",
                    "type": "string"
                },
                "icon": {
                    "description": "An icon representing the top level integration provider",
                    "type": "string"
                },
                "integrations": {
                    "description": "This is the old module list name, remove in future.",
                    "items": {
                        "$ref": "#/definitions/IntegrationModuleDefinition"
                    },
                    "type": "array"
                },
                "isManagementEnabled": {
                    "description": "Do you wish to expose an option of turning on/off integrations.",
                    "type": "boolean"
                },
                "modules": {
                    "description": "The list of modules.",
                    "items": {
                        "$ref": "#/definitions/IntegrationModuleDefinition"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "IntentOptions": {
            "additionalProperties": false,
            "description": "Option for the intent.",
            "properties": {
                "intentTimeout": {
                    "description": "How long should the broker wait after launching a view/window for it to register an intent handler. The default\nis 5000 (5 seconds)",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "IntentResolverOptions": {
            "additionalProperties": false,
            "description": "Intent resolver options.",
            "properties": {
                "fdc3InteropApi": {
                    "description": "the fdc3 api version this picker will support (default is v2)",
                    "type": "string"
                },
                "height": {
                    "description": "the height you wish the window to be",
                    "type": "number"
                },
                "title": {
                    "description": "A suggested title for the intent picker/resolver ui",
                    "type": "string"
                },
                "url": {
                    "description": "The url of the html page that has the intent picker",
                    "type": "string"
                },
                "width": {
                    "description": "the width you wish the window to be",
                    "type": "number"
                }
            },
            "required": [
                "url"
            ],
            "type": "object"
        },
        "InteropConfig": {
            "$ref": "#/definitions/__type_11"
        },
        "LaunchExternalProcessListener": {
            "$ref": "#/definitions/__type_38"
        },
        "LayoutColumn": {
            "additionalProperties": false,
            "properties": {
                "content": {
                    "$ref": "#/definitions/LayoutContent",
                    "description": "Array of configurations for items that will be created as children of this item."
                },
                "height": {
                    "type": "number"
                },
                "id": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "isClosable": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "The type of the item. Possible values are 'row', 'column', 'stack', and 'component'.",
                    "enum": [
                        "column"
                    ],
                    "type": "string"
                },
                "width": {
                    "type": "number"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "LayoutComponent": {
            "additionalProperties": false,
            "properties": {
                "componentName": {
                    "enum": [
                        "view"
                    ],
                    "type": "string"
                },
                "componentState": {
                    "$ref": "#/definitions/Partial_1"
                },
                "content": {
                    "$ref": "#/definitions/LayoutContent",
                    "description": "Array of configurations for items that will be created as children of this item."
                },
                "height": {
                    "type": "number"
                },
                "id": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "isClosable": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "The type of the item. Possible values are 'row', 'column', 'stack', and 'component'.",
                    "type": "string"
                },
                "width": {
                    "type": "number"
                }
            },
            "required": [
                "componentName",
                "type"
            ],
            "type": "object"
        },
        "LayoutContent": {
            "$ref": "#/definitions/Array"
        },
        "LayoutItemConfig": {
            "$ref": "#/definitions/__type_1"
        },
        "LayoutRow": {
            "additionalProperties": false,
            "properties": {
                "content": {
                    "$ref": "#/definitions/LayoutContent",
                    "description": "Array of configurations for items that will be created as children of this item."
                },
                "height": {
                    "type": "number"
                },
                "id": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "isClosable": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "The type of the item. Possible values are 'row', 'column', 'stack', and 'component'.",
                    "enum": [
                        "row"
                    ],
                    "type": "string"
                },
                "width": {
                    "type": "number"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "LifecycleProviderOptions": {
            "$ref": "#/definitions/ModuleList_5",
            "description": "List of modules."
        },
        "LockUnlockPageConfig": {
            "$ref": "#/definitions/__type_27"
        },
        "LoggerProviderOptions": {
            "$ref": "#/definitions/ModuleList_2",
            "description": "List of modules."
        },
        "ManifestTypeId": {
            "description": "Manifest types used in manifest files.",
            "enum": [
                "appasset",
                "connection",
                "desktop-browser",
                "endpoint",
                "external",
                "inline-appasset",
                "inline-external",
                "inline-snapshot",
                "inline-view",
                "inline-window",
                "manifest",
                "snapshot",
                "unregistered-app",
                "view",
                "window"
            ],
            "type": "string"
        },
        "MaximumVersion": {
            "$ref": "#/definitions/VersionInfo",
            "description": "Information about the version of the platform and it's dependencies"
        },
        "MenuEntry.T": {
            "$ref": "#/definitions/GlobalContextMenuOptionType",
            "description": "Types of global context menu options, including pre-defined ones.\nUser-defined context menu items should use the value `Custom`"
        },
        "MenuEntry.T_1": {
            "$ref": "#/definitions/PageTabContextMenuOptionType",
            "description": "Types of page tab context menu options, including pre-defined ones.\nUser-defined context menu items should use the value `Custom`"
        },
        "MenuEntry.T_2": {
            "$ref": "#/definitions/ViewTabMenuOptionType",
            "description": "View tab context menu types for {@link WorkspacePlatformProvider.openViewTabContextMenu} override."
        },
        "MenuEntry<GlobalContextMenuOptionType>": {
            "additionalProperties": false,
            "description": "How to position a menu.",
            "properties": {
                "checked": {
                    "description": "Should only be specified for `checkbox` type menu items.",
                    "type": "boolean"
                },
                "conditions": {
                    "description": "If the menu entry is included are there additional conditions that determine whether or not it should be shown (e.g. only show the logout menu entry if the authenticated condition is true)",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "data": {
                    "additionalProperties": false,
                    "description": "Data related to the menu option",
                    "properties": {
                        "action": {
                            "$ref": "#/definitions/CustomActionSpecifier"
                        },
                        "type": {
                            "$ref": "#/definitions/MenuEntry.T"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "type": "object"
                },
                "enabled": {
                    "description": "If false, the menu item will be greyed out and unclickable.",
                    "type": "boolean"
                },
                "icon": {
                    "description": "Image Data URI with image dimensions inferred from the encoded string",
                    "type": "string"
                },
                "include": {
                    "description": "Should this menu entry definition be included in the list of menu entries",
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "position": {
                    "$ref": "#/definitions/MenuPosition",
                    "description": "Where should this menu item be positioned in relation to existing entries"
                },
                "separator": {
                    "$ref": "#/definitions/MenuSeparatorPosition",
                    "description": "Should a menu separator be added"
                },
                "submenu": {
                    "description": "Should be specified for `submenu` type menu items. If `submenu` is specified,\nthe `type: 'submenu'` can be omitted.",
                    "items": {
                        "$ref": "#/definitions/MenuItemTemplate"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "Can be `normal`, `separator`, `submenu`, or `checkbox`.\nDefaults to 'normal' unless a 'submenu' key exists",
                    "enum": [
                        "checkbox",
                        "normal",
                        "separator",
                        "submenu"
                    ],
                    "type": "string"
                },
                "visible": {
                    "description": "If false, the menu item will be entirely hidden.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "MenuEntry<PageTabContextMenuOptionType>": {
            "additionalProperties": false,
            "description": "How to position a menu.",
            "properties": {
                "checked": {
                    "description": "Should only be specified for `checkbox` type menu items.",
                    "type": "boolean"
                },
                "conditions": {
                    "description": "If the menu entry is included are there additional conditions that determine whether or not it should be shown (e.g. only show the logout menu entry if the authenticated condition is true)",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "data": {
                    "additionalProperties": false,
                    "description": "Data related to the menu option",
                    "properties": {
                        "action": {
                            "$ref": "#/definitions/CustomActionSpecifier"
                        },
                        "type": {
                            "$ref": "#/definitions/MenuEntry.T_1"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "type": "object"
                },
                "enabled": {
                    "description": "If false, the menu item will be greyed out and unclickable.",
                    "type": "boolean"
                },
                "icon": {
                    "description": "Image Data URI with image dimensions inferred from the encoded string",
                    "type": "string"
                },
                "include": {
                    "description": "Should this menu entry definition be included in the list of menu entries",
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "position": {
                    "$ref": "#/definitions/MenuPosition_1",
                    "description": "Where should this menu item be positioned in relation to existing entries"
                },
                "separator": {
                    "$ref": "#/definitions/MenuSeparatorPosition",
                    "description": "Should a menu separator be added"
                },
                "submenu": {
                    "description": "Should be specified for `submenu` type menu items. If `submenu` is specified,\nthe `type: 'submenu'` can be omitted.",
                    "items": {
                        "$ref": "#/definitions/MenuItemTemplate"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "Can be `normal`, `separator`, `submenu`, or `checkbox`.\nDefaults to 'normal' unless a 'submenu' key exists",
                    "enum": [
                        "checkbox",
                        "normal",
                        "separator",
                        "submenu"
                    ],
                    "type": "string"
                },
                "visible": {
                    "description": "If false, the menu item will be entirely hidden.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "MenuEntry<ViewTabMenuOptionType>": {
            "additionalProperties": false,
            "description": "How to position a menu.",
            "properties": {
                "checked": {
                    "description": "Should only be specified for `checkbox` type menu items.",
                    "type": "boolean"
                },
                "conditions": {
                    "description": "If the menu entry is included are there additional conditions that determine whether or not it should be shown (e.g. only show the logout menu entry if the authenticated condition is true)",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "data": {
                    "additionalProperties": false,
                    "description": "Data related to the menu option",
                    "properties": {
                        "action": {
                            "$ref": "#/definitions/CustomActionSpecifier"
                        },
                        "type": {
                            "$ref": "#/definitions/MenuEntry.T_2"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "type": "object"
                },
                "enabled": {
                    "description": "If false, the menu item will be greyed out and unclickable.",
                    "type": "boolean"
                },
                "icon": {
                    "description": "Image Data URI with image dimensions inferred from the encoded string",
                    "type": "string"
                },
                "include": {
                    "description": "Should this menu entry definition be included in the list of menu entries",
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "position": {
                    "$ref": "#/definitions/MenuPosition_2",
                    "description": "Where should this menu item be positioned in relation to existing entries"
                },
                "separator": {
                    "$ref": "#/definitions/MenuSeparatorPosition",
                    "description": "Should a menu separator be added"
                },
                "submenu": {
                    "description": "Should be specified for `submenu` type menu items. If `submenu` is specified,\nthe `type: 'submenu'` can be omitted.",
                    "items": {
                        "$ref": "#/definitions/MenuItemTemplate"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "Can be `normal`, `separator`, `submenu`, or `checkbox`.\nDefaults to 'normal' unless a 'submenu' key exists",
                    "enum": [
                        "checkbox",
                        "normal",
                        "separator",
                        "submenu"
                    ],
                    "type": "string"
                },
                "visible": {
                    "description": "If false, the menu item will be entirely hidden.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "MenuItemTemplate": {
            "additionalProperties": false,
            "properties": {
                "checked": {
                    "description": "Should only be specified for `checkbox` type menu items.",
                    "type": "boolean"
                },
                "data": {
                    "description": "Data to be returned if the user selects the element. Must be serializable"
                },
                "enabled": {
                    "description": "If false, the menu item will be greyed out and unclickable.",
                    "type": "boolean"
                },
                "icon": {
                    "description": "Image Data URI with image dimensions inferred from the encoded string",
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "role": {
                    "enum": [
                        "copy",
                        "cut",
                        "paste",
                        "reload",
                        "toggleDevTools"
                    ],
                    "type": "string"
                },
                "submenu": {
                    "description": "Should be specified for `submenu` type menu items. If `submenu` is specified,\nthe `type: 'submenu'` can be omitted.",
                    "items": {
                        "$ref": "#/definitions/MenuItemTemplate"
                    },
                    "type": "array"
                },
                "type": {
                    "description": "Can be `normal`, `separator`, `submenu`, or `checkbox`.\nDefaults to 'normal' unless a 'submenu' key exists",
                    "enum": [
                        "checkbox",
                        "normal",
                        "separator",
                        "submenu"
                    ],
                    "type": "string"
                },
                "visible": {
                    "description": "If false, the menu item will be entirely hidden.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "MenuPosition": {
            "additionalProperties": false,
            "description": "The position for a menu entry.",
            "properties": {
                "customId": {
                    "description": "If position type is Custom then a customId is required in order to do lookups of this entry in the list of entries",
                    "type": "string"
                },
                "operation": {
                    "$ref": "#/definitions/MenuPositionOperation",
                    "description": "What should we do with this menu option"
                },
                "type": {
                    "$ref": "#/definitions/MenuPosition.T",
                    "description": "The type of Menu entry this is"
                }
            },
            "required": [
                "operation"
            ],
            "type": "object"
        },
        "MenuPosition.T": {
            "$ref": "#/definitions/GlobalContextMenuOptionType",
            "description": "Types of global context menu options, including pre-defined ones.\nUser-defined context menu items should use the value `Custom`"
        },
        "MenuPosition.T_1": {
            "$ref": "#/definitions/PageTabContextMenuOptionType",
            "description": "Types of page tab context menu options, including pre-defined ones.\nUser-defined context menu items should use the value `Custom`"
        },
        "MenuPosition.T_2": {
            "$ref": "#/definitions/ViewTabMenuOptionType",
            "description": "View tab context menu types for {@link WorkspacePlatformProvider.openViewTabContextMenu} override."
        },
        "MenuPositionOperation": {
            "description": "Operations that can be performed on menus when they are being updated.",
            "enum": [
                "after",
                "before",
                "delete",
                "end",
                "replaceLabel",
                "start"
            ],
            "type": "string"
        },
        "MenuPosition_1": {
            "additionalProperties": false,
            "description": "The position for a menu entry.",
            "properties": {
                "customId": {
                    "description": "If position type is Custom then a customId is required in order to do lookups of this entry in the list of entries",
                    "type": "string"
                },
                "operation": {
                    "$ref": "#/definitions/MenuPositionOperation",
                    "description": "What should we do with this menu option"
                },
                "type": {
                    "$ref": "#/definitions/MenuPosition.T_1",
                    "description": "The type of Menu entry this is"
                }
            },
            "required": [
                "operation"
            ],
            "type": "object"
        },
        "MenuPosition_2": {
            "additionalProperties": false,
            "description": "The position for a menu entry.",
            "properties": {
                "customId": {
                    "description": "If position type is Custom then a customId is required in order to do lookups of this entry in the list of entries",
                    "type": "string"
                },
                "operation": {
                    "$ref": "#/definitions/MenuPositionOperation",
                    "description": "What should we do with this menu option"
                },
                "type": {
                    "$ref": "#/definitions/MenuPosition.T_2",
                    "description": "The type of Menu entry this is"
                }
            },
            "required": [
                "operation"
            ],
            "type": "object"
        },
        "MenuSeparatorPosition": {
            "description": "Position for adding separators during update operations.",
            "enum": [
                "after",
                "before"
            ],
            "type": "string"
        },
        "MenusProviderOptions": {
            "$ref": "#/definitions/ModuleList_7",
            "description": "List of modules."
        },
        "MinimumVersion": {
            "$ref": "#/definitions/VersionInfo",
            "description": "Information about the version of the platform and it's dependencies"
        },
        "ModuleDefinition.O": {},
        "ModuleDefinition<unknown>": {
            "additionalProperties": false,
            "description": "The definition of a module with generic data for options.",
            "properties": {
                "data": {
                    "$ref": "#/definitions/ModuleDefinition.O",
                    "description": "Custom data for the module."
                },
                "description": {
                    "description": "The description of the module.",
                    "type": "string"
                },
                "enabled": {
                    "description": "Is the module enabled.",
                    "type": "boolean"
                },
                "icon": {
                    "description": "The icon for the module.",
                    "type": "string"
                },
                "id": {
                    "description": "The id of the module.",
                    "type": "string"
                },
                "info": {
                    "description": "Url to more information.",
                    "type": "string"
                },
                "title": {
                    "description": "The title of the module.",
                    "type": "string"
                },
                "url": {
                    "description": "The url to load the module from.",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "title",
                "url"
            ],
            "type": "object"
        },
        "ModuleEndpointDefinition": {
            "additionalProperties": false,
            "description": "Specific endpoint type for modules.",
            "properties": {
                "id": {
                    "description": "A unique id for this endpoint. This ID will be called by the platform. In the future you may change what the\nimplementation for this endpoint is but you can keep the same endpoint id and request/response objects in order\nto not require changes from the platform.",
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/BaseEndpointDefinition.O_1",
                    "description": "The data to be passed to this endpoint when it is called so that it knows how to act"
                },
                "type": {
                    "description": "This indicates that this endpoint depends on a module that needs to be loaded in order for it to work",
                    "enum": [
                        "module"
                    ],
                    "type": "string"
                },
                "typeId": {
                    "description": "The id of the module that should be loaded.",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "options",
                "type",
                "typeId"
            ],
            "type": "object"
        },
        "ModuleList": {
            "additionalProperties": false,
            "description": "Auth Provider Options. Specify a single auth module if your application requires authentication before allowing the\nuser to use the platform.",
            "properties": {
                "modules": {
                    "description": "The list of modules.",
                    "items": {
                        "$ref": "#/definitions/ModuleDefinition<unknown>"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ModuleList_1": {
            "additionalProperties": false,
            "description": "InitOptions Provider Options. This is a list of modules that will be loaded and used to handle init params (similar\nto query strings). The module data setting needs to specify \"supportedActions\" and this should be an array of strings\nof the actions this module supports. The init params used must specify action (which would map onto the action\nsupported) by your module and optionally payload if your module supports being passed a payload (this should be a\nbase64 encoded object when passed via init params).",
            "properties": {
                "modules": {
                    "description": "The list of modules.",
                    "items": {
                        "$ref": "#/definitions/ModuleDefinition<unknown>"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ModuleList_2": {
            "additionalProperties": false,
            "description": "Logger Provider Options - A list of modules that will act as loggers that can receive logging information sent by the\nplatform",
            "properties": {
                "modules": {
                    "description": "The list of modules.",
                    "items": {
                        "$ref": "#/definitions/ModuleDefinition<unknown>"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ModuleList_3": {
            "additionalProperties": false,
            "description": "A list of modules that provide actions that can be used by the platform.",
            "properties": {
                "modules": {
                    "description": "The list of modules.",
                    "items": {
                        "$ref": "#/definitions/ModuleDefinition<unknown>"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ModuleList_4": {
            "additionalProperties": false,
            "description": "A list of modules that provide a set of conditions. The function for this condition will return true or false to\nindicate if the condition is met. Conditions are used in a number of places (for example menu options)",
            "properties": {
                "modules": {
                    "description": "The list of modules.",
                    "items": {
                        "$ref": "#/definitions/ModuleDefinition<unknown>"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ModuleList_5": {
            "additionalProperties": false,
            "description": "This is a list of modules that allow you to hook into the lifecycle events exposed by the platform. A good example\nmight be you wish to register a module that is called when an authenticated session is expired",
            "properties": {
                "modules": {
                    "description": "The list of modules.",
                    "items": {
                        "$ref": "#/definitions/ModuleDefinition<unknown>"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ModuleList_6": {
            "additionalProperties": false,
            "description": "A list of modules that will be loaded and then called when analytical events come in from the platform or workspace\ncomponents.",
            "properties": {
                "modules": {
                    "description": "The list of modules.",
                    "items": {
                        "$ref": "#/definitions/ModuleDefinition<unknown>"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ModuleList_7": {
            "additionalProperties": false,
            "description": "A list of modules that provide menu for different locations.",
            "properties": {
                "modules": {
                    "description": "The list of modules.",
                    "items": {
                        "$ref": "#/definitions/ModuleDefinition<unknown>"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "MonitorDetails": {
            "$ref": "#/definitions/__type_35"
        },
        "MonitorInfo": {
            "$ref": "#/definitions/__type_31"
        },
        "NotificationProviderOptions": {
            "additionalProperties": false,
            "description": "Notification Provider Options. Providing settings in order to register your platform against the notification center.",
            "properties": {
                "icon": {
                    "description": "URL of the icon to be displayed for this platform.",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier of the platform.",
                    "type": "string"
                },
                "scheme": {
                    "$ref": "#/definitions/ColorSchemeOption",
                    "description": "This is the scheme associated with this platform."
                },
                "title": {
                    "description": "Stream title.\n\nProviding a different displayName for an existing stream id will update the\ndisplayName of the stream stored in Notification Center.",
                    "type": "string"
                },
                "workspacePlatform": {
                    "additionalProperties": false,
                    "description": "Workspace platform that registers this platform",
                    "properties": {
                        "analytics": {
                            "additionalProperties": false,
                            "properties": {
                                "isSupported": {
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "isSupported"
                            ],
                            "type": "object"
                        },
                        "identity": {
                            "$ref": "#/definitions/ApplicationIdentity"
                        }
                    },
                    "required": [
                        "analytics",
                        "identity"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "icon",
                "id",
                "title"
            ],
            "type": "object"
        },
        "Omit": {
            "$ref": "#/definitions/__type_25"
        },
        "Omit<DockButtonAction,\"iconUrl\">": {
            "additionalProperties": false,
            "properties": {
                "action": {
                    "additionalProperties": false,
                    "description": "If an appId isn't provided then provide details related to the action",
                    "properties": {
                        "customData": {
                            "description": "data that should be passed to the action"
                        },
                        "id": {
                            "description": "The id of the action to fire",
                            "type": "string"
                        }
                    },
                    "required": [
                        "customData",
                        "id"
                    ],
                    "type": "object"
                },
                "appId": {
                    "description": "Should this action launch a specific app (the icon and tooltip will be pulled from the app if possible)",
                    "type": "string"
                },
                "tooltip": {
                    "description": "The tooltip to be shown for this button/entry",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Page": {
            "additionalProperties": false,
            "description": "Provides configuration options for a set of Workspace Views. An array of Page objects is a required option of the {@link workspacePlatform}\nproperty of the {@link BrowserCreateWindowRequest} interface.\n```ts\n const page: Page = {\n     title: 'myPageTitle',\n     pageId: 'myPageID',\n     layout: {\n         content: [\n             {\n                 type: 'stack',\n                 content: [\n                     {\n                         type: 'component',\n                         componentName: 'view',\n                         componentState: {\n                             name: 'myViewName',\n                             url: 'http://google.com'\n                         }\n                     }\n                 ]\n             }\n         ]\n     }\n};\n```",
            "properties": {
                "closeButton": {
                    "additionalProperties": false,
                    "description": "Used to manipulate behaviour of a close button on a page tab. If `undefined`, then close button is visible and actionable.\nIf either property true, this page tab's context menu will disable its 'Close Page' option.",
                    "properties": {
                        "disabled": {
                            "type": "boolean"
                        },
                        "hidden": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "description": {
                    "description": "An optional UI friendly description of the page.",
                    "type": "string"
                },
                "iconUrl": {
                    "description": "Icon that appears on a page tab if there are no unsaved changes. If 'undefined', default icon will appear.",
                    "type": "string"
                },
                "isLocked": {
                    "description": "True if the page is locked.",
                    "type": "boolean"
                },
                "isReadOnly": {
                    "description": "True if the page is read only. In this state, the page is locked and cannot be unlocked.",
                    "type": "boolean"
                },
                "layout": {
                    "$ref": "#/definitions/PageLayout",
                    "description": "The layout of the page."
                },
                "pageId": {
                    "description": "The unique ID of the page.",
                    "type": "string"
                },
                "panels": {
                    "description": "Used to configure fixed views on the edges of the browser window. Only one panel per side is supported.",
                    "items": {
                        "$ref": "#/definitions/PanelConfig"
                    },
                    "type": "array"
                },
                "title": {
                    "description": "A UI friendly title for the page.",
                    "type": "string"
                },
                "tooltip": {
                    "description": "A optional UI friendly tooltip for the page.",
                    "type": "string"
                },
                "unsavedIconUrl": {
                    "description": "Icon that appears on a page tab if there are unsaved changes (dirty state). If 'undefined', default icon will appear.",
                    "type": "string"
                }
            },
            "required": [
                "layout",
                "pageId",
                "title"
            ],
            "type": "object"
        },
        "PageLayout": {
            "additionalProperties": false,
            "properties": {
                "content": {
                    "$ref": "#/definitions/LayoutContent"
                },
                "dimensions": {
                    "additionalProperties": false,
                    "properties": {
                        "borderWidth": {
                            "type": "number"
                        },
                        "headerHeight": {
                            "type": "number"
                        },
                        "minItemHeight": {
                            "type": "number"
                        },
                        "minItemWidth": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "layoutDetails": {
                    "$ref": "#/definitions/PageLayoutDetails"
                },
                "settings": {
                    "additionalProperties": false,
                    "description": "Represents a potential ways to customize behavior of your Layout",
                    "properties": {
                        "constrainDragToContainer": {
                            "type": "boolean"
                        },
                        "constrainDragToHeaders": {
                            "type": "boolean"
                        },
                        "hasHeaders": {
                            "type": "boolean"
                        },
                        "popoutWholeStack": {
                            "type": "boolean"
                        },
                        "preventDragIn": {
                            "type": "boolean"
                        },
                        "preventDragOut": {
                            "type": "boolean"
                        },
                        "reorderEnabled": {
                            "type": "boolean"
                        },
                        "showCloseIcon": {
                            "type": "boolean"
                        },
                        "showMaximiseIcon": {
                            "type": "boolean"
                        },
                        "showPopoutIcon": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "PageLayoutDetails": {
            "additionalProperties": false,
            "properties": {
                "machineId": {
                    "description": "The id of the machine that created the page.",
                    "type": "string"
                },
                "machineName": {
                    "description": "The name of the machine that created the page.",
                    "type": "string"
                }
            },
            "required": [
                "machineId"
            ],
            "type": "object"
        },
        "PageTabContextMenuOptionType": {
            "description": "Types of page tab context menu options, including pre-defined ones.\nUser-defined context menu items should use the value `Custom`",
            "enum": [
                "Close",
                "Custom",
                "Duplicate",
                "Rename",
                "Save",
                "Save As"
            ],
            "type": "string"
        },
        "PanelConfig": {
            "anyOf": [
                {
                    "additionalProperties": false,
                    "properties": {
                        "height": {
                            "description": "Size of the top/bottom panel, formatted as CSS property value with units. E.g. \"0px\", \"10%\", \"3rem\".",
                            "type": "string"
                        },
                        "position": {
                            "description": "Position of the panel in the page.",
                            "enum": [
                                "Bottom",
                                "Top"
                            ],
                            "type": "string"
                        },
                        "viewOptions": {
                            "$ref": "#/definitions/Omit",
                            "description": "The options with which to initialize the panel view."
                        }
                    },
                    "required": [
                        "height",
                        "position",
                        "viewOptions"
                    ],
                    "type": "object"
                },
                {
                    "additionalProperties": false,
                    "properties": {
                        "extendToBottom": {
                            "description": "When true, the left/right panel extends all the way to the bottom of the window,\nthus taking priority over the bottom panel.",
                            "type": "boolean"
                        },
                        "extendToTop": {
                            "description": "When true, the left/right panel extends all the way to the top of the window,\nthus taking priority over the top panel.",
                            "type": "boolean"
                        },
                        "position": {
                            "description": "Position of the panel in the page.",
                            "enum": [
                                "Left",
                                "Right"
                            ],
                            "type": "string"
                        },
                        "viewOptions": {
                            "$ref": "#/definitions/Omit",
                            "description": "The options with which to initialize the panel view."
                        },
                        "width": {
                            "description": "Size of the left/right panel, formatted as CSS property value with units. E.g. \"0px\", \"10%\", \"3rem\".",
                            "type": "string"
                        }
                    },
                    "required": [
                        "position",
                        "viewOptions",
                        "width"
                    ],
                    "type": "object"
                }
            ],
            "description": "Configuration of an individual fixed view panel\n\nExample:\n```ts\n{\n   position: PanelPosition.Left,\n   width: '140px',\n   viewOptions: { url: 'https://example.com'}\n}\n```"
        },
        "Partial": {
            "$ref": "#/definitions/__type"
        },
        "Partial_1": {
            "$ref": "#/definitions/__type_2"
        },
        "Partial_2": {
            "$ref": "#/definitions/__type_5"
        },
        "Partial_3": {
            "$ref": "#/definitions/__type_9"
        },
        "Partial_4": {
            "$ref": "#/definitions/__type_13"
        },
        "Partial_5": {
            "$ref": "#/definitions/__type_16"
        },
        "Partial_6": {
            "$ref": "#/definitions/__type_17"
        },
        "Partial_7": {
            "$ref": "#/definitions/__type_18"
        },
        "Partial_8": {
            "$ref": "#/definitions/__type_19"
        },
        "Partial_9": {
            "$ref": "#/definitions/__type_22"
        },
        "Pick": {
            "$ref": "#/definitions/__type_28"
        },
        "PlatformApp": {
            "additionalProperties": false,
            "description": "Definition for application with extended properties.",
            "properties": {
                "appId": {
                    "description": "Unique identifier for an application.",
                    "type": "string"
                },
                "autostart": {
                    "description": "Does the application wish to be automatically started when the platform\nis initialized. Default behavior is false",
                    "type": "boolean"
                },
                "contactEmail": {
                    "type": "string"
                },
                "customConfig": {
                    "additionalProperties": {},
                    "description": "An optional set of name value pairs that can be used to deliver custom\ndata from an App Directory to a launcher.",
                    "type": "object"
                },
                "description": {
                    "description": "UI friendly description for an application.",
                    "type": "string"
                },
                "icons": {
                    "description": "A list of icons that can be rendered in UI for this application.",
                    "items": {
                        "$ref": "#/definitions/Image"
                    },
                    "type": "array"
                },
                "images": {
                    "description": "A list of optional images that highlight application functionality.",
                    "items": {
                        "$ref": "#/definitions/Image"
                    },
                    "type": "array"
                },
                "instanceMode": {
                    "description": "This only applies to web views/windows. Default is multi instance. Should\nwe aim to only launch one instance of this application and only show the\napp even if the intent resolver ui supports instances of apps. If multi\nshould we support multiple instances and let the user decide whether to\nlaunch a new instance or pick an existing one from the intent picker? If\nnew it means the intent picker will not show the option to pick an\ninstance because the app owner wants a new instance every time. And if an\nintent is raised and just the id of the app is specified it will always\nlaunch a new instance",
                    "enum": [
                        "multi",
                        "new",
                        "single"
                    ],
                    "type": "string"
                },
                "intents": {
                    "items": {
                        "$ref": "#/definitions/AppIntent"
                    },
                    "type": "array"
                },
                "interop": {
                    "$ref": "#/definitions/PlatformAppInterop",
                    "description": "Metadata that describes how the application uses FDC3/Interop APIs. This\nmetadata serves multiple purposes:\n- It supports intent resolution by an OpenFin Platform/ interop agent, by\ndeclaring what intents an app listens for.\n- It may be used, for example in an app catalog UI, to find apps that\n'interoperate with' other apps.\n- It provides a standard location to document how the app interacts with\nuser channels, app channels, and intents, for use by other app\ndevelopers and desktop assemblers."
                },
                "manifest": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ViewOptions",
                            "description": "User-facing options for a view."
                        },
                        {
                            "$ref": "#/definitions/WindowOptions"
                        },
                        {
                            "$ref": "#/definitions/Snapshot"
                        },
                        {
                            "$ref": "#/definitions/ExternalProcessRequestType"
                        },
                        {
                            "$ref": "#/definitions/AppAssetInfo"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "The different types of content that can be contained in the manifest."
                },
                "manifestType": {
                    "description": "Describes the type of manifest resolved by the `manifest` field.\nLaunch mechanics are determined by the manifest type.",
                    "type": "string"
                },
                "moreInfo": {
                    "description": "Optional URL that provides more information about the application",
                    "type": "string"
                },
                "name": {
                    "description": "Name is provided for support for fdc3 mappings if not provided then appId\nis used as name. Internally we use appId",
                    "type": "string"
                },
                "primaryButton": {
                    "$ref": "#/definitions/StoreButtonConfig",
                    "description": "Primary button configuration."
                },
                "private": {
                    "description": "This indicates that an entry in the directory is something that shouldn't\nbe displayed in a UI (e.g. store, dock, home) but can be launched via an\nAPI (from an fdc3, interop api, function or intent picker (as this UI was\ndriven by an API))",
                    "type": "boolean"
                },
                "publisher": {
                    "type": "string"
                },
                "secondaryButtons": {
                    "description": "Array of secondary button configurations.",
                    "items": {
                        "$ref": "#/definitions/StoreButtonConfig"
                    },
                    "type": "array"
                },
                "supportEmail": {
                    "type": "string"
                },
                "tags": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "title": {
                    "description": "A UI friendly title for the application.",
                    "type": "string"
                },
                "tooltip": {
                    "description": "Optional tooltip description e.g. for a launcher or dock component",
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "required": [
                "appId",
                "icons",
                "manifest",
                "publisher",
                "title"
            ],
            "type": "object"
        },
        "PlatformAppInterop": {
            "$ref": "#/definitions/AppInterop",
            "description": "Application interop."
        },
        "PlatformCustomTheme": {
            "anyOf": [
                {
                    "$ref": "#/definitions/PlatformCustomThemeOptions",
                    "description": "Platform custom theme with options using extended types."
                },
                {
                    "$ref": "#/definitions/PlatformCustomThemeOptionsWithScheme",
                    "description": "Platform custom theme with options and scheme using extended types."
                }
            ],
            "description": "Platform custom theme either with or without options."
        },
        "PlatformCustomThemeOptions": {
            "additionalProperties": false,
            "description": "Platform custom theme with options using extended types.",
            "properties": {
                "default": {
                    "description": "If you are specifying a single palette in your theme and it is a light palette then you can indicate that by\nspecifying the default of light (otherwise we will assume it is dark) If you specify palettes and have a light\nand a dark palette then this setting specifies a default preference (it defaults to picking the dark palette if a\ndefault is not specified)",
                    "enum": [
                        "dark",
                        "light"
                    ],
                    "type": "string"
                },
                "iconFolder": {
                    "description": "If there is a shared folder across themes that have light and dark icons you can specify a folder name to use\ninstead of the theme id (or label if there is no id)",
                    "type": "string"
                },
                "id": {
                    "description": "An id to help identify this theme as labels can change over time and are used for display",
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "logoUrl": {
                    "type": "string"
                },
                "palette": {
                    "$ref": "#/definitions/CustomPaletteSet"
                }
            },
            "required": [
                "id",
                "label",
                "palette"
            ],
            "type": "object"
        },
        "PlatformCustomThemeOptionsWithScheme": {
            "additionalProperties": false,
            "description": "Platform custom theme with options and scheme using extended types.",
            "properties": {
                "default": {
                    "description": "If you are specifying a single palette in your theme and it is a light palette then you can indicate that by\nspecifying the default of light (otherwise we will assume it is dark) If you specify palettes and have a light\nand a dark palette then this setting specifies a default preference (it defaults to picking the dark palette if a\ndefault is not specified)",
                    "enum": [
                        "dark",
                        "light"
                    ],
                    "type": "string"
                },
                "iconFolder": {
                    "description": "If there is a shared folder across themes that have light and dark icons you can specify a folder name to use\ninstead of the theme id (or label if there is no id)",
                    "type": "string"
                },
                "id": {
                    "description": "An id to help identify this theme as labels can change over time and are used for display",
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "logoUrl": {
                    "type": "string"
                },
                "palettes": {
                    "additionalProperties": false,
                    "properties": {
                        "dark": {
                            "$ref": "#/definitions/CustomPaletteSet"
                        },
                        "light": {
                            "$ref": "#/definitions/CustomPaletteSet"
                        }
                    },
                    "required": [
                        "dark",
                        "light"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "id",
                "label",
                "palettes"
            ],
            "type": "object"
        },
        "PlatformCustomThemes": {
            "$ref": "#/definitions/Array_2"
        },
        "PlatformInteropBrokerOptions": {
            "additionalProperties": false,
            "description": "Options for the platform interop broker.",
            "properties": {
                "intentOptions": {
                    "$ref": "#/definitions/IntentOptions",
                    "description": "Options related to the way this platform supports intents"
                },
                "intentResolver": {
                    "$ref": "#/definitions/IntentResolverOptions",
                    "description": "Intent Resolver configuration if you wish to support intents. It needs to support the functions required by the\nplatform"
                },
                "unregisteredApp": {
                    "$ref": "#/definitions/PlatformApp",
                    "description": "If an unregistered app is included here then it indicates you wish to support selecting views/windows that are\nnot linked to an app from an intent picker that supports instances. The intents and contexts in this app specify\nwhich you support for unregistered instances. Do not specify a manifest or manifestType for this entry (we don't\nlaunch unregistered apps so there is no need for a manifest as it is existing instances and we specify a custom\nmanifestType for consideration when we are bringing an unregistered web app instance into focus)."
                }
            },
            "type": "object"
        },
        "PlatformProviderOptions": {
            "additionalProperties": false,
            "description": "Platform provider options.",
            "properties": {
                "initUrl": {
                    "description": "This is optional and only needed if you are using shell mode where you wish to load a small module with just auth\nlogic first followed by a module with the rest of the platform core. Specify the entry point here. We do generate\nthe provider bundle and provide an example in our docs.",
                    "type": "string"
                },
                "intentPicker": {
                    "$ref": "#/definitions/IntentResolverOptions",
                    "description": "Intent Picker is being removed in a future version. Please use interop.intentResolver for the resolver/picker\nsettings"
                },
                "interop": {
                    "$ref": "#/definitions/PlatformInteropBrokerOptions",
                    "description": "interop settings related to this platform"
                },
                "rootUrl": {
                    "description": "What is the root url of you platform e.g. https://mydomain.com",
                    "type": "string"
                },
                "sharing": {
                    "description": "Do you want to enable this platforms sharing capability (you will still need to have 2 endpoints called\nshare-save and share-get for the storing and retrieval of the share target)",
                    "type": "boolean"
                }
            },
            "required": [
                "rootUrl",
                "sharing"
            ],
            "type": "object"
        },
        "Point": {
            "$ref": "#/definitions/__type_32"
        },
        "PreDefinedButtonConfig": {
            "additionalProperties": false,
            "description": "Default Browser Button types",
            "properties": {
                "disabled": {
                    "type": "boolean"
                },
                "iconProps": {
                    "$ref": "#/definitions/unknown"
                },
                "iconUrl": {
                    "description": "icon URL for icon image",
                    "type": "string"
                },
                "tooltip": {
                    "description": "Button name text when hovered over",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/BrowserButtonType",
                    "description": "Type of default browser button"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "PrebuiltContextMenuItem": {
            "description": "Context menu item with an implementation provided by OpenFin.",
            "enum": [
                "copy",
                "cut",
                "inspect",
                "navigateBack",
                "navigateForward",
                "paste",
                "print",
                "redo",
                "reload",
                "selectAll",
                "separator",
                "spellCheck",
                "undo"
            ],
            "type": "string"
        },
        "RGB": {
            "$ref": "#/definitions/__type_6"
        },
        "RectangleByEdgePositions": {
            "$ref": "#/definitions/__type_34"
        },
        "ResizeRegion": {
            "$ref": "#/definitions/__type_10"
        },
        "ScoreOrder": {
            "description": "The order to sort scored search results in.",
            "enum": [
                "ascending",
                "descending"
            ],
            "type": "string"
        },
        "ShowHideTabsConfig": {
            "$ref": "#/definitions/__type_26"
        },
        "ShowViewOnWindowResizeOptions": {
            "additionalProperties": false,
            "description": "_Platform Windows Only_. Enables views to be shown when a Platform Window is being resized by the user.",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "paintIntervalMs": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Snapshot": {
            "$ref": "#/definitions/__type_30"
        },
        "SnapshotSourceConnection": {
            "additionalProperties": false,
            "description": "Specific type for a snapshot source connection.",
            "properties": {
                "type": {
                    "description": "The snapshotSource connection type allows connections to be accepted as a snapshot source",
                    "enum": [
                        "snapshotSource"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "StoreButtonConfig": {
            "additionalProperties": false,
            "description": "Store custom button configuration",
            "properties": {
                "action": {
                    "$ref": "#/definitions/CustomActionSpecifier_1",
                    "description": "Custom action once the button is clicked"
                },
                "disabled": {
                    "description": "Disable custom button true or false",
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                }
            },
            "required": [
                "action",
                "title"
            ],
            "type": "object"
        },
        "StorefrontFooter": {
            "additionalProperties": false,
            "properties": {
                "links": {
                    "description": "A set of links to display on Storefront's footer.",
                    "items": [
                        {
                            "$ref": "#/definitions/StorefrontLink"
                        },
                        {
                            "$ref": "#/definitions/StorefrontLink"
                        },
                        {
                            "$ref": "#/definitions/StorefrontLink"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 0,
                    "type": "array"
                },
                "logo": {
                    "$ref": "#/definitions/Image",
                    "description": "A logo to be displayed on the Storefront's footer."
                },
                "text": {
                    "type": "string"
                }
            },
            "required": [
                "links",
                "logo",
                "text"
            ],
            "type": "object"
        },
        "StorefrontLink": {
            "additionalProperties": false,
            "description": "Represents a link to be rendered inside Storefront.",
            "properties": {
                "title": {
                    "description": "A UI friendly title to render the link as.",
                    "type": "string"
                },
                "url": {
                    "description": "When the rendered `title` text is clicked, the user will be navigated to this URL.",
                    "type": "string"
                }
            },
            "required": [
                "title",
                "url"
            ],
            "type": "object"
        },
        "StorefrontProviderOptions": {
            "additionalProperties": false,
            "description": "Store Provider Options",
            "properties": {
                "footer": {
                    "$ref": "#/definitions/StorefrontFooter",
                    "description": "The configuration of the footer for the store"
                },
                "icon": {
                    "description": "The icon to be displayed in the store drop down",
                    "type": "string"
                },
                "id": {
                    "description": "The id you wish to use when you register the store component",
                    "type": "string"
                },
                "landingPage": {
                    "additionalProperties": false,
                    "description": "Configuration for the landing page",
                    "properties": {
                        "bottomRow": {
                            "$ref": "#/definitions/StorefrontSettingsLandingPageRow",
                            "description": "The bottom row of the landing page"
                        },
                        "hero": {
                            "additionalProperties": false,
                            "description": "Configuration for the hero section of the store if you wish one.",
                            "properties": {
                                "cta": {
                                    "$ref": "#/definitions/StorefrontSettingsNavigationItem",
                                    "description": "Configuration for the Call To Action button of the hero section"
                                },
                                "description": {
                                    "description": "The body description of the hero section",
                                    "type": "string"
                                },
                                "image": {
                                    "$ref": "#/definitions/Image",
                                    "description": "The image to display"
                                },
                                "title": {
                                    "description": "The title of the Hero section",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "cta",
                                "description",
                                "image",
                                "title"
                            ],
                            "type": "object"
                        },
                        "middleRow": {
                            "additionalProperties": false,
                            "description": "The middle row of the landing page",
                            "properties": {
                                "tags": {
                                    "description": "The tags to use as a source of apps. The store will take the first x number of apps until the row is full.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "title": {
                                    "description": "The title for the middle row",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "tags",
                                "title"
                            ],
                            "type": "object"
                        },
                        "topRow": {
                            "$ref": "#/definitions/StorefrontSettingsLandingPageRow",
                            "description": "Configuration for the top row of the landing page (just below the hero section if it is configured)"
                        }
                    },
                    "required": [
                        "bottomRow",
                        "middleRow",
                        "topRow"
                    ],
                    "type": "object"
                },
                "navigation": {
                    "description": "Navigation entries.",
                    "items": {
                        "additionalProperties": false,
                        "properties": {
                            "id": {
                                "description": "This should be an idempotent and unique ID (think GUID) that doesn't change for this navigation section\nregardless of how many times it is regenerated (e.g. e.g. more items can be added or the title changed but\nthe ID stays the same). As you navigate around the store this ID is used as a route. So if a user clicks on a\nlink, navigates to a new page and the re-requested navigation section has a different ID then the store will\nnot be able to find a match and it won't be able to render the navigation items.",
                                "type": "string"
                            },
                            "items": {
                                "description": "The items to list when the user navigates to that section of the store",
                                "items": {
                                    "$ref": "#/definitions/StorefrontSettingsNavigationItem"
                                },
                                "type": "array"
                            },
                            "title": {
                                "description": "The title to show in the navigation",
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "items",
                            "title"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "primaryButton": {
                    "$ref": "#/definitions/StoreButtonConfig",
                    "description": "The action triggered when the primary button is clicked, defaults to launching the app."
                },
                "secondaryButtons": {
                    "description": "Secondary buttons added to all store entries.",
                    "items": {
                        "$ref": "#/definitions/StoreButtonConfig"
                    },
                    "type": "array"
                },
                "title": {
                    "description": "The title for the store which will show up in the store dropdown",
                    "type": "string"
                }
            },
            "required": [
                "footer",
                "icon",
                "id",
                "landingPage",
                "navigation",
                "title"
            ],
            "type": "object"
        },
        "StorefrontSettingsLandingPageRow": {
            "additionalProperties": false,
            "description": "Landing page row containing title and items.",
            "properties": {
                "items": {
                    "description": "The items in the row.",
                    "items": {
                        "$ref": "#/definitions/StorefrontSettingsRowNavigationItem"
                    },
                    "type": "array"
                },
                "title": {
                    "description": "The title for the row.",
                    "type": "string"
                }
            },
            "required": [
                "items",
                "title"
            ],
            "type": "object"
        },
        "StorefrontSettingsNavigationItem": {
            "additionalProperties": false,
            "description": "A navigation item.",
            "properties": {
                "id": {
                    "description": "This should be an idempotent and unique ID (think GUID) that doesn't change for this navigation item regardless\nof how many times it is regenerated (e.g. e.g. more items can be added or the title changed but the ID stays the\nsame). As you navigate around the store this ID is used as a route. So if a user clicks on a link, navigates to a\nnew page and the re-requested navigation item has a different ID then the store will not be able to find a match\nand it won't be able to render the navigation item.",
                    "type": "string"
                },
                "tags": {
                    "description": "The Storefront API has a collection of apps for a navigation item. Tags is an approach for how you can determine\nwhat apps should be included in a navigation item. i.e we filter the apps list by one or more tags and assign\nthose apps to the navigation item.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "title": {
                    "description": "The title for the navigation item",
                    "type": "string"
                }
            },
            "required": [
                "tags",
                "title"
            ],
            "type": "object"
        },
        "StorefrontSettingsRowNavigationItem": {
            "additionalProperties": false,
            "description": "Extends the row navigation item.",
            "properties": {
                "buttonTitle": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "description": "This should be an idempotent and unique ID (think GUID) that doesn't change for this navigation item regardless\nof how many times it is regenerated (e.g. e.g. more items can be added or the title changed but the ID stays the\nsame). As you navigate around the store this ID is used as a route. So if a user clicks on a link, navigates to a\nnew page and the re-requested navigation item has a different ID then the store will not be able to find a match\nand it won't be able to render the navigation item.",
                    "type": "string"
                },
                "image": {
                    "$ref": "#/definitions/Image"
                },
                "tags": {
                    "description": "The Storefront API has a collection of apps for a navigation item. Tags is an approach for how you can determine\nwhat apps should be included in a navigation item. i.e we filter the apps list by one or more tags and assign\nthose apps to the navigation item.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "title": {
                    "description": "The title for the navigation item",
                    "type": "string"
                }
            },
            "required": [
                "description",
                "image",
                "tags",
                "title"
            ],
            "type": "object"
        },
        "T": {
            "enum": [
                "block",
                "browser",
                "view",
                "window"
            ],
            "type": "string"
        },
        "TaskBar": {
            "additionalProperties": false,
            "properties": {
                "edge": {
                    "description": "Which edge of a monitor the taskbar is on",
                    "type": "string"
                },
                "rect": {
                    "$ref": "#/definitions/RectangleByEdgePositions",
                    "description": "The taskbar coordinates."
                }
            },
            "required": [
                "edge",
                "rect"
            ],
            "type": "object"
        },
        "ThemeProviderOptions": {
            "additionalProperties": false,
            "description": "Platform theme configuration",
            "properties": {
                "cssVarPrefix": {
                    "description": "If providing the palette through css variables would you like a specific custom prefix?",
                    "type": "string"
                },
                "schemaNames": {
                    "additionalProperties": false,
                    "description": "If providing a class at the root document for content providers to indicate light/dark would you like to provide\nsomething other than the default.",
                    "properties": {
                        "dark": {
                            "type": "string"
                        },
                        "light": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "themes": {
                    "$ref": "#/definitions/PlatformCustomThemes",
                    "description": "The Themes you wish your platform to support"
                }
            },
            "required": [
                "themes"
            ],
            "type": "object"
        },
        "ToolbarButton": {
            "anyOf": [
                {
                    "$ref": "#/definitions/ShowHideTabsConfig",
                    "description": "Configuration Object for the show/hide tabs button within the browser toolbar"
                },
                {
                    "$ref": "#/definitions/LockUnlockPageConfig",
                    "description": "Configuration Object for the page lock/unlock button within the browser toolbar"
                },
                {
                    "$ref": "#/definitions/CustomBrowserButtonConfig"
                },
                {
                    "$ref": "#/definitions/PreDefinedButtonConfig"
                }
            ],
            "description": "Buttons on the left of WindowStateButtonOptions"
        },
        "ToolbarOptions": {
            "additionalProperties": false,
            "properties": {
                "buttons": {
                    "items": {
                        "$ref": "#/definitions/ToolbarButton"
                    },
                    "type": "array"
                }
            },
            "required": [
                "buttons"
            ],
            "type": "object"
        },
        "VersionInfo": {
            "additionalProperties": false,
            "description": "Information about the version of the platform and it's dependencies",
            "properties": {
                "app": {
                    "description": "The version of the the instance of this platform if provided",
                    "type": "string"
                },
                "notificationCenter": {
                    "description": "The version of the notification center that this platform instance has connected to",
                    "type": "string"
                },
                "platformClient": {
                    "description": "The version of the code of this platform",
                    "type": "string"
                },
                "runtime": {
                    "description": "The version of the runtime this platform instance is running against",
                    "type": "string"
                },
                "rvm": {
                    "description": "The version of the rvm that was used to launch this platform",
                    "type": "string"
                },
                "workspace": {
                    "description": "The version of the workspace components this platform is currently connected to",
                    "type": "string"
                },
                "workspaceClient": {
                    "description": "The version of the workspace client code",
                    "type": "string"
                },
                "workspacePlatformClient": {
                    "description": "The version of the workspace platform client code",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VersionProviderOptions": {
            "additionalProperties": false,
            "description": "Settings related to the configuration of the version provider.",
            "properties": {
                "appVersion": {
                    "description": "The version of the the instance of this platform",
                    "type": "string"
                },
                "endpointId": {
                    "description": "If you specify an endpoint then you are telling the platform to send information to this endpoint. The\ninformation sent will be the VersionRequest object. If you provide minimumVersion and maximumVersion information\nin the settings then the platform will use those to calculate what has failed validation (minimum and/or maximum)\nand pass those onto the endpoint.\n\nThe endpoint then returns an object with status (this returns the version info you sent, the min/max rules and\nwhat has failed. The failures indicate the state of the platform.). If the status indicates that things need to\nbe managed and should not proceed they will have a windowOptions property. This should be launched and that\nwindow will be built to support what should happen next.\n- Should the window tell the user that the setup isn't compatible and offer to shut down the platform?\n- Should it try to close the platform and launch a compatible manifest?\n- Should it notify the user that a newer version of the app is available and that they should restart? On the\ninitial request while the platform is running an invalid status will result in the bootstrapping stopping.",
                    "type": "string"
                },
                "maxVersion": {
                    "$ref": "#/definitions/MaximumVersion",
                    "description": "You can specify if the platform should stop initializing if the version is more than any of the specified maximum\nversions"
                },
                "minVersion": {
                    "$ref": "#/definitions/MinimumVersion",
                    "description": "You can specify if the platform should stop initializing if the version is less than any of the specified minimum\nversions"
                },
                "versionCheckIntervalInSeconds": {
                    "description": "If an endpoint is specified and an interval is specified then you want the platform to call this endpoint on an\ninterval to see if an update of your application is available.",
                    "type": "number"
                },
                "versionWindow": {
                    "$ref": "#/definitions/Partial_2",
                    "description": "This window will be shown if an endpointId is not specified and min and max criteria has been specified and has\nnot been met. This window will be shown to the user and the bootstrapping process will be stopped."
                }
            },
            "type": "object"
        },
        "ViewOptions": {
            "additionalProperties": false,
            "description": "User-facing options for a view.",
            "properties": {
                "_internalWorkspaceData": {},
                "accelerator": {
                    "$ref": "#/definitions/Partial_4",
                    "description": "Enable keyboard shortcuts for devtools, zoom, reload, and reload ignoring cache."
                },
                "api": {
                    "$ref": "#/definitions/Api",
                    "description": "Configurations for API injection."
                },
                "autoResize": {
                    "$ref": "#/definitions/AutoResizeOptions"
                },
                "autoplayPolicy": {
                    "$ref": "#/definitions/AutoplayPolicyOptions",
                    "description": "Autoplay policy to apply to content in the window, can be\n`no-user-gesture-required`, `user-gesture-required`,\n`document-user-activation-required`. Defaults to `no-user-gesture-required`."
                },
                "backgroundColor": {
                    "description": "The view’s _backfill_ color as a hexadecimal value. Not to be confused with the content background color\n(`document.body.style.backgroundColor`),\nthis color briefly fills a view’s (a) content area before its content is loaded as well as (b) newly exposed\nareas when growing a view. Setting\nthis value to the anticipated content background color can help improve user experience.\nDefault is white.",
                    "type": "string"
                },
                "bounds": {
                    "$ref": "#/definitions/Bounds",
                    "description": "Initial bounds given relative to the window."
                },
                "contentCreation": {
                    "$ref": "#/definitions/ContentCreationOptions",
                    "description": "Configures how new content (e,g, from `window.open` or a link) is opened."
                },
                "contentNavigation": {
                    "$ref": "#/definitions/ContentNavigation",
                    "description": "Restrict navigation to URLs that match a whitelisted pattern.\nIn the lack of a whitelist, navigation to URLs that match a blacklisted pattern would be prohibited.\nSee [here](https://developer.chrome.com/extensions/match_patterns) for more details."
                },
                "contextMenu": {
                    "type": "boolean"
                },
                "contextMenuOptions": {
                    "$ref": "#/definitions/ContextMenuOptions",
                    "description": "Configure the context menu when right-clicking on a window."
                },
                "contextMenuSettings": {
                    "$ref": "#/definitions/ContextMenuSettings"
                },
                "customContext": {
                    "description": "A field that the user can use to attach serializable data that will be saved when {@link Platform#getSnapshot Platform.getSnapshot}\nis called.  If a window in a Platform is trying to update or retrieve its own context, it can use the\n{@link Platform#setWindowContext Platform.setWindowContext} and {@link Platform#getWindowContext Platform.getWindowContext} calls.\n_When omitted, _inherits_ from the parent application._\nAs opposed to customData, this is meant for frequent updates and sharing with other contexts. [Example]{@tutorial customContext}"
                },
                "customData": {
                    "description": "A field that the user can attach serializable data to be ferried around with the window options.\n_When omitted, _inherits_ from the parent application._"
                },
                "customRequestHeaders": {
                    "description": "Custom headers for requests sent by the view.",
                    "items": {
                        "additionalProperties": false,
                        "description": "Custom headers for requests sent by the window.",
                        "properties": {
                            "headers": {
                                "description": "Headers for requests sent by window; {key: value} results\nin a header of `key=value`.",
                                "items": {
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "Object representing headers and their values, where the\nobject key is the name of header and value key is the value of the header",
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "urlPatterns": {
                                "description": "The URL patterns for which the headers will be applied.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "headers",
                            "urlPatterns"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "detachOnClose": {
                    "type": "boolean"
                },
                "enableBeforeUnload": {
                    "type": "boolean"
                },
                "experimental": {},
                "fdc3InteropApi": {
                    "type": "string"
                },
                "hotkeys": {
                    "description": "Defines the hotkeys that will be emitted as a `hotkey` event on the view. For usage example see [example]{@tutorial hotkeys}.\nWithin Platform, OpenFin also implements a set of pre-defined actions called\n[keyboard commands]{@link https://developers.openfin.co/docs/platform-api#section-5-3-using-keyboard-commands}\nthat can be assigned to a specific hotkey in the platform manifest.",
                    "items": {
                        "additionalProperties": false,
                        "description": "A hotkey binding.",
                        "properties": {
                            "keys": {
                                "description": "The key combination of the hotkey, i.e. \"Ctrl+T\".",
                                "type": "string"
                            },
                            "preventDefault": {
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "keys"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "interop": {
                    "$ref": "#/definitions/InteropConfig"
                },
                "isClosable": {
                    "type": "boolean"
                },
                "manifestUrl": {
                    "description": "**Platforms Only.** Url to a manifest that contains View Options. Properties other than manifestUrl can still be used\nbut the properties in the manifest will take precedence if there is any collision.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the view.",
                    "type": "string"
                },
                "permissions": {
                    "$ref": "#/definitions/Partial_6"
                },
                "preloadScripts": {
                    "description": "Scripts that run before page load.  When omitted, inherits from the parent application.",
                    "items": {
                        "additionalProperties": false,
                        "description": "A script that is run before page load.",
                        "properties": {
                            "mandatory": {
                                "type": "boolean"
                            },
                            "state": {
                                "description": "Preload script execution state.",
                                "enum": [
                                    "failed",
                                    "load-failed",
                                    "load-started",
                                    "load-succeeded",
                                    "succeeded"
                                ],
                                "type": "string"
                            },
                            "url": {
                                "description": "The URL from which the script was loaded.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "url"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "preventDragOut": {
                    "type": "boolean"
                },
                "processAffinity": {
                    "description": "String tag that attempts to group like-tagged renderers together. Will only be used if pages are on the same origin.",
                    "type": "string"
                },
                "target": {
                    "$ref": "#/definitions/Identity",
                    "description": "The identity of the window this view should be attached to."
                },
                "url": {
                    "type": "string"
                },
                "zoomLevel": {
                    "type": "number"
                }
            },
            "required": [
                "_internalWorkspaceData",
                "api",
                "autoResize",
                "autoplayPolicy",
                "backgroundColor",
                "bounds",
                "contentCreation",
                "contentNavigation",
                "contextMenu",
                "contextMenuOptions",
                "contextMenuSettings",
                "customContext",
                "customData",
                "customRequestHeaders",
                "detachOnClose",
                "enableBeforeUnload",
                "experimental",
                "hotkeys",
                "isClosable",
                "manifestUrl",
                "name",
                "permissions",
                "preloadScripts",
                "preventDragOut",
                "processAffinity",
                "target",
                "url",
                "zoomLevel"
            ],
            "type": "object"
        },
        "ViewTabMenuOptionType": {
            "description": "View tab context menu types for {@link WorkspacePlatformProvider.openViewTabContextMenu} override.",
            "enum": [
                "AddToChannel",
                "Back",
                "CloseTab",
                "Custom",
                "DuplicateView",
                "Forward",
                "NewView",
                "OpenWithDefaultBrowser",
                "Print",
                "ReloadTab",
                "RemoveFromChannel"
            ],
            "type": "string"
        },
        "ViewVisibilityOption": {
            "$ref": "#/definitions/__type_21"
        },
        "ViewVisibilityOptions": {
            "$ref": "#/definitions/__type_20"
        },
        "WebPermission": {
            "enum": [
                "audio",
                "clipboard-read",
                "clipboard-sanitized-write",
                "fullscreen",
                "geolocation",
                "midiSysex",
                "notifications",
                "openExternal",
                "pointerLock",
                "video"
            ],
            "type": "string"
        },
        "WindowCreationOptions": {
            "additionalProperties": false,
            "description": "Options required to create a new window with {@link Window.create Window.create}.\n\nNote that `name` is the only required property — albeit the `url` property is usually provided as well\n(defaults to `\"about:blank\"` when omitted).",
            "properties": {
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "WindowCreationReason": {
            "enum": [
                "api-call",
                "app-creation",
                "apply-snapshot",
                "create-view-without-target",
                "restore",
                "tearout"
            ],
            "type": "string"
        },
        "WindowOptions": {
            "additionalProperties": false,
            "properties": {
                "_internalWorkspaceData": {},
                "accelerator": {
                    "$ref": "#/definitions/Partial_4",
                    "description": "Enable keyboard shortcuts for devtools, zoom, reload, and reload ignoring cache."
                },
                "alphaMask": {
                    "$ref": "#/definitions/RGB",
                    "description": "Turns anything of matching RGB value transparent.\n\nCaveats:\n* runtime key --disable-gpu is required. Note: Unclear behavior on remote Desktop support\n* User cannot click-through transparent regions\n* Not supported on Mac\n* Windows Aero must be enabled\n* Won't make visual sense on Pixel-pushed environments such as Citrix\n* Not supported on rounded corner windows"
                },
                "alwaysOnTop": {
                    "type": "boolean"
                },
                "api": {
                    "$ref": "#/definitions/Api",
                    "description": "Configurations for API injection."
                },
                "applicationIcon": {
                    "type": "string"
                },
                "aspectRatio": {
                    "type": "number"
                },
                "autoShow": {
                    "description": "Automatically show the window when it is created.",
                    "type": "boolean"
                },
                "autoplayPolicy": {
                    "$ref": "#/definitions/AutoplayPolicyOptions",
                    "description": "Autoplay policy to apply to content in the window, can be\n`no-user-gesture-required`, `user-gesture-required`,\n`document-user-activation-required`. Defaults to `no-user-gesture-required`."
                },
                "backgroundColor": {
                    "description": "The window’s _backfill_ color as a hexadecimal value. Not to be confused with the content background color\n(`document.body.style.backgroundColor`),\nthis color briefly fills a window’s (a) content area before its content is loaded as well as (b) newly exposed\nareas when growing a window. Setting\nthis value to the anticipated content background color can help improve user experience.\nDefault is white.",
                    "type": "string"
                },
                "closeOnLastViewRemoved": {
                    "type": "boolean"
                },
                "contentCreation": {
                    "$ref": "#/definitions/ContentCreationOptions",
                    "description": "Configures how new content (e,g, from `window.open` or a link) is opened."
                },
                "contentNavigation": {
                    "$ref": "#/definitions/ContentNavigation",
                    "description": "Restrict navigation to URLs that match a whitelisted pattern.\nIn the lack of a whitelist, navigation to URLs that match a blacklisted pattern would be prohibited.\nSee [here](https://developer.chrome.com/extensions/match_patterns) for more details."
                },
                "contentRedirect": {
                    "$ref": "#/definitions/Partial_5",
                    "description": "Restrict redirects to URLs that match a whitelisted pattern.\nIn the lack of a whitelist, redirects to URLs that match a blacklisted pattern would be prohibited.\nSee [here](https://developer.chrome.com/extensions/match_patterns) for more details."
                },
                "contextMenu": {
                    "type": "boolean"
                },
                "contextMenuOptions": {
                    "$ref": "#/definitions/ContextMenuOptions",
                    "description": "Configure the context menu when right-clicking on a window."
                },
                "contextMenuSettings": {
                    "$ref": "#/definitions/ContextMenuSettings"
                },
                "cornerRounding": {
                    "$ref": "#/definitions/Partial_3",
                    "description": "Defines and applies rounded corners for a frameless window. **NOTE:** On macOS corner is not ellipse but circle rounded by the\n average of _height_ and _width_."
                },
                "customContext": {
                    "description": "A field that the user can use to attach serializable data that will be saved when {@link Platform#getSnapshot Platform.getSnapshot}\nis called.  If a window in a Platform is trying to update or retrieve its own context, it can use the\n{@link Platform#setWindowContext Platform.setWindowContext} and {@link Platform#getWindowContext Platform.getWindowContext} calls.\n_When omitted, _inherits_ from the parent application._\nAs opposed to customData, this is meant for frequent updates and sharing with other contexts. [Example]{@tutorial customContext}"
                },
                "customData": {
                    "description": "A field that the user can attach serializable data to be ferried around with the window options.\n_When omitted, _inherits_ from the parent application._"
                },
                "customRequestHeaders": {
                    "description": "Custom headers for requests sent by the window.",
                    "items": {
                        "additionalProperties": false,
                        "description": "Custom headers for requests sent by the window.",
                        "properties": {
                            "headers": {
                                "description": "Headers for requests sent by window; {key: value} results\nin a header of `key=value`.",
                                "items": {
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "Object representing headers and their values, where the\nobject key is the name of header and value key is the value of the header",
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "urlPatterns": {
                                "description": "The URL patterns for which the headers will be applied.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "headers",
                            "urlPatterns"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "defaultCentered": {
                    "description": "Centers the window in the primary monitor. This option overrides `defaultLeft` and `defaultTop`. When `saveWindowState` is `true`,\nthis value will be ignored for subsequent launches in favor of the cached value. **NOTE:** On macOS _defaultCenter_ is\nsomewhat above center vertically.",
                    "type": "boolean"
                },
                "defaultHeight": {
                    "type": "number"
                },
                "defaultLeft": {
                    "type": "number"
                },
                "defaultTop": {
                    "type": "number"
                },
                "defaultWidth": {
                    "type": "number"
                },
                "experimental": {},
                "fdc3InteropApi": {
                    "type": "string"
                },
                "frame": {
                    "type": "boolean"
                },
                "height": {
                    "type": "number"
                },
                "hideOnClose": {
                    "type": "boolean"
                },
                "hotkeys": {
                    "description": "Defines the hotkeys that will be emitted as a `hotkey` event on the window. For usage example see [example]{@tutorial hotkeys}.\nWithin Platform, OpenFin also implements a set of pre-defined actions called\n[keyboard commands]{@link https://developers.openfin.co/docs/platform-api#section-5-3-using-keyboard-commands}\nthat can be assigned to a specific hotkey in the platform manifest.",
                    "items": {
                        "additionalProperties": false,
                        "description": "A hotkey binding.",
                        "properties": {
                            "keys": {
                                "description": "The key combination of the hotkey, i.e. \"Ctrl+T\".",
                                "type": "string"
                            },
                            "preventDefault": {
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "keys"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "icon": {
                    "description": "A URL for the icon to be shown in the window title bar and the taskbar.\nWhen omitted, inherits from the parent application._\n note: Window OS caches taskbar icons, therefore an icon change might only be visible after the cache is removed or the uuid is changed.",
                    "type": "string"
                },
                "ignoreSavedWindowState": {
                    "description": "Ignores the cached state of the window.\nDefaults the opposite value of `saveWindowState` to maintain backwards compatibility.",
                    "type": "boolean"
                },
                "includeInSnapshots": {
                    "type": "boolean"
                },
                "interop": {
                    "$ref": "#/definitions/InteropConfig"
                },
                "layout": {},
                "maxHeight": {
                    "type": "number"
                },
                "maxWidth": {
                    "type": "number"
                },
                "maximizable": {
                    "type": "boolean"
                },
                "minHeight": {
                    "type": "number"
                },
                "minWidth": {
                    "type": "number"
                },
                "minimizable": {
                    "type": "boolean"
                },
                "modalParentIdentity": {
                    "$ref": "#/definitions/Identity",
                    "description": "Parent identity of a modal window. It will create a modal child window when this option is set."
                },
                "name": {
                    "description": "The name of the window.",
                    "type": "string"
                },
                "opacity": {
                    "type": "number"
                },
                "permissions": {
                    "$ref": "#/definitions/Partial_6"
                },
                "preloadScripts": {
                    "description": "Scripts that run before page load.  When omitted, inherits from the parent application.",
                    "items": {
                        "additionalProperties": false,
                        "description": "A script that is run before page load.",
                        "properties": {
                            "mandatory": {
                                "type": "boolean"
                            },
                            "state": {
                                "description": "Preload script execution state.",
                                "enum": [
                                    "failed",
                                    "load-failed",
                                    "load-started",
                                    "load-succeeded",
                                    "succeeded"
                                ],
                                "type": "string"
                            },
                            "url": {
                                "description": "The URL from which the script was loaded.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "url"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "processAffinity": {
                    "description": "String tag that attempts to group like-tagged renderers together. Will only be used if pages are on the same origin.",
                    "type": "string"
                },
                "resizable": {
                    "type": "boolean"
                },
                "resizeRegion": {
                    "$ref": "#/definitions/ResizeRegion",
                    "description": "Defines a region in pixels that will respond to user mouse interaction for resizing a frameless window."
                },
                "saveWindowState": {
                    "type": "boolean"
                },
                "shadow": {
                    "type": "boolean"
                },
                "showBackgroundImages": {
                    "type": "boolean"
                },
                "showTaskbarIcon": {
                    "type": "boolean"
                },
                "smallWindow": {
                    "type": "boolean"
                },
                "state": {
                    "$ref": "#/definitions/WindowState"
                },
                "taskbarIcon": {
                    "type": "string"
                },
                "taskbarIconGroup": {
                    "description": "Specify a taskbar group for the window.\n_If omitted, defaults to app's uuid (`fin.Application.getCurrentSync().identity.uuid`)._",
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                },
                "viewVisibility": {
                    "$ref": "#/definitions/ViewVisibilityOptions",
                    "description": "_Platform Windows Only_. Controls behavior for showing views when they are being resized by the user."
                },
                "waitForPageLoad": {
                    "type": "boolean"
                },
                "width": {
                    "type": "number"
                },
                "workspacePlatform": {
                    "$ref": "#/definitions/WorkspacePlatformOptions"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                }
            },
            "required": [
                "_internalWorkspaceData",
                "accelerator",
                "alphaMask",
                "alwaysOnTop",
                "api",
                "applicationIcon",
                "aspectRatio",
                "autoShow",
                "autoplayPolicy",
                "backgroundColor",
                "closeOnLastViewRemoved",
                "contentCreation",
                "contentNavigation",
                "contentRedirect",
                "contextMenu",
                "contextMenuOptions",
                "contextMenuSettings",
                "cornerRounding",
                "customContext",
                "customData",
                "customRequestHeaders",
                "defaultCentered",
                "defaultHeight",
                "defaultLeft",
                "defaultTop",
                "defaultWidth",
                "frame",
                "height",
                "hideOnClose",
                "hotkeys",
                "icon",
                "ignoreSavedWindowState",
                "includeInSnapshots",
                "interop",
                "layout",
                "maxHeight",
                "maxWidth",
                "maximizable",
                "minHeight",
                "minWidth",
                "minimizable",
                "modalParentIdentity",
                "name",
                "opacity",
                "permissions",
                "preloadScripts",
                "processAffinity",
                "resizable",
                "resizeRegion",
                "saveWindowState",
                "shadow",
                "showBackgroundImages",
                "showTaskbarIcon",
                "smallWindow",
                "state",
                "taskbarIcon",
                "taskbarIconGroup",
                "url",
                "uuid",
                "waitForPageLoad",
                "width",
                "workspacePlatform",
                "x",
                "y"
            ],
            "type": "object"
        },
        "WindowState": {
            "description": "Visibility state of a window.",
            "enum": [
                "maximized",
                "minimized",
                "normal"
            ],
            "type": "string"
        },
        "WindowStateButton": {
            "anyOf": [
                {
                    "$ref": "#/definitions/CustomBrowserButtonConfig"
                },
                {
                    "$ref": "#/definitions/PreDefinedButtonConfig"
                }
            ],
            "description": "Buttons to the top far right of Browser"
        },
        "WindowStateButtonOptions": {
            "additionalProperties": false,
            "properties": {
                "buttons": {
                    "items": {
                        "$ref": "#/definitions/WindowStateButton"
                    },
                    "type": "array"
                }
            },
            "required": [
                "buttons"
            ],
            "type": "object"
        },
        "WorkspacePlatformOptions": {
            "$ref": "#/definitions/__type_12"
        },
        "WorkspacePlatformToolbarButton": {
            "additionalProperties": false,
            "description": "Toolbar button with can be visibility options.",
            "properties": {
                "button": {
                    "$ref": "#/definitions/ToolbarButton",
                    "description": "Details about the button itself"
                },
                "conditions": {
                    "description": "If the button is included should there be conditions related to whether or not it is shown (e.g. authenticated)",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique id for your button",
                    "type": "string"
                },
                "include": {
                    "description": "Should this definition be included in the list of buttons",
                    "type": "boolean"
                }
            },
            "required": [
                "button",
                "id",
                "include"
            ],
            "type": "object"
        },
        "__type": {
            "additionalProperties": false,
            "properties": {
                "_internalWorkspaceData": {},
                "accelerator": {
                    "$ref": "#/definitions/Partial_4",
                    "description": "Enable keyboard shortcuts for devtools, zoom, reload, and reload ignoring cache."
                },
                "alphaMask": {
                    "$ref": "#/definitions/RGB",
                    "description": "Turns anything of matching RGB value transparent.\n\nCaveats:\n* runtime key --disable-gpu is required. Note: Unclear behavior on remote Desktop support\n* User cannot click-through transparent regions\n* Not supported on Mac\n* Windows Aero must be enabled\n* Won't make visual sense on Pixel-pushed environments such as Citrix\n* Not supported on rounded corner windows"
                },
                "alwaysOnTop": {
                    "type": "boolean"
                },
                "api": {
                    "$ref": "#/definitions/Api",
                    "description": "Configurations for API injection."
                },
                "applicationIcon": {
                    "type": "string"
                },
                "aspectRatio": {
                    "type": "number"
                },
                "autoShow": {
                    "description": "Automatically show the window when it is created.",
                    "type": "boolean"
                },
                "autoplayPolicy": {
                    "$ref": "#/definitions/AutoplayPolicyOptions",
                    "description": "Autoplay policy to apply to content in the window, can be\n`no-user-gesture-required`, `user-gesture-required`,\n`document-user-activation-required`. Defaults to `no-user-gesture-required`."
                },
                "backgroundColor": {
                    "description": "The window’s _backfill_ color as a hexadecimal value. Not to be confused with the content background color\n(`document.body.style.backgroundColor`),\nthis color briefly fills a window’s (a) content area before its content is loaded as well as (b) newly exposed\nareas when growing a window. Setting\nthis value to the anticipated content background color can help improve user experience.\nDefault is white.",
                    "type": "string"
                },
                "closeOnLastViewRemoved": {
                    "type": "boolean"
                },
                "contentCreation": {
                    "$ref": "#/definitions/ContentCreationOptions",
                    "description": "Configures how new content (e,g, from `window.open` or a link) is opened."
                },
                "contentNavigation": {
                    "$ref": "#/definitions/ContentNavigation",
                    "description": "Restrict navigation to URLs that match a whitelisted pattern.\nIn the lack of a whitelist, navigation to URLs that match a blacklisted pattern would be prohibited.\nSee [here](https://developer.chrome.com/extensions/match_patterns) for more details."
                },
                "contentRedirect": {
                    "$ref": "#/definitions/Partial_5",
                    "description": "Restrict redirects to URLs that match a whitelisted pattern.\nIn the lack of a whitelist, redirects to URLs that match a blacklisted pattern would be prohibited.\nSee [here](https://developer.chrome.com/extensions/match_patterns) for more details."
                },
                "contextMenu": {
                    "type": "boolean"
                },
                "contextMenuOptions": {
                    "$ref": "#/definitions/ContextMenuOptions",
                    "description": "Configure the context menu when right-clicking on a window."
                },
                "contextMenuSettings": {
                    "$ref": "#/definitions/ContextMenuSettings"
                },
                "cornerRounding": {
                    "$ref": "#/definitions/Partial_3",
                    "description": "Defines and applies rounded corners for a frameless window. **NOTE:** On macOS corner is not ellipse but circle rounded by the\n average of _height_ and _width_."
                },
                "customContext": {
                    "description": "A field that the user can use to attach serializable data that will be saved when {@link Platform#getSnapshot Platform.getSnapshot}\nis called.  If a window in a Platform is trying to update or retrieve its own context, it can use the\n{@link Platform#setWindowContext Platform.setWindowContext} and {@link Platform#getWindowContext Platform.getWindowContext} calls.\n_When omitted, _inherits_ from the parent application._\nAs opposed to customData, this is meant for frequent updates and sharing with other contexts. [Example]{@tutorial customContext}"
                },
                "customData": {
                    "description": "A field that the user can attach serializable data to be ferried around with the window options.\n_When omitted, _inherits_ from the parent application._"
                },
                "customRequestHeaders": {
                    "description": "Custom headers for requests sent by the window.",
                    "items": {
                        "additionalProperties": false,
                        "description": "Custom headers for requests sent by the window.",
                        "properties": {
                            "headers": {
                                "description": "Headers for requests sent by window; {key: value} results\nin a header of `key=value`.",
                                "items": {
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "Object representing headers and their values, where the\nobject key is the name of header and value key is the value of the header",
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "urlPatterns": {
                                "description": "The URL patterns for which the headers will be applied.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "headers",
                            "urlPatterns"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "defaultCentered": {
                    "description": "Centers the window in the primary monitor. This option overrides `defaultLeft` and `defaultTop`. When `saveWindowState` is `true`,\nthis value will be ignored for subsequent launches in favor of the cached value. **NOTE:** On macOS _defaultCenter_ is\nsomewhat above center vertically.",
                    "type": "boolean"
                },
                "defaultHeight": {
                    "type": "number"
                },
                "defaultLeft": {
                    "type": "number"
                },
                "defaultTop": {
                    "type": "number"
                },
                "defaultWidth": {
                    "type": "number"
                },
                "experimental": {},
                "fdc3InteropApi": {
                    "type": "string"
                },
                "frame": {
                    "type": "boolean"
                },
                "height": {
                    "type": "number"
                },
                "hideOnClose": {
                    "type": "boolean"
                },
                "hotkeys": {
                    "description": "Defines the hotkeys that will be emitted as a `hotkey` event on the window. For usage example see [example]{@tutorial hotkeys}.\nWithin Platform, OpenFin also implements a set of pre-defined actions called\n[keyboard commands]{@link https://developers.openfin.co/docs/platform-api#section-5-3-using-keyboard-commands}\nthat can be assigned to a specific hotkey in the platform manifest.",
                    "items": {
                        "additionalProperties": false,
                        "description": "A hotkey binding.",
                        "properties": {
                            "keys": {
                                "description": "The key combination of the hotkey, i.e. \"Ctrl+T\".",
                                "type": "string"
                            },
                            "preventDefault": {
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "keys"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "icon": {
                    "description": "A URL for the icon to be shown in the window title bar and the taskbar.\nWhen omitted, inherits from the parent application._\n note: Window OS caches taskbar icons, therefore an icon change might only be visible after the cache is removed or the uuid is changed.",
                    "type": "string"
                },
                "ignoreSavedWindowState": {
                    "description": "Ignores the cached state of the window.\nDefaults the opposite value of `saveWindowState` to maintain backwards compatibility.",
                    "type": "boolean"
                },
                "includeInSnapshots": {
                    "type": "boolean"
                },
                "interop": {
                    "$ref": "#/definitions/InteropConfig"
                },
                "layout": {},
                "maxHeight": {
                    "type": "number"
                },
                "maxWidth": {
                    "type": "number"
                },
                "maximizable": {
                    "type": "boolean"
                },
                "minHeight": {
                    "type": "number"
                },
                "minWidth": {
                    "type": "number"
                },
                "minimizable": {
                    "type": "boolean"
                },
                "modalParentIdentity": {
                    "$ref": "#/definitions/Identity",
                    "description": "Parent identity of a modal window. It will create a modal child window when this option is set."
                },
                "name": {
                    "description": "The name of the window.",
                    "type": "string"
                },
                "opacity": {
                    "type": "number"
                },
                "permissions": {
                    "$ref": "#/definitions/Partial_6"
                },
                "preloadScripts": {
                    "description": "Scripts that run before page load.  When omitted, inherits from the parent application.",
                    "items": {
                        "additionalProperties": false,
                        "description": "A script that is run before page load.",
                        "properties": {
                            "mandatory": {
                                "type": "boolean"
                            },
                            "state": {
                                "description": "Preload script execution state.",
                                "enum": [
                                    "failed",
                                    "load-failed",
                                    "load-started",
                                    "load-succeeded",
                                    "succeeded"
                                ],
                                "type": "string"
                            },
                            "url": {
                                "description": "The URL from which the script was loaded.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "url"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "processAffinity": {
                    "description": "String tag that attempts to group like-tagged renderers together. Will only be used if pages are on the same origin.",
                    "type": "string"
                },
                "reason": {
                    "$ref": "#/definitions/WindowCreationReason"
                },
                "resizable": {
                    "type": "boolean"
                },
                "resizeRegion": {
                    "$ref": "#/definitions/ResizeRegion",
                    "description": "Defines a region in pixels that will respond to user mouse interaction for resizing a frameless window."
                },
                "saveWindowState": {
                    "type": "boolean"
                },
                "shadow": {
                    "type": "boolean"
                },
                "showBackgroundImages": {
                    "type": "boolean"
                },
                "showTaskbarIcon": {
                    "type": "boolean"
                },
                "smallWindow": {
                    "type": "boolean"
                },
                "state": {
                    "$ref": "#/definitions/WindowState"
                },
                "taskbarIcon": {
                    "type": "string"
                },
                "taskbarIconGroup": {
                    "description": "Specify a taskbar group for the window.\n_If omitted, defaults to app's uuid (`fin.Application.getCurrentSync().identity.uuid`)._",
                    "type": "string"
                },
                "updateStateIfExists": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                },
                "viewVisibility": {
                    "$ref": "#/definitions/ViewVisibilityOptions",
                    "description": "_Platform Windows Only_. Controls behavior for showing views when they are being resized by the user."
                },
                "waitForPageLoad": {
                    "type": "boolean"
                },
                "width": {
                    "type": "number"
                },
                "workspacePlatform": {
                    "additionalProperties": false,
                    "description": "WorkspacePlatform specific window options. These options will not work unless a workspace platform has been initialized.",
                    "properties": {
                        "disableMultiplePages": {
                            "description": "Remove the Page UI and only allow a single page in the browser window.\nMust be set to true for this behavior.  If this is not set to false,\nthen an empty `pages` option will be populated with a single page.",
                            "type": "boolean"
                        },
                        "favicon": {
                            "description": "The favicon to display on the top left of the created browser window.",
                            "type": "string"
                        },
                        "isLocked": {
                            "description": "When true, disables the ability to close pages, drag pages within the window,\nand drag pages into/out of the window. False by default.",
                            "type": "boolean"
                        },
                        "newPageUrl": {
                            "description": "Landing page that shows up when you add a new page from the plus button that exists in the window frame where the page selector is shown.\nIf you do not provide a newPageUrl, then the new Page plus button will not be shown and you cannot create a new empty Page or Window.",
                            "type": "string"
                        },
                        "newTabUrl": {
                            "description": "Landing page that shows up when you add a new tab from the plus button that exists in the tabstrip.\nIf you do not provide a newTabUrl, then the plus button in the tabstrip will not be shown and users cannot create a new empty tab.",
                            "type": "string"
                        },
                        "pages": {
                            "description": "The initial set of pages to add to the created browser window.",
                            "items": {
                                "$ref": "#/definitions/Page"
                            },
                            "type": "array"
                        },
                        "preventPageClose": {
                            "description": "When true, disables the ability to close pages in the window. False by default.",
                            "type": "boolean"
                        },
                        "preventPageDrag": {
                            "description": "When true, page tabs in the window will not be draggable.\nThis includes reordering pages and dragging them out of the window.\nFalse by default.",
                            "type": "boolean"
                        },
                        "preventPageDragIn": {
                            "description": "When true, disables the ability to drag pages into the window. False by default.",
                            "type": "boolean"
                        },
                        "preventPageDragOut": {
                            "description": "When true, disables the ability to drag pages out of a window. False by default.",
                            "type": "boolean"
                        },
                        "title": {
                            "description": "A UI friendly title for the created browser window.",
                            "type": "string"
                        },
                        "toolbarOptions": {
                            "$ref": "#/definitions/ToolbarOptions"
                        },
                        "windowStateButtonOptions": {
                            "$ref": "#/definitions/WindowStateButtonOptions"
                        }
                    },
                    "required": [
                        "pages"
                    ],
                    "type": "object"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "__type_1": {
            "additionalProperties": false,
            "description": "Represents the arrangement of Views within a Platform window's Layout.  We do not recommend trying\nto build Layouts or LayoutItems by hand and instead use calls such as {@link Platform#getSnapshot getSnapshot} or our\n{@link https://openfin.github.io/golden-prototype/config-gen Layout Config Generation Tool}..",
            "properties": {
                "content": {
                    "$ref": "#/definitions/LayoutContent",
                    "description": "Array of configurations for items that will be created as children of this item."
                },
                "height": {
                    "type": "number"
                },
                "id": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "isClosable": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "The type of the item. Possible values are 'row', 'column', 'stack', and 'component'.",
                    "type": "string"
                },
                "width": {
                    "type": "number"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "__type_10": {
            "additionalProperties": false,
            "description": "Defines a region in pixels that will respond to user mouse interaction for resizing a frameless window.",
            "properties": {
                "bottomRightCorner": {
                    "type": "number"
                },
                "sides": {
                    "additionalProperties": false,
                    "description": "Enables resizing interaction for each side of the window.",
                    "properties": {
                        "bottom": {
                            "type": "boolean"
                        },
                        "left": {
                            "type": "boolean"
                        },
                        "right": {
                            "type": "boolean"
                        },
                        "top": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "__type_11": {
            "additionalProperties": false,
            "properties": {
                "currentContextGroup": {
                    "description": "Context Group for the client. (green, yellow, red, etc.).",
                    "type": "string"
                },
                "providerId": {
                    "description": "When provided, automatically connects the client to the specified provider uuid.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "__type_12": {
            "additionalProperties": {},
            "type": "object"
        },
        "__type_13": {
            "additionalProperties": false,
            "properties": {
                "devtools": {
                    "description": "If `true`, enables the devtools keyboard shortcut:<br>\n`Ctrl` + `Shift` + `I` _(Toggles Devtools)_",
                    "type": "boolean"
                },
                "reload": {
                    "description": "If `true`, enables the reload keyboard shortcuts:<br>\n`Ctrl` + `R` _(Windows)_<br>\n`F5` _(Windows)_<br>\n`Command` + `R` _(Mac)_",
                    "type": "boolean"
                },
                "reloadIgnoringCache": {
                    "description": "If `true`, enables the reload-from-source keyboard shortcuts:<br>\n`Ctrl` + `Shift` + `R` _(Windows)_<br>\n`Shift` + `F5` _(Windows)_<br>\n`Command` + `Shift` + `R` _(Mac)_",
                    "type": "boolean"
                },
                "zoom": {
                    "description": "NOTE: It is not recommended to set this value to true for Windows in Platforms as that may lead to unexpected visual shifts in layout.\nIf `true`, enables the zoom keyboard shortcuts:<br>\n`Ctrl` + `+` _(Zoom In)_<br>\n`Ctrl` + `Shift` + `+` _(Zoom In)_<br>\n`Ctrl` + `NumPad+` _(Zoom In)_<br>\n`Ctrl` + `-` _(Zoom Out)_<br>\n`Ctrl` + `Shift` + `-` _(Zoom Out)_<br>\n`Ctrl` + `NumPad-` _(Zoom Out)_<br>\n`Ctrl` + `Scroll` _(Zoom In & Out)_<br>\n`Ctrl` + `0` _(Restore to 100%)_",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "__type_14": {
            "additionalProperties": false,
            "description": "Configurations for API injection.",
            "properties": {
                "iframe": {
                    "additionalProperties": false,
                    "description": "Configure injection of OpenFin API into iframes based on domain",
                    "properties": {
                        "crossOriginInjection": {
                            "description": "Inject OpenFin API into cross-origin iframes",
                            "type": "boolean"
                        },
                        "enableDeprecatedSharedName": {
                            "type": "boolean"
                        },
                        "sameOriginInjection": {
                            "description": "Inject OpenFin API into same-origin iframes",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "__type_15": {
            "additionalProperties": false,
            "description": "Restrict navigation to URLs that match a whitelisted pattern.\nIn the lack of a whitelist, navigation to URLs that match a blacklisted pattern would be prohibited.\nSee [here](https://developer.chrome.com/extensions/match_patterns) for more details.",
            "properties": {
                "blacklist": {
                    "description": "Forbidden URLs for navigation.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "whitelist": {
                    "description": "Allowed URLs for navigation.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "__type_16": {
            "additionalProperties": false,
            "properties": {
                "blacklist": {
                    "description": "Forbidden URLs for redirects.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "whitelist": {
                    "description": "Allowed URLs for redirects.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "__type_17": {
            "additionalProperties": false,
            "properties": {
                "Application": {
                    "$ref": "#/definitions/Partial_7"
                },
                "System": {
                    "$ref": "#/definitions/Partial_8"
                },
                "webAPIs": {
                    "items": {
                        "$ref": "#/definitions/WebPermission"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "__type_18": {
            "additionalProperties": false,
            "properties": {
                "setFileDownloadLocation": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "__type_19": {
            "additionalProperties": false,
            "properties": {
                "getAllExternalWindows": {
                    "type": "boolean"
                },
                "launchExternalProcess": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "properties": {
                                "assets": {
                                    "additionalProperties": false,
                                    "properties": {
                                        "enabled": {
                                            "type": "boolean"
                                        },
                                        "srcRules": {
                                            "items": {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "behavior": {
                                                        "enum": [
                                                            "allow",
                                                            "block"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "match": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "required": [
                                                    "behavior",
                                                    "match"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "enabled"
                                    ],
                                    "type": "object"
                                },
                                "downloads": {
                                    "additionalProperties": false,
                                    "properties": {
                                        "enabled": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "enabled"
                                    ],
                                    "type": "object"
                                },
                                "enabled": {
                                    "type": "boolean"
                                },
                                "executables": {
                                    "additionalProperties": false,
                                    "properties": {
                                        "enabled": {
                                            "type": "boolean"
                                        },
                                        "pathRules": {
                                            "items": {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "behavior": {
                                                        "enum": [
                                                            "allow",
                                                            "block"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "match": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "required": [
                                                    "behavior",
                                                    "match"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "enabled"
                                    ],
                                    "type": "object"
                                }
                            },
                            "required": [
                                "enabled"
                            ],
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "openUrlWithBrowser": {
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "type": "boolean"
                        },
                        "protocols": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "enabled",
                        "protocols"
                    ],
                    "type": "object"
                },
                "readRegistryValue": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "properties": {
                                "enabled": {
                                    "type": "boolean"
                                },
                                "registryKeys": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "enabled",
                                "registryKeys"
                            ],
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "terminateExternalProcess": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "__type_2": {
            "additionalProperties": false,
            "properties": {
                "_internalWorkspaceData": {},
                "accelerator": {
                    "$ref": "#/definitions/Partial_4",
                    "description": "Enable keyboard shortcuts for devtools, zoom, reload, and reload ignoring cache."
                },
                "api": {
                    "$ref": "#/definitions/Api",
                    "description": "Configurations for API injection."
                },
                "autoResize": {
                    "$ref": "#/definitions/AutoResizeOptions"
                },
                "autoplayPolicy": {
                    "$ref": "#/definitions/AutoplayPolicyOptions",
                    "description": "Autoplay policy to apply to content in the window, can be\n`no-user-gesture-required`, `user-gesture-required`,\n`document-user-activation-required`. Defaults to `no-user-gesture-required`."
                },
                "backgroundColor": {
                    "description": "The view’s _backfill_ color as a hexadecimal value. Not to be confused with the content background color\n(`document.body.style.backgroundColor`),\nthis color briefly fills a view’s (a) content area before its content is loaded as well as (b) newly exposed\nareas when growing a view. Setting\nthis value to the anticipated content background color can help improve user experience.\nDefault is white.",
                    "type": "string"
                },
                "bounds": {
                    "$ref": "#/definitions/Bounds",
                    "description": "Initial bounds given relative to the window."
                },
                "contentCreation": {
                    "$ref": "#/definitions/ContentCreationOptions",
                    "description": "Configures how new content (e,g, from `window.open` or a link) is opened."
                },
                "contentNavigation": {
                    "$ref": "#/definitions/ContentNavigation",
                    "description": "Restrict navigation to URLs that match a whitelisted pattern.\nIn the lack of a whitelist, navigation to URLs that match a blacklisted pattern would be prohibited.\nSee [here](https://developer.chrome.com/extensions/match_patterns) for more details."
                },
                "contextMenu": {
                    "type": "boolean"
                },
                "contextMenuOptions": {
                    "$ref": "#/definitions/ContextMenuOptions",
                    "description": "Configure the context menu when right-clicking on a window."
                },
                "contextMenuSettings": {
                    "$ref": "#/definitions/ContextMenuSettings"
                },
                "customContext": {
                    "description": "A field that the user can use to attach serializable data that will be saved when {@link Platform#getSnapshot Platform.getSnapshot}\nis called.  If a window in a Platform is trying to update or retrieve its own context, it can use the\n{@link Platform#setWindowContext Platform.setWindowContext} and {@link Platform#getWindowContext Platform.getWindowContext} calls.\n_When omitted, _inherits_ from the parent application._\nAs opposed to customData, this is meant for frequent updates and sharing with other contexts. [Example]{@tutorial customContext}"
                },
                "customData": {
                    "description": "A field that the user can attach serializable data to be ferried around with the window options.\n_When omitted, _inherits_ from the parent application._"
                },
                "customRequestHeaders": {
                    "description": "Custom headers for requests sent by the view.",
                    "items": {
                        "additionalProperties": false,
                        "description": "Custom headers for requests sent by the window.",
                        "properties": {
                            "headers": {
                                "description": "Headers for requests sent by window; {key: value} results\nin a header of `key=value`.",
                                "items": {
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "Object representing headers and their values, where the\nobject key is the name of header and value key is the value of the header",
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "urlPatterns": {
                                "description": "The URL patterns for which the headers will be applied.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "headers",
                            "urlPatterns"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "detachOnClose": {
                    "type": "boolean"
                },
                "enableBeforeUnload": {
                    "type": "boolean"
                },
                "experimental": {},
                "fdc3InteropApi": {
                    "type": "string"
                },
                "hotkeys": {
                    "description": "Defines the hotkeys that will be emitted as a `hotkey` event on the view. For usage example see [example]{@tutorial hotkeys}.\nWithin Platform, OpenFin also implements a set of pre-defined actions called\n[keyboard commands]{@link https://developers.openfin.co/docs/platform-api#section-5-3-using-keyboard-commands}\nthat can be assigned to a specific hotkey in the platform manifest.",
                    "items": {
                        "additionalProperties": false,
                        "description": "A hotkey binding.",
                        "properties": {
                            "keys": {
                                "description": "The key combination of the hotkey, i.e. \"Ctrl+T\".",
                                "type": "string"
                            },
                            "preventDefault": {
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "keys"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "interop": {
                    "$ref": "#/definitions/InteropConfig"
                },
                "isClosable": {
                    "type": "boolean"
                },
                "manifestUrl": {
                    "description": "**Platforms Only.** Url to a manifest that contains View Options. Properties other than manifestUrl can still be used\nbut the properties in the manifest will take precedence if there is any collision.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the view.",
                    "type": "string"
                },
                "permissions": {
                    "$ref": "#/definitions/Partial_6"
                },
                "preloadScripts": {
                    "description": "Scripts that run before page load.  When omitted, inherits from the parent application.",
                    "items": {
                        "additionalProperties": false,
                        "description": "A script that is run before page load.",
                        "properties": {
                            "mandatory": {
                                "type": "boolean"
                            },
                            "state": {
                                "description": "Preload script execution state.",
                                "enum": [
                                    "failed",
                                    "load-failed",
                                    "load-started",
                                    "load-succeeded",
                                    "succeeded"
                                ],
                                "type": "string"
                            },
                            "url": {
                                "description": "The URL from which the script was loaded.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "url"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "preventDragOut": {
                    "type": "boolean"
                },
                "processAffinity": {
                    "description": "String tag that attempts to group like-tagged renderers together. Will only be used if pages are on the same origin.",
                    "type": "string"
                },
                "target": {
                    "$ref": "#/definitions/Identity",
                    "description": "The identity of the window this view should be attached to."
                },
                "url": {
                    "type": "string"
                },
                "zoomLevel": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "__type_20": {
            "additionalProperties": false,
            "description": "_Platform Windows Only_. Controls behavior for showing views when they are being resized by the user.",
            "properties": {
                "showViewsOnSplitterDrag": {
                    "$ref": "#/definitions/ViewVisibilityOption",
                    "description": "Allows views to be shown when they are resized by the user dragging the splitter between layout stacks."
                },
                "showViewsOnTabDrag": {
                    "$ref": "#/definitions/ViewVisibilityOption",
                    "description": "_Supported on Windows Operating Systems only_. Allows views to be shown when the user is dragging a tab around a layout."
                },
                "showViewsOnWindowResize": {
                    "$ref": "#/definitions/ShowViewOnWindowResizeOptions",
                    "description": "Enables views to be shown when a Platform Window is being resized by the user."
                }
            },
            "type": "object"
        },
        "__type_21": {
            "additionalProperties": false,
            "description": "Configuration for view visibility settings",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "__type_22": {
            "additionalProperties": false,
            "properties": {
                "_internalWorkspaceData": {},
                "accelerator": {
                    "$ref": "#/definitions/Partial_4",
                    "description": "Enable keyboard shortcuts for devtools, zoom, reload, and reload ignoring cache."
                },
                "api": {
                    "$ref": "#/definitions/Api",
                    "description": "Configurations for API injection."
                },
                "autoResize": {
                    "$ref": "#/definitions/AutoResizeOptions"
                },
                "autoplayPolicy": {
                    "$ref": "#/definitions/AutoplayPolicyOptions",
                    "description": "Autoplay policy to apply to content in the window, can be\n`no-user-gesture-required`, `user-gesture-required`,\n`document-user-activation-required`. Defaults to `no-user-gesture-required`."
                },
                "backgroundColor": {
                    "description": "The view’s _backfill_ color as a hexadecimal value. Not to be confused with the content background color\n(`document.body.style.backgroundColor`),\nthis color briefly fills a view’s (a) content area before its content is loaded as well as (b) newly exposed\nareas when growing a view. Setting\nthis value to the anticipated content background color can help improve user experience.\nDefault is white.",
                    "type": "string"
                },
                "bounds": {
                    "$ref": "#/definitions/Bounds",
                    "description": "Initial bounds given relative to the window."
                },
                "contentCreation": {
                    "$ref": "#/definitions/ContentCreationOptions",
                    "description": "Configures how new content (e,g, from `window.open` or a link) is opened."
                },
                "contentNavigation": {
                    "$ref": "#/definitions/ContentNavigation",
                    "description": "Restrict navigation to URLs that match a whitelisted pattern.\nIn the lack of a whitelist, navigation to URLs that match a blacklisted pattern would be prohibited.\nSee [here](https://developer.chrome.com/extensions/match_patterns) for more details."
                },
                "contextMenu": {
                    "type": "boolean"
                },
                "contextMenuOptions": {
                    "$ref": "#/definitions/ContextMenuOptions",
                    "description": "Configure the context menu when right-clicking on a window."
                },
                "contextMenuSettings": {
                    "$ref": "#/definitions/ContextMenuSettings"
                },
                "customContext": {
                    "description": "A field that the user can use to attach serializable data that will be saved when {@link Platform#getSnapshot Platform.getSnapshot}\nis called.  If a window in a Platform is trying to update or retrieve its own context, it can use the\n{@link Platform#setWindowContext Platform.setWindowContext} and {@link Platform#getWindowContext Platform.getWindowContext} calls.\n_When omitted, _inherits_ from the parent application._\nAs opposed to customData, this is meant for frequent updates and sharing with other contexts. [Example]{@tutorial customContext}"
                },
                "customData": {
                    "description": "A field that the user can attach serializable data to be ferried around with the window options.\n_When omitted, _inherits_ from the parent application._"
                },
                "customRequestHeaders": {
                    "description": "Custom headers for requests sent by the view.",
                    "items": {
                        "additionalProperties": false,
                        "description": "Custom headers for requests sent by the window.",
                        "properties": {
                            "headers": {
                                "description": "Headers for requests sent by window; {key: value} results\nin a header of `key=value`.",
                                "items": {
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "Object representing headers and their values, where the\nobject key is the name of header and value key is the value of the header",
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "urlPatterns": {
                                "description": "The URL patterns for which the headers will be applied.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "headers",
                            "urlPatterns"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "detachOnClose": {
                    "type": "boolean"
                },
                "enableBeforeUnload": {
                    "type": "boolean"
                },
                "experimental": {},
                "fdc3InteropApi": {
                    "type": "string"
                },
                "hotkeys": {
                    "description": "Defines the hotkeys that will be emitted as a `hotkey` event on the view. For usage example see [example]{@tutorial hotkeys}.\nWithin Platform, OpenFin also implements a set of pre-defined actions called\n[keyboard commands]{@link https://developers.openfin.co/docs/platform-api#section-5-3-using-keyboard-commands}\nthat can be assigned to a specific hotkey in the platform manifest.",
                    "items": {
                        "additionalProperties": false,
                        "description": "A hotkey binding.",
                        "properties": {
                            "keys": {
                                "description": "The key combination of the hotkey, i.e. \"Ctrl+T\".",
                                "type": "string"
                            },
                            "preventDefault": {
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "keys"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "interop": {
                    "$ref": "#/definitions/InteropConfig"
                },
                "isClosable": {
                    "type": "boolean"
                },
                "manifestUrl": {
                    "description": "**Platforms Only.** Url to a manifest that contains View Options. Properties other than manifestUrl can still be used\nbut the properties in the manifest will take precedence if there is any collision.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the view.",
                    "type": "string"
                },
                "permissions": {
                    "$ref": "#/definitions/Partial_6"
                },
                "preloadScripts": {
                    "description": "Scripts that run before page load.  When omitted, inherits from the parent application.",
                    "items": {
                        "additionalProperties": false,
                        "description": "A script that is run before page load.",
                        "properties": {
                            "mandatory": {
                                "type": "boolean"
                            },
                            "state": {
                                "description": "Preload script execution state.",
                                "enum": [
                                    "failed",
                                    "load-failed",
                                    "load-started",
                                    "load-succeeded",
                                    "succeeded"
                                ],
                                "type": "string"
                            },
                            "url": {
                                "description": "The URL from which the script was loaded.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "url"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "preventDragOut": {
                    "type": "boolean"
                },
                "processAffinity": {
                    "description": "String tag that attempts to group like-tagged renderers together. Will only be used if pages are on the same origin.",
                    "type": "string"
                },
                "target": {
                    "$ref": "#/definitions/Identity",
                    "description": "The identity of the window this view should be attached to."
                },
                "url": {
                    "type": "string"
                },
                "zoomLevel": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "__type_23": {
            "additionalProperties": false,
            "properties": {
                "height": {
                    "type": "number"
                },
                "left": {
                    "type": "number"
                },
                "top": {
                    "type": "number"
                },
                "width": {
                    "type": "number"
                }
            },
            "required": [
                "height",
                "left",
                "top",
                "width"
            ],
            "type": "object"
        },
        "__type_24": {
            "additionalProperties": false,
            "properties": {
                "height": {
                    "description": "If true, the view's height will grow and shrink together with the window. false\nby default.",
                    "type": "boolean"
                },
                "horizontal": {
                    "description": "If true, the view's x position and width will grow and shrink proportionally with\nthe window. false by default.",
                    "type": "boolean"
                },
                "vertical": {
                    "description": "If true, the view's y position and height will grow and shrink proportionally with\nthe window. false by default.",
                    "type": "boolean"
                },
                "width": {
                    "description": "If true, the view's width will grow and shrink together with the window. false\nby default.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "__type_25": {
            "additionalProperties": false,
            "properties": {
                "_internalWorkspaceData": {},
                "accelerator": {
                    "$ref": "#/definitions/Partial_4",
                    "description": "Enable keyboard shortcuts for devtools, zoom, reload, and reload ignoring cache."
                },
                "api": {
                    "$ref": "#/definitions/Api",
                    "description": "Configurations for API injection."
                },
                "autoResize": {
                    "$ref": "#/definitions/AutoResizeOptions"
                },
                "autoplayPolicy": {
                    "$ref": "#/definitions/AutoplayPolicyOptions",
                    "description": "Autoplay policy to apply to content in the window, can be\n`no-user-gesture-required`, `user-gesture-required`,\n`document-user-activation-required`. Defaults to `no-user-gesture-required`."
                },
                "backgroundColor": {
                    "description": "The view’s _backfill_ color as a hexadecimal value. Not to be confused with the content background color\n(`document.body.style.backgroundColor`),\nthis color briefly fills a view’s (a) content area before its content is loaded as well as (b) newly exposed\nareas when growing a view. Setting\nthis value to the anticipated content background color can help improve user experience.\nDefault is white.",
                    "type": "string"
                },
                "contentCreation": {
                    "$ref": "#/definitions/ContentCreationOptions",
                    "description": "Configures how new content (e,g, from `window.open` or a link) is opened."
                },
                "contentNavigation": {
                    "$ref": "#/definitions/ContentNavigation",
                    "description": "Restrict navigation to URLs that match a whitelisted pattern.\nIn the lack of a whitelist, navigation to URLs that match a blacklisted pattern would be prohibited.\nSee [here](https://developer.chrome.com/extensions/match_patterns) for more details."
                },
                "contextMenu": {
                    "type": "boolean"
                },
                "contextMenuOptions": {
                    "$ref": "#/definitions/ContextMenuOptions",
                    "description": "Configure the context menu when right-clicking on a window."
                },
                "contextMenuSettings": {
                    "$ref": "#/definitions/ContextMenuSettings"
                },
                "customContext": {
                    "description": "A field that the user can use to attach serializable data that will be saved when {@link Platform#getSnapshot Platform.getSnapshot}\nis called.  If a window in a Platform is trying to update or retrieve its own context, it can use the\n{@link Platform#setWindowContext Platform.setWindowContext} and {@link Platform#getWindowContext Platform.getWindowContext} calls.\n_When omitted, _inherits_ from the parent application._\nAs opposed to customData, this is meant for frequent updates and sharing with other contexts. [Example]{@tutorial customContext}"
                },
                "customData": {
                    "description": "A field that the user can attach serializable data to be ferried around with the window options.\n_When omitted, _inherits_ from the parent application._"
                },
                "customRequestHeaders": {
                    "description": "Custom headers for requests sent by the view.",
                    "items": {
                        "additionalProperties": false,
                        "description": "Custom headers for requests sent by the window.",
                        "properties": {
                            "headers": {
                                "description": "Headers for requests sent by window; {key: value} results\nin a header of `key=value`.",
                                "items": {
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "Object representing headers and their values, where the\nobject key is the name of header and value key is the value of the header",
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "urlPatterns": {
                                "description": "The URL patterns for which the headers will be applied.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "headers",
                            "urlPatterns"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "detachOnClose": {
                    "type": "boolean"
                },
                "enableBeforeUnload": {
                    "type": "boolean"
                },
                "experimental": {},
                "fdc3InteropApi": {
                    "type": "string"
                },
                "hotkeys": {
                    "description": "Defines the hotkeys that will be emitted as a `hotkey` event on the view. For usage example see [example]{@tutorial hotkeys}.\nWithin Platform, OpenFin also implements a set of pre-defined actions called\n[keyboard commands]{@link https://developers.openfin.co/docs/platform-api#section-5-3-using-keyboard-commands}\nthat can be assigned to a specific hotkey in the platform manifest.",
                    "items": {
                        "additionalProperties": false,
                        "description": "A hotkey binding.",
                        "properties": {
                            "keys": {
                                "description": "The key combination of the hotkey, i.e. \"Ctrl+T\".",
                                "type": "string"
                            },
                            "preventDefault": {
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "keys"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "interop": {
                    "$ref": "#/definitions/InteropConfig"
                },
                "isClosable": {
                    "type": "boolean"
                },
                "manifestUrl": {
                    "description": "**Platforms Only.** Url to a manifest that contains View Options. Properties other than manifestUrl can still be used\nbut the properties in the manifest will take precedence if there is any collision.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the view.",
                    "type": "string"
                },
                "permissions": {
                    "$ref": "#/definitions/Partial_6"
                },
                "preloadScripts": {
                    "description": "Scripts that run before page load.  When omitted, inherits from the parent application.",
                    "items": {
                        "additionalProperties": false,
                        "description": "A script that is run before page load.",
                        "properties": {
                            "mandatory": {
                                "type": "boolean"
                            },
                            "state": {
                                "description": "Preload script execution state.",
                                "enum": [
                                    "failed",
                                    "load-failed",
                                    "load-started",
                                    "load-succeeded",
                                    "succeeded"
                                ],
                                "type": "string"
                            },
                            "url": {
                                "description": "The URL from which the script was loaded.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "url"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "preventDragOut": {
                    "type": "boolean"
                },
                "processAffinity": {
                    "description": "String tag that attempts to group like-tagged renderers together. Will only be used if pages are on the same origin.",
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "zoomLevel": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "__type_26": {
            "additionalProperties": false,
            "description": "Configuration Object for the show/hide tabs button within the browser toolbar",
            "properties": {
                "disabled": {
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/BrowserButtonType.ShowHideTabs"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "__type_27": {
            "additionalProperties": false,
            "description": "Configuration Object for the page lock/unlock button within the browser toolbar",
            "properties": {
                "disabled": {
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/BrowserButtonType.LockUnlockPage"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "__type_28": {
            "additionalProperties": false,
            "properties": {
                "closeButton": {
                    "additionalProperties": false,
                    "description": "Used to manipulate behaviour of a close button on a page tab. If `undefined`, then close button is visible and actionable.\nIf either property true, this page tab's context menu will disable its 'Close Page' option.",
                    "properties": {
                        "disabled": {
                            "type": "boolean"
                        },
                        "hidden": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "iconUrl": {
                    "description": "Icon that appears on a page tab if there are no unsaved changes. If 'undefined', default icon will appear.",
                    "type": "string"
                },
                "panels": {
                    "description": "Used to configure fixed views on the edges of the browser window. Only one panel per side is supported.",
                    "items": {
                        "$ref": "#/definitions/PanelConfig"
                    },
                    "type": "array"
                },
                "unsavedIconUrl": {
                    "description": "Icon that appears on a page tab if there are unsaved changes (dirty state). If 'undefined', default icon will appear.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "__type_29": {
            "additionalProperties": false,
            "properties": {
                "uuid": {
                    "type": "string"
                }
            },
            "required": [
                "uuid"
            ],
            "type": "object"
        },
        "__type_3": {
            "additionalProperties": false,
            "properties": {
                "name": {
                    "description": "The name of the component",
                    "type": "string"
                },
                "uuid": {
                    "description": "Universally unique identifier of the compenent",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "uuid"
            ],
            "type": "object"
        },
        "__type_30": {
            "additionalProperties": false,
            "properties": {
                "interopSnapshotDetails": {
                    "additionalProperties": false,
                    "properties": {
                        "contextGroupStates": {
                            "$ref": "#/definitions/ContextGroupStates"
                        }
                    },
                    "required": [
                        "contextGroupStates"
                    ],
                    "type": "object"
                },
                "snapshotDetails": {
                    "additionalProperties": false,
                    "properties": {
                        "monitorInfo": {
                            "$ref": "#/definitions/MonitorInfo"
                        },
                        "runtimeVersion": {
                            "type": "string"
                        },
                        "timestamp": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "monitorInfo",
                        "runtimeVersion",
                        "timestamp"
                    ],
                    "type": "object"
                },
                "windows": {
                    "items": {
                        "$ref": "#/definitions/WindowCreationOptions"
                    },
                    "type": "array"
                }
            },
            "required": [
                "windows"
            ],
            "type": "object"
        },
        "__type_31": {
            "additionalProperties": false,
            "properties": {
                "deviceScaleFactor": {
                    "description": "The device scale factor.",
                    "type": "number"
                },
                "dpi": {
                    "$ref": "#/definitions/Point"
                },
                "nonPrimaryMonitors": {
                    "items": {
                        "additionalProperties": false,
                        "properties": {
                            "available": {
                                "$ref": "#/definitions/DipScaleRects",
                                "description": "The available DIP scale coordinates."
                            },
                            "availableRect": {
                                "$ref": "#/definitions/RectangleByEdgePositions",
                                "description": "The available monitor coordinates."
                            },
                            "deviceId": {
                                "description": "The device id of the display.",
                                "type": [
                                    "string",
                                    "number"
                                ]
                            },
                            "deviceScaleFactor": {
                                "description": "The device scale factor.",
                                "type": "number"
                            },
                            "displayDeviceActive": {
                                "description": "True if the display is active.",
                                "type": "boolean"
                            },
                            "dpi": {
                                "$ref": "#/definitions/Point"
                            },
                            "monitor": {
                                "$ref": "#/definitions/DipScaleRects",
                                "description": "The monitor coordinates."
                            },
                            "monitorRect": {
                                "$ref": "#/definitions/RectangleByEdgePositions",
                                "description": "The monitor coordinates."
                            },
                            "name": {
                                "description": "The name of the display.",
                                "type": [
                                    "string",
                                    "number"
                                ]
                            }
                        },
                        "required": [
                            "available",
                            "availableRect",
                            "deviceId",
                            "deviceScaleFactor",
                            "displayDeviceActive",
                            "dpi",
                            "monitor",
                            "monitorRect",
                            "name"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "primaryMonitor": {
                    "$ref": "#/definitions/MonitorDetails"
                },
                "reason": {
                    "description": "Always \"api-query\".",
                    "type": "string"
                },
                "taskbar": {
                    "$ref": "#/definitions/TaskBar"
                },
                "virtualScreen": {
                    "$ref": "#/definitions/DipRect",
                    "description": "The virtual display screen coordinates."
                }
            },
            "required": [
                "deviceScaleFactor",
                "dpi",
                "nonPrimaryMonitors",
                "primaryMonitor",
                "reason",
                "taskbar",
                "virtualScreen"
            ],
            "type": "object"
        },
        "__type_32": {
            "additionalProperties": false,
            "properties": {
                "x": {
                    "description": "The mouse x position",
                    "type": "number"
                },
                "y": {
                    "description": "The mouse y position",
                    "type": "number"
                }
            },
            "required": [
                "x",
                "y"
            ],
            "type": "object"
        },
        "__type_33": {
            "additionalProperties": false,
            "properties": {
                "dipRect": {
                    "$ref": "#/definitions/RectangleByEdgePositions"
                },
                "scaledRect": {
                    "$ref": "#/definitions/RectangleByEdgePositions"
                }
            },
            "required": [
                "dipRect",
                "scaledRect"
            ],
            "type": "object"
        },
        "__type_34": {
            "additionalProperties": false,
            "properties": {
                "bottom": {
                    "type": "number"
                },
                "left": {
                    "type": "number"
                },
                "right": {
                    "type": "number"
                },
                "top": {
                    "type": "number"
                }
            },
            "required": [
                "bottom",
                "left",
                "right",
                "top"
            ],
            "type": "object"
        },
        "__type_35": {
            "additionalProperties": false,
            "properties": {
                "available": {
                    "$ref": "#/definitions/DipScaleRects",
                    "description": "The available DIP scale coordinates."
                },
                "availableRect": {
                    "$ref": "#/definitions/RectangleByEdgePositions",
                    "description": "The available monitor coordinates."
                },
                "deviceId": {
                    "description": "The device id of the display.",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "deviceScaleFactor": {
                    "description": "The device scale factor.",
                    "type": "number"
                },
                "displayDeviceActive": {
                    "description": "True if the display is active.",
                    "type": "boolean"
                },
                "dpi": {
                    "$ref": "#/definitions/Point"
                },
                "monitor": {
                    "$ref": "#/definitions/DipScaleRects",
                    "description": "The monitor coordinates."
                },
                "monitorRect": {
                    "$ref": "#/definitions/RectangleByEdgePositions",
                    "description": "The monitor coordinates."
                },
                "name": {
                    "description": "The name of the display.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "required": [
                "available",
                "availableRect",
                "deviceId",
                "deviceScaleFactor",
                "displayDeviceActive",
                "dpi",
                "monitor",
                "monitorRect",
                "name"
            ],
            "type": "object"
        },
        "__type_36": {
            "additionalProperties": {
                "additionalProperties": {
                    "additionalProperties": false,
                    "description": "Data passed between entities and applications.",
                    "properties": {
                        "id": {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "description": "An object containing string key-value pairs for the bulk of the data for the context. Differs between context types.",
                            "type": "object"
                        },
                        "name": {
                            "description": "User-readable name for the incoming context.",
                            "type": "string"
                        },
                        "type": {
                            "description": "Conserved type for the context (e.g. `instrument` or `country`).",
                            "type": "string"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "type": "object"
                },
                "type": "object"
            },
            "type": "object"
        },
        "__type_37": {
            "additionalProperties": false,
            "properties": {
                "alias": {
                    "type": "string"
                },
                "arguments": {
                    "description": "The arguments to pass to the application.",
                    "type": "string"
                },
                "certificate": {
                    "$ref": "#/definitions/CertificationInfo"
                },
                "cwd": {
                    "description": "Current working directory.",
                    "type": "string"
                },
                "initialWindowState": {
                    "description": "Initial window state after launching: 'normal' (default), 'minimized', 'maximized'.",
                    "type": "string"
                },
                "lifetime": {
                    "type": "string"
                },
                "listener": {
                    "$ref": "#/definitions/LaunchExternalProcessListener"
                },
                "path": {
                    "description": "The file path to where the running application resides.",
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "__type_38": {
            "additionalProperties": false,
            "type": "object"
        },
        "__type_39": {
            "additionalProperties": false,
            "properties": {
                "publickey": {
                    "type": "string"
                },
                "serial": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "thumbprint": {
                    "type": "string"
                },
                "trusted": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "__type_4": {
            "additionalProperties": false,
            "description": "Configures how new content (e,g, from `window.open` or a link) is opened.",
            "properties": {
                "rules": {
                    "description": "List of rules for creation of new content.",
                    "items": {
                        "$ref": "#/definitions/ContentCreationRule<ContentCreationBehaviorNames>",
                        "description": "A rule for creating content in OpenFin; maps a content type to the way in which\nnewly-opened content of that type will be handled."
                    },
                    "type": "array"
                }
            },
            "required": [
                "rules"
            ],
            "type": "object"
        },
        "__type_40": {
            "additionalProperties": false,
            "properties": {
                "alias": {
                    "description": "The name of the asset",
                    "type": "string"
                },
                "args": {
                    "description": "The default command line arguments for the aforementioned target.",
                    "type": "string"
                },
                "mandatory": {
                    "description": "When set to true, the app will fail to load if the asset cannot be downloaded.\nWhen set to false, the app will continue to load if the asset cannot be downloaded. (Default: true)",
                    "type": "boolean"
                },
                "src": {
                    "description": "The URL to a zip file containing the package files (executables, dlls, etc…)",
                    "type": "string"
                },
                "target": {
                    "description": "Specify default executable to launch. This option can be overridden in launchExternalProcess",
                    "type": "string"
                },
                "version": {
                    "description": "The version of the package",
                    "type": "string"
                }
            },
            "required": [
                "alias",
                "src",
                "version"
            ],
            "type": "object"
        },
        "__type_5": {
            "additionalProperties": false,
            "properties": {
                "_internalWorkspaceData": {},
                "accelerator": {
                    "$ref": "#/definitions/Partial_4",
                    "description": "Enable keyboard shortcuts for devtools, zoom, reload, and reload ignoring cache."
                },
                "alphaMask": {
                    "$ref": "#/definitions/RGB",
                    "description": "Turns anything of matching RGB value transparent.\n\nCaveats:\n* runtime key --disable-gpu is required. Note: Unclear behavior on remote Desktop support\n* User cannot click-through transparent regions\n* Not supported on Mac\n* Windows Aero must be enabled\n* Won't make visual sense on Pixel-pushed environments such as Citrix\n* Not supported on rounded corner windows"
                },
                "alwaysOnTop": {
                    "type": "boolean"
                },
                "api": {
                    "$ref": "#/definitions/Api",
                    "description": "Configurations for API injection."
                },
                "applicationIcon": {
                    "type": "string"
                },
                "aspectRatio": {
                    "type": "number"
                },
                "autoShow": {
                    "description": "Automatically show the window when it is created.",
                    "type": "boolean"
                },
                "autoplayPolicy": {
                    "$ref": "#/definitions/AutoplayPolicyOptions",
                    "description": "Autoplay policy to apply to content in the window, can be\n`no-user-gesture-required`, `user-gesture-required`,\n`document-user-activation-required`. Defaults to `no-user-gesture-required`."
                },
                "backgroundColor": {
                    "description": "The window’s _backfill_ color as a hexadecimal value. Not to be confused with the content background color\n(`document.body.style.backgroundColor`),\nthis color briefly fills a window’s (a) content area before its content is loaded as well as (b) newly exposed\nareas when growing a window. Setting\nthis value to the anticipated content background color can help improve user experience.\nDefault is white.",
                    "type": "string"
                },
                "closeOnLastViewRemoved": {
                    "type": "boolean"
                },
                "contentCreation": {
                    "$ref": "#/definitions/ContentCreationOptions",
                    "description": "Configures how new content (e,g, from `window.open` or a link) is opened."
                },
                "contentNavigation": {
                    "$ref": "#/definitions/ContentNavigation",
                    "description": "Restrict navigation to URLs that match a whitelisted pattern.\nIn the lack of a whitelist, navigation to URLs that match a blacklisted pattern would be prohibited.\nSee [here](https://developer.chrome.com/extensions/match_patterns) for more details."
                },
                "contentRedirect": {
                    "$ref": "#/definitions/Partial_5",
                    "description": "Restrict redirects to URLs that match a whitelisted pattern.\nIn the lack of a whitelist, redirects to URLs that match a blacklisted pattern would be prohibited.\nSee [here](https://developer.chrome.com/extensions/match_patterns) for more details."
                },
                "contextMenu": {
                    "type": "boolean"
                },
                "contextMenuOptions": {
                    "$ref": "#/definitions/ContextMenuOptions",
                    "description": "Configure the context menu when right-clicking on a window."
                },
                "contextMenuSettings": {
                    "$ref": "#/definitions/ContextMenuSettings"
                },
                "cornerRounding": {
                    "$ref": "#/definitions/Partial_3",
                    "description": "Defines and applies rounded corners for a frameless window. **NOTE:** On macOS corner is not ellipse but circle rounded by the\n average of _height_ and _width_."
                },
                "customContext": {
                    "description": "A field that the user can use to attach serializable data that will be saved when {@link Platform#getSnapshot Platform.getSnapshot}\nis called.  If a window in a Platform is trying to update or retrieve its own context, it can use the\n{@link Platform#setWindowContext Platform.setWindowContext} and {@link Platform#getWindowContext Platform.getWindowContext} calls.\n_When omitted, _inherits_ from the parent application._\nAs opposed to customData, this is meant for frequent updates and sharing with other contexts. [Example]{@tutorial customContext}"
                },
                "customData": {
                    "description": "A field that the user can attach serializable data to be ferried around with the window options.\n_When omitted, _inherits_ from the parent application._"
                },
                "customRequestHeaders": {
                    "description": "Custom headers for requests sent by the window.",
                    "items": {
                        "additionalProperties": false,
                        "description": "Custom headers for requests sent by the window.",
                        "properties": {
                            "headers": {
                                "description": "Headers for requests sent by window; {key: value} results\nin a header of `key=value`.",
                                "items": {
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "Object representing headers and their values, where the\nobject key is the name of header and value key is the value of the header",
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "urlPatterns": {
                                "description": "The URL patterns for which the headers will be applied.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "headers",
                            "urlPatterns"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "defaultCentered": {
                    "description": "Centers the window in the primary monitor. This option overrides `defaultLeft` and `defaultTop`. When `saveWindowState` is `true`,\nthis value will be ignored for subsequent launches in favor of the cached value. **NOTE:** On macOS _defaultCenter_ is\nsomewhat above center vertically.",
                    "type": "boolean"
                },
                "defaultHeight": {
                    "type": "number"
                },
                "defaultLeft": {
                    "type": "number"
                },
                "defaultTop": {
                    "type": "number"
                },
                "defaultWidth": {
                    "type": "number"
                },
                "experimental": {},
                "fdc3InteropApi": {
                    "type": "string"
                },
                "frame": {
                    "type": "boolean"
                },
                "height": {
                    "type": "number"
                },
                "hideOnClose": {
                    "type": "boolean"
                },
                "hotkeys": {
                    "description": "Defines the hotkeys that will be emitted as a `hotkey` event on the window. For usage example see [example]{@tutorial hotkeys}.\nWithin Platform, OpenFin also implements a set of pre-defined actions called\n[keyboard commands]{@link https://developers.openfin.co/docs/platform-api#section-5-3-using-keyboard-commands}\nthat can be assigned to a specific hotkey in the platform manifest.",
                    "items": {
                        "additionalProperties": false,
                        "description": "A hotkey binding.",
                        "properties": {
                            "keys": {
                                "description": "The key combination of the hotkey, i.e. \"Ctrl+T\".",
                                "type": "string"
                            },
                            "preventDefault": {
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "keys"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "icon": {
                    "description": "A URL for the icon to be shown in the window title bar and the taskbar.\nWhen omitted, inherits from the parent application._\n note: Window OS caches taskbar icons, therefore an icon change might only be visible after the cache is removed or the uuid is changed.",
                    "type": "string"
                },
                "ignoreSavedWindowState": {
                    "description": "Ignores the cached state of the window.\nDefaults the opposite value of `saveWindowState` to maintain backwards compatibility.",
                    "type": "boolean"
                },
                "includeInSnapshots": {
                    "type": "boolean"
                },
                "interop": {
                    "$ref": "#/definitions/InteropConfig"
                },
                "layout": {},
                "maxHeight": {
                    "type": "number"
                },
                "maxWidth": {
                    "type": "number"
                },
                "maximizable": {
                    "type": "boolean"
                },
                "minHeight": {
                    "type": "number"
                },
                "minWidth": {
                    "type": "number"
                },
                "minimizable": {
                    "type": "boolean"
                },
                "modalParentIdentity": {
                    "$ref": "#/definitions/Identity",
                    "description": "Parent identity of a modal window. It will create a modal child window when this option is set."
                },
                "name": {
                    "description": "The name of the window.",
                    "type": "string"
                },
                "opacity": {
                    "type": "number"
                },
                "permissions": {
                    "$ref": "#/definitions/Partial_6"
                },
                "preloadScripts": {
                    "description": "Scripts that run before page load.  When omitted, inherits from the parent application.",
                    "items": {
                        "additionalProperties": false,
                        "description": "A script that is run before page load.",
                        "properties": {
                            "mandatory": {
                                "type": "boolean"
                            },
                            "state": {
                                "description": "Preload script execution state.",
                                "enum": [
                                    "failed",
                                    "load-failed",
                                    "load-started",
                                    "load-succeeded",
                                    "succeeded"
                                ],
                                "type": "string"
                            },
                            "url": {
                                "description": "The URL from which the script was loaded.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "url"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "processAffinity": {
                    "description": "String tag that attempts to group like-tagged renderers together. Will only be used if pages are on the same origin.",
                    "type": "string"
                },
                "resizable": {
                    "type": "boolean"
                },
                "resizeRegion": {
                    "$ref": "#/definitions/ResizeRegion",
                    "description": "Defines a region in pixels that will respond to user mouse interaction for resizing a frameless window."
                },
                "saveWindowState": {
                    "type": "boolean"
                },
                "shadow": {
                    "type": "boolean"
                },
                "showBackgroundImages": {
                    "type": "boolean"
                },
                "showTaskbarIcon": {
                    "type": "boolean"
                },
                "smallWindow": {
                    "type": "boolean"
                },
                "state": {
                    "$ref": "#/definitions/WindowState"
                },
                "taskbarIcon": {
                    "type": "string"
                },
                "taskbarIconGroup": {
                    "description": "Specify a taskbar group for the window.\n_If omitted, defaults to app's uuid (`fin.Application.getCurrentSync().identity.uuid`)._",
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                },
                "viewVisibility": {
                    "$ref": "#/definitions/ViewVisibilityOptions",
                    "description": "_Platform Windows Only_. Controls behavior for showing views when they are being resized by the user."
                },
                "waitForPageLoad": {
                    "type": "boolean"
                },
                "width": {
                    "type": "number"
                },
                "workspacePlatform": {
                    "$ref": "#/definitions/WorkspacePlatformOptions"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "__type_6": {
            "additionalProperties": false,
            "properties": {
                "blue": {
                    "type": "number"
                },
                "green": {
                    "type": "number"
                },
                "red": {
                    "type": "number"
                }
            },
            "required": [
                "blue",
                "green",
                "red"
            ],
            "type": "object"
        },
        "__type_7": {
            "additionalProperties": false,
            "properties": {
                "devtools": {
                    "description": "Should the context menu contain a button for opening devtools.",
                    "type": "boolean"
                },
                "enable": {
                    "description": "Should the context menu display on right click.",
                    "type": "boolean"
                },
                "reload": {
                    "description": "Should the context menu contain a button for reloading the page.",
                    "type": "boolean"
                }
            },
            "required": [
                "enable"
            ],
            "type": "object"
        },
        "__type_8": {
            "additionalProperties": false,
            "description": "Configure the context menu when right-clicking on a window.",
            "properties": {
                "enabled": {
                    "description": "Displays the context menu on right click.",
                    "type": "boolean"
                },
                "template": {
                    "$ref": "#/definitions/Array_1",
                    "description": "Context menu items to display on right-click."
                }
            },
            "type": "object"
        },
        "__type_9": {
            "additionalProperties": false,
            "properties": {
                "height": {
                    "type": "number"
                },
                "width": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "unknown": {}
    }
}

