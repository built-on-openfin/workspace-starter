import type { WorkspacePlatformModule } from "@openfin/workspace-platform";
import type {
	NotificationActionEvent,
	NotificationClosedEvent,
	NotificationCreatedEvent,
	NotificationFormSubmittedEvent,
	NotificationReminderCreatedEvent,
	NotificationReminderRemovedEvent,
	NotificationToastDismissedEvent,
	NotificationsCountChanged,
	NotificationOptions
} from "@openfin/workspace/notifications";
import type {
	Lifecycle,
	LifecycleEventMap,
	LifecycleEvents
} from "workspace-platform-starter/shapes/lifecycle-shapes";
import type { Logger, LoggerCreator } from "workspace-platform-starter/shapes/logger-shapes";
import type { ModuleDefinition, ModuleHelpers } from "workspace-platform-starter/shapes/module-shapes";
import type {
	NotificationClient,
	NotificationsEventMap
} from "workspace-platform-starter/shapes/notification-shapes";
import { isEmpty } from "workspace-platform-starter/utils";
import type { ExampleNotificationServiceProviderOptions } from "./shapes";

/**
 * Implementation for the example notification service lifecycle provider.
 */
export class ExampleNotificationServiceProvider
	implements Lifecycle<ExampleNotificationServiceProviderOptions>
{
	/**
	 * The module definition including settings.
	 * @internal
	 */
	private _definition: ModuleDefinition<ExampleNotificationServiceProviderOptions> | undefined;

	/**
	 * The logger for displaying information from the module.
	 * @internal
	 */
	private _logger?: Logger;

	/**
	 * Helper methods for the module.
	 * @internal
	 */
	private _helpers: ModuleHelpers | undefined;

	/**
	 * An object containing current subscriptions.
	 * @internal
	 */
	private _lifeCycleSubscriptions: { [key: string]: LifecycleEvents } | undefined;

	/**
	 * An object containing current subscriptions.
	 * @internal
	 */
	private _notificationSubscriptions:
		| { [key in keyof NotificationsEventMap]?: (event: NotificationsEventMap[key]) => void }
		| undefined;

	/**
	 * A notification client if available.
	 * @internal
	 */
	private _notificationClient: NotificationClient | undefined;

	/**
	 * Initialize the module.
	 * @param definition The definition of the module from configuration include custom options.
	 * @param loggerCreator For logging entries.
	 * @param helpers Helper methods for the module to interact with the application core.
	 * @returns Nothing.
	 */
	public async initialize(
		definition: ModuleDefinition<ExampleNotificationServiceProviderOptions>,
		loggerCreator: LoggerCreator,
		helpers: ModuleHelpers
	): Promise<void> {
		this._definition = definition;
		this._logger = loggerCreator(`ExampleNotificationService(${this._definition?.id}):`);
		this._helpers = helpers;
		this._lifeCycleSubscriptions = {};
		this._logger.info("Initializing");
	}

	/**
	 * Close down any resources being used by the module.
	 * @returns Nothing.
	 */
	public async closedown(): Promise<void> {
		this._logger?.info("Closedown");
		// disconnect from websocket/server sent event source for example
		await this.stopNotificationService();
	}

	/**
	 * Get the lifecycle events.
	 * @returns The map of lifecycle events.
	 */
	public async get(): Promise<LifecycleEventMap> {
		const lifecycleMap: LifecycleEventMap = {};

		lifecycleMap["after-bootstrap"] = async (
			platform: WorkspacePlatformModule,
			customData?: unknown
		): Promise<void> => {
			await this.startNotificationService();
		};

		return lifecycleMap;
	}

	/**
	 * Starts the notification service.
	 */
	private async startNotificationService(): Promise<void> {
		const serverUrl = this._definition?.data?.exampleServerUrl;
		this._logger?.info(
			`Starting notification service and connecting to ${
				serverUrl ?? "https://examplenotificationserver"
			} (Not Really...this is an example.)`
		);

		if (this._helpers?.subscribeLifecycleEvent) {
			// we have been passed the ability to subscribe to lifecycle events.
			if (!this._lifeCycleSubscriptions) {
				this._lifeCycleSubscriptions = {};
			}
			if (!this._notificationSubscriptions) {
				this._notificationSubscriptions = {};
			}

			if (this._helpers?.getNotificationClient) {
				this._notificationClient = await this._helpers.getNotificationClient();
			}

			if (this._notificationClient) {
				await this.setupNotificationEventListeners();

				if (this._definition?.data?.notifyOn?.appsChanged !== false) {
					const appsChangedSubscription = this._helpers?.subscribeLifecycleEvent("apps-changed", async () => {
						const notification: NotificationOptions = {
							title: "Apps Changed Notification",
							body: `The list of apps on this platform has changed.This was generated by the example notification service (moduleId: ${this._definition?.id}).`,
							toast: "transient",
							category: "default",
							template: "markdown"
						};
						await this._notificationClient?.create(notification);
					});
					this._lifeCycleSubscriptions[appsChangedSubscription] = "apps-changed";
				}

				if (this._definition?.data?.notifyOn?.favoriteChanged !== false) {
					const favoriteChangedSubscription = this._helpers?.subscribeLifecycleEvent(
						"favorite-changed",
						async () => {
							const notification: NotificationOptions = {
								title: "Favorite Changed Notification",
								body: `You have changed a favorite on this platform.This was generated by the example notification service (moduleId: ${this._definition?.id}).`,
								toast: "transient",
								category: "default",
								template: "markdown"
							};
							await this._notificationClient?.create(notification);
						}
					);
					this._lifeCycleSubscriptions[favoriteChangedSubscription] = "favorite-changed";
				}

				if (this._definition?.data?.notifyOn?.pageChanged !== false) {
					const pageChangedSubscription = this._helpers?.subscribeLifecycleEvent("page-changed", async () => {
						const notification: NotificationOptions = {
							title: "Page Changed Notification",
							body: `You have changed the page on this platform.This was generated by the example notification service (moduleId: ${this._definition?.id}).`,
							toast: "transient",
							category: "default",
							template: "markdown"
						};
						await this._notificationClient?.create(notification);
					});
					this._lifeCycleSubscriptions[pageChangedSubscription] = "page-changed";
				}

				if (this._definition?.data?.notifyOn?.themeChanged !== false) {
					const themeChangedSubscription = this._helpers?.subscribeLifecycleEvent(
						"theme-changed",
						async () => {
							const notification: NotificationOptions = {
								title: "Theme Changed",
								body: `You have changed the theme for this platform. This was generated by the example notification service (moduleId: ${this._definition?.id}).`,
								toast: "transient",
								category: "default",
								template: "markdown",
								form: [
									{
										type: "boolean",
										key: "intended theme change",
										label: "Did you intend to change the theme?",
										widget: {
											type: "Toggle"
										}
									}
								],
								buttons: [
									{
										title: "Acknowledged",
										type: "button",
										cta: true,
										submit: true
									}
								]
							};
							await this._notificationClient?.create(notification);
						}
					);
					this._lifeCycleSubscriptions[themeChangedSubscription] = "theme-changed";
				}

				if (this._definition?.data?.notifyOn?.workspaceChanged !== false) {
					const workspaceChangedSubscription = this._helpers?.subscribeLifecycleEvent(
						"workspace-changed",
						async () => {
							const notification: NotificationOptions = {
								title: "Workspace Changed",
								body: `You have changed your workspace. This was generated by the example notification service (moduleId: ${this._definition?.id}).`,
								toast: "transient",
								category: "default",
								template: "markdown",
								buttons: [
									{
										title: "Acknowledged",
										type: "button",
										cta: true,
										onClick: {
											task: "acknowledge-task",
											customData: {
												message: "This is the response data"
											}
										}
									},
									{
										title: "Cancel",
										type: "button"
									}
								]
							};
							await this._notificationClient?.create(notification);
						}
					);
					this._lifeCycleSubscriptions[workspaceChangedSubscription] = "workspace-changed";
				}
			}
		}
	}

	/**
	 * Stops the notification service.
	 */
	private async stopNotificationService(): Promise<void> {
		this._logger?.info("Stopping notification service (Not Really...this is an example.)");
		if (this._helpers?.unsubscribeLifecycleEvent && this._lifeCycleSubscriptions) {
			for (const [key, value] of Object.entries(this._lifeCycleSubscriptions)) {
				this._helpers.unsubscribeLifecycleEvent(key, value);
			}
		}
		await this.removeNotificationEventListeners();
	}

	/**
	 * Setup listeners using the notification client fetched via a helper.
	 */
	private async setupNotificationEventListeners(): Promise<void> {
		if (!isEmpty(this._notificationClient) && !isEmpty(this._notificationSubscriptions)) {
			const actionEventHandler = (event: NotificationActionEvent): void => {
				this._logger?.info("Event for notification action received.", event);
			};

			await this._notificationClient.addEventListener("notification-action", actionEventHandler);
			this._notificationSubscriptions["notification-action"] = actionEventHandler;

			const closedEventHandler = (event: NotificationClosedEvent): void => {
				this._logger?.info("Event for notification closed received.", event);
			};

			await this._notificationClient.addEventListener("notification-closed", closedEventHandler);
			this._notificationSubscriptions["notification-closed"] = closedEventHandler;

			const createdEventHandler = (event: NotificationCreatedEvent): void => {
				this._logger?.info("Event for notification created received.", event);
			};

			await this._notificationClient.addEventListener("notification-created", createdEventHandler);
			this._notificationSubscriptions["notification-created"] = createdEventHandler;

			const formSubmittedEventHandler = (event: NotificationFormSubmittedEvent): void => {
				this._logger?.info("Event for notification form submitted received.", event);
			};

			await this._notificationClient.addEventListener(
				"notification-form-submitted",
				formSubmittedEventHandler
			);
			this._notificationSubscriptions["notification-form-submitted"] = formSubmittedEventHandler;

			const reminderCreatedEventHandler = (event: NotificationReminderCreatedEvent): void => {
				this._logger?.info("Event for notification reminder created received.", event);
			};

			await this._notificationClient.addEventListener(
				"notification-reminder-created",
				reminderCreatedEventHandler
			);
			this._notificationSubscriptions["notification-reminder-created"] = reminderCreatedEventHandler;

			const reminderRemovedEventHandler = (event: NotificationReminderRemovedEvent): void => {
				this._logger?.info("Event for notification reminder removed received.", event);
			};

			await this._notificationClient.addEventListener(
				"notification-reminder-removed",
				reminderRemovedEventHandler
			);
			this._notificationSubscriptions["notification-reminder-removed"] = reminderRemovedEventHandler;

			const toastDismissedEventHandler = (event: NotificationToastDismissedEvent): void => {
				this._logger?.info("Event for notification toast dismissed received.", event);
			};

			await this._notificationClient.addEventListener(
				"notification-toast-dismissed",
				toastDismissedEventHandler
			);
			this._notificationSubscriptions["notification-toast-dismissed"] = toastDismissedEventHandler;

			const notificationsCountChangedEventHandler = (event: NotificationsCountChanged): void => {
				this._logger?.info("Event for notification count changed received.", event);
			};

			await this._notificationClient.addEventListener(
				"notifications-count-changed",
				notificationsCountChangedEventHandler
			);
			this._notificationSubscriptions["notifications-count-changed"] = notificationsCountChangedEventHandler;
		}
	}

	/**
	 * Clean up notification subscriptions.
	 */
	private async removeNotificationEventListeners(): Promise<void> {
		if (!isEmpty(this._notificationClient) && !isEmpty(this._notificationSubscriptions)) {
			for (const [key, value] of Object.entries(this._notificationSubscriptions)) {
				await this._notificationClient.removeEventListener(
					key as keyof NotificationsEventMap,
					value as never
				);
			}
		}
	}
}
