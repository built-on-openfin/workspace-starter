function t(t){return null==t}const e={initOptions:new class{async initialize(t,e,n){this._logger=e("InitOptionsInteropHandler"),this._logger.info("The handler has been loaded")}async action(e,n,i){if(t(n))this._logger?.warn(`Actions passed to the module require a payload to be passed. Requested action: ${e} can not be fulfilled.`);else try{switch(e){case"raise-intent":await this.raiseIntent(n);break;case"share-context":await this.shareContext(n)}}catch(t){this._logger?.error(`Error trying to perform action ${e}.`,t)}}async raiseIntent(t){const e=fin.Interop.connectSync(fin.me.identity.uuid,{});this._logger?.info(`Received intent to raise. Intent Request ${JSON.stringify(t,null,4)}.`),await e.fireIntent(t)}async shareContext(e){const n=fin.Interop.connectSync(fin.me.identity.uuid,{}),i=(await n.getContextGroups()).find(t=>t.id===e.contextGroup);t(i)||(await n.joinContextGroup(i.id),this._logger?.info(`Received context to send. Context Group ${i.id}. Context: ${JSON.stringify(e.context,null,4)}`),await n.setContext(e.context))}}};export{e as entryPoints};
//# sourceMappingURL=interop.bundle.js.map