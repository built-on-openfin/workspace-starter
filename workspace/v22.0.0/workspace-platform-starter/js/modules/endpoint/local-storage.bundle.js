function e(e){return null==e}class t{constructor(e,t,o){this._storageTypeName=t,this._storageKey=`${fin.me.identity.uuid.toLowerCase().replaceAll(" ","")}-${e}`,o&&(this._logger=o("PlatformLocalStorage"))}async get(t){if(!e(t))return this.getCompleteStore()[t];this._logger?.error(`No id was specified for getting a ${this._storageTypeName} entry`)}async set(t,o){if(e(t))this._logger?.error(`You need to provide a id for the ${this._storageTypeName} entry you wish to save`);else{const e=this.getCompleteStore();e[t]=o,this.setCompleteStore(e)}}async getAll(e){const t=this.getCompleteStore();return 0===Object.keys(t).length?(this._logger?.info(`Storage has no ${this._storageTypeName} entries`),{}):t}async remove(t){if(e(t))this._logger?.error(`An id to clear the saved ${this._storageTypeName} was not provided`);else{const o=this.getCompleteStore();e(o[t])?this._logger?.error(`You tried to delete a non-existent ${this._storageTypeName} with id ${t}`):(delete o[t],this.setCompleteStore(o))}}getCompleteStore(){const t=localStorage.getItem(this._storageKey);return e(t)?(this._logger?.info(`Storage has no ${this._storageTypeName} entries. Creating store`),this.setCompleteStore({}),{}):JSON.parse(t)}setCompleteStore(e){localStorage.setItem(this._storageKey,JSON.stringify(e))}}const o={endpoint:new class{constructor(){this._storage={}}async initialize(e,t,o){this._loggerCreator=t,this._logger=t("LocalStorageEndpoint"),this._logger.info("Was passed the following options",e.data)}async action(t,o){if(e(o))return this._logger?.warn(`A request is required for this action: ${t.id}. Returning false`),!1;if("module"!==t.type)return this._logger?.warn(`We only expect endpoints of type module. Unable to perform action: ${t.id}`),!1;if(e(t.options))return this._logger?.warn(`The endpoint definition options are required for this action: ${t.id}`),!1;const{dataType:r,method:i}=t.options,s=this.getStorage(r);if("REMOVE"===i){const e=o.id;return await s.remove(e),!0}return"SET"===i&&(e(o.metaData)?(this._logger?.warn(`The metaData needs to be specified for this action: ${t.id}`),!1):e(o.payload)?(this._logger?.warn(`The payload needs to be specified for this action: ${t.id}`),!1):(await s.set(o.id,{metaData:o.metaData,payload:o.payload}),!0))}async requestResponse(t,o){if("module"!==t.type)return void this._logger?.warn(`We only expect endpoints of type module. Unable to action request/response for: ${t.id}`);if(e(t.options))return this._logger?.warn(`The endpoint definition options are required for this action: ${t.id}`),!1;const{dataType:r,method:i}=t.options,s=this.getStorage(r);if("GET"===i){const t=o?.id;return e(t)?s.getAll():s.get(t)}}getStorage(o){let r=this._storage[o];return e(r)&&(r=new t(o,o,this._loggerCreator),this._storage[o]=r),r}}};export{o as entryPoints};
//# sourceMappingURL=local-storage.bundle.js.map