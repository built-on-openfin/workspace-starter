var t={d:(e,n)=>{for(var i in n)t.o(n,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:n[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};function n(t){return null==t}t.d(e,{k:()=>i});const i={initOptions:new class{async initialize(t,e,n){this._logger=e("InitOptionsInteropHandler"),this._logger.info("The handler has been loaded")}async action(t,e,i){if(n(e))this._logger?.warn(`Actions passed to the module require a payload to be passed. Requested action: ${t} can not be fulfilled.`);else try{switch(t){case"raise-intent":await this.raiseIntent(e);break;case"share-context":await this.shareContext(e)}}catch(e){this._logger?.error(`Error trying to perform action ${t}.`,e)}}async raiseIntent(t){const e=fin.Interop.connectSync(fin.me.identity.uuid,{});this._logger?.info(`Received intent to raise. Intent Request ${JSON.stringify(t,null,4)}.`),await e.fireIntent(t)}async shareContext(t){const e=fin.Interop.connectSync(fin.me.identity.uuid,{}),i=(await e.getContextGroups()).find((e=>e.id===t.contextGroup));n(i)||(await e.joinContextGroup(i.id),this._logger?.info(`Received context to send. Context Group ${i.id}. Context: ${JSON.stringify(t.context,null,4)}`),await e.setContext(t.context))}}};var o=e.k;export{o as entryPoints};
//# sourceMappingURL=interop.bundle.js.map