var e={d:(t,i)=>{for(var n in i)e.o(i,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:i[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};function i(e){return null==e}e.d(t,{k:()=>n});const n={initOptions:new class{async initialize(e,t,i){this._logger=t("InitOptionsLaunchAppHandler"),this._helpers=i,this._definition=e,this._logger.info("The handler has been loaded")}async action(e,t,n){if(i(t))this._logger?.warn(`Actions passed to the module require a payload to be passed. Requested action: ${e} can not be fulfilled.`);else try{if("launch-app"===e){const e=t?.appId;if(this._logger?.info(`The following appId was passed and requested to launch: ${e}`),!(function(e){return null!=e&&"string"==typeof e}(a=e)&&a.trim().length>0))return void this._logger?.error("The init handler received an appId in the wrong format and is unable to launch it");if(i(this._helpers?.launchApp)||i(this._helpers?.getApps))return void this._logger?.warn(`Unable to launch app with appId: ${e} as a launchApp and getApps (to verify appId) function was not passed to this module via the module helpers.`);const n=await(this._helpers?.getApps()),r=n?.find((t=>t.appId===e));if(i(r))return void this._logger?.warn(`Unable to launch app with appId: ${e} because the app is not listed in the directory.`);const s=this._definition?.data?.supportedManifestTypes;if(Array.isArray(s)&&r.manifestType&&!s.includes(r.manifestType))return void this._logger?.warn(`Unable to launch app with appId: ${e} because a list of supported manifest types have been specified and this type of application isn't in the supported list.`);this._logger?.info(`Requesting the launch of app with appId: ${e}`),await(this._helpers?.launchApp(e))}}catch(t){this._logger?.error(`Error trying to perform action ${e}.`,t)}var a}}};var a=t.k;export{a as entryPoints};
//# sourceMappingURL=launch-app.bundle.js.map