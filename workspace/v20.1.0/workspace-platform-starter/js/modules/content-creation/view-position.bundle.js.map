{"version":3,"file":"view-position.bundle.js","mappings":"AACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,sBCM3E,MAAMI,EAAgE,CAC5EC,gBAAiB,ICOX,MA4BC,gBAAMC,CACZd,EACAe,EACAC,GAEAC,KAAKC,QAAUH,EAAc,uCAC7BE,KAAKE,UAAYnB,EAAWoB,KAC5BH,KAAKI,SAAWL,CACjB,CAMO,cAAMM,GACZ,OAAOL,KAAKE,WAAWI,OAAS,EACjC,CAUO,uBAAMC,CACZC,EACAC,EACAC,EACAC,GAMA,GAJAX,KAAKC,SAASW,KAAK,eAAgBH,EAAOC,EAAmBC,GAIzDD,GAAqB,IAAMC,EAAU,CASxC,MAAME,EAAeJ,EAAMK,eAAe,kBAAoBd,KAAKE,WAAWa,oBAC9E,GC/DI,SAAkBC,GAExB,OAAOA,SAA0D,iBAAVA,CACxD,CAQQC,CADsBD,EDqDTH,ICpDMG,EAAME,OAAOC,OAAS,IA/B1C,SAAiBH,GAEvB,OAAOA,OACR,CDgFuCI,CAAQX,EAAMY,cAAe,CAChE,GACkB,UAAjBR,GACiB,SAAjBA,GACiB,QAAjBA,GACiB,WAAjBA,EACC,CACD,MAAMS,EAAqBC,IAAIC,KAAKC,SAAShB,EAAMY,cAC7CK,QAAyCJ,EAAKK,kBAIpD,aAHMD,EAAeE,oBAAoB,CAACnB,EAAMoB,cAAe,CAC9DC,SAAUjB,KAEJ,CACR,CAAO,GAAqB,eAAjBA,GAAkD,gBAAjBA,EAAgC,CAC3E,MAAMS,EAAqBC,IAAIC,KAAKC,SAAShB,EAAMY,cAC7CK,QAAyCJ,EAAKK,kBAE9CI,SAD2CL,EAAeM,YACxBC,WAAWC,GAAOA,EAAGC,OAAS1B,EAAMY,cAAcc,OAI1F,aAHMT,EAAeU,QAAQ3B,EAAMoB,aAAc,CAChDQ,MAAwB,eAAjBxB,EAAgCkB,EAAmBA,EAAmB,KAEvE,CACR,CACD,CACD,CC7EK,IAAuBf,ED+E5B,OAAO,CACR,CASO,yBAAMsB,CACZ9B,EACAC,EACAC,GAEAV,KAAKC,SAASW,KAAK,iBAAkBH,EAAOC,EAC7C,CASO,0BAAM6B,CACZ/B,EACAC,EACAC,GAEAV,KAAKC,SAASW,KAAK,kBAAmBH,EAAOC,EAC9C,CASO,mBAAM8B,CACZhC,EACAC,EACAC,GAEAV,KAAKC,SAASW,KAAK,kBAAmBH,EAAOC,EAC9C,I","sources":["webpack://openfin-workspace--workspace-platform-starter/webpack/bootstrap","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/define property getters","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/hasOwnProperty shorthand","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/content-creation/view-position/index.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/content-creation/view-position/content-creation.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import type { ModuleImplementation, ModuleTypes } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { ViewPositionContentCreationProvider } from \"./content-creation\";\n\n/**\n * Define the entry points for the module.\n */\nexport const entryPoints: { [type in ModuleTypes]?: ModuleImplementation } = {\n\tcontentCreation: new ViewPositionContentCreationProvider()\n};\n","import type OpenFin from \"@openfin/core\";\nimport type { WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport type {\n\tContentCreationEvent,\n\tContentCreationRules\n} from \"workspace-platform-starter/shapes/content-creation-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty, isStringValue } from \"workspace-platform-starter/utils\";\nimport type { ViewPositionContentCreationSettings } from \"./shapes\";\n\n/**\n * Implementation for the view position content creation provider.\n */\nexport class ViewPositionContentCreationProvider\n\timplements ContentCreationRules<ViewPositionContentCreationSettings>\n{\n\t/**\n\t * The logger for displaying information from the module.\n\t * @internal\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Helper methods for the module.\n\t * @internal\n\t */\n\tprivate _helpers: ModuleHelpers | undefined;\n\n\t/**\n\t * The settings for the menu.\n\t * @internal\n\t */\n\tprivate _settings: ViewPositionContentCreationSettings | undefined;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<ViewPositionContentCreationSettings>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"ViewPositionContentCreationProvider\");\n\t\tthis._settings = definition.data;\n\t\tthis._helpers = helpers;\n\t}\n\n\t/**\n\t * Get a list of content creation rules for the module.\n\t * @returns The list of content creation rules.\n\t */\n\tpublic async getRules(): Promise<OpenFin.ContentCreationRule[]> {\n\t\treturn this._settings?.rules ?? [];\n\t}\n\n\t/**\n\t * Hand the content created event for a view to the module to process it.\n\t * @param platform The current platform.\n\t * @param event The event details for the created view.\n\t * @param matchingRuleIndex Which of the modules rules does the event match, -1 if it does not match.\n\t * @param attached Will be set if a previous handler has already attached the view.\n\t * @returns True if the view has been attached.\n\t */\n\tpublic async handleViewCreated(\n\t\tplatform: WorkspacePlatformModule,\n\t\tevent: ContentCreationEvent<OpenFin.Events.WebContentsEvents.ChildViewCreatedEvent>,\n\t\tmatchingRuleIndex: number,\n\t\tattached: boolean\n\t): Promise<boolean> {\n\t\tthis._logger?.info(\"View Created\", event, matchingRuleIndex, attached);\n\n\t\t// Only perform the positioning if it matches one of our rules\n\t\t// and its not already attached\n\t\tif (matchingRuleIndex >= 0 && !attached) {\n\t\t\t// When we receive a view created event it is up to us to decide where\n\t\t\t// to add the view. Calling platform.createView does not re-create the view\n\t\t\t// if it already exists, but specifying a target means it will be added to that window\n\t\t\t// By returning false for the attached flag the default handling will just attach\n\t\t\t// to the specified target\n\n\t\t\t// You can of course locate the view elsewhere as shown using the view-position\n\t\t\t// feature flag which could be passed to the window.open call\n\t\t\tconst viewPosition = event.parsedFeatures[\"view-position\"] ?? this._settings?.defaultViewPosition;\n\t\t\tif (isStringValue(viewPosition) && !isEmpty(event.viewIdentity)) {\n\t\t\t\tif (\n\t\t\t\t\tviewPosition === \"right\" ||\n\t\t\t\t\tviewPosition === \"left\" ||\n\t\t\t\t\tviewPosition === \"top\" ||\n\t\t\t\t\tviewPosition === \"bottom\"\n\t\t\t\t) {\n\t\t\t\t\tconst view: OpenFin.View = fin.View.wrapSync(event.viewIdentity);\n\t\t\t\t\tconst parentTabStack: OpenFin.TabStack = await view.getCurrentStack();\n\t\t\t\t\tawait parentTabStack.createAdjacentStack([event.childOptions], {\n\t\t\t\t\t\tposition: viewPosition\n\t\t\t\t\t});\n\t\t\t\t\treturn true;\n\t\t\t\t} else if (viewPosition === \"stack-left\" || viewPosition === \"stack-right\") {\n\t\t\t\t\tconst view: OpenFin.View = fin.View.wrapSync(event.viewIdentity);\n\t\t\t\t\tconst parentTabStack: OpenFin.TabStack = await view.getCurrentStack();\n\t\t\t\t\tconst siblingViewIds: OpenFin.Identity[] = await parentTabStack.getViews();\n\t\t\t\t\tconst currentViewIndex = siblingViewIds.findIndex((id) => id.name === event.viewIdentity?.name);\n\t\t\t\t\tawait parentTabStack.addView(event.childOptions, {\n\t\t\t\t\t\tindex: viewPosition === \"stack-left\" ? currentViewIndex : currentViewIndex + 1\n\t\t\t\t\t});\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Hand the content created event for a window to the module to process it.\n\t * @param platform The current platform.\n\t * @param event The event details for the created window.\n\t * @param matchingRuleIndex Which of the modules rules does the event match, -1 if it does not match.\n\t * @returns Nothing.\n\t */\n\tpublic async handleWindowCreated(\n\t\tplatform: WorkspacePlatformModule,\n\t\tevent: ContentCreationEvent<OpenFin.Events.WebContentsEvents.ChildWindowCreatedEvent>,\n\t\tmatchingRuleIndex: number\n\t): Promise<void> {\n\t\tthis._logger?.info(\"Window Created\", event, matchingRuleIndex);\n\t}\n\n\t/**\n\t * Hand the content created event for a browser to the module to process it.\n\t * @param platform The current platform.\n\t * @param event The event details for the created browser.\n\t * @param matchingRuleIndex Which of the modules rules does the event match, -1 if it does not match.\n\t * @returns Nothing.\n\t */\n\tpublic async handleBrowserCreated(\n\t\tplatform: WorkspacePlatformModule,\n\t\tevent: ContentCreationEvent<OpenFin.Events.WebContentsEvents.ChildContentOpenedInBrowserEvent>,\n\t\tmatchingRuleIndex: number\n\t): Promise<void> {\n\t\tthis._logger?.info(\"Browser Created\", event, matchingRuleIndex);\n\t}\n\n\t/**\n\t * Hand the content blocked event to the module to process it.\n\t * @param platform The current platform.\n\t * @param event The event details for the blocked content.\n\t * @param matchingRuleIndex Which of the modules rules does the event match, -1 if it does not match.\n\t * @returns Nothing.\n\t */\n\tpublic async handleBlocked(\n\t\tplatform: WorkspacePlatformModule,\n\t\tevent: ContentCreationEvent<OpenFin.Events.WebContentsEvents.ChildContentBlockedEvent>,\n\t\tmatchingRuleIndex: number\n\t): Promise<void> {\n\t\tthis._logger?.info(\"Content Blocked\", event, matchingRuleIndex);\n\t}\n}\n","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? (undefined as T) : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","entryPoints","contentCreation","initialize","loggerCreator","helpers","this","_logger","_settings","data","_helpers","getRules","rules","handleViewCreated","platform","event","matchingRuleIndex","attached","info","viewPosition","parsedFeatures","defaultViewPosition","value","isString","trim","length","isEmpty","viewIdentity","view","fin","View","wrapSync","parentTabStack","getCurrentStack","createAdjacentStack","childOptions","position","currentViewIndex","getViews","findIndex","id","name","addView","index","handleWindowCreated","handleBrowserCreated","handleBlocked"],"sourceRoot":""}