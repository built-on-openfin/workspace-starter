{"version":3,"file":"default-workspace.bundle.js","mappings":"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","sources":["webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/shapes/actions-shapes.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/default-workspace/default-workspace-storage.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/default-workspace/index.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/default-workspace/menus.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/default-workspace/lifecycle.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/default-workspace/actions.ts"],"sourcesContent":["import type { CustomActionsMap, ToolbarButton, WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport type { ModuleHelpers, ModuleImplementation, ModuleList } from \"./module-shapes\";\n\n/**\n * Definition for an action.\n */\nexport interface Actions<O = unknown> extends ModuleImplementation<O, ActionHelpers> {\n\t/**\n\t * Get the actions from the module.\n\t * @param platform The platform module.\n\t * @returns The map of custom actions.\n\t */\n\tget(platform: WorkspacePlatformModule): Promise<CustomActionsMap>;\n}\n\n/**\n * A list of modules that provide actions that can be used by the platform.\n */\nexport type ActionsProviderOptions = ModuleList;\n\n/**\n * Extended helpers used by action modules.\n */\nexport interface ActionHelpers extends ModuleHelpers {\n\t/**\n\t * Update toolbar buttons.\n\t * @param buttons The list of all buttons.\n\t * @param buttonId The button to update.\n\t * @param replacementButtonId The replacement for the button.\n\t * @returns The updated buttons.\n\t */\n\tupdateToolbarButtons: (\n\t\tbuttons: ToolbarButton[],\n\t\tbuttonId: string,\n\t\treplacementButtonId: string\n\t) => Promise<ToolbarButton[]>;\n}\n\n/**\n * Use this in preference to CustomActionCallerType from workspace-platform to avoid the import of the whole of workspace package in modules.\n */\nexport enum CustomActionCallerType {\n\tCustomButton = \"CustomButton\",\n\tStoreCustomButton = \"StoreCustomButton\",\n\tCustomDropdownItem = \"CustomDropdownItem\",\n\tGlobalContextMenu = \"GlobalContextMenu\",\n\tViewTabContextMenu = \"ViewTabContextMenu\",\n\tPageTabContextMenu = \"PageTabContextMenu\",\n\tSaveButtonContextMenu = \"SaveButtonContextMenu\",\n\tAPI = \"API\"\n}\n","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? (undefined as T) : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n","import type { EndpointClient } from \"workspace-platform-starter/shapes/endpoint-shapes\";\nimport type { Logger } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport type { VersionInfo } from \"workspace-platform-starter/shapes/version-shapes\";\nimport { isEmpty } from \"workspace-platform-starter/utils\";\nimport type {\n\tDefaultWorkspacePayload,\n\tDefaultWorkspaceProviderOptions,\n\tEndpointDefaultWorkspaceGetRequest,\n\tEndpointDefaultWorkspaceGetResponse,\n\tEndpointDefaultWorkspaceSetRequest\n} from \"./shapes\";\n\n/**\n * A class that contains the methods required for saving and getting a default workspace.\n */\nexport class DefaultWorkspaceStorage {\n\t/**\n\t * The logger for displaying information from the module.\n\t * @internal\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Helper methods for the module.\n\t * @internal\n\t */\n\tprivate _helpers: ModuleHelpers | undefined;\n\n\t/**\n\t * The helper methods to use.\n\t * @internal\n\t */\n\tprivate _settings?: DefaultWorkspaceProviderOptions;\n\n\t/**\n\t * An endpoint client if available.\n\t * @internal\n\t */\n\tprivate _endpointClient: EndpointClient | undefined;\n\n\t/**\n\t * The version info for the currently running platform.\n\t * @internal\n\t */\n\tprivate _versionInfo: VersionInfo | undefined;\n\n\t/**\n\t * A helper for saving and returning the default workspace related information.\n\t * @param settings settings to be used by this helper\n\t * @param helpers helper functions to be used\n\t * @param logger a logger to use while performing actions\n\t */\n\tpublic async initialize(\n\t\tsettings: DefaultWorkspaceProviderOptions | undefined,\n\t\thelpers: ModuleHelpers | undefined,\n\t\tlogger: Logger\n\t): Promise<void> {\n\t\tthis._logger = logger;\n\t\tthis._helpers = helpers;\n\t\tthis._settings = settings;\n\t\tawait this.setupEndpointClient();\n\t\tawait this.setVersionInfo();\n\t}\n\n\t/**\n\t * Save the default workspace.\n\t * @param payload The payload to save.\n\t * @returns whether or not the save was successful.\n\t */\n\tpublic async setDefaultWorkspace(payload: DefaultWorkspacePayload): Promise<boolean> {\n\t\tconst payloadId = this._settings?.payloadId ?? \"default-workspace\";\n\t\tconst setEndpointId = this._settings?.endpointIds?.setDefaultWorkspace ?? \"set-default-workspace\";\n\t\tif (\n\t\t\t!isEmpty(this._endpointClient) &&\n\t\t\t!isEmpty(this._versionInfo) &&\n\t\t\tthis._endpointClient.hasEndpoint(setEndpointId)\n\t\t) {\n\t\t\tconst success = await this._endpointClient.action<EndpointDefaultWorkspaceSetRequest>(setEndpointId, {\n\t\t\t\tid: payloadId,\n\t\t\t\tplatform: fin.me.identity.uuid,\n\t\t\t\tmetaData: {\n\t\t\t\t\tversion: {\n\t\t\t\t\t\tworkspacePlatformClient: this._versionInfo.workspacePlatformClient,\n\t\t\t\t\t\tplatformClient: this._versionInfo.platformClient\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tpayload\n\t\t\t});\n\t\t\treturn success;\n\t\t}\n\t\tthis._logger?.warn(\n\t\t\t\"Unable to set the default workspace as the access to the endpoint client, version info or the endpoint is not available.\"\n\t\t);\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get the currently saved default workspace.\n\t * @returns an object representing the saved default workspace or a payload with an empty workspace\n\t * and default useLastActiveWorkspace setting.\n\t */\n\tpublic async getDefaultWorkspace(): Promise<DefaultWorkspacePayload> {\n\t\tconst payloadId = this._settings?.payloadId ?? \"default-workspace\";\n\t\tconst getEndpointId = this._settings?.endpointIds?.getDefaultWorkspace ?? \"get-default-workspace\";\n\t\tconst noSavedData: DefaultWorkspacePayload = {\n\t\t\tuseLastActiveWorkspace: false,\n\t\t\tworkspaceId: \"\"\n\t\t};\n\t\tif (!isEmpty(this._endpointClient) && this._endpointClient.hasEndpoint(getEndpointId)) {\n\t\t\tconst savedWorkspace = await this._endpointClient.requestResponse<\n\t\t\t\tEndpointDefaultWorkspaceGetRequest,\n\t\t\t\tEndpointDefaultWorkspaceGetResponse\n\t\t\t>(getEndpointId, {\n\t\t\t\tplatform: fin.me.identity.uuid,\n\t\t\t\tid: payloadId\n\t\t\t});\n\t\t\treturn savedWorkspace?.payload ?? noSavedData;\n\t\t}\n\t\tthis._logger?.warn(\n\t\t\t\"Unable to get the default workspace as the access to the endpoint client or the endpoint is not available.\"\n\t\t);\n\t\treturn noSavedData;\n\t}\n\n\t/**\n\t * Setup the endpoint client if you have access to the function to get the client.\n\t * @returns a boolean representing whether or not the endpoint client could be created.\n\t */\n\tprivate async setupEndpointClient(): Promise<boolean> {\n\t\tif (!isEmpty(this._helpers?.getEndpointClient)) {\n\t\t\tthis._endpointClient = await this._helpers?.getEndpointClient();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Set the version info for the currently running platform.\n\t * @returns a boolean representing whether or not the version info was available.\n\t */\n\tprivate async setVersionInfo(): Promise<boolean> {\n\t\tif (!isEmpty(this._helpers?.getVersionInfo)) {\n\t\t\tthis._versionInfo = await this._helpers?.getVersionInfo();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n","import type { ModuleImplementation, ModuleTypes } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { DefaultWorkspaceActions } from \"./actions\";\nimport { ApplyDefaultWorkspaceProvider } from \"./lifecycle\";\nimport { SetDefaultWorkspaceProvider } from \"./menus\";\n\n/**\n * Define the entry points for the module.\n */\nexport const entryPoints: { [type in ModuleTypes]?: ModuleImplementation } = {\n\tmenus: new SetDefaultWorkspaceProvider(),\n\tlifecycle: new ApplyDefaultWorkspaceProvider(),\n\tactions: new DefaultWorkspaceActions()\n};\n","import type {\n\tGlobalContextMenuOptionType,\n\tWorkspace,\n\tWorkspacePlatformModule\n} from \"@openfin/workspace-platform\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type {\n\tMenuEntry,\n\tMenus,\n\tRelatedMenuId,\n\tMenuType\n} from \"workspace-platform-starter/shapes/menu-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty, isStringValue } from \"workspace-platform-starter/utils\";\nimport { DefaultWorkspaceStorage } from \"./default-workspace-storage\";\nimport type { DefaultWorkspaceProviderOptions } from \"./shapes\";\n\n/**\n * Implementation for the set default workspace menus provider.\n */\nexport class SetDefaultWorkspaceProvider implements Menus<DefaultWorkspaceProviderOptions> {\n\t/**\n\t * The logger for displaying information from the module.\n\t * @internal\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * The helper methods to use.\n\t * @internal\n\t */\n\tprivate _settings?: DefaultWorkspaceProviderOptions;\n\n\t/**\n\t * The means to get and set default workspaces\n\t * @internal\n\t * */\n\tprivate _defaultWorkspaceStorage: DefaultWorkspaceStorage | undefined;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<DefaultWorkspaceProviderOptions>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"SetDefaultWorkspaceProvider\");\n\t\tthis._settings = definition.data;\n\t\tthis._logger.info(\"Initializing\");\n\t\tthis._defaultWorkspaceStorage = new DefaultWorkspaceStorage();\n\t\tawait this._defaultWorkspaceStorage.initialize(definition?.data, helpers, this._logger);\n\t}\n\n\t/**\n\t * Close down any resources being used by the module.\n\t * @returns Nothing.\n\t */\n\tpublic async closedown(): Promise<void> {\n\t\tthis._logger?.info(\"Closedown\");\n\t}\n\n\t/**\n\t * Get the menus from the module.\n\t * @param menuType The type of menu to get the entries for.\n\t * @param platform The current platform.\n\t * @param relatedMenuId If available provide the related window identity the menu is showing on and page or view ids\n\t * depending on the menu type.\n\t * @returns Nothing.\n\t */\n\tpublic async get(\n\t\tmenuType: MenuType,\n\t\tplatform: WorkspacePlatformModule,\n\t\trelatedMenuId?: RelatedMenuId\n\t): Promise<MenuEntry[] | undefined> {\n\t\tif (\n\t\t\tmenuType === \"global\" &&\n\t\t\t!isEmpty(relatedMenuId?.windowIdentity) &&\n\t\t\t!isEmpty(this._defaultWorkspaceStorage)\n\t\t) {\n\t\t\tconst currentDefaultWorkspace = await this._defaultWorkspaceStorage.getDefaultWorkspace();\n\t\t\tconst useLastActiveWorkspaceSet: boolean = currentDefaultWorkspace.useLastActiveWorkspace;\n\t\t\tconst savedDefaultWorkspaceId: string = currentDefaultWorkspace.workspaceId;\n\n\t\t\tconst workspaces: Workspace[] = await platform.Storage.getWorkspaces();\n\t\t\tconst currentWorkspace: Workspace = await platform.getCurrentWorkspace();\n\t\t\tworkspaces.sort((a, b) => a.title.localeCompare(b.title));\n\t\t\tconst defaultWorkspaceMenuEntry: MenuEntry = {\n\t\t\t\tinclude: true,\n\t\t\t\tlabel: this._settings?.defaultWorkspace?.menuLabel ?? \"Default Workspace\",\n\t\t\t\ticon: this._settings?.defaultWorkspace?.menuIcon,\n\t\t\t\tenabled: workspaces.length > 0,\n\t\t\t\tsubmenu: [],\n\t\t\t\tposition: {\n\t\t\t\t\ttype: \"Downloads\",\n\t\t\t\t\toperation: \"before\",\n\t\t\t\t\tcustomId: \"DefaultWorkspace\",\n\t\t\t\t\t...this._settings?.defaultWorkspace?.menuPosition\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst includeReset = this._settings?.reset?.include ?? true;\n\t\t\tdefaultWorkspaceMenuEntry.submenu?.push({\n\t\t\t\tlabel: this._settings?.reset?.menuLabel ?? \"None\",\n\t\t\t\ticon: this._settings?.reset?.menuIcon,\n\t\t\t\tvisible: includeReset,\n\t\t\t\tenabled: useLastActiveWorkspaceSet || isStringValue(savedDefaultWorkspaceId),\n\t\t\t\tchecked: !useLastActiveWorkspaceSet && !isStringValue(savedDefaultWorkspaceId),\n\t\t\t\ttype: \"checkbox\",\n\t\t\t\tdata: {\n\t\t\t\t\ttype: \"Custom\" as GlobalContextMenuOptionType.Custom,\n\t\t\t\t\taction: {\n\t\t\t\t\t\tid: \"set-default-workspace\",\n\t\t\t\t\t\tcustomData: {\n\t\t\t\t\t\t\tworkspaceId: \"\",\n\t\t\t\t\t\t\tuseLastActiveWorkspace: false\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst includeLastActive = this._settings?.lastActive?.include ?? true;\n\t\t\tdefaultWorkspaceMenuEntry.submenu?.push({\n\t\t\t\tlabel: this._settings?.lastActive?.menuLabel ?? \"Last Active Workspace\",\n\t\t\t\ticon: this._settings?.lastActive?.menuIcon,\n\t\t\t\tvisible: includeLastActive,\n\t\t\t\tchecked: useLastActiveWorkspaceSet,\n\t\t\t\tenabled: !useLastActiveWorkspaceSet,\n\t\t\t\ttype: \"checkbox\",\n\t\t\t\tdata: {\n\t\t\t\t\ttype: \"Custom\" as GlobalContextMenuOptionType.Custom,\n\t\t\t\t\taction: {\n\t\t\t\t\t\tid: \"set-default-workspace\",\n\t\t\t\t\t\tcustomData: {\n\t\t\t\t\t\t\tworkspaceId: currentWorkspace?.workspaceId ?? \"\",\n\t\t\t\t\t\t\tuseLastActiveWorkspace: true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (workspaces.length > 0) {\n\t\t\t\tconst lastActiveWorkspaceLabel =\n\t\t\t\t\tthis._settings?.lastActive?.lastActiveWorkspaceLabel ?? \" [Active Workspace]\";\n\t\t\t\tfor (const workspace of workspaces) {\n\t\t\t\t\tdefaultWorkspaceMenuEntry.submenu?.push({\n\t\t\t\t\t\tlabel:\n\t\t\t\t\t\t\tuseLastActiveWorkspaceSet && workspace.workspaceId === savedDefaultWorkspaceId\n\t\t\t\t\t\t\t\t? `${workspace.title} ${lastActiveWorkspaceLabel}`\n\t\t\t\t\t\t\t\t: workspace.title,\n\t\t\t\t\t\tenabled: workspace.workspaceId !== savedDefaultWorkspaceId || useLastActiveWorkspaceSet,\n\t\t\t\t\t\tchecked: !useLastActiveWorkspaceSet && workspace.workspaceId === savedDefaultWorkspaceId,\n\t\t\t\t\t\ttype: \"checkbox\",\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\ttype: \"Custom\" as GlobalContextMenuOptionType.Custom,\n\t\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\t\tid: \"set-default-workspace\",\n\t\t\t\t\t\t\t\tcustomData: {\n\t\t\t\t\t\t\t\t\tworkspaceId: workspace.workspaceId,\n\t\t\t\t\t\t\t\t\tuseLastActiveWorkspace: false\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst menuItemsToReturn: MenuEntry[] = [];\n\t\t\tmenuItemsToReturn.push(defaultWorkspaceMenuEntry);\n\t\t\treturn menuItemsToReturn;\n\t\t}\n\t}\n}\n","import type { WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport type {\n\tLifecycle,\n\tLifecycleEventMap,\n\tWorkspaceChangedLifecyclePayload\n} from \"workspace-platform-starter/shapes/lifecycle-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty, isStringValue } from \"workspace-platform-starter/utils\";\nimport { DefaultWorkspaceStorage } from \"./default-workspace-storage\";\nimport type { DefaultWorkspaceProviderOptions } from \"./shapes\";\n\n/**\n * Implementation for the apply default workspace lifecycle provider.\n */\nexport class ApplyDefaultWorkspaceProvider implements Lifecycle<DefaultWorkspaceProviderOptions> {\n\t/**\n\t * The logger for displaying information from the module.\n\t * @internal\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Helper methods for the module.\n\t * @internal\n\t */\n\tprivate _helpers: ModuleHelpers | undefined;\n\n\t/**\n\t * The means to get and set default workspaces\n\t * @internal\n\t */\n\tprivate _defaultWorkspaceStorage: DefaultWorkspaceStorage | undefined;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<DefaultWorkspaceProviderOptions>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"ApplyDefaultWorkspaceProvider\");\n\t\tthis._helpers = helpers;\n\t\tthis._defaultWorkspaceStorage = new DefaultWorkspaceStorage();\n\t\tawait this._defaultWorkspaceStorage.initialize(definition?.data, helpers, this._logger);\n\t\tthis._logger.info(\"Initializing\");\n\t}\n\n\t/**\n\t * Close down any resources being used by the module.\n\t * @returns Nothing.\n\t */\n\tpublic async closedown(): Promise<void> {\n\t\tthis._logger?.info(\"Closedown\");\n\t}\n\n\t/**\n\t * Get the lifecycle events.\n\t * @returns The map of lifecycle events.\n\t */\n\tpublic async get(): Promise<LifecycleEventMap> {\n\t\tconst lifecycleMap: LifecycleEventMap = {};\n\n\t\tlifecycleMap[\"after-bootstrap\"] = async (\n\t\t\tplatform: WorkspacePlatformModule,\n\t\t\tcustomData?: unknown\n\t\t): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tconst savedDefaultWorkspace = await this._defaultWorkspaceStorage?.getDefaultWorkspace();\n\t\t\t\tconst workspaceId = savedDefaultWorkspace?.workspaceId;\n\t\t\t\tif (isStringValue(workspaceId) && !isEmpty(this._helpers?.launchWorkspace)) {\n\t\t\t\t\tthis._logger?.info(\n\t\t\t\t\t\t`Retrieved workspace id: ${savedDefaultWorkspace?.workspaceId} and we have the ability to launch a workspace. Applying the workspace.`\n\t\t\t\t\t);\n\t\t\t\t\tconst workspaceApplied = await this._helpers?.launchWorkspace(workspaceId, this._logger);\n\t\t\t\t\tthis._logger?.info(`Workspace Id ${workspaceId} applied: ${workspaceApplied}`);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tthis._logger?.error(\"There was an error trying to apply to get or apply the default workspace.\", err);\n\t\t\t}\n\t\t};\n\n\t\tlifecycleMap[\"workspace-changed\"] = async (\n\t\t\tplatform: WorkspacePlatformModule,\n\t\t\tcustomData?: unknown\n\t\t): Promise<void> => {\n\t\t\tif (!isEmpty(customData)) {\n\t\t\t\tconst workspaceUpdate = customData as WorkspaceChangedLifecyclePayload;\n\t\t\t\tif (\n\t\t\t\t\t(workspaceUpdate.action === \"update\" ||\n\t\t\t\t\t\tworkspaceUpdate.action === \"create\" ||\n\t\t\t\t\t\tworkspaceUpdate.action === \"apply\") &&\n\t\t\t\t\t!isEmpty(this._defaultWorkspaceStorage)\n\t\t\t\t) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst currentDefaultWorkspace = await this._defaultWorkspaceStorage.getDefaultWorkspace();\n\t\t\t\t\t\tif (currentDefaultWorkspace.useLastActiveWorkspace) {\n\t\t\t\t\t\t\tconst success = await this._defaultWorkspaceStorage.setDefaultWorkspace({\n\t\t\t\t\t\t\t\tworkspaceId: workspaceUpdate.id,\n\t\t\t\t\t\t\t\tuseLastActiveWorkspace: true\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthis._logger?.info(\n\t\t\t\t\t\t\t\t`Default workspace updated to workspace: ${workspaceUpdate.id} through last active workspace: ${success}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tthis._logger?.error(\n\t\t\t\t\t\t\t`Unable to update default workspace to workspace id: ${workspaceUpdate.id} because an error occurred.`,\n\t\t\t\t\t\t\terr\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn lifecycleMap;\n\t}\n}\n","import type {\n\tCustomActionPayload,\n\tCustomActionsMap,\n\tWorkspacePlatformModule\n} from \"@openfin/workspace-platform\";\nimport {\n\tCustomActionCallerType,\n\ttype ActionHelpers,\n\ttype Actions\n} from \"workspace-platform-starter/shapes/actions-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty } from \"workspace-platform-starter/utils\";\nimport { DefaultWorkspaceStorage } from \"./default-workspace-storage\";\nimport type { DefaultWorkspacePayload, DefaultWorkspaceProviderOptions } from \"./shapes\";\n\n/**\n * Implement the actions.\n */\nexport class DefaultWorkspaceActions implements Actions<DefaultWorkspaceProviderOptions> {\n\t/**\n\t * The logger for displaying information from the module.\n\t * @internal\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * The means to get and set default workspaces\n\t * @internal\n\t * */\n\tprivate _defaultWorkspaceStorage: DefaultWorkspaceStorage | undefined;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<DefaultWorkspaceProviderOptions>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ActionHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"DefaultWorkspaceAction\");\n\t\tthis._defaultWorkspaceStorage = new DefaultWorkspaceStorage();\n\t\tawait this._defaultWorkspaceStorage.initialize(definition?.data, helpers, this._logger);\n\t}\n\n\t/**\n\t * Get the actions from the module.\n\t * @param platform The platform module.\n\t * @returns The map of custom actions.\n\t */\n\tpublic async get(platform: WorkspacePlatformModule): Promise<CustomActionsMap> {\n\t\tconst actionMap: CustomActionsMap = {};\n\n\t\tactionMap[\"set-default-workspace\"] = async (payload: CustomActionPayload): Promise<void> => {\n\t\t\tif (payload.callerType === CustomActionCallerType.GlobalContextMenu) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!isEmpty(payload.customData) && !isEmpty(this._defaultWorkspaceStorage)) {\n\t\t\t\t\t\tconst result = await this._defaultWorkspaceStorage.setDefaultWorkspace(\n\t\t\t\t\t\t\tpayload.customData as DefaultWorkspacePayload\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._logger?.info(`The default workspace state has been updated: ${result}`, payload.customData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._logger?.warn(\n\t\t\t\t\t\t\t\"An action for setting the default workspace was not passed a payload and cannot be processed.\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} catch {\n\t\t\t\t\tthis._logger?.info(\"Cannot set the default workspace with the information provided.\");\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn actionMap;\n\t}\n}\n"],"names":["CustomActionCallerType","isEmpty","value","isStringValue","isString","trim","length","DefaultWorkspaceStorage","initialize","settings","helpers","logger","this","_logger","_helpers","_settings","setupEndpointClient","setVersionInfo","setDefaultWorkspace","payload","payloadId","setEndpointId","endpointIds","_endpointClient","_versionInfo","hasEndpoint","warn","action","id","platform","fin","me","identity","uuid","metaData","version","workspacePlatformClient","platformClient","getDefaultWorkspace","getEndpointId","noSavedData","useLastActiveWorkspace","workspaceId","savedWorkspace","requestResponse","getEndpointClient","getVersionInfo","entryPoints","menus","definition","loggerCreator","data","info","_defaultWorkspaceStorage","closedown","get","menuType","relatedMenuId","windowIdentity","currentDefaultWorkspace","useLastActiveWorkspaceSet","savedDefaultWorkspaceId","workspaces","Storage","getWorkspaces","currentWorkspace","getCurrentWorkspace","sort","a","b","title","localeCompare","defaultWorkspaceMenuEntry","include","label","defaultWorkspace","menuLabel","icon","menuIcon","enabled","submenu","position","type","operation","customId","menuPosition","includeReset","reset","push","visible","checked","customData","includeLastActive","lastActive","lastActiveWorkspaceLabel","workspace","menuItemsToReturn","lifecycle","lifecycleMap","async","savedDefaultWorkspace","launchWorkspace","workspaceApplied","err","error","workspaceUpdate","success","actions","actionMap","callerType","GlobalContextMenu","result"],"sourceRoot":""}