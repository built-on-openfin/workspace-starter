function e(e){return null==e}const t={share:new class{async initialize(e,t,a){this._definition=e,this._logger=t("WorkspacesShareProvider"),this._helpers=a,this._logger.info("Initializing")}async closedown(){this._logger?.info("Closedown")}async getShareTypes(){return["workspace"]}async getEntries(e){return[{label:"Share Workspace",type:"workspace",payload:{windowIdentity:e}}]}async share(t,a){if("workspace"===t){const i=await(this._helpers?.getPlatform?.());if(i){let s;const r=a?.workspaceId;if(s=e(r)?await i.getCurrentWorkspace():await i.Storage.getWorkspace(r),!e(s)){const r=await async function(t,a,i,s,r,n){if(e(i))a?.warn("Endpoint client is not available.");else if(e(i.requestResponse))a?.warn("Endpoint client requestResponse is not available.");else{if(!e(s)){try{const l=24,h=await i.requestResponse(s,{type:r,data:n});if(h){let i=h.id;if(e(i)){const e=h.url.lastIndexOf("/");-1!==e&&(i=h.url.slice(e+1))}if(!e(i)){const e=await t.Application.getInfo();let s;if(e.manifestUrl.startsWith("http")?s=`${e.manifestUrl.replace("http","fin")}?$$shareType=${r}&$$payload=${btoa(JSON.stringify({id:i}))}`:a?.error("We do not support file based manifest launches. The manifest has to be served over http/https:",e.manifestUrl),function(e){return null!=e&&"string"==typeof e}(o=s)&&o.trim().length>0)return await fin.Clipboard.writeText({data:s}),{title:"Share Request Raised",message:`The share request you raised has been copied to the **clipboard** and will be valid for ${l} hours. \n Share Url: \n * **${s}**`,status:"shared"}}}}catch(e){a?.error("Error saving share request:",e)}return{title:"Share Request Failed",message:"The share request you raised could not be generated.",status:"error"}}a?.warn("Endpoint id is not available.")}var o}(i,this._logger,await(this._helpers?.getEndpointClient?.()),this._definition?.data?.setEndpointId,t,s);await this.showConfirmation(r,a?.windowIdentity)}}}}async handle(t,a){if("workspace"===t){const i=await async function(t,a,i,s,r){if(e(a))t?.warn("Endpoint client is not available.");else if(e(a.requestResponse))t?.warn("Endpoint client requestResponse is not available.");else{if(!e(i)){try{const i=await a.requestResponse("share-get",{id:r});return e(i)?{confirmation:{title:"Share Load Expired",message:"The share request has expired and is no longer available.",status:"error"}}:s!==i.type?(t?.warn(`Share entry of mismatched type specified: ${i.type} it should be ${s}`),{confirmation:{title:"Share Load Failed",message:"The specified share link does not contain the correct data for the share type.",status:"error"}}):{payload:i.data,confirmation:{title:"Share Request Applied",message:"The share request has been fetched and applied.",status:"loaded"}}}catch(e){t?.error("There has been an error trying to load and apply the share link.",e)}return{confirmation:{title:"Share Load Failed",message:"The specified share link cannot be loaded.",status:"error"}}}t?.warn("Endpoint id is not available.")}}(this._logger,await(this._helpers?.getEndpointClient?.()),this._definition?.data?.getEndpointId,t,a.id),s=await(this._helpers?.getPlatform?.());if(s){const t=i?.payload;!e(t)&&this._helpers?.launchWorkspace&&(await s.Storage.saveWorkspace(t),await this._helpers.launchWorkspace(t.workspaceId,this._logger))}await this.showConfirmation(i?.confirmation)}}async showConfirmation(t,a){if(!e(t)&&this._helpers?.getShareClient){this._logger?.info(t);const i=await this._helpers.getShareClient();if(i){const s="error"===t.status?"error":"success";if(t.iconUrl=this._definition?.data?.images[s],this._helpers?.getThemeClient&&!e(t.iconUrl)){const e=await this._helpers.getThemeClient();t.iconUrl=await e.themeUrl(t.iconUrl)}await i.confirmation(t,this._definition?.data?.confirmationMode,a)}}}}};export{t as entryPoints};
//# sourceMappingURL=workspaces.bundle.js.map