{"version":3,"file":"pages.bundle.js","mappings":"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","sources":["webpack://openfin-workspace--workspace-platform-starter/webpack/bootstrap","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/define property getters","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/hasOwnProperty shorthand","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/share/pages/index.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/share/pages/share.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/share/common/share-common.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? (undefined as T) : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import type { ModuleImplementation, ModuleTypes } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { PagesShareProvider } from \"./share\";\n\n/**\n * Define the entry points for the module.\n */\nexport const entryPoints: { [type in ModuleTypes]?: ModuleImplementation } = {\n\tshare: new PagesShareProvider()\n};\n","import type OpenFin from \"@openfin/core\";\nimport type { Page } from \"@openfin/workspace-platform\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport type {\n\tShare,\n\tShareConfirmationOptions,\n\tShareEntry\n} from \"workspace-platform-starter/shapes/share-shapes\";\nimport { isEmpty, isStringValue } from \"workspace-platform-starter/utils\";\nimport { loadShareRequest, saveShareRequest } from \"../common/share-common\";\nimport type { PageShareEntryPayload, PagesShareProviderOptions } from \"./shapes\";\n\n/**\n * Implementation for the pages share provider.\n */\nexport class PagesShareProvider implements Share<PagesShareProviderOptions> {\n\t/**\n\t * The module definition including settings.\n\t * @internal\n\t */\n\tprivate _definition: ModuleDefinition<PagesShareProviderOptions> | undefined;\n\n\t/**\n\t * The logger for displaying information from the module.\n\t * @internal\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Helper methods for the module.\n\t * @internal\n\t */\n\tprivate _helpers: ModuleHelpers | undefined;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<PagesShareProviderOptions>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._definition = definition;\n\t\tthis._logger = loggerCreator(\"PagesShareProvider\");\n\t\tthis._helpers = helpers;\n\n\t\tthis._logger.info(\"Initializing\");\n\t}\n\n\t/**\n\t * Close down any resources being used by the module.\n\t * @returns Nothing.\n\t */\n\tpublic async closedown(): Promise<void> {\n\t\tthis._logger?.info(\"Closedown\");\n\t}\n\n\t/**\n\t * Get the list of share types supported by the module.\n\t * @returns Nothing.\n\t */\n\tpublic async getShareTypes(): Promise<string[]> {\n\t\treturn [\"page\"];\n\t}\n\n\t/**\n\t * Get the shares from the module.\n\t * @param windowIdentity The window identity to get the shares for.\n\t * @returns Nothing.\n\t */\n\tpublic async getEntries(windowIdentity: OpenFin.Identity): Promise<ShareEntry[] | undefined> {\n\t\tconst platform = await this._helpers?.getPlatform?.();\n\n\t\tif (platform) {\n\t\t\tconst window = platform.Browser.wrapSync(windowIdentity);\n\t\t\tconst pages = await window.getPages();\n\n\t\t\tlet pageId;\n\t\t\tfor (const page of pages) {\n\t\t\t\tif (page.isActive) {\n\t\t\t\t\tpageId = page.pageId;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (pageId) {\n\t\t\t\tconst pageShareEntryPayload: PageShareEntryPayload = {\n\t\t\t\t\twindowIdentity,\n\t\t\t\t\tpageId\n\t\t\t\t};\n\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: \"Share Page\",\n\t\t\t\t\t\ttype: \"page\",\n\t\t\t\t\t\tpayload: pageShareEntryPayload\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Perform the share for the given entry.\n\t * @param type The type of share to perform.\n\t * @param payload The data to associate with the share.\n\t * @returns Nothing.\n\t */\n\tpublic async share(type: string, payload?: PageShareEntryPayload): Promise<void> {\n\t\tif (type === \"page\") {\n\t\t\tconst platform = await this._helpers?.getPlatform?.();\n\n\t\t\tif (platform && !isEmpty(payload)) {\n\t\t\t\tlet page: Page | undefined = payload?.page;\n\n\t\t\t\tif (isEmpty(payload?.page) && isStringValue(payload.pageId)) {\n\t\t\t\t\tlet useStorage = true;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Try and get the page details from the passed window\n\t\t\t\t\t\tif (!isEmpty(payload.windowIdentity)) {\n\t\t\t\t\t\t\tconst targetWindow = platform.Browser.wrapSync(payload.windowIdentity);\n\t\t\t\t\t\t\tpage = await targetWindow.getPage(payload.pageId);\n\t\t\t\t\t\t\tif (isEmpty(page?.customData)) {\n\t\t\t\t\t\t\t\tpage.customData = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpage.customData.windowBounds = await targetWindow.openfinWindow.getBounds();\n\t\t\t\t\t\t\tuseStorage = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch {}\n\n\t\t\t\t\tif (isEmpty(page) && isEmpty(payload.windowIdentity)) {\n\t\t\t\t\t\t// we haven't got a passed page and we were not given a window identity but we do have a pageId\n\t\t\t\t\t\t// try and find an attached page which matches\n\t\t\t\t\t\tconst attachedPages = await platform.Browser.getAllAttachedPages();\n\t\t\t\t\t\tfor (const attachedPage of attachedPages) {\n\t\t\t\t\t\t\tif (attachedPage.pageId === payload.pageId) {\n\t\t\t\t\t\t\t\tpage = { ...attachedPage };\n\t\t\t\t\t\t\t\tif (!isEmpty(attachedPage.parentIdentity)) {\n\t\t\t\t\t\t\t\t\tconst targetWindow = platform.Browser.wrapSync(attachedPage.parentIdentity);\n\t\t\t\t\t\t\t\t\tif (isEmpty(page.customData)) {\n\t\t\t\t\t\t\t\t\t\tpage.customData = {};\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tpage.customData.windowBounds = await targetWindow.openfinWindow.getBounds();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tuseStorage = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (useStorage) {\n\t\t\t\t\t\tpage = await platform.Storage.getPage(payload.pageId);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!isEmpty(page)) {\n\t\t\t\t\tconst confirmation = await saveShareRequest(\n\t\t\t\t\t\tplatform,\n\t\t\t\t\t\tthis._logger,\n\t\t\t\t\t\tawait this._helpers?.getEndpointClient?.(),\n\t\t\t\t\t\tthis._definition?.data?.setEndpointId,\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tpage\n\t\t\t\t\t);\n\n\t\t\t\t\tawait this.showConfirmation(confirmation, payload.windowIdentity);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handle a share activation.\n\t * @param type The type of the share.\n\t * @param payload The payload for the share.\n\t * @param payload.id The payload for the share.\n\t * @returns Nothing.\n\t */\n\tpublic async handle(type: string, payload: { id: string }): Promise<void> {\n\t\tif (type === \"page\") {\n\t\t\tconst response = await loadShareRequest<Page>(\n\t\t\t\tthis._logger,\n\t\t\t\tawait this._helpers?.getEndpointClient?.(),\n\t\t\t\tthis._definition?.data?.getEndpointId,\n\t\t\t\ttype,\n\t\t\t\tpayload.id\n\t\t\t);\n\n\t\t\tconst platform = await this._helpers?.getPlatform?.();\n\t\t\tif (platform) {\n\t\t\t\tconst responsePayload = response?.payload;\n\t\t\t\tif (!isEmpty(responsePayload) && this._helpers?.launchPage) {\n\t\t\t\t\tawait platform.Storage.savePage(responsePayload);\n\t\t\t\t\tawait this._helpers.launchPage(responsePayload.pageId, undefined, this._logger);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait this.showConfirmation(response?.confirmation);\n\t\t}\n\t}\n\n\t/**\n\t * Show a confirmation.\n\t * @param confirmation The confirmation options.\n\t * @param parentIdentity The identity of the parent window.\n\t */\n\tprivate async showConfirmation(\n\t\tconfirmation: ShareConfirmationOptions | undefined,\n\t\tparentIdentity?: OpenFin.Identity\n\t): Promise<void> {\n\t\tif (!isEmpty(confirmation) && this._helpers?.getShareClient) {\n\t\t\tthis._logger?.info(confirmation);\n\t\t\tconst shareClient = await this._helpers.getShareClient();\n\t\t\tif (shareClient) {\n\t\t\t\tconst iconKey = confirmation.status === \"error\" ? \"error\" : \"success\";\n\t\t\t\tconfirmation.iconUrl = this._definition?.data?.images[iconKey];\n\t\t\t\tif (this._helpers?.getThemeClient && !isEmpty(confirmation.iconUrl)) {\n\t\t\t\t\tconst themeClient = await this._helpers.getThemeClient();\n\t\t\t\t\tconfirmation.iconUrl = await themeClient.themeUrl(confirmation.iconUrl);\n\t\t\t\t}\n\t\t\t\tawait shareClient.confirmation(\n\t\t\t\t\tconfirmation,\n\t\t\t\t\tthis._definition?.data?.confirmationMode,\n\t\t\t\t\tparentIdentity\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n","import type { WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport type { EndpointClient } from \"workspace-platform-starter/shapes/endpoint-shapes\";\nimport type { Logger } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ShareConfirmationOptions } from \"workspace-platform-starter/shapes/share-shapes\";\nimport { isEmpty, isStringValue } from \"workspace-platform-starter/utils\";\n\n/**\n * Save the request.\n * @param platform The workspace platform.\n * @param logger The logger for information.\n * @param endpointClient The endpoint client.\n * @param endpointId The endpoint id.\n * @param shareType The share type.\n * @param payload The payload to save.\n * @returns The confirmation to display.\n */\nexport async function saveShareRequest(\n\tplatform: WorkspacePlatformModule,\n\tlogger: Logger | undefined,\n\tendpointClient: EndpointClient | undefined,\n\tendpointId: string | undefined,\n\tshareType: string,\n\tpayload: unknown\n): Promise<ShareConfirmationOptions | undefined> {\n\tif (isEmpty(endpointClient)) {\n\t\tlogger?.warn(\"Endpoint client is not available.\");\n\t\treturn;\n\t}\n\tif (isEmpty(endpointClient.requestResponse)) {\n\t\tlogger?.warn(\"Endpoint client requestResponse is not available.\");\n\t\treturn;\n\t}\n\tif (isEmpty(endpointId)) {\n\t\tlogger?.warn(\"Endpoint id is not available.\");\n\t\treturn;\n\t}\n\ttry {\n\t\tconst expiryInHours = 24;\n\t\tconst response = await endpointClient.requestResponse<\n\t\t\t{ type: string; data: unknown },\n\t\t\t{ url: string; id?: string }\n\t\t>(endpointId, {\n\t\t\ttype: shareType,\n\t\t\tdata: payload\n\t\t});\n\n\t\tif (response) {\n\t\t\tlet id = response.id;\n\t\t\tif (isEmpty(id)) {\n\t\t\t\tconst indexOfId = response.url.lastIndexOf(\"/\");\n\t\t\t\tif (indexOfId !== -1) {\n\t\t\t\t\tid = response.url.slice(indexOfId + 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!isEmpty(id)) {\n\t\t\t\tconst platformInfo = await platform.Application.getInfo();\n\t\t\t\tlet finsLink: string | undefined;\n\n\t\t\t\tif (platformInfo.manifestUrl.startsWith(\"http\")) {\n\t\t\t\t\tfinsLink = `${platformInfo.manifestUrl.replace(\n\t\t\t\t\t\t\"http\",\n\t\t\t\t\t\t\"fin\"\n\t\t\t\t\t)}?$$shareType=${shareType}&$$payload=${btoa(JSON.stringify({ id }))}`;\n\t\t\t\t} else {\n\t\t\t\t\tlogger?.error(\n\t\t\t\t\t\t\"We do not support file based manifest launches. The manifest has to be served over http/https:\",\n\t\t\t\t\t\tplatformInfo.manifestUrl\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (isStringValue(finsLink)) {\n\t\t\t\t\tawait fin.Clipboard.writeText({\n\t\t\t\t\t\tdata: finsLink\n\t\t\t\t\t});\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttitle: \"Share Request Raised\",\n\t\t\t\t\t\tmessage: `The share request you raised has been copied to the **clipboard** and will be valid for ${expiryInHours} hours. \\n Share Url: \\n * **${finsLink}**`,\n\t\t\t\t\t\tstatus: \"shared\"\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\tlogger?.error(\"Error saving share request:\", error);\n\t}\n\n\treturn {\n\t\ttitle: \"Share Request Failed\",\n\t\tmessage: \"The share request you raised could not be generated.\",\n\t\tstatus: \"error\"\n\t};\n}\n\n/**\n * Load the request.\n * @param logger The logger for information.\n * @param endpointClient The endpoint client.\n * @param endpointId The endpoint id.\n * @param shareType The share type.\n * @param id The id of the request to load.\n * @returns The loaded payload and any confirmation to display.\n */\nexport async function loadShareRequest<T>(\n\tlogger: Logger | undefined,\n\tendpointClient: EndpointClient | undefined,\n\tendpointId: string | undefined,\n\tshareType: string,\n\tid: string\n): Promise<\n\t| {\n\t\t\tpayload?: T;\n\t\t\tconfirmation: ShareConfirmationOptions | undefined;\n\t  }\n\t| undefined\n> {\n\tif (isEmpty(endpointClient)) {\n\t\tlogger?.warn(\"Endpoint client is not available.\");\n\t\treturn;\n\t}\n\tif (isEmpty(endpointClient.requestResponse)) {\n\t\tlogger?.warn(\"Endpoint client requestResponse is not available.\");\n\t\treturn;\n\t}\n\tif (isEmpty(endpointId)) {\n\t\tlogger?.warn(\"Endpoint id is not available.\");\n\t\treturn;\n\t}\n\ttry {\n\t\tconst response = await endpointClient.requestResponse<{ id: string }, { type: string; data: T }>(\n\t\t\t\"share-get\",\n\t\t\t{ id }\n\t\t);\n\t\tif (!isEmpty(response)) {\n\t\t\tif (shareType !== response.type) {\n\t\t\t\tlogger?.warn(`Share entry of mismatched type specified: ${response.type} it should be ${shareType}`);\n\t\t\t\treturn {\n\t\t\t\t\tconfirmation: {\n\t\t\t\t\t\ttitle: \"Share Load Failed\",\n\t\t\t\t\t\tmessage: \"The specified share link does not contain the correct data for the share type.\",\n\t\t\t\t\t\tstatus: \"error\"\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tpayload: response.data,\n\t\t\t\tconfirmation: {\n\t\t\t\t\ttitle: \"Share Request Applied\",\n\t\t\t\t\tmessage: \"The share request has been fetched and applied.\",\n\t\t\t\t\tstatus: \"loaded\"\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tconfirmation: {\n\t\t\t\ttitle: \"Share Load Expired\",\n\t\t\t\tmessage: \"The share request has expired and is no longer available.\",\n\t\t\t\tstatus: \"error\"\n\t\t\t}\n\t\t};\n\t} catch (error) {\n\t\tlogger?.error(\"There has been an error trying to load and apply the share link.\", error);\n\t}\n\n\treturn {\n\t\tconfirmation: {\n\t\t\ttitle: \"Share Load Failed\",\n\t\t\tmessage: \"The specified share link cannot be loaded.\",\n\t\t\tstatus: \"error\"\n\t\t}\n\t};\n}\n"],"names":["__webpack_require__","isEmpty","value","isStringValue","isString","trim","length","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","entryPoints","share","initialize","loggerCreator","helpers","this","_definition","_logger","_helpers","info","closedown","getShareTypes","getEntries","windowIdentity","platform","getPlatform","window","Browser","wrapSync","pages","getPages","pageId","page","isActive","label","type","payload","useStorage","targetWindow","getPage","customData","windowBounds","openfinWindow","getBounds","attachedPages","getAllAttachedPages","attachedPage","parentIdentity","Storage","confirmation","async","logger","endpointClient","endpointId","shareType","warn","requestResponse","expiryInHours","response","data","id","indexOfId","url","lastIndexOf","slice","platformInfo","Application","getInfo","finsLink","manifestUrl","startsWith","replace","btoa","JSON","stringify","error","fin","Clipboard","writeText","title","message","status","saveShareRequest","getEndpointClient","setEndpointId","showConfirmation","handle","loadShareRequest","getEndpointId","responsePayload","launchPage","savePage","undefined","getShareClient","shareClient","iconKey","iconUrl","images","getThemeClient","themeClient","themeUrl","confirmationMode"],"sourceRoot":""}