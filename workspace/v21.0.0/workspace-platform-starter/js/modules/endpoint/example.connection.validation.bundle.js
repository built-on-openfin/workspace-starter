const e={endpoint:new class{async initialize(e,i,t){this._logger=i("ConnectionValidationEndpoint"),this._logger.info("Was passed the following options",e.data)}async requestResponse(e,i){const t={isValid:!1};return"module"!==e.type?(this._logger?.warn(`We only expect endpoints of type module. Unable to action request/response for: ${e.id}`),t):(null==this._logger||(this._logger.info("This payload verification module is an example that always returns true. Please replace with one that validates the connection either locally or by using a rest service."),this._logger.info(`Supplied identity: ${JSON.stringify(i?.identity)}`),this._logger.info(`Supplied options: ${JSON.stringify(i?.options)}`)),t.isValid=!0,this._logger?.info("Setting isValid to true"),t)}}};export{e as entryPoints};
//# sourceMappingURL=example.connection.validation.bundle.js.map