/******/ var __webpack_modules__ = ({

/***/ "../../node_modules/@openfin/workspace/index.js":
/*!******************************************************!*\
  !*** ../../node_modules/@openfin/workspace/index.js ***!
  \******************************************************/
/***/ ((module) => {

(()=>{"use strict";var e={703:(e,t,n)=>{n.r(t),n.d(t,{CLIAction:()=>p.Pt,CLIFilterOptionType:()=>p.el,CLITemplate:()=>p.yW,deregister:()=>tt,hide:()=>ot,register:()=>et,show:()=>nt});var o={};n.r(o),n.d(o,{subscribe:()=>ce});var r={};n.r(r),n.d(r,{create:()=>Ue});var i=n(678),a=n(532),s=n(150);const c="home";var d;!function(e){e.Commands="home-commands"}(d||(d={}));var u,l=n(806),p=(n(298),n(758));n(114),n(109),n(427);!function(e){e[e.Initial=0]="Initial",e[e.Open=1]="Open",e[e.Close=2]="Close"}(u||(u={}));var f=n(316);const g="all",w="0",h="5",v="6",y=()=>{};function m(e,t){return e?`${e}-${t}`:t}function S(e){return`__search-${e}-topic__`}const P=new Map;function W(e,t){P.has(e)||P.set(e,new Set),P.get(e).add(t)}function k(e,t){const n=P.get(e);n&&n.delete(t)}const C=new Map;function I(e,t){C.has(e)||C.set(e,new Set),C.get(e).add(t)}function T(e,t){const n=C.get(e);n&&n.delete(t)}const b=new Map;async function A(e,t){b.has(e)||b.set(e,new Map),b.get(e).set(t.id,t);const n=P.get(e);if(!n)return;const o=[...n].map((e=>e()));await Promise.all(o)}async function F(e,t){const n=b.get(e);if(!n)return;n.delete(t);const o=C.get(e);if(!o)return;const r=[...o].map((e=>e()));await Promise.all(r)}function R(e){const t=b.get(e);return t?[...t.values()]:[]}function D(e){const t=b.get(e);t&&t.clear()}function B(e,t){const n=b.get(e);return n?n.get(t):null}function L(e,t,n){return{...e,action:n||{...e.actions[0],trigger:f.px.UserAction},dispatcherIdentity:t}}function x(e,t,n="ascending"){const o=e||[];if(!t?.length)return o;const r=[],i=new Map;t.forEach((e=>{if(e.key)return i.set(e.key,e);r.push(e)}));let a=o.map((e=>{const{key:t}=e;if(t&&i.has(t)){const e=i.get(t);return i.delete(t),e}return e}));return a.push(...i.values(),...r),a="ascending"===n?a.sort(((e,t)=>(e?.score??1/0)-(t?.score??1/0))):a.sort(((e,t)=>(t?.score??1/0)-(e?.score??1/0))),a}function O(e){const t={};let n=[];let o=[];let r=u.Initial;t.getStatus=()=>r,t.getResultBuffer=()=>n,t.setResultBuffer=e=>{n=e,n?.length&&t.onChange()},t.getRevokedBuffer=()=>o,t.setRevokedBuffer=e=>{o=e,o?.length&&t.onChange()},t.onChange=y;const i={};return t.res=i,i.close=()=>{r!==u.Close&&(r=u.Close,t.onChange())},i.open=()=>{r!==u.Open&&(r=u.Open,t.onChange())},i.respond=n=>{const o=x(t.getResultBuffer(),n,e);t.setResultBuffer(o)},i.revoke=(...e)=>{const n=new Set(e),o=t.getResultBuffer().filter((({key:e})=>{const t=n.has(e);return t&&n.delete(e),!t}));t.setResultBuffer(o),n.size&&(t.getRevokedBuffer().forEach((e=>n.add(e))),t.setRevokedBuffer([...n]))},t}function M(e,t,n){const o=new Set;let r=!1;return{close:()=>{r=!0;for(const e of o)e()},req:{id:t,topic:e,...n,context:n?.context||{},onClose:e=>{o.add(e),r&&e()},removeListener:e=>{o.delete(e)}}}}function E(){return{name:fin.me.name,uuid:fin.me.uuid}}function V(){let e;try{e=fin.Platform.getCurrentSync().identity.uuid}catch(e){}return e}const G="deregistered or does not exist",q=new Error(`provider ${G}`),_=new Error("provider with name already exists"),H=new Error("bad payload"),$=new Error("subscription rejected"),U=new Error(`channel ${G}`),N=new Map;function j(e){const t=X(e);if(t)return t;throw U}function X(e){const t=N.get(e);if(t)return t}function K(e,t){N.set(e,t)}function z(e){console.error("OpenFin Search API: ",e)}const J=new Map;function Q(e){J.has(e)||J.set(e,new Map);const t=J.get(e);return{getRequestsForIdentity:e=>{const n=function(e){return`${e.uuid}:${e.name}`}(e);return t.has(n)||t.set(n,new Map),t.get(n)}}}async function Z(e,t){return(await j(e)).dispatch(w,t)}function Y({namespacedTopic:e,topic:t}){const n=B.bind(null,e),o=Q(e),r=Z.bind(null,e);return async(e,i)=>{if(!e||!e.id||!e.providerId){const e=H;return z(e),{error:e.message}}const{id:a,providerId:s}=e,c=n(s);if(!c){const e=q;return z(e),{error:e.message}}const d=o.getRequestsForIdentity(i);let u=d.get(e.id);u||(u=M(t,a,e),d.set(e.id,u));const l=O(),p=()=>{const e=l.getResultBuffer();l.setResultBuffer([]);const t=l.getRevokedBuffer();l.setRevokedBuffer([]);const n=l.getStatus();r({id:a,providerId:s,results:e,revoked:t,status:n})};let f=!0,g=!1;l.onChange=()=>{if(f)return f=!1,void p();g||(g=!0,setTimeout((()=>{g=!1,p()}),100))};try{const{results:e,context:t}=await c.onUserInput(u.req,l.res),n=l.getStatus();return{id:a,providerId:s,status:n,results:e,context:t}}catch(e){return z(e),{id:a,providerId:s,error:e?.message}}}}async function ee(e,t,n){const o=n||await j(e),r=E(),i={...t,identity:r,onResultDispatch:void 0},a=await o.dispatch("2",i);return await A(e,{identity:r,...t}),a}async function te(e,t){const n=await j(e);return await n.dispatch("3",t),F(e,t)}async function ne(e,t,n,o){const r=L(n,E(),o),i=B(e,t);if(i){const{onResultDispatch:e}=i;if(!e)return;return e(r)}const a={providerId:t,result:r};return(await j(e)).dispatch(h,a)}async function oe(e,t){const n={...t,context:t?.context||{}},o={},r=async function*(e,t,{setState:n}){const o=await j(e);for(;;){const e=await o.dispatch("1",t),r=e.error;if(r)throw new Error(r);const i=e;if(t.id=i.id,n(i.state),i.done)return i.value;yield i.value}}(e,n,{setState:e=>{o.state=e}});let i=await r.next();return o.id=n.id||"",o.close=()=>{!async function(e,t){(await j(e)).dispatch(v,{id:t})}(e,o.id)},o.next=()=>{if(i){const e=i;return i=void 0,e}return r.next()},o}async function re(e){return(await j(e)).dispatch("4",null)}async function ie(e){const t=await j(e);var n;n=e,N.delete(n),D(e),await t.disconnect()}function ae(e){const{namespacedTopic:t}=e,n=Q(t);return async o=>{if(!X(t))return;const r=n.getRequestsForIdentity(o);for(const{req:e,close:t}of r.values())t(),r.delete(e.id);K(t,(async e=>{const{namespacedTopic:t}=e,n=await se(e);for(const e of R(t))await ee(t,e,n);return n})(e))}}async function se(e){const{namespacedTopic:t}=e,n=S(t),o=await async function(e){for(let t=0;t<50;t++)try{return await fin.InterApplicationBus.Channel.connect(e,{wait:!1})}catch(e){if(49===t)throw e;await new Promise((e=>setTimeout(e,1e3)))}}(n);return o.register(w,Y(e)),o.register(v,function(e){const t=Q(e);return(e,n)=>{const o=t.getRequestsForIdentity(n),r=o.get(e.id);r&&(r.close(),o.delete(e.id))}}(t)),o.register(h,function(e){return async(t,n)=>{if(!t||!t.providerId||!t.result)return void z(H);const o=B(e,t.providerId);if(!o)return void z(q);const{onResultDispatch:r}=o;return r?(t.result.dispatcherIdentity=n,r(t.result)):void 0}}(t)),o.onDisconnection(ae(e)),o}async function ce(e){const t="string"==typeof e?e:e.topic,n="string"==typeof e?void 0:e.uuid,o=t||g,r=n||V()||"",i=m(r,o),a={topic:o,namespace:r,namespacedTopic:i};let s=X(i);return s||(s=se(a),K(i,s),await s),{getAllProviders:re.bind(null,i),register:ee.bind(null,i),search:oe.bind(null,i),deregister:te.bind(null,i),dispatch:ne.bind(null,i),disconnect:ie.bind(null,i)}}const de=new Map;function ue(e){const t=le(e);if(t)return t;throw U}function le(e){const t=de.get(e);if(t)return t}const pe=new Map;function fe(e,t){pe.has(e)||pe.set(e,new Set),pe.get(e).add(t)}function ge(e,t){const n=pe.get(e);n&&n.delete(t)}async function we(e){return[...R(e)].map((e=>({...e,onUserInput:void 0,onResultDispatch:void 0})))}async function he(e,t){if(B(e,t.id))throw new Error("provider with name already exists");const n=E();return await A(e,{identity:n,...t}),{workspaceVersion:i.u0||"",clientAPIVersion:t.clientAPIVersion||""}}async function ve(e,t){await F(e,t)}async function ye(e,t,n,o){const r=B(e,t);if(!r)throw q;const{onResultDispatch:i}=r;if(!i)return;return i(L(n,E(),o))}async function*me(e,t,n){const o=function(e,t){const n=[],o=[],r=[],i=[];for(const a of e){const e=O(a.scoreOrder),s={results:[],provider:{id:a.id,identity:a.identity,title:a.title,scoreOrder:a.scoreOrder,icon:a.icon,dispatchFocusEvents:a.dispatchFocusEvents}};n.push(s),o.push(e);const c=(async()=>{try{const{results:n,context:o}=await a.onUserInput(t,e.res);s.results=x(s.results||[],n),s.context={...s.context,...o}}catch(e){s.error=e}})();c.finally((()=>{c.done=!0})),i.push(c),r.push(r.length)}return{providerResponses:n,listenerResponses:o,openListenerResponses:r,initialResponsePromises:i}}(t.targets?t.targets.map((t=>B(e,t))).filter((e=>!!e)):[...R(e).filter((e=>!e.hidden))],t),{providerResponses:r,listenerResponses:i}=o;let{openListenerResponses:a,initialResponsePromises:s}=o,c=f.De.Fetching;const d=e=>{c=e,n.setState(c)};let l,p=!1;t.onClose((()=>{p=!0,l&&l()}));do{let e=!1;if(s.length){const t=[];for(const n of s)n.done?e=!0:t.push(n);s=t,s.length||(d(f.De.Fetched),e=!0)}let t,n=!1;const o=()=>{n=!0,t&&t()},g=[];for(const t of a){const n=i[t],a=r[t],s=n.getStatus();(s===u.Open||c===f.De.Fetching&&s===u.Initial)&&(g.push(t),n.onChange=o);const d=n.getResultBuffer();d.length&&(n.setResultBuffer([]),a.results=x(a.results||[],d),e=!0);const l=n.getRevokedBuffer();if(l.length){n.setRevokedBuffer([]);const t=new Set(l);a.results=(a.results||[]).filter((({key:e})=>!t.has(e))),e=!0}}if(a=g,e&&(yield r),p)break;n||(a.length||s.length)&&await Promise.race([...s,new Promise((e=>{t=e})),new Promise((e=>{l=e}))])}while(a.length||s.length);return d(f.De.Complete),r}let Se=0;async function Pe({namespacedTopic:e,topic:t},n){Se+=1;const o=M(t,Se.toString(),n),r=me(e,o.req,{setState:e=>{r.state=e}});return r.id=Se.toString(),r.close=o.close,r.state=f.De.Fetching,r}const We=new Map;function ke(e,t){return`${e}:${t}`}function Ce(e){return async t=>{if(!t)return z(H),{error:H.message};let n;if(t.id)n=ke(e.namespacedTopic,t.id);else{const o=await Pe(e,t);n=ke(e.namespacedTopic,o.id),t.id=o.id,We.set(n,{generator:o})}const o=We.get(n);clearTimeout(o.timeout);const r=await o.generator.next();return o.timeout=function(e){return window.setTimeout((()=>{We.delete(e)}),1e4)}(n),{...r,id:t.id,state:o.generator.state}}}function Ie(e,t,n){return ue(e).dispatch(t,v,{id:n})}function Te(e){return t=>function(e,t){const n=ke(e,t),o=We.get(n);o&&o.generator.close()}(e,t.id)}async function be(e,t,{id:n,query:o,context:r,targets:i=[]}){const a=ue(e),s={id:n,query:o,context:r,targets:i,providerId:t.id},c=await a.dispatch(t.identity,w,s),d=c.error;if(d)throw new Error(d);return c}const Ae=new Map;function Fe(e,t,n){return`${e}:${t.name}:${t.uuid}:${n}`}const Re=new Map;function De(e,t,n){return`${e}:${t}:${n}`}function Be(e,t){const n=Fe.bind(null,e,t.identity),o=Ie.bind(null,e,t.identity),r=be.bind(null,e,t);return async(i,a)=>{const s=n(i.id);if(!Ae.has(s)){const e=()=>{o(i.id),Ae.delete(s)};Ae.set(s,e),i.onClose(e)}const c=De(e,t.id,i.id),d=()=>{Re.delete(c),a.close()};i.onClose(d),Re.set(c,(e=>{e.results?.length&&a.respond(e.results),e.revoked?.length&&a.revoke(...e.revoked),e.status===u.Open&&a.open(),e.status===u.Close&&d()}));const l=await r(i);return l.status===u.Open&&a.open(),l.status!==u.Close&&l.status!==u.Initial||d(),l}}function Le(e,t){return async n=>{const o=ue(e),r={providerId:t.id,result:n};return o.dispatch(t.identity,h,r)}}const xe=new Map;function Oe(e,t){return`${e}-${t.name}-${t.uuid}`}function Me(e){return async(t,n)=>{if(!t||!t.id)return z(new Error(JSON.stringify(t))),void z(H);if(B(e,t.id))throw _;return t.identity=n,await async function(e,t){const n=Oe(e,t.identity);xe.has(n)||xe.set(n,[]),xe.get(n).push(t.id),await A(e,{...t,onUserInput:Be(e,t),onResultDispatch:Le(e,t)})}(e,t),{workspaceVersion:i.u0||"",clientAPIVersion:t.clientAPIVersion||""}}}function Ee(e){return t=>{t?function(e,t){const n=B(e,t);if(!n)return;const o=Oe(e,n.identity),r=xe.get(o);if(r){const n=r.findIndex((e=>e===t));-1!==n&&(r.splice(n,1),F(e,t))}}(e,t):z(H)}}const Ve=new Map;function Ge(e,t){Ve.has(e)||Ve.set(e,new Set),Ve.get(e).add(t)}function qe(e,t){const n=Ve.get(e);n&&n.delete(t)}function _e(e){return async t=>{!function(e,t){const n=Oe(e,t),o=xe.get(n);if(o){for(const t of o)F(e,t);xe.delete(n)}}(e,t);const n=Ve.get(e);n&&n.forEach((e=>e(t)))}}async function He(e){const{namespacedTopic:t}=e,n=S(e.namespacedTopic),o=await(r=n,fin.InterApplicationBus.Channel.create(r));var r;return o.onConnection(function({namespacedTopic:e}){return async t=>{const n=pe.get(e);if(n)for(const e of n)if(!await e(t))throw $}}(e)),o.onDisconnection(_e(t)),o.register(v,Te(t)),o.register(w,function(e){return t=>{const n=De(e,t.providerId,t.id),o=Re.get(n);o&&o(t)}}(t)),o.register("2",Me(t)),o.register("3",Ee(t)),o.register("4",function(e){return async()=>we(e)}(t)),o.register("1",Ce(e)),o.register(h,function(e){return async(t,n)=>{if(!t||!t.providerId||!t.result)return void z(H);const o=B(e,t.providerId);if(!o)throw q;const{onResultDispatch:r}=o;return r?(t.result.dispatcherIdentity=n,r(t.result)):void 0}}(t)),o}async function $e(e){const t=ue(e);var n;n=e,de.delete(n),await t.destroy(),D(e)}async function Ue(e){const t=("string"==typeof e?e:e?.topic||"")||g,n=V()||"",o=m(n,t),r={topic:t,namespace:n,namespacedTopic:o};let i=le(o);i||(i=await He(r),function(e,t){de.set(e,t)}(o,i));const a=ge.bind(null,o),s=qe.bind(null,o),c=k.bind(null,o),d=T.bind(null,o);return{getAllProviders:we.bind(null,o),search:Pe.bind(null,r),register:he.bind(null,o),deregister:ve.bind(null,o),onSubscription:fe.bind(null,o),onDisconnect:Ge.bind(null,o),onRegister:W.bind(null,o),onDeregister:I.bind(null,o),dispatch:ye.bind(null,o),disconnect:$e.bind(null,o),removeListener:e=>{a(e),s(e),c(e),d(e)}}}const{create:Ne}=r,{subscribe:je}=o,Xe={create:Ne,subscribe:je,defaultTopic:"all"},Ke=()=>{window.search=Xe},ze=e=>{const t=()=>{Ke(),window.removeEventListener(e,t)};return t};if("undefined"!=typeof window){Ke();const e="load",t=ze(e);window.addEventListener(e,t);const n="DOMContentLoaded",o=ze(n);window.addEventListener(n,o)}const Je=new Map;async function Qe(){await async function(e){Je.set(e,await je({topic:e,uuid:l.q9.Workspace}))}(c)}let Ze;async function Ye(e){return await async function(){return Ze||(Ze=Qe()),Ze}(),Je.get(e)}const et=async e=>{if(!e.icon)throw new Error(`${e.id} provider needs to have icon property defined.`);await(0,s.aB)();const t=await Ye(c);try{e.clientAPIVersion=i.u0;const n=await t.register(e);return(0,a.ck)({allowed:!0,componentVersion:n?.workspaceVersion}),n?.workspaceVersion,i.u0,{...n,setSearchQuery:async t=>(await(0,s.Xl)()).dispatch(s.WF.SetSearchQuery,{query:t,providerID:e.id})}}catch(e){throw(0,a.ck)({allowed:!1,rejectionCode:e instanceof Error?e.message:"unknown"}),e}},tt=async e=>{await(0,s.aB)();return(await Ye(c)).deregister(e)};async function nt(){return(await(0,s.Xl)()).dispatch(s.WF.ShowHome,void 0)}async function ot(){return(await(0,s.Xl)()).dispatch(s.WF.HideHome,void 0)}},298:(e,t,n)=>{n.d(t,{p:()=>o.px,w:()=>o.wt});var o=n(316)},427:(e,t,n)=>{var o;n.d(t,{v:()=>o}),function(e){e.ActionButton="ActionButton",e.DropdownButton="DropdownButton"}(o||(o={}))},758:(e,t,n)=>{var o,r,i;n.d(t,{Pt:()=>o,el:()=>i,yW:()=>r}),function(e){e.Suggestion="suggestion"}(o||(o={})),function(e){e.Contact="Contact",e.Custom="Custom",e.List="List",e.Plain="Plain",e.SimpleText="SimpleText",e.Loading="Loading",e.Error="Error"}(r||(r={})),function(e){e.MultiSelect="MultiSelect"}(i||(i={}))},114:(e,t,n)=>{var o,r;n.d(t,{L:()=>o,T:()=>r}),function(e){e.Snapshot="snapshot",e.Manifest="manifest",e.View="view",e.External="external"}(o||(o={})),function(e){e.LandingPage="landingPage",e.AppGrid="appGrid"}(r||(r={}))},109:(e,t,n)=>{n.d(t,{Go:()=>r,ZJ:()=>a,bI:()=>i,p6:()=>o});const o={Container:"Container",Button:"Button"},r={Text:"Text",Image:"Image",List:"List"},i={...o,...r};var a;!function(e){e.Primary="primary",e.Secondary="secondary",e.TextOnly="textOnly"}(a||(a={}))},528:(e,t,n)=>{n.r(t),n.d(t,{AppManifestType:()=>a.L,StorefrontTemplate:()=>a.T,deregister:()=>h,hide:()=>v,register:()=>w,show:()=>y});var o=n(532),r=n(150),i=n(82),a=n(114),s=n(678),c=n(438);let d,u=!1;async function l(e,t,n){const o=await(0,r.Dm)();try{return await o.dispatch(e.action,e.payload)}catch(r){if(-1!==r.toString().indexOf(e.action))return u||console.warn("You are using a newer version of the Workspace client library that is not supported by the currently running workspace provider. Please upgrade the Workspace to version 9.0 or later."),u=!0,await o.dispatch(t.action,t.payload),n;throw r}}const p=new Map,f=e=>{if(!p.has(e))throw new Error(`Storefront Provider with id ${e} is not registered`);return p.get(e)},g=async e=>{await(0,c.Hh)(fin.me.identity);const t=await(0,r.Xl)();if(p.has(e.id))throw new Error(`Storefront provider with id ${e.id} already registered`);return p.set(e.id,e),(e=>{e.isStorefrontActionsRegistered||(e.isStorefrontActionsRegistered=!0,e.register(r.WF.GetStorefrontProviderApps,(e=>f(e).getApps())),e.register(r.WF.GetStorefrontProviderFooter,(e=>f(e).getFooter())),e.register(r.WF.GetStorefrontProviderLandingPage,(e=>f(e).getLandingPage())),e.register(r.WF.GetStorefrontProviderNavigation,(e=>f(e).getNavigation())),e.register(r.WF.LaunchStorefrontProviderApp,(({id:e,app:t})=>f(e).launchApp(t))))})(t),e.clientAPIVersion=s.u0,l({action:r.WF.RegisterProvider,payload:{providerType:i.lP.Storefront,info:e}},{action:r.WF.RegisterStorefrontProvider,payload:e},{workspaceVersion:"unknown"})},w=e=>(d=new Promise((async(t,n)=>{try{const n=await g(e);(0,o.d9)({allowed:!0,componentVersion:n?.workspaceVersion}),n?.workspaceVersion,s.u0,t({clientAPIVersion:s.u0,workspaceVersion:n?.workspaceVersion??""})}catch(e){(0,o.d9)({allowed:!1,rejectionCode:e instanceof Error?e.message:"unknown"}),n(e)}})),d),h=async e=>(await d,p.delete(e),await(0,r.aB)(),l({action:r.WF.DeregisterProvider,payload:{providerType:i.lP.Storefront,id:e}},{action:r.WF.DeregisterStorefrontProvider,payload:e})),v=async()=>(await d,await(0,r.aB)(),l({action:r.WF.HideProviderWindow,payload:{providerType:i.lP.Storefront}},{action:r.WF.HideStorefront})),y=async()=>(await d,await(0,r.aB)(),l({action:r.WF.ShowProviderWindow,payload:{providerType:i.lP.Storefront}},{action:r.WF.ShowStorefront}))},438:(e,t,n)=>{var o;n.d(t,{Hh:()=>i}),function(e){e.LaunchApp="launchApp",e.SavePage="savePage",e.GetSavedPage="getSavedPage",e.CreateSavedPage="createSavedPage",e.UpdateSavedPage="updateSavedPage",e.DeleteSavedPage="deleteSavedPage",e.GetSavedPages="getSavedPages",e.CreateSavedPageInternal="createSavedPageInternal",e.UpdateSavedPageInternal="updateSavedPageInternal",e.DeleteSavedPageInternal="deleteSavedPageInternal",e.SharePage="sharePage",e.UpdatePageForWindow="updatePageForWindow",e.AttachPagesToWindow="attachPagesToWindow",e.DetachPagesFromWindow="detachPagesFromWindow",e.ReorderPagesForWindow="reorderPagesForWindow",e.SetActivePage="setActivePage",e.GetAllAttachedPages="getAllAttachedPages",e.GetActivePageIdForWindow="getActivePageIdForWindow",e.GetPagesForWindow="getPagesForWindow",e.GetPageForWindow="getPageForWindow",e.GetSavedPageMetadata="getSavedPageMetadata",e.GetUniquePageTitle="getUniquePageTitle",e.GetLastFocusedBrowserWindow="getLastFocusedBrowserWindow",e.GetThemes="getThemes",e.GetSelectedScheme="getSelectedScheme",e.SetSelectedScheme="setSelectedScheme",e.OpenGlobalContextMenuInternal="openGlobalContextMenuInternal",e.OpenViewTabContextMenuInternal="openViewTabContextMenuInternal",e.OpenPageTabContextMenuInternal="openPageTabContextMenuInternal",e.OpenSaveButtonContextMenuInternal="openSaveButtonContextMenuInternal",e.InvokeCustomActionInternal="invokeCustomActionInternal",e.RequestQuitPlatformDialogInternal="requestQuitPlatformDialogInternal",e.GetSavedWorkspace="getSavedWorkspace",e.CreateSavedWorkspace="createSavedWorkspace",e.UpdateSavedWorkspace="updateSavedWorkspace",e.DeleteSavedWorkspace="deleteSavedWorkspace",e.GetSavedWorkspaces="getSavedWorkspaces",e.SaveWorkspace="saveWorkspace",e.GetCurrentWorkspace="getCurrentWorkspace",e.ApplyWorkspace="applyWorkspace",e.SetActiveWorkspace="setActiveWorkspace",e.IsBrowserInitialized="isBrowserInitialized"}(o||(o={}));const r=async e=>fin.Platform.wrapSync(e).getClient(),i=async e=>{const t=await r(e),n="Target is not a Workspace Platform. Target must call WorkspacePlatform.init";let o;try{o=await t.dispatch("isWorkspacePlatform")}catch(e){throw new Error(n)}if("boolean"==typeof o&&o)return console.warn("You are using an older version of the workspace platform. Please update your workspace platform."),o;if("object"==typeof o&&o.isWorkspacePlatform)return o;throw new Error(n)}},150:(e,t,n)=>{n.d(t,{Dm:()=>s,WF:()=>a,Xl:()=>l,aB:()=>u});var o=n(117),r=n(678),i=n(121);var a;!function(e){e.RegisterProvider="register-provider",e.DeregisterProvider="deregister-provider",e.CreateProviderWindow="create-provider-window",e.GetProviders="get-providers",e.ShowProviderWindow="show-provider-window",e.HideProviderWindow="hide-provider-window",e.GetStorefrontProviderApps="get-storefront-provider-apps",e.GetStorefrontProviderLandingPage="get-storefront-provider-landing-page",e.GetStorefrontProviderFooter="get-storefront-provider-footer",e.GetStorefrontProviderNavigation="get-storefront-provider-navigation",e.LaunchStorefrontProviderApp="launch-storefront-provider-app",e.ShowHome="show-home",e.HideHome="hide-home",e.AssignHomeSearchContext="assign-home-search-context",e.SetSearchQuery="set-search-query",e.OpenHomeAndSetSearchQuery="open-home-and-set-search-query",e.GetLegacyPages="get-legacy-pages",e.GetLegacyWorkspaces="get-legacy-workspaces",e.GetComputedPlatformTheme="get-computed-platform-theme",e.SetSelectedScheme="set-selected-scheme",e.RegisterStorefrontProvider="register-storefront-provider",e.DeregisterStorefrontProvider="deregister-storefront-provider",e.HideStorefront="hide-storefront",e.ShowStorefront="show-storefront"}(a||(a={}));const s=(0,o.Z)("__of_workspace_protocol__"),c="isLaunchedViaLib",d=e=>{const t=new URL(e);return t.searchParams.append(c,"true"),t.toString()},u=async()=>{await(0,i.JV)(i.iW)||((r.ZK||-1===navigator.userAgent.indexOf("Win"))&&await fin.Application.startFromManifest(d(r.aW)),await fin.System.openUrlWithBrowser(d(r.GX)))},l=async()=>(await u(),s())},82:(e,t,n)=>{n.d(t,{R8:()=>a,X_:()=>i,lP:()=>o});var o,r=n(150);!function(e){e.Storefront="storefront",e.Dock="dock"}(o||(o={}));const i=async e=>(await(0,r.Dm)()).dispatch(r.WF.ShowProviderWindow,{providerType:e}),a=async e=>(await(0,r.Dm)()).dispatch(r.WF.HideProviderWindow,{providerType:e})},806:(e,t,n)=>{n.d(t,{q9:()=>o});var o,r,i,a=n(678);!function(e){e.Workspace="openfin-browser"}(o||(o={})),function(e){e.RunRequested="run-requested",e.WindowOptionsChanged="window-options-changed",e.WindowClosed="window-closed",e.WindowCreated="window-created"}(r||(r={})),function(e){e.FinProtocol="fin-protocol"}(i||(i={}));a.AB,o.Workspace},117:(e,t,n)=>{n.d(t,{Z:()=>i});var o=n(678);const r=o.Ax&&"complete"!==document.readyState&&new Promise((e=>document.addEventListener("readystatechange",(()=>{"complete"===document.readyState&&e()}))));function i(e){let t;return()=>{if(!o.sS)throw new Error("getChannelClient cannot be used outside an OpenFin env. Avoid using this method during pre-rendering.");return t||(t=(async()=>{await r;const n={clientAPIVersion:o.u0},i=await fin.InterApplicationBus.Channel.connect(e,{payload:n});return i.onDisconnection((async()=>{console.warn(`disconnected from channel provider ${e}`),t=void 0})),i})().then((e=>e)).catch((n=>{throw t=void 0,new Error(`failed to connect to channel provider ${e}: ${n}`)}))),t}}},678:(e,t,n)=>{var o;n.d(t,{AB:()=>s,Ax:()=>i,GX:()=>u,ZK:()=>d,aW:()=>l,oC:()=>c,sS:()=>r,u0:()=>f}),function(e){e.Local="local",e.Dev="dev",e.Staging="staging",e.Prod="prod"}(o||(o={}));const r="undefined"!=typeof window&&"undefined"!=typeof fin,i=("undefined"==typeof process||process.env?.JEST_WORKER_ID,"undefined"!=typeof window),a=i?window.origin:o.Local,s=r&&fin.me.uuid,c=r&&fin.me.name,d=(r&&fin.me.entityType,"prod"===o.Local),u=(o.Dev,o.Staging,o.Prod,"fins://system-apps/workspace"),l="https://cdn.openfin.co/workspace/9.6.0/app.json",p=e=>e.startsWith("http://")||e.startsWith("https://")?e:a+e,f=(p("https://cdn.openfin.co/workspace/9.6.0"),p("https://cdn.openfin.co/workspace/9.6.0"),"undefined"!=typeof WORKSPACE_DOCS_PLATFORM_URL&&p(WORKSPACE_DOCS_PLATFORM_URL),"undefined"!=typeof WORKSPACE_DOCS_CLIENT_URL&&p(WORKSPACE_DOCS_CLIENT_URL),"9.6.0")},532:(e,t,n)=>{n.d(t,{Wn:()=>d,ck:()=>s,d9:()=>c});var o,r=n(678),i=n(121);!function(e){e.Browser="Browser",e.Dock="Dock",e.Home="Home",e.Notification="Notification",e.Storefront="Storefront",e.Platform="Platform",e.Theming="Theming"}(o||(o={}));const a=async(e,t)=>{const n={apiVersion:t.apiVersion||r.u0,componentName:e,componentVersion:t.componentVersion||r.u0,allowed:t.allowed,rejectionCode:t.rejectionCode};fin.System.registerUsage({type:"workspace-licensing",data:n})},s=async e=>{i.OI.uuid===i.Gi.uuid&&i.OI.name===i.Gi.name||a(o.Home,e)},c=async e=>{a(o.Storefront,e)},d=async e=>{a(o.Dock,e)}},121:(e,t,n)=>{n.d(t,{Gi:()=>d,JV:()=>p,OI:()=>u,iW:()=>l});var o,r,i,a=n(806),s=n(678);!function(e){e.Home="openfin-home",e.Dock="openfin-dock",e.Storefront="openfin-storefront",e.HomeInternal="openfin-home-internal",e.BrowserMenu="openfin-browser-menu",e.BrowserIndicator="openfin-browser-indicator",e.BrowserWindow="internal-generated-window",e.ClassicWindow="internal-generated-classic-window"}(o||(o={})),function(e){e.Shown="shown",e.BoundsChanged="bounds-changed",e.LayoutReady="layout-ready",e.EndUserBoundsChanging="end-user-bounds-changing",e.Blurred="blurred",e.Closed="closed",e.CloseRequested="close-requested",e.Focused="focused",e.ShowRequested="show-requested",e.ViewCrashed="view-crashed",e.ViewAttached="view-attached",e.ViewDetached="view-detached",e.ViewPageTitleUpdated="view-page-title-updated",e.ViewDestroyed="view-destroyed",e.OptionsChanged="options-changed"}(r||(r={})),function(e){e.BeforeUnload="beforeunload"}(i||(i={}));function c(e){if(!s.sS)throw new Error("getOFWindow can only be used in an OpenFin env. Avoid calling this method during pre-rendering.");return fin.Window.wrapSync(e)}const d={name:s.oC,uuid:s.AB};const u={name:o.Home,uuid:a.q9.Workspace},l=(o.Dock,a.q9.Workspace,o.Storefront,a.q9.Workspace,{name:a.q9.Workspace,uuid:a.q9.Workspace});const p=e=>c(e).getOptions().then((()=>!0)).catch((()=>!1))},316:(e,t,n)=>{var o,r,i;n.d(t,{De:()=>o,px:()=>r,wt:()=>i}),function(e){e.Fetching="fetching",e.Fetched="fetched",e.Complete="complete"}(o||(o={})),function(e){e.UserAction="user-action",e.FocusChange="focus-change",e.Reload="reload"}(r||(r={})),function(e){e.Active="active",e.Default="default"}(i||(i={}))}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,n),i.exports}n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{n.r(o),n.d(o,{ActionTrigger:()=>W.p,AppManifestType:()=>I.L,ButtonStyle:()=>k.ZJ,CLIAction:()=>C.Pt,CLIFilterOptionType:()=>C.el,CLITemplate:()=>C.yW,ContainerTemplateFragmentNames:()=>k.p6,Dock:()=>e,DockButtonNames:()=>d.v,Home:()=>v,Legacy:()=>t,PresentationTemplateFragmentNames:()=>k.Go,SearchTagBackground:()=>W.w,Storefront:()=>P,StorefrontTemplate:()=>I.T,TemplateFragmentTypes:()=>k.bI});var e={};n.r(e),n.d(e,{DockButtonNames:()=>d.v,deregister:()=>f,minimize:()=>g,register:()=>p,show:()=>w});var t={};n.r(t),n.d(t,{getPages:()=>m,getWorkspaces:()=>S});var r=n(678),i=n(532),a=n(150),s=n(438),c=n(82),d=n(427);let u,l=!1;const p=e=>(u=new Promise((async(t,n)=>{try{const n=await(async e=>{await(0,s.Hh)(fin.me.identity);const t=await(0,a.Xl)();if(l)throw new Error("A dock provider for the platform is already registered.");return l=!0,e.clientAPIVersion=r.u0,t.dispatch(a.WF.RegisterProvider,{providerType:c.lP.Dock,info:e})})(e);(0,i.Wn)({allowed:!0,componentVersion:n?.workspaceVersion}),n?.workspaceVersion,r.u0,t({clientAPIVersion:r.u0,workspaceVersion:n?.workspaceVersion??""})}catch(e){(0,i.Wn)({allowed:!1,rejectionCode:e instanceof Error?e.message:"unknown"}),n(e),u=null}})),u),f=async()=>{await u,l=!1;return(await(0,a.Xl)()).dispatch(a.WF.DeregisterProvider,{providerType:c.lP.Dock})},g=async()=>{await u,await(0,a.aB)(),await(0,c.R8)(c.lP.Dock)},w=async()=>{await u,await(0,a.aB)(),await(0,c.X_)(c.lP.Dock)};var h,v=n(703);n(121);!function(e){e.TabCreated="tab-created",e.ContainerCreated="container-created",e.ContainerResized="container-resized"}(h||(h={}));new Map;var y;!function(e){e.CurrentWorkspaceId="currentWorkspaceId",e.LastFocusedBrowserWindow="lastFocusedBrowserWindow",e.MachineName="machineName",e.NewTabPageLayout="NewTabPageLayout",e.NewTabPageSort="NewTabPageSort",e.DockPosition="DockPosition",e.SelectedColorScheme="SelectedColorScheme",e.HasMovedStore="HasMovedStore"}(y||(y={}));const m=()=>async function(){return(await(0,a.Dm)()).dispatch(a.WF.GetLegacyPages,void 0)}(),S=()=>(async()=>(await(0,a.Dm)()).dispatch(a.WF.GetLegacyWorkspaces,void 0))();var P=n(528),W=n(298),k=n(109),C=n(758),I=n(114)})(),module.exports=o})();
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./client/src/integrations/async/integration-provider.ts":
/*!***************************************************************!*\
  !*** ./client/src/integrations/async/integration-provider.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AsyncIntegrationProvider": () => (/* binding */ AsyncIntegrationProvider)
/* harmony export */ });
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openfin/workspace */ "../../node_modules/@openfin/workspace/index.js");
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_openfin_workspace__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../templates */ "./client/src/templates.ts");


/**
 * Implement the integration provider for async results.
 */
class AsyncIntegrationProvider {
    /**
     * Initialize the module.
     * @param definition The definition of the module from configuration include custom options.
     * @param loggerCreator For logging entries.
     * @param helpers Helper methods for the module to interact with the application core.
     * @returns Nothing.
     */
    async initialize(definition, loggerCreator, helpers) {
        this._integrationHelpers = helpers;
        this._settings = definition.data;
    }
    /**
     * The module is being deregistered.
     * @returns Nothing.
     */
    async closedown() { }
    /**
     * Get a list of the static help entries.
     * @returns The list of help entries.
     */
    async getHelpSearchEntries() {
        return [
            {
                key: `${AsyncIntegrationProvider._PROVIDER_ID}-help1`,
                title: "/contacts-sync",
                label: "Help",
                actions: [],
                data: {
                    providerId: AsyncIntegrationProvider._PROVIDER_ID
                },
                template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLITemplate.Custom,
                templateContent: await (0,_templates__WEBPACK_IMPORTED_MODULE_1__.createHelp)("/contacts-sync", [
                    "The contacts-sync command can be used to search for a contact.",
                    "It demonstrates how a long running retrieval would have to wait for the response before anything is display.",
                    "For example to search for a contact containing the letter a."
                ], ["/contacts-sync a"])
            },
            {
                key: `${AsyncIntegrationProvider._PROVIDER_ID}-help2`,
                title: "/contacts-partial",
                label: "Help",
                actions: [],
                data: {
                    providerId: AsyncIntegrationProvider._PROVIDER_ID
                },
                template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLITemplate.Custom,
                templateContent: await (0,_templates__WEBPACK_IMPORTED_MODULE_1__.createHelp)("/contacts-partial", [
                    "The contacts-partial command can be used to search for a contact.",
                    "It demonstrates how we would display results instantly while asynchronously retrieving all the results.",
                    "For example to search for a contact containing the letter a."
                ], ["/contacts-partial a"])
            },
            {
                key: `${AsyncIntegrationProvider._PROVIDER_ID}-help3`,
                title: "/contacts",
                label: "Help",
                actions: [],
                data: {
                    providerId: AsyncIntegrationProvider._PROVIDER_ID
                },
                template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLITemplate.Custom,
                templateContent: await (0,_templates__WEBPACK_IMPORTED_MODULE_1__.createHelp)("/contacts", [
                    "The contacts command can be used to search for a contact.",
                    "It demonstrates how we would display results instantly and only retrieve full data on entry selection.",
                    "Contacts starting with E will show error on first load.",
                    "For example to search for a contact containing the letter a."
                ], ["/contacts a", "/contacts e"])
            }
        ];
    }
    /**
     * An entry has been selected.
     * @param result The dispatched result.
     * @param lastResponse The last response.
     * @returns True if the item was handled.
     */
    async itemSelection(result, lastResponse) {
        const data = result.data;
        if (result.action.trigger === "user-action" &&
            result.action.name === AsyncIntegrationProvider._ASYNC_PROVIDER_DETAILS_ACTION &&
            data.url &&
            this._integrationHelpers.openUrl) {
            await this._integrationHelpers.openUrl(data.url);
            return true;
        }
        else if ((result.action.trigger === "focus-change" && result.data?.state === "loading") ||
            (result.action.trigger === "reload" && result.data?.state === "error")) {
            setTimeout(async () => {
                const contactResponse = await fetch(`${this._settings?.rootUrl}${result.data.contact.id}.json`);
                const contactFull = await contactResponse.json();
                lastResponse.respond([this.createResult(contactFull)]);
            }, 0);
        }
        return false;
    }
    /**
     * Get a list of search results based on the query and filters.
     * @param query The query to search for.
     * @param filters The filters to apply.
     * @param lastResponse The last search response used for updating existing results.
     * @returns The list of results and new filters.
     */
    async getSearchResults(query, filters, lastResponse) {
        const results = [];
        if (query.startsWith("/contacts-sync ")) {
            await this.contactsSync(query.slice(15), results);
        }
        else if (query.startsWith("/contacts-partial ")) {
            await this.contactsPartial(query.slice(18), results, lastResponse);
        }
        else if (query.startsWith("/contacts ")) {
            await this.contactsAsync(query.slice(10), results, lastResponse);
        }
        return {
            results
        };
    }
    /**
     * Retrieve the contacts in a synchronous manner.
     * @param query The query to search for
     * @param results The result list to populate.
     */
    async contactsSync(query, results) {
        const wildcard = query.trim().toLowerCase();
        if (wildcard.length > 0) {
            try {
                const response = await fetch(`${this._settings?.rootUrl}index.json`);
                const json = await response.json();
                for (const contact of json.data) {
                    if (contact.firstName.toLowerCase().includes(wildcard) ||
                        contact.lastName.toLowerCase().includes(wildcard)) {
                        const contactResponse = await fetch(`${this._settings?.rootUrl}${contact.id}.json`);
                        const contactFull = await contactResponse.json();
                        results.push(this.createResult(contactFull));
                    }
                }
            }
            catch (err) {
                console.error(err);
            }
        }
    }
    /**
     * Retrieve the contacts in a partially asynchronous manner.
     * @param query The query to search for
     * @param results The result list to populate.
     * @param lastResponse The last response to use for updating results.
     */
    async contactsPartial(query, results, lastResponse) {
        const wildcard = query.trim().toLowerCase();
        if (wildcard.length > 0) {
            try {
                const response = await fetch(`${this._settings?.rootUrl}index.json`);
                const json = await response.json();
                const finalContacts = [];
                for (const contact of json.data) {
                    if (contact.firstName.toLowerCase().includes(wildcard) ||
                        contact.lastName.toLowerCase().includes(wildcard)) {
                        finalContacts.push(contact);
                        results.push(this.createResult(contact));
                    }
                }
                setTimeout(async () => {
                    for (const contact of finalContacts) {
                        const contactResponse = await fetch(`${this._settings?.rootUrl}${contact.id}.json`);
                        const contactFull = await contactResponse.json();
                        lastResponse.respond([this.createResult(contactFull)]);
                    }
                }, 0);
            }
            catch (err) {
                console.error(err);
            }
        }
    }
    /**
     * Retrieve the contacts in an asynchronous manner.
     * @param query The query to search for
     * @param results The result list to populate.
     * @param lastResponse The last response to use for updating results.
     */
    async contactsAsync(query, results, lastResponse) {
        const wildcard = query.trim().toLowerCase();
        if (wildcard.length > 0) {
            try {
                const response = await fetch(`${this._settings?.rootUrl}index.json`);
                const json = await response.json();
                const finalContacts = [];
                for (const contact of json.data) {
                    if (contact.firstName.toLowerCase().includes(wildcard) ||
                        contact.lastName.toLowerCase().includes(wildcard)) {
                        finalContacts.push(contact);
                        // If a contact starts with E show it in errored state
                        if (contact.firstName.startsWith("E")) {
                            results.push(this.createResultErrored(contact));
                        }
                        else {
                            results.push(this.createResultLoading(contact));
                        }
                    }
                }
            }
            catch (err) {
                console.error(err);
            }
        }
    }
    /**
     * Create a search result.
     * @param contact The contact.
     * @returns The search result.
     */
    createResult(contact) {
        const fullName = `${contact.firstName} ${contact.lastName}`;
        const details = [];
        if (contact.email) {
            details.push(["E-mail", contact.email]);
        }
        return {
            key: `contact-${contact.id}`,
            title: fullName,
            label: "Information",
            actions: [],
            data: {
                providerId: AsyncIntegrationProvider._PROVIDER_ID,
                contact
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLITemplate.Contact,
            templateContent: {
                name: fullName,
                details: [details]
            }
        };
    }
    /**
     * Create a search result in loading state.
     * @param contact The contact.
     * @returns The search result.
     */
    createResultLoading(contact) {
        const fullName = `${contact.firstName} ${contact.lastName}`;
        return {
            key: `contact-${contact.id}`,
            title: fullName,
            label: "Information",
            actions: [],
            data: {
                providerId: AsyncIntegrationProvider._PROVIDER_ID,
                contact,
                state: "loading"
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLITemplate.Loading,
            templateContent: undefined
        };
    }
    /**
     * Create a search result in errored state.
     * @param contact The contact.
     * @returns The search result.
     */
    createResultErrored(contact) {
        const fullName = `${contact.firstName} ${contact.lastName}`;
        return {
            key: `contact-${contact.id}`,
            title: fullName,
            label: "Information",
            actions: [],
            data: {
                providerId: AsyncIntegrationProvider._PROVIDER_ID,
                contact,
                state: "error"
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLITemplate.Error,
            templateContent: "Unable to load data"
        };
    }
}
/**
 * Provider id.
 * @internal
 */
AsyncIntegrationProvider._PROVIDER_ID = "async";
/**
 * The key to use for a async result.
 * @internal
 */
AsyncIntegrationProvider._ASYNC_PROVIDER_DETAILS_ACTION = "Async Details";


/***/ }),

/***/ "./client/src/settings.ts":
/*!********************************!*\
  !*** ./client/src/settings.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getSettings": () => (/* binding */ getSettings)
/* harmony export */ });
let settings;
async function getConfiguredSettings() {
    const app = await fin.Application.getCurrent();
    const manifest = await app.getManifest();
    if (manifest.customSettings !== undefined) {
        settings = manifest.customSettings;
    }
    else {
        settings = {};
    }
    return settings;
}
async function getSettings() {
    if (settings === undefined) {
        settings = await getConfiguredSettings();
    }
    return settings;
}


/***/ }),

/***/ "./client/src/templates.ts":
/*!*********************************!*\
  !*** ./client/src/templates.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createButton": () => (/* binding */ createButton),
/* harmony export */   "createContainer": () => (/* binding */ createContainer),
/* harmony export */   "createHelp": () => (/* binding */ createHelp),
/* harmony export */   "createImage": () => (/* binding */ createImage),
/* harmony export */   "createText": () => (/* binding */ createText),
/* harmony export */   "createTitle": () => (/* binding */ createTitle)
/* harmony export */ });
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openfin/workspace */ "../../node_modules/@openfin/workspace/index.js");
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_openfin_workspace__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _themes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./themes */ "./client/src/themes.ts");


async function createHelp(title, description, examples
// eslint-disable-next-line @typescript-eslint/no-explicit-any
) {
    const theme = await (0,_themes__WEBPACK_IMPORTED_MODULE_1__.getCurrentTheme)();
    const additionalData = {};
    const fragments = [];
    for (let i = 0; i < description.length; i++) {
        const descriptionKey = `desc-${i}`;
        additionalData[descriptionKey] = description[i];
        fragments.push(await createText(descriptionKey, 12, {
            padding: "6px 0px"
        }));
    }
    const exampleFragments = [];
    for (let i = 0; i < examples.length; i++) {
        const exampleKey = `line-${i}`;
        additionalData[exampleKey] = examples[i];
        exampleFragments.push(await createText(exampleKey, 12, {
            fontFamily: "monospace",
            whiteSpace: "nowrap"
        }));
    }
    if (exampleFragments.length > 0) {
        fragments.push(await createContainer("column", exampleFragments, {
            padding: "10px",
            marginTop: "6px",
            backgroundColor: theme.palette.background5,
            color: theme.palette.inputColor,
            borderRadius: "5px",
            overflow: "auto"
        }));
    }
    return {
        layout: await createContainer("column", [
            await createTitle("title", undefined, undefined, {
                marginBottom: "10px",
                borderBottom: `1px solid ${theme.palette.background6}`
            }),
            ...fragments
        ], {
            padding: "10px"
        }),
        data: {
            title,
            ...additionalData
        }
    };
}
async function createContainer(containerType, children, style) {
    return {
        type: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.TemplateFragmentTypes.Container,
        style: {
            display: "flex",
            flexDirection: containerType,
            ...style
        },
        children
    };
}
async function createTitle(dataKey, fontSize = 16, fontWeight = "bold", style) {
    const theme = await (0,_themes__WEBPACK_IMPORTED_MODULE_1__.getCurrentTheme)();
    return {
        type: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.TemplateFragmentTypes.Text,
        dataKey,
        style: {
            color: theme.palette.textDefault,
            fontSize: `${fontSize ?? 16}px`,
            fontWeight,
            ...style
        }
    };
}
async function createText(dataKey, fontSize = 14, style) {
    return {
        type: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.TemplateFragmentTypes.Text,
        dataKey,
        style: {
            fontSize: `${fontSize ?? 14}px`,
            ...style
        }
    };
}
async function createImage(dataKey, alternativeText, style) {
    return {
        type: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.TemplateFragmentTypes.Image,
        dataKey,
        alternativeText,
        style: {
            ...style
        }
    };
}
async function createButton(buttonStyle, titleKey, action, style) {
    const theme = await (0,_themes__WEBPACK_IMPORTED_MODULE_1__.getCurrentTheme)();
    const buttonOptions = buttonStyle === _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.ButtonStyle.Secondary
        ? {
            border: `1px solid ${theme.palette.inputColor}`
        }
        : {};
    return {
        type: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.TemplateFragmentTypes.Button,
        buttonStyle,
        children: [await createText(titleKey, 12)],
        action,
        style: {
            ...buttonOptions,
            ...style
        }
    };
}


/***/ }),

/***/ "./client/src/themes.ts":
/*!******************************!*\
  !*** ./client/src/themes.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCurrentTheme": () => (/* binding */ getCurrentTheme),
/* harmony export */   "getThemes": () => (/* binding */ getThemes),
/* harmony export */   "validateThemes": () => (/* binding */ validateThemes)
/* harmony export */ });
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings */ "./client/src/settings.ts");

const DEFAULT_PALETTES = {
    light: {
        brandPrimary: "#504CFF",
        brandSecondary: "#1E1F23",
        backgroundPrimary: "#FAFBFE",
        contentBackground1: "#504CFF",
        background1: "#FFFFFF",
        background2: "#FAFBFE",
        background3: "#F3F5F8",
        background4: "#ECEEF1",
        background5: "#DDDFE4",
        background6: "#C9CBD2",
        statusSuccess: "#35C759",
        statusWarning: "#F48F00",
        statusCritical: "#BE1D1F",
        statusActive: "#0498FB",
        inputBackground: "#ECEEF1",
        inputColor: "#1E1F23",
        inputPlaceholder: "#383A40",
        inputDisabled: "#7D808A",
        inputFocused: "#C9CBD2",
        textDefault: "#1E1F23",
        textHelp: "#2F3136",
        textInactive: "#7D808A"
    },
    dark: {
        brandPrimary: "#504CFF",
        brandSecondary: "#383A40",
        backgroundPrimary: "#1E1F23",
        contentBackground1: "#504CFF",
        background1: "#111214",
        background2: "#1E1F23",
        background3: "#24262B",
        background4: "#2F3136",
        background5: "#383A40",
        background6: "#53565F",
        statusSuccess: "#35C759",
        statusWarning: "#F48F00",
        statusCritical: "#BE1D1F",
        statusActive: "#0498FB",
        inputBackground: "#53565F",
        inputColor: "#FFFFFF",
        inputPlaceholder: "#C9CBD2",
        inputDisabled: "#7D808A",
        inputFocused: "#C9CBD2",
        textDefault: "#FFFFFF",
        textHelp: "#C9CBD2",
        textInactive: "#7D808A"
    }
};
let validatedThemes;
function getSystemPreferredColorScheme() {
    if (window.matchMedia?.("(prefers-color-scheme: dark)").matches) {
        return "dark";
    }
    return "light";
}
async function getCurrentTheme() {
    const themes = await getThemes();
    if (themes.length === 0) {
        return {
            label: "default",
            palette: DEFAULT_PALETTES.dark
        };
    }
    return themes[0];
}
async function getThemes() {
    if (!validatedThemes) {
        const settings = await (0,_settings__WEBPACK_IMPORTED_MODULE_0__.getSettings)();
        validatedThemes = validateThemes(settings?.themeProvider?.themes);
    }
    return validatedThemes.slice();
}
function validateThemes(themes) {
    const customThemes = [];
    if (Array.isArray(themes)) {
        const preferredColorScheme = getSystemPreferredColorScheme();
        for (let i = 0; i < themes.length; i++) {
            const themeToValidate = themes[i];
            const palette = validatePalette(themeToValidate.palette, themeToValidate.label);
            if (palette !== null) {
                themeToValidate.palette = palette;
            }
            else {
                // don't pass an empty object as there are no theme properties
                themeToValidate.palette = undefined;
            }
            if (themeToValidate.label.toLowerCase() === preferredColorScheme) {
                console.log(`Found a theme that matches system color scheme preferences and making it the default theme: ${preferredColorScheme}`);
                customThemes.unshift(themeToValidate);
            }
            else {
                customThemes.push(themeToValidate);
            }
        }
    }
    return customThemes;
}
function validatePalette(themePalette, themeLabel) {
    if (!themePalette) {
        return null;
    }
    const keys = Object.keys(themePalette);
    if (keys.length === 0) {
        return null;
    }
    const palette = {
        ...DEFAULT_PALETTES.dark
    };
    for (const key of keys) {
        if (themePalette[key] !== undefined &&
            themePalette[key] !== null &&
            themePalette[key].trim().length > 0) {
            palette[key] = themePalette[key];
        }
    }
    const brandPrimaryKey = "brandPrimary";
    const brandSecondaryKey = "brandSecondary";
    const backgroundPrimaryKey = "backgroundPrimary";
    if (!themePalette[brandPrimaryKey]) {
        console.warn(`Theme: ${themeLabel} : ${brandPrimaryKey} not specified (it is required if specifying other theme palette settings). Providing default of: ${DEFAULT_PALETTES.dark.brandPrimary}`);
    }
    if (!themePalette[brandSecondaryKey]) {
        console.warn(`Theme: ${themeLabel} : ${brandSecondaryKey} not specified (it is required if specifying other theme palette settings). Providing default of: ${DEFAULT_PALETTES.dark.brandSecondary}`);
    }
    if (!themePalette[backgroundPrimaryKey]) {
        console.warn(`Theme: ${themeLabel} : ${backgroundPrimaryKey} not specified (it is required if specifying other theme palette settings). Providing default of: ${DEFAULT_PALETTES.dark.brandPrimary}`);
    }
    return palette;
}


/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/compat get default export */
/******/ (() => {
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = (module) => {
/******/ 		var getter = module && module.__esModule ?
/******/ 			() => (module['default']) :
/******/ 			() => (module);
/******/ 		__webpack_require__.d(getter, { a: getter });
/******/ 		return getter;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!************************************************!*\
  !*** ./client/src/integrations/async/index.ts ***!
  \************************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "entryPoints": () => (/* binding */ entryPoints)
/* harmony export */ });
/* harmony import */ var _integration_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./integration-provider */ "./client/src/integrations/async/integration-provider.ts");

const entryPoints = {
    integrations: new _integration_provider__WEBPACK_IMPORTED_MODULE_0__.AsyncIntegrationProvider()
};

})();

var __webpack_exports__entryPoints = __webpack_exports__.entryPoints;
export { __webpack_exports__entryPoints as entryPoints };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,