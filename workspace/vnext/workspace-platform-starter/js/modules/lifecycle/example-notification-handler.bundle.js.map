{"version":3,"file":"example-notification-handler.bundle.js","mappings":"AACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,KCK3E,SAASI,EAAQC,GAEvB,OAAOA,OACR,C,iBCFO,MAAMC,EAAgE,CAC5EC,UAAW,ICeL,MAsDC,gBAAMC,CACZhB,EACAiB,EACAC,GAEAC,KAAKC,YAAcpB,EACnBmB,KAAKE,QAAUJ,EAAc,sCAC7BE,KAAKG,SAAWJ,EAEhBC,KAAKE,QAAQE,KAAK,eACnB,CAMO,eAAMC,GACZL,KAAKE,SAASE,KAAK,mBAEbJ,KAAKM,yBACZ,CAMO,SAAMnB,GACZ,MAAMoB,EAAkC,CAAC,EASzC,OAPAA,EAAa,mBAAqBC,MACjCC,EACAC,WAEMV,KAAKW,0BAA0B,EAG/BJ,CACR,CAKQ,8BAAMI,GACb,MAAMC,EACLZ,KAAKC,aAAaY,MAAMD,8BAAgC,sBACzD,IAAKnB,EAAQO,KAAKG,UAAUW,mBAAoB,CAC/C,MAAMC,QAAuBf,KAAKG,SAASW,oBACtCrB,EAAQsB,KACZf,KAAKgB,gBAAkBD,EAAeE,YAAYL,GAC/CG,OACAG,EAEL,CAEA,IAAKzB,EAAQO,KAAKG,UAAUgB,kBAAmB,CAC9C,MAAMC,QAAsBpB,KAAKG,SAASgB,mBAGzCC,IACC3B,EAAQO,KAAKgB,mBACqC,IAAnDhB,KAAKC,aAAaY,MAAMQ,eAAeC,UAEvCtB,KAAKuB,eAAiBH,EACtBpB,KAAKE,SAASE,KAAK,qCACbJ,KAAKuB,gBAAgBC,uBAAsBhB,MAAOiB,IACvD,GAAmC,yBAA/BA,EAAcC,QAAQC,KAAiC,CAC1D,MAAMC,EAAgBH,EAAcC,QAClCE,aACIC,QAAa7B,KAAKgB,iBAAiBc,OAAOlB,EAA8BgB,IAC9E5B,KAAKE,SAASE,KAAK,gDAAgDyB,KAASJ,EAC7E,MACCzB,KAAKE,SAAS6B,KACb,wGAAwGN,EAAcC,QAAQC,QAEhI,GACE3B,KAAKC,aAAaY,MAAMQ,eAAeW,MAAQ,uBAEpD,CAEA,IAAKvC,GAA4D,IAApDO,KAAKC,aAAaY,MAAMoB,gBAAgBX,SAAoB,CACxE,MAAMY,EAA0B,GAAGC,IAAIC,GAAGC,SAASC,QAAQtC,KAAKC,aAAaY,MAAMoB,gBAAgBD,MAAQ,yBACrGO,QAA4BJ,IAAIK,oBAAoBC,QAAQC,OAAOR,GACzEK,EAAoBI,cAAanC,MAAO6B,EAAUO,KAEjD,GADA5C,KAAKE,SAASE,KAAK,oCAAoCiC,EAASC,OAAQM,GACpE5C,KAAKG,UAAU0C,kBAAmB,CAErC,UADsB7C,KAAKG,SAAS0C,kBAAkBR,EAAUO,GAO/D,MAHA5C,KAAKE,SAAS6B,KACb,oCAAoCM,EAASC,WAAWJ,mBAEnD,IAAIY,MAAM,iBAAiBZ,mBALjClC,KAAKE,SAASE,KAAK,oCAAoCiC,EAASC,iBAOlE,KAEDC,EAAoBQ,SAAS,UAAUvC,MAAOoC,IAC7C,MAAMI,EAAUJ,EAChB,GAAqB,yBAAjBI,EAAQrB,KAAiC,CAC5C,MAAMC,EAAeoB,EAAQpB,aACvBC,QAAa7B,KAAKgB,iBAAiBc,OAAOlB,EAA8BgB,IAC9E5B,KAAKE,SAASE,KACb,GAAG8B,2DAAiFL,KACpFe,EAEF,MACC5C,KAAKE,SAAS6B,KACb,GAAGG,gGAAsHc,EAAQrB,QAEnI,GAEF,CAEA,GAAI3B,KAAKG,UAAU8C,wBACbjD,KAAKkD,6BACTlD,KAAKkD,2BAA6B,CAAC,GAEpClD,KAAKmD,0BAA4BnD,KAAKG,SAAS8C,wBAE3CjD,KAAKmD,4BACFnD,KAAKoD,kCACPpD,KAAKgB,kBAAiB,CACzB,MAAMqC,QAAerD,KAAKgB,gBAAgBsC,cACzC1C,GAED,IAAKnB,EAAQ4D,GAAS,CACrB,MAAME,EAASF,EAAOG,YACtBxD,KAAKE,SAASE,KAAK,uBACnB,MAAMqD,EAASzD,KAAKE,QACdwD,EAAqB1D,KAAKmD,oBAChCI,EACEI,OACAC,MAAK,SAASC,GAAK,KAAEC,EAAI,MAAEpE,IAC3B,IAAIoE,EAMJ,OAFAJ,GAAoBhB,OAAOhD,GAEpB6D,EAAOI,OAAOC,KAAKC,GALzBJ,GAAQrD,KAAK,eAMf,IACC2D,OAAOC,IACPhE,KAAKE,SAAS8D,MAAM,yBAAyBA,IAAQ,GAExD,CACD,CAGH,CAKQ,6BAAM1D,GACbN,KAAKE,SAASE,KAAK,6DACbJ,KAAKiE,kCACZ,CAKQ,qCAAMb,GACb,IAAK3D,EAAQO,KAAKmD,uBAAyB1D,EAAQO,KAAKkD,4BAA6B,CACpF,MAAMgB,EAAqB1D,MAAO2D,IACjCnE,KAAKE,SAASE,KAAK,0CAA2C+D,GAC9D,MAAMrC,EAASqC,EAAMC,OAAOC,WACtBrE,KAAKsE,2BAA2BxC,EAAQqC,EAAMC,OAAO1D,WAAW,QAGjEV,KAAKmD,oBAAoBoB,iBAAiB,sBAAuBL,GACvElE,KAAKkD,2BAA2B,uBAAyBgB,EAEzD,MAAMM,EAA4BhE,MAAO2D,IACxCnE,KAAKE,SAASE,KAAK,kDAAmD+D,GACtE,MAAM,KAAEE,KAASI,GAAoBN,EAAMvC,aAAalB,WAClDA,EAAa,IAAK+D,GACxB/D,EAAWgB,QAAQgD,KAAOP,EAAMO,WAC1B1E,KAAKsE,2BAA2BD,EAAM3D,EAAqC,QAG5EV,KAAKmD,oBAAoBoB,iBAC9B,8BACAC,GAEDxE,KAAKkD,2BAA2B,+BAAiCsB,CAClE,CACD,CAQQ,gCAAMF,CACbxC,EACApB,GAEA,OAAQoB,GACP,IAAK,eAAgB,CACpB,MAAM6C,EAAS,CACd3C,KAAMtB,EAAWsB,KACjBN,QAAShB,EAAWgB,QACpBkD,SAAU,CACTC,OAAQnE,GAAYmE,SAGtB,UACO7E,KAAKuB,gBAAgBuD,WAAWH,GACvC,CAAE,MAAOX,GAER,GADAhE,KAAKE,SAAS8D,MAAM,2DAA4DA,GAChC,8BAA3CA,GAA+Be,QAAyC,CAC5E/E,KAAKE,SAAS8D,MACb,kFAAkFtD,GAAYmE,QAAQG,qGAEvG,IACC,GAAIL,EAAOC,SAASC,OAAQ,CAE3B,GADAF,EAAOC,SAASC,OAAOG,gBAAa9D,EAC+B,QAA/DlB,KAAKC,aAAaY,MAAMoE,gBAAgBC,mBAA8B,CAEzE,MAAMd,QAAepE,KAAKuB,gBAAgB4D,iBACzCR,IAED,GAAIP,GAAQgB,KAAM,CACjB,MAAMC,EAAiBjB,EAAOgB,KAAKE,MAEjCC,GAAUA,EAAMC,QAAUb,EAAOC,SAASC,QAAQW,QAAU/F,EAAQ8F,EAAMP,cAExEK,IACHV,EAAOC,SAASC,OAAOG,WAAaK,EAAeL,WAErD,CACD,OACMhF,KAAKuB,gBAAgBuD,WAAWH,GACvC,CACD,CAAE,MAAOc,GACRzF,KAAKE,SAAS8D,MACb,qHACAyB,EAEF,CACD,CACD,CACA,KACD,CACA,IAAK,aACJ,IACKzF,KAAKG,UAAUuF,WAAahF,EAAWmE,QAAQW,YAC5CxF,KAAKG,UAAUuF,UAAUhF,EAAWmE,OAAOW,QAEjDxF,KAAKE,SAAS8D,MACb,uBAAuBtD,GAAYmE,QAAQW,qHAG9C,CAAE,MAAOxB,GACRhE,KAAKE,SAAS8D,MACb,uBAAuBtD,GAAYmE,QAAQW,6CAC3CxB,EAEF,CACA,MAED,IAAK,YACJ,IACC,GAAIhE,KAAKG,UAAUgB,kBAAoBT,GAAYgB,SAAWhB,GAAYsB,KAAM,CAC/E,MAAM2D,QAAwB3F,KAAKG,SAASgB,mBAC5C,GAAIwE,GAAmBjF,EAAWkF,kBAAkBC,oBAC7CF,EAAgBG,iBAAiBpF,EAAWsB,MAClD2D,EAAgBI,WAAWrF,EAAWgB,cAChC,GAAIiE,EAAiB,CAC3B,MAAMK,QAA4BL,EAAgBM,wBAAwBvF,EAAWsB,YAC/EgE,EAAoBD,WAAWrF,EAAWgB,QACjD,CACD,MACC1B,KAAKE,SAAS8D,MACb,wLAGH,CAAE,MAAOA,GACRhE,KAAKE,SAAS8D,MAAM,8BAA+BA,EACpD,EAIH,CAKQ,sCAAMC,GACb,IAAKxE,EAAQO,KAAKmD,uBAAyB1D,EAAQO,KAAKkD,4BACvD,IAAK,MAAOpE,EAAKY,KAAUV,OAAOkH,QAAQlG,KAAKkD,kCACxClD,KAAKmD,oBAAoBgD,oBAC9BrH,EACAY,EAIJ,I","sources":["webpack://openfin-workspace--workspace-platform-starter/webpack/bootstrap","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/define property getters","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/hasOwnProperty shorthand","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/lifecycle/example-notification-handler/index.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/lifecycle/example-notification-handler/lifecycle.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? undefined : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n","import type { ModuleImplementation, ModuleTypes } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { ExampleNotificationHandlerProvider } from \"./lifecycle\";\n\n/**\n * Define the entry points for the module.\n */\nexport const entryPoints: { [type in ModuleTypes]?: ModuleImplementation } = {\n\tlifecycle: new ExampleNotificationHandlerProvider()\n};\n","import type { AppIdentifier } from \"@finos/fdc3\";\nimport type OpenFin from \"@openfin/core\";\nimport type { WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport type {\n\tNotificationActionEvent,\n\tNotificationFormSubmittedEvent,\n\tNotificationOptions\n} from \"@openfin/workspace/notifications\";\nimport type { EndpointClient } from \"workspace-platform-starter/shapes/endpoint-shapes\";\nimport type { Lifecycle, LifecycleEventMap } from \"workspace-platform-starter/shapes/lifecycle-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport type {\n\tNotificationClient,\n\tNotificationsEventMap\n} from \"workspace-platform-starter/shapes/notification-shapes\";\nimport { isEmpty } from \"workspace-platform-starter/utils\";\nimport type { ExampleNotificationHandlerProviderOptions, NotificationCustomData } from \"./shapes\";\n\n/**\n * Implementation for the example notification handler lifecycle provider.\n */\nexport class ExampleNotificationHandlerProvider\n\timplements Lifecycle<ExampleNotificationHandlerProviderOptions>\n{\n\t/**\n\t * The module definition including settings.\n\t * @internal\n\t */\n\tprivate _definition: ModuleDefinition<ExampleNotificationHandlerProviderOptions> | undefined;\n\n\t/**\n\t * The logger for displaying information from the module.\n\t * @internal\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Helper methods for the module.\n\t * @internal\n\t */\n\tprivate _helpers: ModuleHelpers | undefined;\n\n\t/**\n\t * An object containing current subscriptions.\n\t * @internal\n\t */\n\tprivate _notificationSubscriptions:\n\t\t| { [key in keyof NotificationsEventMap]?: (event: NotificationsEventMap[key]) => void }\n\t\t| undefined;\n\n\t/**\n\t * A notification client if available.\n\t * @internal\n\t */\n\tprivate _notificationClient: NotificationClient | undefined;\n\n\t/**\n\t * A endpoint client if available.\n\t * @internal\n\t */\n\tprivate _endpointClient: EndpointClient | undefined;\n\n\t/**\n\t * A endpoint client if available.\n\t * @internal\n\t */\n\tprivate _interopClient: OpenFin.InteropClient | undefined;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<ExampleNotificationHandlerProviderOptions>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._definition = definition;\n\t\tthis._logger = loggerCreator(\"ExampleNotificationHandlerProvider\");\n\t\tthis._helpers = helpers;\n\n\t\tthis._logger.info(\"Initializing\");\n\t}\n\n\t/**\n\t * Close down any resources being used by the module.\n\t * @returns Nothing.\n\t */\n\tpublic async closedown(): Promise<void> {\n\t\tthis._logger?.info(\"Closedown\");\n\t\t// disconnect from websocket/server sent event source for example\n\t\tawait this.stopNotificationService();\n\t}\n\n\t/**\n\t * Get the lifecycle events.\n\t * @returns The map of lifecycle events.\n\t */\n\tpublic async get(): Promise<LifecycleEventMap> {\n\t\tconst lifecycleMap: LifecycleEventMap = {};\n\n\t\tlifecycleMap[\"after-bootstrap\"] = async (\n\t\t\tplatform: WorkspacePlatformModule,\n\t\t\tcustomData?: unknown\n\t\t): Promise<void> => {\n\t\t\tawait this.startNotificationService();\n\t\t};\n\n\t\treturn lifecycleMap;\n\t}\n\n\t/**\n\t * Starts the notification service.\n\t */\n\tprivate async startNotificationService(): Promise<void> {\n\t\tconst notificationSourceEndpointId =\n\t\t\tthis._definition?.data?.notificationSourceEndpointId ?? \"notification-source\";\n\t\tif (!isEmpty(this._helpers?.getEndpointClient)) {\n\t\t\tconst endpointClient = await this._helpers.getEndpointClient();\n\t\t\tif (!isEmpty(endpointClient)) {\n\t\t\t\tthis._endpointClient = endpointClient.hasEndpoint(notificationSourceEndpointId)\n\t\t\t\t\t? endpointClient\n\t\t\t\t\t: undefined;\n\t\t\t}\n\t\t}\n\n\t\tif (!isEmpty(this._helpers?.getInteropClient)) {\n\t\t\tconst interopClient = await this._helpers.getInteropClient();\n\n\t\t\tif (\n\t\t\t\tinteropClient &&\n\t\t\t\t!isEmpty(this._endpointClient) &&\n\t\t\t\tthis._definition?.data?.intentHandler?.enabled !== false\n\t\t\t) {\n\t\t\t\tthis._interopClient = interopClient;\n\t\t\t\tthis._logger?.info(\"Registering intent handler.\");\n\t\t\t\tawait this._interopClient?.registerIntentHandler(async (intentRequest) => {\n\t\t\t\t\tif (intentRequest.context.type === \"openfin.notification\") {\n\t\t\t\t\t\tconst notification = (intentRequest.context as unknown as { notification: NotificationOptions })\n\t\t\t\t\t\t\t.notification;\n\t\t\t\t\t\tconst sent = await this._endpointClient?.action(notificationSourceEndpointId, notification);\n\t\t\t\t\t\tthis._logger?.info(`Intent handler called and notification sent: ${sent}.`, intentRequest);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._logger?.warn(\n\t\t\t\t\t\t\t`A create notification intent was raised but it wasn't passed and openfin.notification context. Type: ${intentRequest.context.type}.`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}, this._definition?.data?.intentHandler?.name ?? \"CreateNotification\");\n\t\t\t}\n\t\t}\n\n\t\tif (!isEmpty(this._definition?.data?.channelHandler?.enabled !== false)) {\n\t\t\tconst notificationChannelName = `${fin.me.identity.uuid}/${this._definition?.data?.channelHandler?.name ?? \"notification-handler\"}`;\n\t\t\tconst notificationChannel = await fin.InterApplicationBus.Channel.create(notificationChannelName);\n\t\t\tnotificationChannel.onConnection(async (identity, payload) => {\n\t\t\t\tthis._logger?.info(`Channel connection request from: ${identity.uuid}`, payload);\n\t\t\t\tif (this._helpers?.isConnectionValid) {\n\t\t\t\t\tconst isValid = await this._helpers.isConnectionValid(identity, payload);\n\t\t\t\t\tif (isValid) {\n\t\t\t\t\t\tthis._logger?.info(`Channel connection request from: ${identity.uuid} is valid.`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._logger?.warn(\n\t\t\t\t\t\t\t`Channel connection request from: ${identity.uuid} to ${notificationChannelName} is not valid.`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthrow new Error(`Connection to ${notificationChannelName} is not valid.`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tnotificationChannel.register(\"create\", async (payload) => {\n\t\t\t\tconst request = payload as { type: string; notification: NotificationOptions };\n\t\t\t\tif (request.type === \"openfin.notification\") {\n\t\t\t\t\tconst notification = request.notification;\n\t\t\t\t\tconst sent = await this._endpointClient?.action(notificationSourceEndpointId, notification);\n\t\t\t\t\tthis._logger?.info(\n\t\t\t\t\t\t`${notificationChannelName} channel create function called and notification sent: ${sent}.`,\n\t\t\t\t\t\tpayload\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthis._logger?.warn(\n\t\t\t\t\t\t`${notificationChannelName} channel create function called but it wasn't passed an openfin.notification context. Type: ${request.type}.`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (this._helpers?.getNotificationClient) {\n\t\t\tif (!this._notificationSubscriptions) {\n\t\t\t\tthis._notificationSubscriptions = {};\n\t\t\t}\n\t\t\tthis._notificationClient = await this._helpers.getNotificationClient();\n\n\t\t\tif (this._notificationClient) {\n\t\t\t\tawait this.setupNotificationEventListeners();\n\t\t\t\tif (this._endpointClient) {\n\t\t\t\t\tconst stream = await this._endpointClient.requestStream<unknown, NotificationOptions>(\n\t\t\t\t\t\tnotificationSourceEndpointId\n\t\t\t\t\t);\n\t\t\t\t\tif (!isEmpty(stream)) {\n\t\t\t\t\t\tconst reader = stream.getReader();\n\t\t\t\t\t\tthis._logger?.info(\"Reading from stream\");\n\t\t\t\t\t\tconst logger = this._logger;\n\t\t\t\t\t\tconst notificationClient = this._notificationClient;\n\t\t\t\t\t\treader\n\t\t\t\t\t\t\t.read()\n\t\t\t\t\t\t\t.then(function pump({ done, value }): unknown {\n\t\t\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\t\t\tlogger?.info(\"Stream ended\");\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tnotificationClient?.create(value);\n\t\t\t\t\t\t\t\t// eslint-disable-next-line promise/no-nesting\n\t\t\t\t\t\t\t\treturn reader.read().then(pump);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\t\tthis._logger?.error(`Error reading stream: ${error}`);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stops the notification service.\n\t */\n\tprivate async stopNotificationService(): Promise<void> {\n\t\tthis._logger?.info(\"Stopping notification service (This is an example.)\");\n\t\tawait this.removeNotificationEventListeners();\n\t}\n\n\t/**\n\t * Setup listeners using the notification client fetched via a helper.\n\t */\n\tprivate async setupNotificationEventListeners(): Promise<void> {\n\t\tif (!isEmpty(this._notificationClient) && !isEmpty(this._notificationSubscriptions)) {\n\t\t\tconst actionEventHandler = async (event: NotificationActionEvent): Promise<void> => {\n\t\t\t\tthis._logger?.info(\"Event for notification action received.\", event);\n\t\t\t\tconst action = event.result.task;\n\t\t\t\tawait this.handleNotificationResponse(action, event.result.customData);\n\t\t\t};\n\n\t\t\tawait this._notificationClient.addEventListener(\"notification-action\", actionEventHandler);\n\t\t\tthis._notificationSubscriptions[\"notification-action\"] = actionEventHandler;\n\n\t\t\tconst formSubmittedEventHandler = async (event: NotificationFormSubmittedEvent): Promise<void> => {\n\t\t\t\tthis._logger?.info(\"Event for notification form submitted received.\", event);\n\t\t\t\tconst { task, ...otherCustomData } = event.notification.customData; // Remove task\n\t\t\t\tconst customData = { ...otherCustomData };\n\t\t\t\tcustomData.context.form = event.form;\n\t\t\t\tawait this.handleNotificationResponse(task, customData as NotificationCustomData);\n\t\t\t};\n\n\t\t\tawait this._notificationClient.addEventListener(\n\t\t\t\t\"notification-form-submitted\",\n\t\t\t\tformSubmittedEventHandler\n\t\t\t);\n\t\t\tthis._notificationSubscriptions[\"notification-form-submitted\"] = formSubmittedEventHandler;\n\t\t}\n\t}\n\n\t/**\n\t * Handles a response from a notification.\n\t * @param action The action to take.\n\t * @param customData The custom data to use.\n\t * @returns Nothing.\n\t */\n\tprivate async handleNotificationResponse(\n\t\taction: \"raise-intent\" | \"broadcast\" | \"launch-app\",\n\t\tcustomData: NotificationCustomData\n\t): Promise<void> {\n\t\tswitch (action) {\n\t\t\tcase \"raise-intent\": {\n\t\t\t\tconst intent = {\n\t\t\t\t\tname: customData.name,\n\t\t\t\t\tcontext: customData.context,\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\ttarget: customData?.target\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\ttry {\n\t\t\t\t\tawait this._interopClient?.fireIntent(intent);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis._logger?.error(\"Error firing intent in response to a notification click.\", error);\n\t\t\t\t\tif ((error as { message: string })?.message === \"TargetInstanceUnavailable\") {\n\t\t\t\t\t\tthis._logger?.error(\n\t\t\t\t\t\t\t`Error firing intent in response to a notification click as the target instance ${customData?.target?.instanceId} is unavailable. Launch the app without a specific instance as it may have been closed.`\n\t\t\t\t\t\t);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (intent.metadata.target) {\n\t\t\t\t\t\t\t\tintent.metadata.target.instanceId = undefined;\n\t\t\t\t\t\t\t\tif (this._definition?.data?.intentLauncher?.instanceIdFallback !== \"new\") {\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line max-len\n\t\t\t\t\t\t\t\t\tconst result = await this._interopClient?.getInfoForIntent<{ apps: AppIdentifier[] }>(\n\t\t\t\t\t\t\t\t\t\tintent\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tif (result?.apps) {\n\t\t\t\t\t\t\t\t\t\tconst targetInstance = result.apps.find(\n\t\t\t\t\t\t\t\t\t\t\t// eslint-disable-next-line max-len\n\t\t\t\t\t\t\t\t\t\t\t(entry) => entry.appId === intent.metadata.target?.appId && !isEmpty(entry.instanceId)\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tif (targetInstance) {\n\t\t\t\t\t\t\t\t\t\t\tintent.metadata.target.instanceId = targetInstance.instanceId;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tawait this._interopClient?.fireIntent(intent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (secondError) {\n\t\t\t\t\t\t\tthis._logger?.error(\n\t\t\t\t\t\t\t\t\"Error firing intent in response to a notification click after removing the instance id and just targeting the app.\",\n\t\t\t\t\t\t\t\tsecondError\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"launch-app\": {\n\t\t\t\ttry {\n\t\t\t\t\tif (this._helpers?.launchApp && customData.target?.appId) {\n\t\t\t\t\t\tawait this._helpers?.launchApp(customData.target.appId);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._logger?.error(\n\t\t\t\t\t\t\t`Error launching app ${customData?.target?.appId} in response to a notification click as the launchApp function is not available or the appId is not provided.`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis._logger?.error(\n\t\t\t\t\t\t`Error launching app ${customData?.target?.appId} in response to a notification click.`,\n\t\t\t\t\t\terror\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"broadcast\": {\n\t\t\t\ttry {\n\t\t\t\t\tif (this._helpers?.getInteropClient && customData?.context && customData?.name) {\n\t\t\t\t\t\tconst broadcastClient = await this._helpers.getInteropClient();\n\t\t\t\t\t\tif (broadcastClient && customData.broadcastOptions?.isUserChannel) {\n\t\t\t\t\t\t\tawait broadcastClient.joinContextGroup(customData.name);\n\t\t\t\t\t\t\tbroadcastClient.setContext(customData.context);\n\t\t\t\t\t\t} else if (broadcastClient) {\n\t\t\t\t\t\t\tconst sessionContextGroup = await broadcastClient.joinSessionContextGroup(customData.name);\n\t\t\t\t\t\t\tawait sessionContextGroup.setContext(customData.context);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._logger?.error(\n\t\t\t\t\t\t\t\"Error broadcasting context from a notification is not available as either an interop client is not available or no userChannel or appChannel was specified or context was not passed.\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis._logger?.error(\"Error broadcasting context.\", error);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up notification subscriptions.\n\t */\n\tprivate async removeNotificationEventListeners(): Promise<void> {\n\t\tif (!isEmpty(this._notificationClient) && !isEmpty(this._notificationSubscriptions)) {\n\t\t\tfor (const [key, value] of Object.entries(this._notificationSubscriptions)) {\n\t\t\t\tawait this._notificationClient.removeEventListener(\n\t\t\t\t\tkey as keyof NotificationsEventMap,\n\t\t\t\t\tvalue as never\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","isEmpty","value","entryPoints","lifecycle","initialize","loggerCreator","helpers","this","_definition","_logger","_helpers","info","closedown","stopNotificationService","lifecycleMap","async","platform","customData","startNotificationService","notificationSourceEndpointId","data","getEndpointClient","endpointClient","_endpointClient","hasEndpoint","undefined","getInteropClient","interopClient","intentHandler","enabled","_interopClient","registerIntentHandler","intentRequest","context","type","notification","sent","action","warn","name","channelHandler","notificationChannelName","fin","me","identity","uuid","notificationChannel","InterApplicationBus","Channel","create","onConnection","payload","isConnectionValid","Error","register","request","getNotificationClient","_notificationSubscriptions","_notificationClient","setupNotificationEventListeners","stream","requestStream","reader","getReader","logger","notificationClient","read","then","pump","done","catch","error","removeNotificationEventListeners","actionEventHandler","event","result","task","handleNotificationResponse","addEventListener","formSubmittedEventHandler","otherCustomData","form","intent","metadata","target","fireIntent","message","instanceId","intentLauncher","instanceIdFallback","getInfoForIntent","apps","targetInstance","find","entry","appId","secondError","launchApp","broadcastClient","broadcastOptions","isUserChannel","joinContextGroup","setContext","sessionContextGroup","joinSessionContextGroup","entries","removeEventListener"],"sourceRoot":""}