/******/ var __webpack_modules__ = ({

/***/ "./client/src/framework/utils.ts":
/*!***************************************!*\
  !*** ./client/src/framework/utils.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatError: () => (/* binding */ formatError),
/* harmony export */   imageUrlToDataUrl: () => (/* binding */ imageUrlToDataUrl),
/* harmony export */   isBoolean: () => (/* binding */ isBoolean),
/* harmony export */   isEmpty: () => (/* binding */ isEmpty),
/* harmony export */   isInteger: () => (/* binding */ isInteger),
/* harmony export */   isNumber: () => (/* binding */ isNumber),
/* harmony export */   isObject: () => (/* binding */ isObject),
/* harmony export */   isString: () => (/* binding */ isString),
/* harmony export */   isStringValue: () => (/* binding */ isStringValue),
/* harmony export */   objectClone: () => (/* binding */ objectClone),
/* harmony export */   randomUUID: () => (/* binding */ randomUUID)
/* harmony export */ });
/**
 * Test if a value is a undefined or null.
 * @param value The value to test.
 * @returns True if the value is null or undefined.
 */
function isEmpty(value) {
    // eslint-disable-next-line no-restricted-syntax
    return value === undefined || value === null;
}
/**
 * Test if a value is an object.
 * @param value The value to test.
 * @returns True if the value is an object.
 */
function isObject(value) {
    // eslint-disable-next-line no-restricted-syntax
    return value !== undefined && value !== null && typeof value === "object";
}
/**
 * Test if a value is a string.
 * @param value The value to test.
 * @returns True if the value is a string.
 */
function isString(value) {
    // eslint-disable-next-line no-restricted-syntax
    return value !== undefined && value !== null && typeof value === "string";
}
/**
 * Test if a value is a string that is not empty.
 * @param value The value to test.
 * @returns True if the value is a string that is not empty.
 */
function isStringValue(value) {
    return isString(value) && value.trim().length > 0;
}
/**
 * Test if a value is a number.
 * @param value The value to test.
 * @returns True if the value is a number.
 */
function isNumber(value) {
    // eslint-disable-next-line no-restricted-syntax
    return value !== undefined && value !== null && typeof value === "number";
}
/**
 * Test if a value is a boolean.
 * @param value The value to test.
 * @returns True if the value is a boolean.
 */
function isBoolean(value) {
    // eslint-disable-next-line no-restricted-syntax
    return value !== undefined && value !== null && typeof value === "boolean";
}
/**
 * Test if a value is an integer.
 * @param value The value to test.
 * @returns True if the value is an integer.
 */
function isInteger(value) {
    return isNumber(value) && Number.isInteger(value);
}
/**
 * Deep clone an object.
 * @param obj The object to clone.
 * @returns The clone of the object.
 */
function objectClone(obj) {
    // eslint-disable-next-line no-restricted-syntax
    return obj === undefined ? undefined : JSON.parse(JSON.stringify(obj));
}
/**
 * Polyfills randomUUID if running in a non-secure context.
 * @returns The random UUID.
 */
function randomUUID() {
    if ("randomUUID" in window.crypto) {
        // eslint-disable-next-line no-restricted-syntax
        return window.crypto.randomUUID();
    }
    // Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it
    // we are still using window.crypto.getRandomValues which is always available
    // https://stackoverflow.com/a/2117523/2800218
    /**
     * Get random hex value.
     * @param c The number to base the random value on.
     * @returns The random value.
     */
    function getRandomHex(c) {
        // eslint-disable-next-line no-bitwise
        const rnd = window.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));
        return (
        // eslint-disable-next-line no-bitwise
        (Number(c) ^ rnd).toString(16));
    }
    return "10000000-1000-4000-8000-100000000000".replace(/[018]/g, getRandomHex);
}
/**
 * Format an error to a readable string.
 * @param err The error to format.
 * @returns The formatted error.
 */
function formatError(err) {
    if (err instanceof Error) {
        return err.message;
    }
    else if (typeof err === "string") {
        return err;
    }
    return JSON.stringify(err);
}
/**
 * Load an image to a data url containing base64 image data.
 * @param url The url of the image to load.
 * @param dimensions The dimensions to resize the image to.
 * @returns The data url containing base64 data for the image.
 */
async function imageUrlToDataUrl(url, dimensions) {
    return new Promise((resolve) => {
        try {
            const img = document.createElement("img");
            img.addEventListener("load", () => {
                const canvas = document.createElement("canvas");
                canvas.width = dimensions;
                canvas.height = dimensions;
                const ctx = canvas.getContext("2d");
                if (ctx) {
                    ctx.drawImage(img, 0, 0, dimensions, dimensions);
                    resolve(canvas.toDataURL("image/png", 1));
                }
                else {
                    // eslint-disable-next-line unicorn/no-useless-undefined
                    resolve(undefined);
                }
            });
            img.src = url;
        }
        catch { }
    });
}


/***/ }),

/***/ "./client/src/modules/auth/openid-connect/auth.ts":
/*!********************************************************!*\
  !*** ./client/src/modules/auth/openid-connect/auth.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OpenIdConnectProvider: () => (/* binding */ OpenIdConnectProvider)
/* harmony export */ });
/* harmony import */ var _openfin_openid_connect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openfin/openid-connect */ "../../node_modules/@openfin/openid-connect/openfin.openid-connect.mjs");
/* harmony import */ var workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! workspace-platform-starter/utils */ "./client/src/framework/utils.ts");


/**
 * Implementation for the openid connect auth provider.
 */
class OpenIdConnectProvider {
    /**
     * Create a new instance of OpenIdConnectProvider.
     */
    constructor() {
        this._subscribeIdMap = {};
        this._eventSubscribers = {};
    }
    /**
     * Initialize the module.
     * @param definition The definition of the module from configuration include custom options.
     * @param loggerCreator For logging entries.
     * @param helpers Helper methods for the module to interact with the application core.
     * @returns Nothing.
     */
    async initialize(definition, loggerCreator, helpers) {
        this._definition = definition;
        this._logger = loggerCreator("OpenIdConnectProvider");
        this._logger.info("Initializing");
        if (this._definition.data?.enableLogging) {
            (0,_openfin_openid_connect__WEBPACK_IMPORTED_MODULE_0__.enableLogging)();
        }
        const providerUrl = this._definition.data?.providerUrl;
        const clientId = this._definition.data?.clientId;
        const loginRedirectUrl = this._definition.data?.loginRedirectUrl;
        const logoutRedirectUrl = this._definition.data?.logoutRedirectUrl;
        if (!(0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.isStringValue)(providerUrl)) {
            this._logger.error("providerUrl is not configured");
        }
        if (!(0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.isStringValue)(clientId)) {
            this._logger.error("ClientId is not configured");
        }
        if (!(0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.isStringValue)(loginRedirectUrl)) {
            this._logger.error("loginRedirectUrl is not configured");
        }
        if (!(0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.isStringValue)(logoutRedirectUrl)) {
            this._logger.error("logoutRedirectUrl is not configured");
        }
    }
    /**
     * Close down any resources being used by the module.
     * @returns Nothing.
     */
    async closedown() {
        this._logger?.info("Closedown");
        if (this._sessionExpiryTimerId) {
            window.clearTimeout(this._sessionExpiryTimerId);
            this._sessionExpiryTimerId = undefined;
        }
    }
    /**
     * Subscribe to one of the auth events.
     * @param to The event to subscribe to.
     * @param callback The callback to fire when the event occurs.
     * @returns Subscription id for unsubscribing or undefined if event type is not available.
     */
    subscribe(to, callback) {
        const subscriptionId = (0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.randomUUID)();
        const toMap = this._eventSubscribers[to] ?? {};
        toMap[subscriptionId] = callback;
        this._eventSubscribers[to] = toMap;
        this._subscribeIdMap[subscriptionId] = to;
        this._logger?.info(`Subscription to ${to} events registered. Subscription Id: ${subscriptionId}`);
        return subscriptionId;
    }
    /**
     * Unsubscribe from an already subscribed event.
     * @param subscriptionId The id of the subscription returned from subscribe.
     * @returns True if the unsubscribe was successful.
     */
    unsubscribe(subscriptionId) {
        const eventType = this._subscribeIdMap[subscriptionId];
        if ((0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.isEmpty)(eventType)) {
            this._logger?.warn(`You have tried to unsubscribe with a key ${subscriptionId} that is invalid`);
            return false;
        }
        const eventSubscribers = this._eventSubscribers[eventType];
        if (!(0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.isEmpty)(eventSubscribers)) {
            delete eventSubscribers[subscriptionId];
        }
        if (this._subscribeIdMap[subscriptionId]) {
            delete this._subscribeIdMap[subscriptionId];
            this._logger?.info(`Subscription to ${eventType} events with subscription Id: ${subscriptionId} has been cleared`);
            return true;
        }
        this._logger?.warn(`Subscription to ${eventType} events with subscription Id: ${subscriptionId} could not be cleared as we do not have a register of that event type.`);
        return false;
    }
    /**
     * Does the auth provider require authentication.
     * @returns True if authentication is required.
     */
    async isAuthenticationRequired() {
        return (0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.isEmpty)(this._authResult);
    }
    /**
     * Perform the login operation on the auth provider.
     * @returns True if the login was successful.
     */
    async login() {
        const providerUrl = this._definition?.data?.providerUrl;
        const clientId = this._definition?.data?.clientId;
        const loginRedirectUrl = this._definition?.data?.loginRedirectUrl;
        const scopes = this._definition?.data?.scopes;
        if ((0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.isStringValue)(providerUrl) && (0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.isStringValue)(clientId) && (0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.isStringValue)(loginRedirectUrl)) {
            try {
                this._authResult = await (0,_openfin_openid_connect__WEBPACK_IMPORTED_MODULE_0__.authenticate)(providerUrl, clientId, loginRedirectUrl, scopes);
                await this.notifySubscribers("logged-in");
                this.checkForSessionExpiry();
                return true;
            }
            catch (err) {
                this._logger?.error("Authentication failed", (0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.formatError)(err));
            }
        }
        return false;
    }
    /**
     * Perform the logout operation on the auth provider.
     * @returns True if the logout was successful.
     */
    async logout() {
        if (this._authResult) {
            if (this._sessionExpiryTimerId) {
                window.clearTimeout(this._sessionExpiryTimerId);
                this._sessionExpiryTimerId = undefined;
            }
            const logoutRedirectUrl = this._definition?.data?.logoutRedirectUrl;
            if ((0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.isStringValue)(logoutRedirectUrl)) {
                try {
                    await this.notifySubscribers("before-logged-out");
                    await this._authResult.logout(logoutRedirectUrl);
                }
                catch (err) {
                    this._logger?.error("Logout failed", (0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.formatError)(err));
                }
                finally {
                    await this.notifySubscribers("logged-out");
                }
            }
            this._authResult = undefined;
        }
        return true;
    }
    /**
     * Get user information from the auth provider.
     * @returns The user information, the type is unknown as it is dependent on the auth provider.
     */
    async getUserInfo() {
        if (this._authResult) {
            return this._authResult.userInfo;
        }
    }
    /**
     * Notify subscribers of an event change.
     * @param authEventType The type of authentication event to send to.
     */
    async notifySubscribers(authEventType) {
        const subscribers = this._eventSubscribers[authEventType];
        if (subscribers) {
            const subscriberIds = Object.keys(subscribers);
            subscriberIds.reverse();
            for (const subscriberId of subscriberIds) {
                this._logger?.info(`Notifying subscriber with subscription Id: ${subscriberId} of event type: ${authEventType}`);
                await subscribers[subscriberId]();
            }
        }
    }
    /**
     * Check to see if a session has expired.
     */
    checkForSessionExpiry() {
        const validity = this._definition?.data?.checkSessionValidityInSeconds;
        if ((0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.isNumber)(validity) && validity > 0 && (0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.isEmpty)(this._sessionExpiryTimerId)) {
            this._sessionExpiryTimerId = window.setTimeout(async () => {
                this._sessionExpiryTimerId = undefined;
                const idToken = this._authResult?.idToken;
                const providerUrl = this._definition?.data?.providerUrl;
                const clientId = this._definition?.data?.clientId;
                let isValid = false;
                if ((0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.isStringValue)(idToken) && (0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.isStringValue)(providerUrl) && (0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.isStringValue)(clientId)) {
                    try {
                        const result = await (0,_openfin_openid_connect__WEBPACK_IMPORTED_MODULE_0__.validateIdToken)(idToken, clientId, providerUrl);
                        isValid = result.valid;
                    }
                    catch (err) {
                        this._logger?.error("Failed validating token", (0,workspace_platform_starter_utils__WEBPACK_IMPORTED_MODULE_1__.formatError)(err));
                    }
                }
                if (isValid) {
                    this._logger?.info("Session Still Active");
                    this.checkForSessionExpiry();
                }
                else {
                    this._logger?.info("Session not valid");
                    this._authResult = undefined;
                    await this.notifySubscribers("session-expired");
                }
            }, validity * 1000);
        }
    }
}


/***/ }),

/***/ "../../node_modules/@openfin/openid-connect/openfin.openid-connect.mjs":
/*!*****************************************************************************!*\
  !*** ../../node_modules/@openfin/openid-connect/openfin.openid-connect.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApiError: () => (/* binding */ Ve),
/* harmony export */   AuthenticationError: () => (/* binding */ Be),
/* harmony export */   InitializationError: () => (/* binding */ Xe),
/* harmony export */   LogoutError: () => (/* binding */ Ye),
/* harmony export */   ParameterError: () => (/* binding */ Qe),
/* harmony export */   ValidationError: () => (/* binding */ Ze),
/* harmony export */   authenticate: () => (/* binding */ et),
/* harmony export */   disableLogging: () => (/* binding */ tt),
/* harmony export */   enableLogging: () => (/* binding */ rt),
/* harmony export */   validateIdToken: () => (/* binding */ ot)
/* harmony export */ });
var e={d:(t,r)=>{for(var o in r)e.o(r,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:r[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{MS:()=>R,_7:()=>AuthenticationError,cX:()=>P,zL:()=>LogoutError,_W:()=>x,p8:()=>j,YR:()=>ze,U$:()=>Je,U7:()=>Ue,OF:()=>He});var r={d:(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},o={};r.d(o,{MS:()=>ApiError,cF:()=>ApiRequestError,AK:()=>AuthTokenExpiredError,M_:()=>AuthorizationError,cX:()=>InitializationError,Yd:()=>w,O4:()=>T,_W:()=>ParameterError,p8:()=>ValidationError,m$:()=>s,U$:()=>u,U7:()=>h,OV:()=>d,N7:()=>A,HP:()=>n,Rp:()=>O});class ApiError extends Error{constructor(e,t){var r,o;super(e=null!==(r=null!=e?e:null==t?void 0:t.message)&&void 0!==r?r:"An unexpected error has occurred"),this.name=this.constructor.name,this.stack=(e?this.stack:null!==(o=null==t?void 0:t.stack)&&void 0!==o?o:this.stack).replace(/^(\w*Error)/,`${this.constructor.name}`)}}class ApiRequestError extends ApiError{constructor(e,t,r){var o;super(e=null!==(o=null!=e?e:null==r?void 0:r.message)&&void 0!==o?o:"An error occurred when executing the API request",r),this.status=t}}class AuthorizationError extends ApiError{constructor(e,t){var r;super(e=null!==(r=null!=e?e:null==t?void 0:t.message)&&void 0!==r?r:"An authorization error occurred",t)}}class AuthTokenExpiredError extends ApiError{constructor(e,t){var r;super(e=null!==(r=null!=e?e:null==t?void 0:t.message)&&void 0!==r?r:"The API request failed as the authorization tokens have expired",t)}}class InitializationError extends ApiError{constructor(e,t){var r;super(e=null!==(r=null!=e?e:null==t?void 0:t.message)&&void 0!==r?r:"An initialization error occurred",t)}}class ParameterError extends ApiError{constructor(e){super(e=null!=e?e:"Invalid parameter detected")}}class ValidationError extends ApiError{constructor(e,t){var r;super(e=null!==(r=null!=e?e:null==t?void 0:t.message)&&void 0!==r?r:"A token validation error occurred",t)}}const n=()=>void 0!==crypto.randomUUID?crypto.randomUUID():"10000000-1000-4000-8000-100000000000".replace(/[018]/g,(e=>{const t=window.crypto.getRandomValues(new Uint8Array(1))[0]&15>>Number(e)/4;return(Number(e)^t).toString(16)})),a="oauth-api-auth-flow",i=(e,t,r,o,n,a,i,s)=>async c=>{const d=new URL(c);if(0!==d.href.toLowerCase().indexOf(n.toLowerCase()))return!1;if(window.clearInterval(s),window.clearTimeout(t),window.clearTimeout(r),e.removeAllListeners(),e.close(!0),d.searchParams.get("error")){const e=new AuthorizationError("Authorization error");return e.data=d.toString(),i(e),!0}if(d.searchParams.get("state")!==o){const e=new AuthorizationError("State mismatch");return e.data=d.toString(),i(e),!0}const l=d.searchParams.get("code");if(!l){const e=new AuthorizationError("Authorization code missing");return e.data=d.toString(),i(e),!0}return a(l),!0},s=async(e,t,r={})=>{const{defaultHeight:o,defaultWidth:n}=r;return t(await fin.Window.create(Object.assign({alwaysOnTop:!0,maximizable:!1,minimizable:!1,autoShow:!1,defaultCentered:!0,defaultHeight:null!=o?o:750,defaultWidth:null!=n?n:600,includeInSnapshots:!1,name:a,resizable:!1,saveWindowState:!1,showTaskbarIcon:!1,url:e},r)))},c=(e,t,r)=>o=>new Promise(((n,a)=>{let s;const c=window.setTimeout((()=>{window.clearInterval(s),window.clearTimeout(c),o.removeAllListeners(),o.close(!0),a(new AuthorizationError("Authorization timed out"))}),3e5);o.addListener("closing",(async()=>{r.logInfo("User closed auth window"),window.clearInterval(s),window.clearTimeout(c),o.removeAllListeners(),a(new AuthorizationError("Failed to complete authorization code flow"))}));const d=window.setTimeout((async()=>{try{await o.isShowing()||(r.logInfo("Showing auth window"),await o.show(!0),await o.focus())}catch(e){r.logWarning("Unable to show auth window")}}),2e3);(async()=>{const{version:l}=await fin.System.getRuntimeInfo();parseInt(l.split(".")[0],10)>=30?await i(o,c,d,e,t,n,a)((await o.getInfo()).url)||await o.addListener("url-changed",(s=>{r.logInfo("Auth window navigated to",s.url),i(o,c,d,e,t,n,a)(s.url)})):s=window.setInterval((()=>(async(e,t,r,o,n,a,s,c)=>{let d;try{d=await e.getInfo()}catch(e){return window.clearInterval(t),window.clearTimeout(r),window.clearTimeout(o),c(new AuthorizationError("Could not locate auth window")),!1}return i(e,r,o,n,a,s,c,t)(d.url)})(o,s,c,d,e,t,n,a)),500)})()})),d=async(e,t)=>{let r;null==t||t.logInfo("Retrieving authorization server metadata",e);try{r=new URL(e)}catch(e){throw new ParameterError("Unexpected invalid discovery URL")}const o=await fetch(r,{headers:{Accept:"application/json"}});if(!o.ok)throw new Error("Failed to retrieve authorization server metadata");const n=await o.json();if(!n)throw new Error("Unexpected empty authorization server metadata response");return null==t||t.logInfo("Retrieved authorization server metadata",n),n},l=e=>{let t=fin.Integrations;t||(fin.Integrations={},t=fin.Integrations);let r=t[e];return r||(t[e]={},r=t[e]),r},u=e=>{l(e).loggingEnabled=!1},h=(e,t="0.0.0")=>{l(e).loggingEnabled=!0,console.log(p(e),`v${t}`)},p=e=>`[@openfin/${e.toLowerCase()}]`;class w{constructor(e){this.name=e,this.prefix=p(e),this.isLoggingEnabled=this.isLoggingEnabled.bind(this),this.logError=this.logError.bind(this),this.logInfo=this.logInfo.bind(this),this.logWarning=this.logWarning.bind(this)}isLoggingEnabled(){return l(this.name).loggingEnabled}logError(e){this.isLoggingEnabled()&&(e.innerError?console.error(this.prefix,e,"\n\n(inner)",e.innerError):console.error(this.prefix,e))}logInfo(...e){this.isLoggingEnabled()&&console.log(this.prefix,...e)}logWarning(...e){this.isLoggingEnabled()&&console.warn(this.prefix,...e)}}const g=()=>{let e,t,r,o,n;const a=async(t,r=!1)=>{const{command:o,data:n,id:s}=t,c={command:o,id:s};try{if(!e)throw new Error("Access token not found");const{apiRequestUrl:o,data:s,headers:d,httpMethod:l,includeAuthorization:u}=n,h=await(async(t,r,o,n,a)=>{var i,s;const c=Object.assign({Accept:"application/json"},n);"PATCH"!==r&&"POST"!==r&&"PUT"!==r||/content-type/i.test(Object.keys(c).join(","))||(c["Content-Type"]="application/json"),a&&(c.Authorization=`Bearer ${e}`);const d=await fetch(t,{body:"object"==typeof o?JSON.stringify(o):o,headers:c,method:r});if(!d.ok){const e={message:"Failed to execute API request"};return(null===(i=d.headers.get("Content-Type"))||void 0===i?void 0:i.includes("application/json"))&&(e.data=await d.json()),[d.status,void 0,void 0,e]}let l;const u=null!==(s=d.headers.get("Content-Type"))&&void 0!==s?s:"";switch(!0){case!u:break;case/^application\/(\w+\+)?json/i.test(u):l=await d.json();break;case/^multipart\/form-?data|^application\/x-?www-?form-?urlencoded/i.test(u):l=await d.formData();break;case/^application\/(([^/]+)?xml|vnd\.openxmlformats)|^text\/|^image\/svg/i.test(u):l=await d.text();break;default:l=await d.arrayBuffer()}return[d.status,l,u,void 0]})(o,l,s,d,u),[p,w,g,f]=h;if(c.status=p,f){if(!r&&401===p){const[e,r]=await i();return r?(c.status=e,c.error=r,c):await a(t,!0)}c.error=f}else w&&(c.data=w,c.type=g)}catch(e){e instanceof Error?c.error={message:e.message}:c.error={message:"Failed to execute API request"}}return Promise.resolve(c)},i=async()=>{var r;if(!o)throw new Error("Authorization server metadata not set");if(!t)throw new Error("Client ID not set");const a=`grant_type=refresh_token&client_id=${t}&refresh_token=${n}`,i=await fetch(o.token_endpoint,{body:a,headers:{Accept:"application/json","Content-Type":"application/x-www-form-urlencoded"},method:"POST"});if(!i.ok){const e={message:"Failed to refresh access token"};return(null===(r=i.headers.get("Content-Type"))||void 0===r?void 0:r.includes("application/json"))&&(e.data=await i.json()),[i.status,e]}const s=await i.json();return e=s.access_token,[i.status]};self.onmessage=async i=>{const{command:s,id:c}=i.data;let d={command:s,id:c};switch(s){case"API_REQUEST":d=await a(i.data);break;case"CODE_EXCHANGE":d=await(async a=>{var i;const{command:s,data:c,id:d}=a,l={command:s,id:d};try{if(!o)throw new Error("Authorization server metadata not set");if(!t)throw new Error("Client ID not set");const{code:a,codeVerifier:s,redirectUri:d}=c,u=`grant_type=authorization_code&client_id=${t}&code=${a}&code_verifier=${s}&redirect_uri=${d}`,h=await fetch(o.token_endpoint,{body:u,headers:{Accept:"application/json","Content-Type":"application/x-www-form-urlencoded"},method:"POST"});if(h.ok){const t=await h.json();e=t.access_token,r=t.id_token,n=t.refresh_token}else{const e={message:"Failed to retrieve tokens"};(null===(i=h.headers.get("Content-Type"))||void 0===i?void 0:i.includes("application/json"))&&(e.data=await h.json()),l.error=e}}catch(e){e instanceof Error?l.error={message:e.message}:l.error={message:"Failed to retrieve tokens"}}return Promise.resolve(l)})(i.data);break;case"EXPIRE_TOKENS":d=await(async r=>{var a;const{command:i,expireAccessTokenOnly:s,id:c}=r,d={command:i,id:c};try{if(!o)throw new Error("Authorization server metadata not set");if(!o.revocation_endpoint)throw new Error("Revocation endpoint missing in authorization server metadata");if(!s&&!n)throw new Error("Refresh token not found");const r=o.revocation_endpoint;let i,c=!1;const l={body:`client_id=${t}`,headers:{Accept:"application/json","Content-Type":"application/x-www-form-urlencoded"},method:"POST"};if(s){const t=await fetch(r,Object.assign(Object.assign({},l),{body:`${l.body}&token=${e}&token_type_hint=access_token`}));t.ok||(c=!0,(null===(a=t.headers.get("Content-Type"))||void 0===a?void 0:a.includes("application/json"))&&(i=await t.json()))}else{const t=(await Promise.all([await fetch(r,Object.assign(Object.assign({},l),{body:`${l.body}&token=${e}&token_type_hint=access_token`})),await fetch(r,Object.assign(Object.assign({},l),{body:`${l.body}&token=${n}&token_type_hint=refresh_token`}))])).filter((e=>!e.ok));t.length&&(c=!0,i=await t[0].json())}if(c){const e={data:i,message:"Failed to expire tokens"};d.error=e}}catch(e){e instanceof Error?d.error={message:e.message}:d.error={message:"Failed to expire tokens"}}return Promise.resolve(d)})(i.data);break;case"GET_ID_TOKEN":l=i.data,d=Object.assign(Object.assign({},l),{idToken:r});break;case"INIT":d=await(async e=>{const{command:r,data:n,id:a}=e,i={command:r,id:a};return t=n.clientId,o=n.metadata,Promise.resolve(i)})(i.data);break;default:d.error=new Error(`Unexpected oauth worker command: ${s}`)}var l;self.postMessage(d)}};var f;!function(e){e.ApiRequest="API_REQUEST",e.CodeExchange="CODE_EXCHANGE",e.ExpireTokens="EXPIRE_TOKENS",e.GetIdToken="GET_ID_TOKEN",e.Init="INIT"}(f||(f={}));const m=[],y=e=>{m.push(e)},E=(e,t)=>(r,o,a)=>new Promise(((i,s)=>{const c={command:f.CodeExchange,data:{code:r,codeVerifier:o,redirectUri:a},id:n()},{command:d,id:l}=c;y({command:d,id:l,reject:s,resolve:i}),e.postMessage(c),t.logInfo("Worker request sent",c)})),v=(e,t,r)=>(o,a,i,s,c)=>new Promise(((d,l)=>{const u={command:f.ApiRequest,data:{apiRequestUrl:o,clientId:e,data:i,headers:s,httpMethod:a,includeAuthorization:c},id:n()},{command:h,id:p}=u;y({command:h,id:p,reject:l,resolve:d}),t.postMessage(u),r.logInfo("Worker request sent",u)})),S=(e,t)=>r=>new Promise(((o,a)=>{const i={command:f.ExpireTokens,expireAccessTokenOnly:r,id:n()},{command:s,id:c}=i;y({command:s,id:c,reject:a,resolve:o}),e.postMessage(i),t.logInfo("Worker request sent",i)})),b=(e,t)=>async()=>(await new Promise(((r,o)=>{const a={command:f.GetIdToken,id:n()},{command:i,id:s}=a;y({command:i,id:s,reject:o,resolve:r}),e.postMessage(a),t.logInfo("Worker request sent",a)}))).idToken,A=async(e,t,r)=>{const o=new Blob([`(${g})()`],{type:"text/javascript"}),a=URL.createObjectURL(o),i=new Worker(a);return i.onmessage=_(r),await((e,t,r,o)=>new Promise(((a,i)=>{const s={command:f.Init,data:{clientId:t,metadata:e},id:n()},{command:c,id:d}=s;y({command:c,id:d,reject:i,resolve:a}),r.postMessage(s),o.logInfo("Worker request sent",s)})))(e,t,i,r),{exchangeCodeForTokens:E(i,r),executeApiRequest:v(t,i,r),expireTokens:S(i,r),getIdToken:b(i,r),terminate:I(i,r)}},_=e=>t=>{e.logInfo("Worker response received",t.data);const r=t.data,{command:o,error:n,id:a}=r,i=function(e,t){var r={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(r[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(o=Object.getOwnPropertySymbols(e);n<o.length;n++)t.indexOf(o[n])<0&&Object.prototype.propertyIsEnumerable.call(e,o[n])&&(r[o[n]]=e[o[n]])}return r}(r,["command","error","id"]),s=((e,t)=>m.find((r=>r.command===t&&r.id===e)))(a,o);s?(n?("status"in i&&void 0!==i.status&&(n.status=i.status),s.reject(n)):s.resolve(i),k(a,o)):e.logError(new Error("Unable to locate awaited request"))},k=(e,t)=>{const r=m.findIndex((r=>r.command===t&&r.id===e));r>=0&&m.splice(r,1)},I=(e,t)=>async()=>{try{await S(e,t)(!1)}catch(e){t.logWarning(e.message)}e.terminate(),t.logInfo("Worker terminated")};class T{get apiOrigin(){return this._apiOrigin}get clientId(){return this._clientId}get logger(){return this._logger}get metadata(){return this._metadata}get worker(){return this._worker}constructor(e,t,r,o,n){if(this.executeApiRequest=async(e,t="GET",r,o,n=!0,a=!1)=>{this._logger.logInfo("ExecuteApiRequest started",e,t,r,o);try{const a=await((e,t)=>async(r,o,n,a,i)=>{try{return await t.executeApiRequest(`${e}${r}`,o,n,a,i)}catch(e){let t;const{data:r,message:o,status:n}=e;throw t=e instanceof Error?new ApiRequestError(o,n):"Failed to refresh access token"===o?new AuthTokenExpiredError(o):new ApiRequestError(o,n),t.data=r,t}})(this._apiOrigin,this._worker)(e,t,r,o,n);return this._logger.logInfo("ExecuteApiRequest completed",a),a}catch(e){if(e instanceof ApiRequestError){const{data:t,message:r,name:o,stack:n}=e,a=this.getErrorMessageFromServerResponse(t);a&&(e.message=a,e.stack=null==n?void 0:n.replace(`${o}: ${r}`,`${o}: ${a}`))}throw a&&this.logger.logError(e),e}},!(t&&r&&o&&n))throw new InitializationError("Provider has not been properly initialized (call init to create new instances)");this._apiOrigin=null!=e?e:"",this._clientId=t,this._metadata=r,this._worker=o,this._logger=n,this.authorize=this.authorize.bind(this),this.close=this.close.bind(this),this.executeApiRequest=this.executeApiRequest.bind(this),this.expireTokens=this.expireTokens.bind(this),this.getErrorMessageFromServerResponse=this.getErrorMessageFromServerResponse.bind(this),this.getIdToken=this.getIdToken.bind(this)}async authorize(e,t,r){this._logger.logInfo("Authorize started",e,t,r);try{await(o=this._metadata,i=this._clientId,d=this._worker,l=this._logger,async(e,t={},r={})=>{const{authorization_endpoint:u}=o,h=fin.Application.getCurrentSync(),p=(await h.getChildWindows()).find((e=>e.identity.name===a));p&&await p.close(!0);const w=n(),g=(()=>{const e=new Uint32Array(64);return window.crypto.getRandomValues(e),Array.from(e,(e=>`0${e.toString(16)}`.slice(-2))).join("")})(),f=(await(async e=>{const t=(new TextEncoder).encode(e),r=await window.crypto.subtle.digest("SHA-256",t),o=await(e=>new Promise(((t,r)=>{try{const o=new Blob([e]),n=new FileReader;n.onload=e=>{var o,n;const a=null===(o=e.target)||void 0===o?void 0:o.result;if(a){const[,e]=Array.from(null!==(n=a.match(/base64,(.*)$/i))&&void 0!==n?n:[]);t(null!=e?e:"")}r(new Error("Unexpected empty result"))},n.readAsDataURL(o)}catch(e){r(e)}})))(r);return o.replace(/\+/g,"-").replace(/\//g,"_")})(g)).replace(/=+$/,""),m=new URL(u);m.searchParams.set("client_id",i),m.searchParams.set("redirect_uri",e),m.searchParams.set("response_type","code"),m.searchParams.set("state",w),m.searchParams.set("code_challenge",f),m.searchParams.set("code_challenge_method","S256"),Object.entries(t).forEach((e=>m.searchParams.set(e[0],e[1]))),l.logInfo("Starting OAuth flow",m,r);const y=await s(m.toString(),c(w,e,l),r);l.logInfo("Received authorization code"),await d.exchangeCodeForTokens(y,g,e),l.logInfo("Received tokens")})(e,t,r),this._logger.logInfo("Authorize completed")}catch(e){let t;if(e instanceof ApiError){const{data:r}=e,o=this.getErrorMessageFromServerResponse(r);t=new AuthorizationError(o,e),t.data=r}else t=new AuthorizationError(void 0,e);throw this.logger.logError(t),t}var o,i,d,l}async close(){var e;this._logger.logInfo("Close started");try{await(null===(e=this._worker)||void 0===e?void 0:e.terminate()),this._worker=void 0,this._apiOrigin=void 0,this._clientId=void 0,this._metadata=void 0,this._logger.logInfo("Close completed")}catch(e){const t=new ApiError(void 0,e);throw this._logger.logError(t),t}}async expireTokens(e=!1){var t;this._logger.logInfo("ExpireTokens started");try{await(null===(t=this._worker)||void 0===t?void 0:t.expireTokens(e)),this._logger.logInfo("ExpireTokens completed")}catch(e){const t=new ApiError(void 0,e);throw this._logger.logError(t),t}}getErrorMessageFromServerResponse(e){e&&this._logger.logWarning(e)}async getIdToken(){var e;this._logger.logInfo("GetIdToken started");try{const t=await(null===(e=this._worker)||void 0===e?void 0:e.getIdToken());return this._logger.logInfo("GetIdToken completed",t),t}catch(e){const t=new ApiError(void 0,e);throw this._logger.logError(t),t}}static async init(e,t,r,o,...n){const a=new w(o);a.logInfo("Init started",e,t,r);try{let o;if("discoveryEndpoint"in e){const{additionalMetadata:t,discoveryEndpoint:r}=e;o=Object.assign(Object.assign({},await d(r)),null!=t?t:{})}else o=e;if(!o.response_types_supported.find((e=>"code"===e.toLowerCase())))throw new InitializationError("Authorization server does not support the authorization code response type");const n=await A(o,r,a),i=new T(t,r,o,n,a);return a.logInfo("Init completed",i),i}catch(e){let t;throw t=e instanceof ApiError?e:new InitializationError(void 0,e),a.logError(t),t}}}const O=e=>async(t,r,o)=>{let n;null==e||e.logInfo("Validating token against introspection endpoint",t,r,o);try{n=await fetch(o,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:`token=${t}&client_id=${r}`})}catch(e){throw new ValidationError(void 0,e)}if(n.ok){const t=await n.json(),{active:r}=t,o=function(e,t){var r={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(r[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(o=Object.getOwnPropertySymbols(e);n<o.length;n++)t.indexOf(o[n])<0&&Object.prototype.propertyIsEnumerable.call(e,o[n])&&(r[o[n]]=e[o[n]])}return r}(t,["active"]),a=Object.assign({valid:r},o);return null==e||e.logInfo("Token validation result",a),a}const a=await n.json();throw null==e||e.logWarning("Token Validation failed",a),new ValidationError};var R=o.MS,P=o.cX,C=o.Yd,W=o.O4,x=o._W,j=o.p8,$=o.m$,J=o.U$,U=o.U7,K=o.OV,D=o.N7,L=o.Rp;const H=new TextEncoder,M=new TextDecoder;function z(...e){const t=e.reduce(((e,{length:t})=>e+t),0),r=new Uint8Array(t);let o=0;return e.forEach((e=>{r.set(e,o),o+=e.length})),r}const N=e=>{let t=e;t instanceof Uint8Array&&(t=M.decode(t)),t=t.replace(/-/g,"+").replace(/_/g,"/").replace(/\s/g,"");try{return(e=>{const t=atob(e),r=new Uint8Array(t.length);for(let e=0;e<t.length;e++)r[e]=t.charCodeAt(e);return r})(t)}catch(e){throw new TypeError("The input to be decoded is not correctly encoded.")}};class JOSEError extends Error{static get code(){return"ERR_JOSE_GENERIC"}constructor(e){var t;super(e),this.code="ERR_JOSE_GENERIC",this.name=this.constructor.name,null===(t=Error.captureStackTrace)||void 0===t||t.call(Error,this,this.constructor)}}class F extends JOSEError{static get code(){return"ERR_JWT_CLAIM_VALIDATION_FAILED"}constructor(e,t="unspecified",r="unspecified"){super(e),this.code="ERR_JWT_CLAIM_VALIDATION_FAILED",this.claim=t,this.reason=r}}class q extends JOSEError{static get code(){return"ERR_JWT_EXPIRED"}constructor(e,t="unspecified",r="unspecified"){super(e),this.code="ERR_JWT_EXPIRED",this.claim=t,this.reason=r}}class G extends JOSEError{constructor(){super(...arguments),this.code="ERR_JOSE_ALG_NOT_ALLOWED"}static get code(){return"ERR_JOSE_ALG_NOT_ALLOWED"}}class V extends JOSEError{constructor(){super(...arguments),this.code="ERR_JOSE_NOT_SUPPORTED"}static get code(){return"ERR_JOSE_NOT_SUPPORTED"}}class B extends JOSEError{constructor(){super(...arguments),this.code="ERR_JWS_INVALID"}static get code(){return"ERR_JWS_INVALID"}}class X extends JOSEError{constructor(){super(...arguments),this.code="ERR_JWT_INVALID"}static get code(){return"ERR_JWT_INVALID"}}class Y extends JOSEError{constructor(){super(...arguments),this.code="ERR_JWKS_INVALID"}static get code(){return"ERR_JWKS_INVALID"}}class Q extends JOSEError{constructor(){super(...arguments),this.code="ERR_JWKS_NO_MATCHING_KEY",this.message="no applicable key found in the JSON Web Key Set"}static get code(){return"ERR_JWKS_NO_MATCHING_KEY"}}class Z extends JOSEError{constructor(){super(...arguments),this.code="ERR_JWKS_MULTIPLE_MATCHING_KEYS",this.message="multiple matching keys found in the JSON Web Key Set"}static get code(){return"ERR_JWKS_MULTIPLE_MATCHING_KEYS"}}Symbol.asyncIterator;class ee extends JOSEError{constructor(){super(...arguments),this.code="ERR_JWKS_TIMEOUT",this.message="request timed out"}static get code(){return"ERR_JWKS_TIMEOUT"}}class te extends JOSEError{constructor(){super(...arguments),this.code="ERR_JWS_SIGNATURE_VERIFICATION_FAILED",this.message="signature verification failed"}static get code(){return"ERR_JWS_SIGNATURE_VERIFICATION_FAILED"}}const re=crypto,oe=e=>e instanceof CryptoKey;re.getRandomValues.bind(re);const ne=async e=>{var t,r;if(!e.alg)throw new TypeError('"alg" argument is required when "jwk.alg" is not present');const{algorithm:o,keyUsages:n}=function(e){let t,r;switch(e.kty){case"oct":switch(e.alg){case"HS256":case"HS384":case"HS512":t={name:"HMAC",hash:`SHA-${e.alg.slice(-3)}`},r=["sign","verify"];break;case"A128CBC-HS256":case"A192CBC-HS384":case"A256CBC-HS512":throw new V(`${e.alg} keys cannot be imported as CryptoKey instances`);case"A128GCM":case"A192GCM":case"A256GCM":case"A128GCMKW":case"A192GCMKW":case"A256GCMKW":t={name:"AES-GCM"},r=["encrypt","decrypt"];break;case"A128KW":case"A192KW":case"A256KW":t={name:"AES-KW"},r=["wrapKey","unwrapKey"];break;case"PBES2-HS256+A128KW":case"PBES2-HS384+A192KW":case"PBES2-HS512+A256KW":t={name:"PBKDF2"},r=["deriveBits"];break;default:throw new V('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;case"RSA":switch(e.alg){case"PS256":case"PS384":case"PS512":t={name:"RSA-PSS",hash:`SHA-${e.alg.slice(-3)}`},r=e.d?["sign"]:["verify"];break;case"RS256":case"RS384":case"RS512":t={name:"RSASSA-PKCS1-v1_5",hash:`SHA-${e.alg.slice(-3)}`},r=e.d?["sign"]:["verify"];break;case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":t={name:"RSA-OAEP",hash:`SHA-${parseInt(e.alg.slice(-3),10)||1}`},r=e.d?["decrypt","unwrapKey"]:["encrypt","wrapKey"];break;default:throw new V('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;case"EC":switch(e.alg){case"ES256":t={name:"ECDSA",namedCurve:"P-256"},r=e.d?["sign"]:["verify"];break;case"ES384":t={name:"ECDSA",namedCurve:"P-384"},r=e.d?["sign"]:["verify"];break;case"ES512":t={name:"ECDSA",namedCurve:"P-521"},r=e.d?["sign"]:["verify"];break;case"ECDH-ES":case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":t={name:"ECDH",namedCurve:e.crv},r=e.d?["deriveBits"]:[];break;default:throw new V('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;case"OKP":switch(e.alg){case"EdDSA":t={name:e.crv},r=e.d?["sign"]:["verify"];break;case"ECDH-ES":case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":t={name:e.crv},r=e.d?["deriveBits"]:[];break;default:throw new V('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;default:throw new V('Invalid or unsupported JWK "kty" (Key Type) Parameter value')}return{algorithm:t,keyUsages:r}}(e),a=[o,null!==(t=e.ext)&&void 0!==t&&t,null!==(r=e.key_ops)&&void 0!==r?r:n];if("PBKDF2"===o.name)return re.subtle.importKey("raw",N(e.k),...a);const i={...e};return delete i.alg,delete i.use,re.subtle.importKey("jwk",i,...a)};function ae(e){if("object"!=typeof(t=e)||null===t||"[object Object]"!==Object.prototype.toString.call(e))return!1;var t;if(null===Object.getPrototypeOf(e))return!0;let r=e;for(;null!==Object.getPrototypeOf(r);)r=Object.getPrototypeOf(r);return Object.getPrototypeOf(e)===r}const ie=function(e,t,r,o,n){if(void 0!==n.crit&&void 0===o.crit)throw new e('"crit" (Critical) Header Parameter MUST be integrity protected');if(!o||void 0===o.crit)return new Set;if(!Array.isArray(o.crit)||0===o.crit.length||o.crit.some((e=>"string"!=typeof e||0===e.length)))throw new e('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');let a;a=void 0!==r?new Map([...Object.entries(r),...t.entries()]):t;for(const t of o.crit){if(!a.has(t))throw new V(`Extension Header Parameter "${t}" is not recognized`);if(void 0===n[t])throw new e(`Extension Header Parameter "${t}" is missing`);if(a.get(t)&&void 0===o[t])throw new e(`Extension Header Parameter "${t}" MUST be integrity protected`)}return new Set(o.crit)};Symbol();function se(e,t="algorithm.name"){return new TypeError(`CryptoKey does not support this operation, its ${t} must be ${e}`)}function ce(e,t){return e.name===t}function de(e){return parseInt(e.name.slice(4),10)}function le(e,t){if(t.length&&!t.some((t=>e.usages.includes(t)))){let e="CryptoKey does not support this operation, its usages must include ";if(t.length>2){const r=t.pop();e+=`one of ${t.join(", ")}, or ${r}.`}else 2===t.length?e+=`one of ${t[0]} or ${t[1]}.`:e+=`${t[0]}.`;throw new TypeError(e)}}function ue(e,t,...r){switch(t){case"HS256":case"HS384":case"HS512":{if(!ce(e.algorithm,"HMAC"))throw se("HMAC");const r=parseInt(t.slice(2),10);if(de(e.algorithm.hash)!==r)throw se(`SHA-${r}`,"algorithm.hash");break}case"RS256":case"RS384":case"RS512":{if(!ce(e.algorithm,"RSASSA-PKCS1-v1_5"))throw se("RSASSA-PKCS1-v1_5");const r=parseInt(t.slice(2),10);if(de(e.algorithm.hash)!==r)throw se(`SHA-${r}`,"algorithm.hash");break}case"PS256":case"PS384":case"PS512":{if(!ce(e.algorithm,"RSA-PSS"))throw se("RSA-PSS");const r=parseInt(t.slice(2),10);if(de(e.algorithm.hash)!==r)throw se(`SHA-${r}`,"algorithm.hash");break}case"EdDSA":if("Ed25519"!==e.algorithm.name&&"Ed448"!==e.algorithm.name)throw se("Ed25519 or Ed448");break;case"ES256":case"ES384":case"ES512":{if(!ce(e.algorithm,"ECDSA"))throw se("ECDSA");const r=function(e){switch(e){case"ES256":return"P-256";case"ES384":return"P-384";case"ES512":return"P-521";default:throw new Error("unreachable")}}(t);if(e.algorithm.namedCurve!==r)throw se(r,"algorithm.namedCurve");break}default:throw new TypeError("CryptoKey does not support this operation")}le(e,r)}function he(e,t,...r){if(r.length>2){const t=r.pop();e+=`one of type ${r.join(", ")}, or ${t}.`}else 2===r.length?e+=`one of type ${r[0]} or ${r[1]}.`:e+=`of type ${r[0]}.`;return null==t?e+=` Received ${t}`:"function"==typeof t&&t.name?e+=` Received function ${t.name}`:"object"==typeof t&&null!=t&&t.constructor&&t.constructor.name&&(e+=` Received an instance of ${t.constructor.name}`),e}const pe=(e,...t)=>he("Key must be ",e,...t);function we(e,t,...r){return he(`Key for the ${e} algorithm must be `,t,...r)}const ge=e=>oe(e),fe=["CryptoKey"];const me=async(e,t,r,o)=>{const n=await function(e,t,r){if(oe(t))return ue(t,e,r),t;if(t instanceof Uint8Array){if(!e.startsWith("HS"))throw new TypeError(pe(t,...fe));return re.subtle.importKey("raw",t,{hash:`SHA-${e.slice(-3)}`,name:"HMAC"},!1,[r])}throw new TypeError(pe(t,...fe,"Uint8Array"))}(e,t,"verify");((e,t)=>{if(e.startsWith("RS")||e.startsWith("PS")){const{modulusLength:r}=t.algorithm;if("number"!=typeof r||r<2048)throw new TypeError(`${e} requires key modulusLength to be 2048 bits or larger`)}})(e,n);const a=function(e,t){const r=`SHA-${e.slice(-3)}`;switch(e){case"HS256":case"HS384":case"HS512":return{hash:r,name:"HMAC"};case"PS256":case"PS384":case"PS512":return{hash:r,name:"RSA-PSS",saltLength:e.slice(-3)>>3};case"RS256":case"RS384":case"RS512":return{hash:r,name:"RSASSA-PKCS1-v1_5"};case"ES256":case"ES384":case"ES512":return{hash:r,name:"ECDSA",namedCurve:t.namedCurve};case"EdDSA":return{name:t.name};default:throw new V(`alg ${e} is not supported either by JOSE or your javascript runtime`)}}(e,n.algorithm);try{return await re.subtle.verify(a,n,r,o)}catch(e){return!1}},ye=(...e)=>{const t=e.filter(Boolean);if(0===t.length||1===t.length)return!0;let r;for(const e of t){const t=Object.keys(e);if(r&&0!==r.size)for(const e of t){if(r.has(e))return!1;r.add(e)}else r=new Set(t)}return!0},Ee=(e,t,r)=>{e.startsWith("HS")||"dir"===e||e.startsWith("PBES2")||/^A\d{3}(?:GCM)?KW$/.test(e)?((e,t)=>{if(!(t instanceof Uint8Array)){if(!ge(t))throw new TypeError(we(e,t,...fe,"Uint8Array"));if("secret"!==t.type)throw new TypeError(`${fe.join(" or ")} instances for symmetric algorithms must be of type "secret"`)}})(e,t):((e,t,r)=>{if(!ge(t))throw new TypeError(we(e,t,...fe));if("secret"===t.type)throw new TypeError(`${fe.join(" or ")} instances for asymmetric algorithms must not be of type "secret"`);if("sign"===r&&"public"===t.type)throw new TypeError(`${fe.join(" or ")} instances for asymmetric algorithm signing must be of type "private"`);if("decrypt"===r&&"public"===t.type)throw new TypeError(`${fe.join(" or ")} instances for asymmetric algorithm decryption must be of type "private"`);if(t.algorithm&&"verify"===r&&"private"===t.type)throw new TypeError(`${fe.join(" or ")} instances for asymmetric algorithm verifying must be of type "public"`);if(t.algorithm&&"encrypt"===r&&"private"===t.type)throw new TypeError(`${fe.join(" or ")} instances for asymmetric algorithm encryption must be of type "public"`)})(e,t,r)},ve=(e,t)=>{if(void 0!==t&&(!Array.isArray(t)||t.some((e=>"string"!=typeof e))))throw new TypeError(`"${e}" option must be an array of strings`);if(t)return new Set(t)};async function Se(e,t,r){if(e instanceof Uint8Array&&(e=M.decode(e)),"string"!=typeof e)throw new B("Compact JWS must be a string or Uint8Array");const{0:o,1:n,2:a,length:i}=e.split(".");if(3!==i)throw new B("Invalid Compact JWS");const s=await async function(e,t,r){var o;if(!ae(e))throw new B("Flattened JWS must be an object");if(void 0===e.protected&&void 0===e.header)throw new B('Flattened JWS must have either of the "protected" or "header" members');if(void 0!==e.protected&&"string"!=typeof e.protected)throw new B("JWS Protected Header incorrect type");if(void 0===e.payload)throw new B("JWS Payload missing");if("string"!=typeof e.signature)throw new B("JWS Signature missing or incorrect type");if(void 0!==e.header&&!ae(e.header))throw new B("JWS Unprotected Header incorrect type");let n={};if(e.protected)try{const t=N(e.protected);n=JSON.parse(M.decode(t))}catch(e){throw new B("JWS Protected Header is invalid")}if(!ye(n,e.header))throw new B("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");const a={...n,...e.header};let i=!0;if(ie(B,new Map([["b64",!0]]),null==r?void 0:r.crit,n,a).has("b64")&&(i=n.b64,"boolean"!=typeof i))throw new B('The "b64" (base64url-encode payload) Header Parameter must be a boolean');const{alg:s}=a;if("string"!=typeof s||!s)throw new B('JWS "alg" (Algorithm) Header Parameter missing or invalid');const c=r&&ve("algorithms",r.algorithms);if(c&&!c.has(s))throw new G('"alg" (Algorithm) Header Parameter not allowed');if(i){if("string"!=typeof e.payload)throw new B("JWS Payload must be a string")}else if("string"!=typeof e.payload&&!(e.payload instanceof Uint8Array))throw new B("JWS Payload must be a string or an Uint8Array instance");let d=!1;"function"==typeof t&&(t=await t(n,e),d=!0),Ee(s,t,"verify");const l=z(H.encode(null!==(o=e.protected)&&void 0!==o?o:""),H.encode("."),"string"==typeof e.payload?H.encode(e.payload):e.payload),u=N(e.signature);if(!await me(s,t,u,l))throw new te;let h;h=i?N(e.payload):"string"==typeof e.payload?H.encode(e.payload):e.payload;const p={payload:h};return void 0!==e.protected&&(p.protectedHeader=n),void 0!==e.header&&(p.unprotectedHeader=e.header),d?{...p,key:t}:p}({payload:n,protected:o,signature:a},t,r),c={payload:s.payload,protectedHeader:s.protectedHeader};return"function"==typeof t?{...c,key:s.key}:c}const be=86400,Ae=/^(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i,_e=e=>{const t=Ae.exec(e);if(!t)throw new TypeError("Invalid time period format");const r=parseFloat(t[1]);switch(t[2].toLowerCase()){case"sec":case"secs":case"second":case"seconds":case"s":return Math.round(r);case"minute":case"minutes":case"min":case"mins":case"m":return Math.round(60*r);case"hour":case"hours":case"hr":case"hrs":case"h":return Math.round(3600*r);case"day":case"days":case"d":return Math.round(r*be);case"week":case"weeks":case"w":return Math.round(604800*r);default:return Math.round(31557600*r)}},ke=e=>e.toLowerCase().replace(/^application\//,""),Ie=(e,t,r={})=>{const{typ:o}=r;if(o&&("string"!=typeof e.typ||ke(e.typ)!==ke(o)))throw new F('unexpected "typ" JWT header value',"typ","check_failed");let n;try{n=JSON.parse(M.decode(t))}catch(e){}if(!ae(n))throw new X("JWT Claims Set must be a top-level JSON object");const{requiredClaims:a=[],issuer:i,subject:s,audience:c,maxTokenAge:d}=r;void 0!==d&&a.push("iat"),void 0!==c&&a.push("aud"),void 0!==s&&a.push("sub"),void 0!==i&&a.push("iss");for(const e of new Set(a.reverse()))if(!(e in n))throw new F(`missing required "${e}" claim`,e,"missing");if(i&&!(Array.isArray(i)?i:[i]).includes(n.iss))throw new F('unexpected "iss" claim value',"iss","check_failed");if(s&&n.sub!==s)throw new F('unexpected "sub" claim value',"sub","check_failed");if(c&&(l=n.aud,u="string"==typeof c?[c]:c,!("string"==typeof l?u.includes(l):Array.isArray(l)&&u.some(Set.prototype.has.bind(new Set(l))))))throw new F('unexpected "aud" claim value',"aud","check_failed");var l,u;let h;switch(typeof r.clockTolerance){case"string":h=_e(r.clockTolerance);break;case"number":h=r.clockTolerance;break;case"undefined":h=0;break;default:throw new TypeError("Invalid clockTolerance option type")}const{currentDate:p}=r,w=(g=p||new Date,Math.floor(g.getTime()/1e3));var g;if((void 0!==n.iat||d)&&"number"!=typeof n.iat)throw new F('"iat" claim must be a number',"iat","invalid");if(void 0!==n.nbf){if("number"!=typeof n.nbf)throw new F('"nbf" claim must be a number',"nbf","invalid");if(n.nbf>w+h)throw new F('"nbf" claim timestamp check failed',"nbf","check_failed")}if(void 0!==n.exp){if("number"!=typeof n.exp)throw new F('"exp" claim must be a number',"exp","invalid");if(n.exp<=w-h)throw new q('"exp" claim timestamp check failed',"exp","check_failed")}if(d){const e=w-n.iat;if(e-h>("number"==typeof d?d:_e(d)))throw new q('"iat" claim timestamp check failed (too far in the past)',"iat","check_failed");if(e<0-h)throw new F('"iat" claim timestamp check failed (it should be in the past)',"iat","check_failed")}return n};function Te(e){return e&&"object"==typeof e&&Array.isArray(e.keys)&&e.keys.every(Oe)}function Oe(e){return ae(e)}class Re{constructor(e){if(this._cached=new WeakMap,!Te(e))throw new Y("JSON Web Key Set malformed");var t;this._jwks=(t=e,"function"==typeof structuredClone?structuredClone(t):JSON.parse(JSON.stringify(t)))}async getKey(e,t){const{alg:r,kid:o}={...e,...null==t?void 0:t.header},n=function(e){switch("string"==typeof e&&e.slice(0,2)){case"RS":case"PS":return"RSA";case"ES":return"EC";case"Ed":return"OKP";default:throw new V('Unsupported "alg" value for a JSON Web Key Set')}}(r),a=this._jwks.keys.filter((e=>{let t=n===e.kty;if(t&&"string"==typeof o&&(t=o===e.kid),t&&"string"==typeof e.alg&&(t=r===e.alg),t&&"string"==typeof e.use&&(t="sig"===e.use),t&&Array.isArray(e.key_ops)&&(t=e.key_ops.includes("verify")),t&&"EdDSA"===r&&(t="Ed25519"===e.crv||"Ed448"===e.crv),t)switch(r){case"ES256":t="P-256"===e.crv;break;case"ES256K":t="secp256k1"===e.crv;break;case"ES384":t="P-384"===e.crv;break;case"ES512":t="P-521"===e.crv}return t})),{0:i,length:s}=a;if(0===s)throw new Q;if(1!==s){const e=new Z,{_cached:t}=this;throw e[Symbol.asyncIterator]=async function*(){for(const e of a)try{yield await Pe(t,e,r)}catch(e){continue}},e}return Pe(this._cached,i,r)}}async function Pe(e,t,r){const o=e.get(t)||e.set(t,{}).get(t);if(void 0===o[r]){const e=await async function(e,t,r){var o;if(!ae(e))throw new TypeError("JWK must be an object");switch(t||(t=e.alg),e.kty){case"oct":if("string"!=typeof e.k||!e.k)throw new TypeError('missing "k" (Key Value) Parameter value');return null!=r||(r=!0!==e.ext),r?ne({...e,alg:t,ext:null!==(o=e.ext)&&void 0!==o&&o}):N(e.k);case"RSA":if(void 0!==e.oth)throw new V('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');case"EC":case"OKP":return ne({...e,alg:t});default:throw new V('Unsupported "kty" (Key Type) Parameter value')}}({...t,ext:!0},r);if(e instanceof Uint8Array||"public"!==e.type)throw new Y("JSON Web Key Set members must be public keys");o[r]=e}return o[r]}const Ce=async(e,t,r)=>{let o,n,a=!1;"function"==typeof AbortController&&(o=new AbortController,n=setTimeout((()=>{a=!0,o.abort()}),t));const i=await fetch(e.href,{signal:o?o.signal:void 0,redirect:"manual",headers:r.headers}).catch((e=>{if(a)throw new ee;throw e}));if(void 0!==n&&clearTimeout(n),200!==i.status)throw new JOSEError("Expected 200 OK from the JSON Web Key Set HTTP response");try{return await i.json()}catch(e){throw new JOSEError("Failed to parse the JSON Web Key Set HTTP response as JSON")}};class We extends Re{constructor(e,t){if(super({keys:[]}),this._jwks=void 0,!(e instanceof URL))throw new TypeError("url must be an instance of URL");this._url=new URL(e.href),this._options={agent:null==t?void 0:t.agent,headers:null==t?void 0:t.headers},this._timeoutDuration="number"==typeof(null==t?void 0:t.timeoutDuration)?null==t?void 0:t.timeoutDuration:5e3,this._cooldownDuration="number"==typeof(null==t?void 0:t.cooldownDuration)?null==t?void 0:t.cooldownDuration:3e4,this._cacheMaxAge="number"==typeof(null==t?void 0:t.cacheMaxAge)?null==t?void 0:t.cacheMaxAge:6e5}coolingDown(){return"number"==typeof this._jwksTimestamp&&Date.now()<this._jwksTimestamp+this._cooldownDuration}fresh(){return"number"==typeof this._jwksTimestamp&&Date.now()<this._jwksTimestamp+this._cacheMaxAge}async getKey(e,t){this._jwks&&this.fresh()||await this.reload();try{return await super.getKey(e,t)}catch(r){if(r instanceof Q&&!1===this.coolingDown())return await this.reload(),super.getKey(e,t);throw r}}async reload(){this._pendingFetch&&("undefined"!=typeof WebSocketPair||"undefined"!=typeof navigator&&"Cloudflare-Workers"===navigator.userAgent||"undefined"!=typeof EdgeRuntime&&"vercel"===EdgeRuntime)&&(this._pendingFetch=void 0),this._pendingFetch||(this._pendingFetch=Ce(this._url,this._timeoutDuration,this._options).then((e=>{if(!Te(e))throw new Y("JSON Web Key Set malformed");this._jwks={keys:e.keys},this._jwksTimestamp=Date.now(),this._pendingFetch=void 0})).catch((e=>{throw this._pendingFetch=void 0,e}))),await this._pendingFetch}}const xe=N;class AuthenticationError extends R{constructor(e,t){super(e=e??t?.message??"An error occurred during authentication",t)}}class LogoutError extends R{constructor(e,t){super(e=e??t?.message??"An error occurred during logout",t)}}const je="1.0.0",$e="OIDC",Je=()=>{J($e)},Ue=()=>{U($e,je)};"undefined"!=typeof window&&("undefined"==typeof fin&&Object.assign(window,{fin:{}}),Object.assign(fin,{Integrations:{OIDC:{enableLogging:Ue,disableLogging:Je}}}));const Ke=e=>`${e.replace(/\/$/,"")}/.well-known/openid-configuration`;var De;!function(e){e.OpenIdConnect="OpenID-Connect"}(De||(De={}));class Le extends W{get idToken(){return this._idToken}get openIdProviderUrl(){return this._openIdProviderUrl}get redirectUri(){return this._redirectUri}get scope(){return this._scope}get userInfo(){return this._userInfo}async authorize(e,t,r){await super.authorize(e,t,r),this._idToken=await this.getIdToken(),this._userInfo=await(async e=>{const t=e.metadata?.userinfo_endpoint;if(!t)return;const{data:r}=await e.executeApiRequest(t);return r})(this)}async close(){await super.close(),this._idToken=void 0,this._openIdProviderUrl=void 0,this._redirectUri=void 0,this._scope=void 0,this._userInfo=void 0}getErrorMessageFromServerResponse(e){return e}static async init(e,t,r,o,n,a,i){const s=new C(o);s.logInfo("Init started",e,t,r,o,n,a,i);try{const{additionalMetadata:t,discoveryEndpoint:o}=e,c={...await K(o),...t??{}};if(!c.response_types_supported.find((e=>"code"===e.toLowerCase())))throw new P("OpenID Provider does not support the authorization code response type");const d=await D(c,r,s),l=new Le(void 0,r,c,d,s);return l._openIdProviderUrl=n,l._redirectUri=a,l._scope=i,s.logInfo("Init completed",l),(async(e,t)=>{try{await fin.System.registerUsage({type:"integration-feature",data:{apiVersion:je,componentName:e}})}catch(r){t.logWarning(`Unable to register usage for feature ${e}: ${r?.message}`)}})(De.OpenIdConnect,s),l}catch(e){let t;throw t=e instanceof R?e:new P(void 0,e),s.logError(t),t}}}const He=async(e,t,r)=>{const o=new C($e),n=Ke(r);let a;try{a=await K(n)}catch(e){const t=new j(`Failed to retrieve OpenID Connect metadata from ${n}`);throw o.logError(t),t}const{introspection_endpoint:i,jwks_uri:s}=a;if(i)try{return await L(o)(e,t,i)}catch(e){}else o?.logWarning("No introspection endpoint found in OpenID Connect metadata");if(!s){const e=new j(`Failed to retrieve JSON Web Key Set (JWKS) from ${s}`);throw o.logError(e),e}o?.logInfo("Validating id token against JWKS endpoint",s);try{const{payload:n}=await async function(e,t,r){var o;const n=await Se(e,t,r);if((null===(o=n.protectedHeader.crit)||void 0===o?void 0:o.includes("b64"))&&!1===n.protectedHeader.b64)throw new X("JWTs MUST NOT use unencoded payload");const a={payload:Ie(n.protectedHeader,n.payload,r),protectedHeader:n.protectedHeader};return"function"==typeof t?{...a,key:n.key}:a}(e,function(e,t){const r=new We(e,t);return async function(e,t){return r.getKey(e,t)}}(new URL(s)),{audience:t,issuer:r});return o?.logInfo("ID token validation successful",n),{valid:!0,...n}}catch(e){if(!(e instanceof F||e instanceof q||e instanceof X||e instanceof te)){const t=new j(void 0,e);throw o.logError(t),t}return o.logWarning(`ID token validation failed: ${e.message}`),{valid:!1}}},Me=["openid","profile","email"],ze=async(e,t,r,o=[],n,a,i)=>{if(e=e?.trim().replace(/\/$/,""),!e)throw new x("OpenID Provider URL must be a non-empty string");if(!t)throw new x("Client Identifier must be a non-empty string");if(!r)throw new x("Redirection URI must be a non-empty string");const s=await Fe(e,t,r,o,n);if(!s)throw new P("Provider not initialized");const c=s.metadata?.scopes_supported;if(!c){const e=new AuthenticationError("OpenID Provider metadata does not define supported scopes");throw s.logger.logError(e),e}const d=Me.filter((e=>!c.includes(e)));if(d.length>0){const e=new AuthenticationError(`OpenID Provider does not support required scopes: ${d.join(", ")}`);throw s.logger.logError(e),e}const l=new Set([...Me,...o]);await s.authorize(r,{display:"popup",scope:[...l].join(" "),...a},i);const{idToken:u}=s;if(!u){const e=new AuthenticationError("No ID token returned");throw s.logger.logError(e),e}const h=function(e){if("string"!=typeof e)throw new X("JWTs must use Compact JWS serialization, JWT must be a string");const{1:t,length:r}=e.split(".");if(5===r)throw new X("Only JWTs using Compact JWS serialization can be decoded");if(3!==r)throw new X("Invalid JWT");if(!t)throw new X("JWTs must contain a payload");let o,n;try{o=xe(t)}catch(e){throw new X("Failed to parse the base64url encoded payload")}try{n=JSON.parse(M.decode(o))}catch(e){throw new X("Failed to parse the decoded payload as JSON")}if(!ae(n))throw new X("Invalid JWT Claims Set");return n}(u);if(!h){const e=new AuthenticationError("Failed to decode ID token");throw s.logger.logError(e),e}const{aud:p,iss:w}=h;return await He(u,Array.isArray(p)?p[0]:p,w),{claims:h,clientId:t,idToken:u,logout:qe(t,u,s),openIdProviderUrl:e,userInfo:s.userInfo}},Ne=(e,t,r,o,n,a)=>async n=>{if(0!==new URL(n).href.toLowerCase().indexOf(r.toLowerCase()))return!1;window.clearInterval(a),window.clearTimeout(t);try{e.removeAllListeners(),e.close(!0)}catch(e){}return o(),!0},Fe=async(e,t,r,o,n)=>{const a={additionalMetadata:n,discoveryEndpoint:Ke(e)};return Le.init(a,void 0,t,$e,e,r,o)},qe=(e,t,r)=>async(o,n)=>{if(!o)throw new x("Logout Redirection URI must be a non-empty string");const{logger:a,metadata:i}=r;a.logInfo("Logout started",e,t,o,n);const{end_session_endpoint:s}=i??{};if(!s){const e=new LogoutError("OpenID Provider metadata does not define end session endpoint");throw a.logError(e),e}const c=`${s}?id_token_hint=${t}&client_id=${e}&post_logout_redirect_uri=${encodeURIComponent(o)}${n?`&logout_hint=${encodeURIComponent(n)}`:""}`;await $(c,Ge(o,a)),await(r?.close()),a.logInfo("Logout completed")},Ge=(e,t)=>r=>new Promise(((o,n)=>{let a;r.addListener("closing",(async()=>{t.logInfo("User closed auth window"),window.clearInterval(a),r.removeAllListeners(),n(new LogoutError("Failed to complete logout process"))}));const i=window.setTimeout((async()=>{try{await r.isShowing()||(t.logInfo("Showing auth window"),await r.show(!0),await r.focus())}catch{t.logWarning("Unable to show auth window")}}),2e3);(async()=>{const{version:s}=await fin.System.getRuntimeInfo();if(parseInt(s.split(".")[0],10)>=30){await Ne(r,i,e,o,n)((await r.getInfo()).url)||await r.addListener("url-changed",(a=>{t.logInfo("Auth window navigated to",a.url),Ne(r,i,e,o,n)(a.url)}))}else a=window.setInterval((()=>(async(e,t,r,o,n,a)=>{let i;try{i=await e.getInfo()}catch(e){return window.clearInterval(t),window.clearTimeout(r),a(new LogoutError("Could not locate auth window")),!1}return Ne(e,r,o,n,a,t)(i.url)})(r,a,i,e,o,n)),500)})()}));var Ve=t.MS,Be=t._7,Xe=t.cX,Ye=t.zL,Qe=t._W,Ze=t.p8,et=t.YR,tt=t.U$,rt=t.U7,ot=t.OF;

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*********************************************************!*\
  !*** ./client/src/modules/auth/openid-connect/index.ts ***!
  \*********************************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   entryPoints: () => (/* binding */ entryPoints)
/* harmony export */ });
/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./auth */ "./client/src/modules/auth/openid-connect/auth.ts");

/**
 * Define the entry points for the module.
 */
const entryPoints = {
    auth: new _auth__WEBPACK_IMPORTED_MODULE_0__.OpenIdConnectProvider()
};

})();

var __webpack_exports__entryPoints = __webpack_exports__.entryPoints;
export { __webpack_exports__entryPoints as entryPoints };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,