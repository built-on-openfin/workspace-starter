var e={d:(t,i)=>{for(var r in i)e.o(i,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:i[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{k:()=>i});const i={platformOverride:new class{async initialize(e,t,i){this._definition=e,this._logger=t("SnapWindowSelectionOverride"),this._helpers=i,this._logger.info("Initializing")}async closedown(){this._logger?.info("Closedown")}async getConstructorOverride(e){return t=>{const i=this._definition?.data??{},r=this._logger,n=this._helpers;return class extends t{constructor(){super(),r?.info(`Options passed: ${JSON.stringify(e)} and module data: ${JSON.stringify(i)} with session id: ${n?.sessionId}`)}async createWindow(e,t){const r=await super.createWindow(e,t),s=await(n?.getSnapClient()),a=await(s?.isEnabled()),o=await(s?.getSnapServer());if(!a||!o)return r;let l=!0;if(Array.isArray(i?.excludeUrls)&&i.excludeUrls.length>0&&e.url){const t=e.url;l=!i.excludeUrls.some((e=>new RegExp(e.replace(/\*/g,".*")).test(t)))}if(l){const e=await r.getNativeId();await o.registerWindow(r.identity.name,e)}return r}}}}}};var r=t.k;export{r as entryPoints};
//# sourceMappingURL=snap-window-selection-override.bundle.js.map