/******/ var __webpack_modules__ = ({

/***/ "../../node_modules/@openfin/microsoft365/openfin.ms365.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/@openfin/microsoft365/openfin.ms365.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApiError: () => (/* binding */ o),
/* harmony export */   ApiRequestError: () => (/* binding */ i),
/* harmony export */   AuthTokenExpiredError: () => (/* binding */ a),
/* harmony export */   AuthorizationError: () => (/* binding */ s),
/* harmony export */   InitializationError: () => (/* binding */ u),
/* harmony export */   InteropError: () => (/* binding */ l),
/* harmony export */   ParameterError: () => (/* binding */ c),
/* harmony export */   TeamsConnection: () => (/* binding */ f),
/* harmony export */   connect: () => (/* binding */ d),
/* harmony export */   disableLogging: () => (/* binding */ h),
/* harmony export */   enableLogging: () => (/* binding */ p)
/* harmony export */ });
/*! For license information please see openfin.ms365.js.LICENSE.txt */
var t={876:t=>{const{AbortController:e,AbortSignal:n}="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0;t.exports=e,t.exports.AbortSignal=n,t.exports.default=e},60:(t,e)=>{e.byteLength=function(t){var e=s(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,i=s(t),a=i[0],u=i[1],l=new o(function(t,e,n){return 3*(e+n)/4-n}(0,a,u)),c=0,f=u>0?a-4:a;for(n=0;n<f;n+=4)e=r[t.charCodeAt(n)]<<18|r[t.charCodeAt(n+1)]<<12|r[t.charCodeAt(n+2)]<<6|r[t.charCodeAt(n+3)],l[c++]=e>>16&255,l[c++]=e>>8&255,l[c++]=255&e;2===u&&(e=r[t.charCodeAt(n)]<<2|r[t.charCodeAt(n+1)]>>4,l[c++]=255&e);1===u&&(e=r[t.charCodeAt(n)]<<10|r[t.charCodeAt(n+1)]<<4|r[t.charCodeAt(n+2)]>>2,l[c++]=e>>8&255,l[c++]=255&e);return l},e.fromByteArray=function(t){for(var e,r=t.length,o=r%3,i=[],a=16383,s=0,l=r-o;s<l;s+=a)i.push(u(t,s,s+a>l?l:s+a));1===o?(e=t[r-1],i.push(n[e>>2]+n[e<<4&63]+"==")):2===o&&(e=(t[r-2]<<8)+t[r-1],i.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return i.join("")};for(var n=[],r=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0;a<64;++a)n[a]=i[a],r[i.charCodeAt(a)]=a;function s(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function u(t,e,r){for(var o,i,a=[],s=e;s<r;s+=3)o=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),a.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return a.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},485:(t,e,n)=>{const r=n(60),o=n(215),i="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50;const a=2147483647;function s(t){if(t>a)throw new RangeError('The value "'+t+'" is invalid for option "size"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,u.prototype),e}function u(t,e,n){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return f(t)}return l(t,e,n)}function l(t,e,n){if("string"==typeof t)return function(t,e){"string"==typeof e&&""!==e||(e="utf8");if(!u.isEncoding(e))throw new TypeError("Unknown encoding: "+e);const n=0|g(t,e);let r=s(n);const o=r.write(t,e);o!==n&&(r=r.slice(0,o));return r}(t,e);if(ArrayBuffer.isView(t))return function(t){if(Y(t,Uint8Array)){const e=new Uint8Array(t);return h(e.buffer,e.byteOffset,e.byteLength)}return d(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(Y(t,ArrayBuffer)||t&&Y(t.buffer,ArrayBuffer))return h(t,e,n);if("undefined"!=typeof SharedArrayBuffer&&(Y(t,SharedArrayBuffer)||t&&Y(t.buffer,SharedArrayBuffer)))return h(t,e,n);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=t.valueOf&&t.valueOf();if(null!=r&&r!==t)return u.from(r,e,n);const o=function(t){if(u.isBuffer(t)){const e=0|p(t.length),n=s(e);return 0===n.length||t.copy(n,0,0,e),n}if(void 0!==t.length)return"number"!=typeof t.length||K(t.length)?s(0):d(t);if("Buffer"===t.type&&Array.isArray(t.data))return d(t.data)}(t);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return u.from(t[Symbol.toPrimitive]("string"),e,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function f(t){return c(t),s(t<0?0:0|p(t))}function d(t){const e=t.length<0?0:0|p(t.length),n=s(e);for(let r=0;r<e;r+=1)n[r]=255&t[r];return n}function h(t,e,n){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(n||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===e&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,e):new Uint8Array(t,e,n),Object.setPrototypeOf(r,u.prototype),r}function p(t){if(t>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|t}function g(t,e){if(u.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||Y(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const n=t.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;let o=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return V(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return G(t).length;default:if(o)return r?-1:V(t).length;e=(""+e).toLowerCase(),o=!0}}function y(t,e,n){let r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return B(this,e,n);case"utf8":case"utf-8":return T(this,e,n);case"ascii":return x(this,e,n);case"latin1":case"binary":return C(this,e,n);case"base64":return I(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function m(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function v(t,e,n,r,o){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),K(n=+n)&&(n=o?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(o)return-1;n=t.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:b(t,e,n,r,o);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):b(t,[e],n,r,o);throw new TypeError("val must be string, number or Buffer")}function b(t,e,n,r,o){let i,a=1,s=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,s/=2,u/=2,n/=2}function l(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(o){let r=-1;for(i=n;i<s;i++)if(l(t,i)===l(e,-1===r?0:i-r)){if(-1===r&&(r=i),i-r+1===u)return r*a}else-1!==r&&(i-=i-r),r=-1}else for(n+u>s&&(n=s-u),i=n;i>=0;i--){let n=!0;for(let r=0;r<u;r++)if(l(t,i+r)!==l(e,r)){n=!1;break}if(n)return i}return-1}function w(t,e,n,r){n=Number(n)||0;const o=t.length-n;r?(r=Number(r))>o&&(r=o):r=o;const i=e.length;let a;for(r>i/2&&(r=i/2),a=0;a<r;++a){const r=parseInt(e.substr(2*a,2),16);if(K(r))return a;t[n+a]=r}return a}function _(t,e,n,r){return J(V(e,t.length-n),t,n,r)}function E(t,e,n,r){return J(function(t){const e=[];for(let n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function S(t,e,n,r){return J(G(e),t,n,r)}function A(t,e,n,r){return J(function(t,e){let n,r,o;const i=[];for(let a=0;a<t.length&&!((e-=2)<0);++a)n=t.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(e,t.length-n),t,n,r)}function I(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function T(t,e,n){n=Math.min(t.length,n);const r=[];let o=e;for(;o<n;){const e=t[o];let i=null,a=e>239?4:e>223?3:e>191?2:1;if(o+a<=n){let n,r,s,u;switch(a){case 1:e<128&&(i=e);break;case 2:n=t[o+1],128==(192&n)&&(u=(31&e)<<6|63&n,u>127&&(i=u));break;case 3:n=t[o+1],r=t[o+2],128==(192&n)&&128==(192&r)&&(u=(15&e)<<12|(63&n)<<6|63&r,u>2047&&(u<55296||u>57343)&&(i=u));break;case 4:n=t[o+1],r=t[o+2],s=t[o+3],128==(192&n)&&128==(192&r)&&128==(192&s)&&(u=(15&e)<<18|(63&n)<<12|(63&r)<<6|63&s,u>65535&&u<1114112&&(i=u))}}null===i?(i=65533,a=1):i>65535&&(i-=65536,r.push(i>>>10&1023|55296),i=56320|1023&i),r.push(i),o+=a}return function(t){const e=t.length;if(e<=R)return String.fromCharCode.apply(String,t);let n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=R));return n}(r)}e.kMaxLength=a,u.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),u.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(t,e,n){return l(t,e,n)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(t,e,n){return function(t,e,n){return c(t),t<=0?s(t):void 0!==e?"string"==typeof n?s(t).fill(e,n):s(t).fill(e):s(t)}(t,e,n)},u.allocUnsafe=function(t){return f(t)},u.allocUnsafeSlow=function(t){return f(t)},u.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==u.prototype},u.compare=function(t,e){if(Y(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),Y(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let n=t.length,r=e.length;for(let o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);let n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;const r=u.allocUnsafe(e);let o=0;for(n=0;n<t.length;++n){let e=t[n];if(Y(e,Uint8Array))o+e.length>r.length?(u.isBuffer(e)||(e=u.from(e)),e.copy(r,o)):Uint8Array.prototype.set.call(r,e,o);else{if(!u.isBuffer(e))throw new TypeError('"list" argument must be an Array of Buffers');e.copy(r,o)}o+=e.length}return r},u.byteLength=g,u.prototype._isBuffer=!0,u.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let e=0;e<t;e+=2)m(this,e,e+1);return this},u.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},u.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},u.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?T(this,0,t):y.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){let t="";const n=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,n).replace(/(.{2})/g,"$1 ").trim(),this.length>n&&(t+=" ... "),"<Buffer "+t+">"},i&&(u.prototype[i]=u.prototype.inspect),u.prototype.compare=function(t,e,n,r,o){if(Y(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),e<0||n>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&e>=n)return 0;if(r>=o)return-1;if(e>=n)return 1;if(this===t)return 0;let i=(o>>>=0)-(r>>>=0),a=(n>>>=0)-(e>>>=0);const s=Math.min(i,a),l=this.slice(r,o),c=t.slice(e,n);for(let t=0;t<s;++t)if(l[t]!==c[t]){i=l[t],a=c[t];break}return i<a?-1:a<i?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return v(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return v(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}const o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let i=!1;for(;;)switch(r){case"hex":return w(this,t,e,n);case"utf8":case"utf-8":return _(this,t,e,n);case"ascii":case"latin1":case"binary":return E(this,t,e,n);case"base64":return S(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const R=4096;function x(t,e,n){let r="";n=Math.min(t.length,n);for(let o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function C(t,e,n){let r="";n=Math.min(t.length,n);for(let o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function B(t,e,n){const r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);let o="";for(let r=e;r<n;++r)o+=X[t[r]];return o}function k(t,e,n){const r=t.slice(e,n);let o="";for(let t=0;t<r.length-1;t+=2)o+=String.fromCharCode(r[t]+256*r[t+1]);return o}function L(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function O(t,e,n,r,o,i){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function U(t,e,n,r,o){F(e,r,o,t,n,7);let i=Number(e&BigInt(4294967295));t[n++]=i,i>>=8,t[n++]=i,i>>=8,t[n++]=i,i>>=8,t[n++]=i;let a=Number(e>>BigInt(32)&BigInt(4294967295));return t[n++]=a,a>>=8,t[n++]=a,a>>=8,t[n++]=a,a>>=8,t[n++]=a,n}function j(t,e,n,r,o){F(e,r,o,t,n,7);let i=Number(e&BigInt(4294967295));t[n+7]=i,i>>=8,t[n+6]=i,i>>=8,t[n+5]=i,i>>=8,t[n+4]=i;let a=Number(e>>BigInt(32)&BigInt(4294967295));return t[n+3]=a,a>>=8,t[n+2]=a,a>>=8,t[n+1]=a,a>>=8,t[n]=a,n+8}function N(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function M(t,e,n,r,i){return e=+e,n>>>=0,i||N(t,0,n,4),o.write(t,e,n,r,23,4),n+4}function P(t,e,n,r,i){return e=+e,n>>>=0,i||N(t,0,n,8),o.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){const n=this.length;(t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t);const r=this.subarray(t,e);return Object.setPrototypeOf(r,u.prototype),r},u.prototype.readUintLE=u.prototype.readUIntLE=function(t,e,n){t>>>=0,e>>>=0,n||L(t,e,this.length);let r=this[t],o=1,i=0;for(;++i<e&&(o*=256);)r+=this[t+i]*o;return r},u.prototype.readUintBE=u.prototype.readUIntBE=function(t,e,n){t>>>=0,e>>>=0,n||L(t,e,this.length);let r=this[t+--e],o=1;for(;e>0&&(o*=256);)r+=this[t+--e]*o;return r},u.prototype.readUint8=u.prototype.readUInt8=function(t,e){return t>>>=0,e||L(t,1,this.length),this[t]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(t,e){return t>>>=0,e||L(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(t,e){return t>>>=0,e||L(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(t,e){return t>>>=0,e||L(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(t,e){return t>>>=0,e||L(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readBigUInt64LE=Z((function(t){z(t>>>=0,"offset");const e=this[t],n=this[t+7];void 0!==e&&void 0!==n||q(t,this.length-8);const r=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,o=this[++t]+256*this[++t]+65536*this[++t]+n*2**24;return BigInt(r)+(BigInt(o)<<BigInt(32))})),u.prototype.readBigUInt64BE=Z((function(t){z(t>>>=0,"offset");const e=this[t],n=this[t+7];void 0!==e&&void 0!==n||q(t,this.length-8);const r=e*2**24+65536*this[++t]+256*this[++t]+this[++t],o=this[++t]*2**24+65536*this[++t]+256*this[++t]+n;return(BigInt(r)<<BigInt(32))+BigInt(o)})),u.prototype.readIntLE=function(t,e,n){t>>>=0,e>>>=0,n||L(t,e,this.length);let r=this[t],o=1,i=0;for(;++i<e&&(o*=256);)r+=this[t+i]*o;return o*=128,r>=o&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t>>>=0,e>>>=0,n||L(t,e,this.length);let r=e,o=1,i=this[t+--r];for(;r>0&&(o*=256);)i+=this[t+--r]*o;return o*=128,i>=o&&(i-=Math.pow(2,8*e)),i},u.prototype.readInt8=function(t,e){return t>>>=0,e||L(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){t>>>=0,e||L(t,2,this.length);const n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){t>>>=0,e||L(t,2,this.length);const n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return t>>>=0,e||L(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return t>>>=0,e||L(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readBigInt64LE=Z((function(t){z(t>>>=0,"offset");const e=this[t],n=this[t+7];void 0!==e&&void 0!==n||q(t,this.length-8);const r=this[t+4]+256*this[t+5]+65536*this[t+6]+(n<<24);return(BigInt(r)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),u.prototype.readBigInt64BE=Z((function(t){z(t>>>=0,"offset");const e=this[t],n=this[t+7];void 0!==e&&void 0!==n||q(t,this.length-8);const r=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(r)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+n)})),u.prototype.readFloatLE=function(t,e){return t>>>=0,e||L(t,4,this.length),o.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return t>>>=0,e||L(t,4,this.length),o.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return t>>>=0,e||L(t,8,this.length),o.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return t>>>=0,e||L(t,8,this.length),o.read(this,t,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(t,e,n,r){if(t=+t,e>>>=0,n>>>=0,!r){O(this,t,e,n,Math.pow(2,8*n)-1,0)}let o=1,i=0;for(this[e]=255&t;++i<n&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(t,e,n,r){if(t=+t,e>>>=0,n>>>=0,!r){O(this,t,e,n,Math.pow(2,8*n)-1,0)}let o=n-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUint8=u.prototype.writeUInt8=function(t,e,n){return t=+t,e>>>=0,n||O(this,t,e,1,255,0),this[e]=255&t,e+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e>>>=0,n||O(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e>>>=0,n||O(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e>>>=0,n||O(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e>>>=0,n||O(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeBigUInt64LE=Z((function(t,e=0){return U(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeBigUInt64BE=Z((function(t,e=0){return j(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e>>>=0,!r){const r=Math.pow(2,8*n-1);O(this,t,e,n,r-1,-r)}let o=0,i=1,a=0;for(this[e]=255&t;++o<n&&(i*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/i>>0)-a&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e>>>=0,!r){const r=Math.pow(2,8*n-1);O(this,t,e,n,r-1,-r)}let o=n-1,i=1,a=0;for(this[e+o]=255&t;--o>=0&&(i*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/i>>0)-a&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e>>>=0,n||O(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e>>>=0,n||O(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e>>>=0,n||O(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e>>>=0,n||O(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e>>>=0,n||O(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},u.prototype.writeBigInt64LE=Z((function(t,e=0){return U(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeBigInt64BE=Z((function(t,e=0){return j(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeFloatLE=function(t,e,n){return M(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return M(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return P(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return P(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(!u.isBuffer(t))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);const o=r-n;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,n,r):Uint8Array.prototype.set.call(t,this.subarray(n,r),e),o},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===t.length){const e=t.charCodeAt(0);("utf8"===r&&e<128||"latin1"===r)&&(t=e)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;let o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{const i=u.isBuffer(t)?t:u.from(t,r),a=i.length;if(0===a)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(o=0;o<n-e;++o)this[o+e]=i[o%a]}return this};const W={};function $(t,e,n){W[t]=class NodeError extends n{constructor(){super(),Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function D(t){let e="",n=t.length;const r="-"===t[0]?1:0;for(;n>=r+4;n-=3)e=`_${t.slice(n-3,n)}${e}`;return`${t.slice(0,n)}${e}`}function F(t,e,n,r,o,i){if(t>n||t<e){const r="bigint"==typeof e?"n":"";let o;throw o=i>3?0===e||e===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(i+1)}${r}`:`>= -(2${r} ** ${8*(i+1)-1}${r}) and < 2 ** ${8*(i+1)-1}${r}`:`>= ${e}${r} and <= ${n}${r}`,new W.ERR_OUT_OF_RANGE("value",o,t)}!function(t,e,n){z(e,"offset"),void 0!==t[e]&&void 0!==t[e+n]||q(e,t.length-(n+1))}(r,o,i)}function z(t,e){if("number"!=typeof t)throw new W.ERR_INVALID_ARG_TYPE(e,"number",t)}function q(t,e,n){if(Math.floor(t)!==t)throw z(t,n),new W.ERR_OUT_OF_RANGE(n||"offset","an integer",t);if(e<0)throw new W.ERR_BUFFER_OUT_OF_BOUNDS;throw new W.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${e}`,t)}$("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),$("ERR_INVALID_ARG_TYPE",(function(t,e){return`The "${t}" argument must be of type number. Received type ${typeof e}`}),TypeError),$("ERR_OUT_OF_RANGE",(function(t,e,n){let r=`The value of "${t}" is out of range.`,o=n;return Number.isInteger(n)&&Math.abs(n)>2**32?o=D(String(n)):"bigint"==typeof n&&(o=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(o=D(o)),o+="n"),r+=` It must be ${e}. Received ${o}`,r}),RangeError);const H=/[^+/0-9A-Za-z-_]/g;function V(t,e){let n;e=e||1/0;const r=t.length;let o=null;const i=[];for(let a=0;a<r;++a){if(n=t.charCodeAt(a),n>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function G(t){return r.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(H,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function J(t,e,n,r){let o;for(o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}function Y(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function K(t){return t!=t}const X=function(){const t="0123456789abcdef",e=new Array(256);for(let n=0;n<16;++n){const r=16*n;for(let o=0;o<16;++o)e[r+o]=t[n]+t[o]}return e}();function Z(t){return"undefined"==typeof BigInt?Q:t}function Q(){throw new Error("BigInt not supported")}},465:t=>{var e,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};e=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var o=Number.isNaN||function(t){return t!=t};function i(){i.init.call(this)}t.exports=i,t.exports.once=function(t,e){return new Promise((function(n,r){function o(n){t.removeListener(e,i),r(n)}function i(){"function"==typeof t.removeListener&&t.removeListener("error",o),n([].slice.call(arguments))}g(t,e,i,{once:!0}),"error"!==e&&function(t,e,n){"function"==typeof t.on&&g(t,"error",e,n)}(t,o,{once:!0})}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var a=10;function s(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function u(t){return void 0===t._maxListeners?i.defaultMaxListeners:t._maxListeners}function l(t,e,n,r){var o,i,a,l;if(s(n),void 0===(i=t._events)?(i=t._events=Object.create(null),t._eventsCount=0):(void 0!==i.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),i=t._events),a=i[e]),void 0===a)a=i[e]=n,++t._eventsCount;else if("function"==typeof a?a=i[e]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(o=u(t))>0&&a.length>o&&!a.warned){a.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=t,c.type=e,c.count=a.length,l=c,console&&console.warn&&console.warn(l)}return t}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function f(t,e,n){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},o=c.bind(r);return o.listener=n,r.wrapFn=o,o}function d(t,e,n){var r=t._events;if(void 0===r)return[];var o=r[e];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(o):p(o,o.length)}function h(t){var e=this._events;if(void 0!==e){var n=e[t];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function p(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t[r];return n}function g(t,e,n,r){if("function"==typeof t.on)r.once?t.once(e,n):t.on(e,n);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function o(i){r.once&&t.removeEventListener(e,o),n(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(t){if("number"!=typeof t||t<0||o(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");a=t}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||o(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},i.prototype.getMaxListeners=function(){return u(this)},i.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var o="error"===t,i=this._events;if(void 0!==i)o=o&&void 0===i.error;else if(!o)return!1;if(o){var a;if(e.length>0&&(a=e[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var u=i[t];if(void 0===u)return!1;if("function"==typeof u)r(u,this,e);else{var l=u.length,c=p(u,l);for(n=0;n<l;++n)r(c[n],this,e)}return!0},i.prototype.addListener=function(t,e){return l(this,t,e,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(t,e){return l(this,t,e,!0)},i.prototype.once=function(t,e){return s(e),this.on(t,f(this,t,e)),this},i.prototype.prependOnceListener=function(t,e){return s(e),this.prependListener(t,f(this,t,e)),this},i.prototype.removeListener=function(t,e){var n,r,o,i,a;if(s(e),void 0===(r=this._events))return this;if(void 0===(n=r[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(o=-1,i=n.length-1;i>=0;i--)if(n[i]===e||n[i].listener===e){a=n[i].listener,o=i;break}if(o<0)return this;0===o?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,o),1===n.length&&(r[t]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",t,a||e)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(t){var e,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var o,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(o=i[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;r>=0;r--)this.removeListener(t,e[r]);return this},i.prototype.listeners=function(t){return d(this,t,!0)},i.prototype.rawListeners=function(t){return d(this,t,!1)},i.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):h.call(t,e)},i.prototype.listenerCount=h,i.prototype.eventNames=function(){return this._eventsCount>0?e(this._events):[]}},215:(t,e)=>{e.read=function(t,e,n,r,o){var i,a,s=8*o-r-1,u=(1<<s)-1,l=u>>1,c=-7,f=n?o-1:0,d=n?-1:1,h=t[e+f];for(f+=d,i=h&(1<<-c)-1,h>>=-c,c+=s;c>0;i=256*i+t[e+f],f+=d,c-=8);for(a=i&(1<<-c)-1,i>>=-c,c+=r;c>0;a=256*a+t[e+f],f+=d,c-=8);if(0===i)i=1-l;else{if(i===u)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,r),i-=l}return(h?-1:1)*a*Math.pow(2,i-r)},e.write=function(t,e,n,r,o,i){var a,s,u,l=8*i-o-1,c=(1<<l)-1,f=c>>1,d=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:i-1,p=r?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=c):(a=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-a))<1&&(a--,u*=2),(e+=a+f>=1?d/u:d*Math.pow(2,1-f))*u>=2&&(a++,u/=2),a+f>=c?(s=0,a=c):a+f>=1?(s=(e*u-1)*Math.pow(2,o),a+=f):(s=e*Math.pow(2,f-1)*Math.pow(2,o),a=0));o>=8;t[n+h]=255&s,h+=p,s/=256,o-=8);for(a=a<<o|s,l+=o;l>0;t[n+h]=255&a,h+=p,a/=256,l-=8);t[n+h-p]|=128*g}},951:function(t,e,n){var r;t=n.nmd(t),function(){var o,i="Expected a function",a="__lodash_hash_undefined__",s="__lodash_placeholder__",u=16,l=32,c=64,f=128,d=256,h=1/0,p=9007199254740991,g=NaN,y=4294967295,m=[["ary",f],["bind",1],["bindKey",2],["curry",8],["curryRight",u],["flip",512],["partial",l],["partialRight",c],["rearg",d]],v="[object Arguments]",b="[object Array]",w="[object Boolean]",_="[object Date]",E="[object Error]",S="[object Function]",A="[object GeneratorFunction]",I="[object Map]",T="[object Number]",R="[object Object]",x="[object Promise]",C="[object RegExp]",B="[object Set]",k="[object String]",L="[object Symbol]",O="[object WeakMap]",U="[object ArrayBuffer]",j="[object DataView]",N="[object Float32Array]",M="[object Float64Array]",P="[object Int8Array]",W="[object Int16Array]",$="[object Int32Array]",D="[object Uint8Array]",F="[object Uint8ClampedArray]",z="[object Uint16Array]",q="[object Uint32Array]",H=/\b__p \+= '';/g,V=/\b(__p \+=) '' \+/g,G=/(__e\(.*?\)|\b__t\)) \+\n'';/g,J=/&(?:amp|lt|gt|quot|#39);/g,Y=/[&<>"']/g,K=RegExp(J.source),X=RegExp(Y.source),Z=/<%-([\s\S]+?)%>/g,Q=/<%([\s\S]+?)%>/g,tt=/<%=([\s\S]+?)%>/g,et=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,nt=/^\w*$/,rt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ot=/[\\^$.*+?()[\]{}|]/g,it=RegExp(ot.source),at=/^\s+/,st=/\s/,ut=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,lt=/\{\n\/\* \[wrapped with (.+)\] \*/,ct=/,? & /,ft=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,dt=/[()=,{}\[\]\/\s]/,ht=/\\(\\)?/g,pt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,gt=/\w*$/,yt=/^[-+]0x[0-9a-f]+$/i,mt=/^0b[01]+$/i,vt=/^\[object .+?Constructor\]$/,bt=/^0o[0-7]+$/i,wt=/^(?:0|[1-9]\d*)$/,_t=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Et=/($^)/,St=/['\n\r\u2028\u2029\\]/g,At="\\ud800-\\udfff",It="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Tt="\\u2700-\\u27bf",Rt="a-z\\xdf-\\xf6\\xf8-\\xff",xt="A-Z\\xc0-\\xd6\\xd8-\\xde",Ct="\\ufe0e\\ufe0f",Bt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",kt="['’]",Lt="["+At+"]",Ot="["+Bt+"]",Ut="["+It+"]",jt="\\d+",Nt="["+Tt+"]",Mt="["+Rt+"]",Pt="[^"+At+Bt+jt+Tt+Rt+xt+"]",Wt="\\ud83c[\\udffb-\\udfff]",$t="[^"+At+"]",Dt="(?:\\ud83c[\\udde6-\\uddff]){2}",Ft="[\\ud800-\\udbff][\\udc00-\\udfff]",zt="["+xt+"]",qt="\\u200d",Ht="(?:"+Mt+"|"+Pt+")",Vt="(?:"+zt+"|"+Pt+")",Gt="(?:['’](?:d|ll|m|re|s|t|ve))?",Jt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Yt="(?:"+Ut+"|"+Wt+")"+"?",Kt="["+Ct+"]?",Xt=Kt+Yt+("(?:"+qt+"(?:"+[$t,Dt,Ft].join("|")+")"+Kt+Yt+")*"),Zt="(?:"+[Nt,Dt,Ft].join("|")+")"+Xt,Qt="(?:"+[$t+Ut+"?",Ut,Dt,Ft,Lt].join("|")+")",te=RegExp(kt,"g"),ee=RegExp(Ut,"g"),ne=RegExp(Wt+"(?="+Wt+")|"+Qt+Xt,"g"),re=RegExp([zt+"?"+Mt+"+"+Gt+"(?="+[Ot,zt,"$"].join("|")+")",Vt+"+"+Jt+"(?="+[Ot,zt+Ht,"$"].join("|")+")",zt+"?"+Ht+"+"+Gt,zt+"+"+Jt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",jt,Zt].join("|"),"g"),oe=RegExp("["+qt+At+It+Ct+"]"),ie=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,ae=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],se=-1,ue={};ue[N]=ue[M]=ue[P]=ue[W]=ue[$]=ue[D]=ue[F]=ue[z]=ue[q]=!0,ue[v]=ue[b]=ue[U]=ue[w]=ue[j]=ue[_]=ue[E]=ue[S]=ue[I]=ue[T]=ue[R]=ue[C]=ue[B]=ue[k]=ue[O]=!1;var le={};le[v]=le[b]=le[U]=le[j]=le[w]=le[_]=le[N]=le[M]=le[P]=le[W]=le[$]=le[I]=le[T]=le[R]=le[C]=le[B]=le[k]=le[L]=le[D]=le[F]=le[z]=le[q]=!0,le[E]=le[S]=le[O]=!1;var ce={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},fe=parseFloat,de=parseInt,he="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,pe="object"==typeof self&&self&&self.Object===Object&&self,ge=he||pe||Function("return this")(),ye=e&&!e.nodeType&&e,me=ye&&t&&!t.nodeType&&t,ve=me&&me.exports===ye,be=ve&&he.process,we=function(){try{var t=me&&me.require&&me.require("util").types;return t||be&&be.binding&&be.binding("util")}catch(t){}}(),_e=we&&we.isArrayBuffer,Ee=we&&we.isDate,Se=we&&we.isMap,Ae=we&&we.isRegExp,Ie=we&&we.isSet,Te=we&&we.isTypedArray;function Re(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function xe(t,e,n,r){for(var o=-1,i=null==t?0:t.length;++o<i;){var a=t[o];e(r,a,n(a),t)}return r}function Ce(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function Be(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function ke(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Le(t,e){for(var n=-1,r=null==t?0:t.length,o=0,i=[];++n<r;){var a=t[n];e(a,n,t)&&(i[o++]=a)}return i}function Oe(t,e){return!!(null==t?0:t.length)&&ze(t,e,0)>-1}function Ue(t,e,n){for(var r=-1,o=null==t?0:t.length;++r<o;)if(n(e,t[r]))return!0;return!1}function je(t,e){for(var n=-1,r=null==t?0:t.length,o=Array(r);++n<r;)o[n]=e(t[n],n,t);return o}function Ne(t,e){for(var n=-1,r=e.length,o=t.length;++n<r;)t[o+n]=e[n];return t}function Me(t,e,n,r){var o=-1,i=null==t?0:t.length;for(r&&i&&(n=t[++o]);++o<i;)n=e(n,t[o],o,t);return n}function Pe(t,e,n,r){var o=null==t?0:t.length;for(r&&o&&(n=t[--o]);o--;)n=e(n,t[o],o,t);return n}function We(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var $e=Ge("length");function De(t,e,n){var r;return n(t,(function(t,n,o){if(e(t,n,o))return r=n,!1})),r}function Fe(t,e,n,r){for(var o=t.length,i=n+(r?1:-1);r?i--:++i<o;)if(e(t[i],i,t))return i;return-1}function ze(t,e,n){return e==e?function(t,e,n){var r=n-1,o=t.length;for(;++r<o;)if(t[r]===e)return r;return-1}(t,e,n):Fe(t,He,n)}function qe(t,e,n,r){for(var o=n-1,i=t.length;++o<i;)if(r(t[o],e))return o;return-1}function He(t){return t!=t}function Ve(t,e){var n=null==t?0:t.length;return n?Ke(t,e)/n:g}function Ge(t){return function(e){return null==e?o:e[t]}}function Je(t){return function(e){return null==t?o:t[e]}}function Ye(t,e,n,r,o){return o(t,(function(t,o,i){n=r?(r=!1,t):e(n,t,o,i)})),n}function Ke(t,e){for(var n,r=-1,i=t.length;++r<i;){var a=e(t[r]);a!==o&&(n=n===o?a:n+a)}return n}function Xe(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function Ze(t){return t?t.slice(0,yn(t)+1).replace(at,""):t}function Qe(t){return function(e){return t(e)}}function tn(t,e){return je(e,(function(e){return t[e]}))}function en(t,e){return t.has(e)}function nn(t,e){for(var n=-1,r=t.length;++n<r&&ze(e,t[n],0)>-1;);return n}function rn(t,e){for(var n=t.length;n--&&ze(e,t[n],0)>-1;);return n}var on=Je({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),an=Je({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function sn(t){return"\\"+ce[t]}function un(t){return oe.test(t)}function ln(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}function cn(t,e){return function(n){return t(e(n))}}function fn(t,e){for(var n=-1,r=t.length,o=0,i=[];++n<r;){var a=t[n];a!==e&&a!==s||(t[n]=s,i[o++]=n)}return i}function dn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function hn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}function pn(t){return un(t)?function(t){var e=ne.lastIndex=0;for(;ne.test(t);)++e;return e}(t):$e(t)}function gn(t){return un(t)?function(t){return t.match(ne)||[]}(t):function(t){return t.split("")}(t)}function yn(t){for(var e=t.length;e--&&st.test(t.charAt(e)););return e}var mn=Je({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var vn=function t(e){var n,r=(e=null==e?ge:vn.defaults(ge.Object(),e,vn.pick(ge,ae))).Array,st=e.Date,At=e.Error,It=e.Function,Tt=e.Math,Rt=e.Object,xt=e.RegExp,Ct=e.String,Bt=e.TypeError,kt=r.prototype,Lt=It.prototype,Ot=Rt.prototype,Ut=e["__core-js_shared__"],jt=Lt.toString,Nt=Ot.hasOwnProperty,Mt=0,Pt=(n=/[^.]+$/.exec(Ut&&Ut.keys&&Ut.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Wt=Ot.toString,$t=jt.call(Rt),Dt=ge._,Ft=xt("^"+jt.call(Nt).replace(ot,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),zt=ve?e.Buffer:o,qt=e.Symbol,Ht=e.Uint8Array,Vt=zt?zt.allocUnsafe:o,Gt=cn(Rt.getPrototypeOf,Rt),Jt=Rt.create,Yt=Ot.propertyIsEnumerable,Kt=kt.splice,Xt=qt?qt.isConcatSpreadable:o,Zt=qt?qt.iterator:o,Qt=qt?qt.toStringTag:o,ne=function(){try{var t=hi(Rt,"defineProperty");return t({},"",{}),t}catch(t){}}(),oe=e.clearTimeout!==ge.clearTimeout&&e.clearTimeout,ce=st&&st.now!==ge.Date.now&&st.now,he=e.setTimeout!==ge.setTimeout&&e.setTimeout,pe=Tt.ceil,ye=Tt.floor,me=Rt.getOwnPropertySymbols,be=zt?zt.isBuffer:o,we=e.isFinite,$e=kt.join,Je=cn(Rt.keys,Rt),bn=Tt.max,wn=Tt.min,_n=st.now,En=e.parseInt,Sn=Tt.random,An=kt.reverse,In=hi(e,"DataView"),Tn=hi(e,"Map"),Rn=hi(e,"Promise"),xn=hi(e,"Set"),Cn=hi(e,"WeakMap"),Bn=hi(Rt,"create"),kn=Cn&&new Cn,Ln={},On=Wi(In),Un=Wi(Tn),jn=Wi(Rn),Nn=Wi(xn),Mn=Wi(Cn),Pn=qt?qt.prototype:o,Wn=Pn?Pn.valueOf:o,$n=Pn?Pn.toString:o;function Dn(t){if(ns(t)&&!Ha(t)&&!(t instanceof Hn)){if(t instanceof qn)return t;if(Nt.call(t,"__wrapped__"))return $i(t)}return new qn(t)}var Fn=function(){function t(){}return function(e){if(!es(e))return{};if(Jt)return Jt(e);t.prototype=e;var n=new t;return t.prototype=o,n}}();function zn(){}function qn(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=o}function Hn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=y,this.__views__=[]}function Vn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Gn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Jn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Yn(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new Jn;++e<n;)this.add(t[e])}function Kn(t){var e=this.__data__=new Gn(t);this.size=e.size}function Xn(t,e){var n=Ha(t),r=!n&&qa(t),o=!n&&!r&&Ya(t),i=!n&&!r&&!o&&cs(t),a=n||r||o||i,s=a?Xe(t.length,Ct):[],u=s.length;for(var l in t)!e&&!Nt.call(t,l)||a&&("length"==l||o&&("offset"==l||"parent"==l)||i&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||wi(l,u))||s.push(l);return s}function Zn(t){var e=t.length;return e?t[Yr(0,e-1)]:o}function Qn(t,e){return Ni(ko(t),ur(e,0,t.length))}function tr(t){return Ni(ko(t))}function er(t,e,n){(n!==o&&!Da(t[e],n)||n===o&&!(e in t))&&ar(t,e,n)}function nr(t,e,n){var r=t[e];Nt.call(t,e)&&Da(r,n)&&(n!==o||e in t)||ar(t,e,n)}function rr(t,e){for(var n=t.length;n--;)if(Da(t[n][0],e))return n;return-1}function or(t,e,n,r){return hr(t,(function(t,o,i){e(r,t,n(t),i)})),r}function ir(t,e){return t&&Lo(e,Ls(e),t)}function ar(t,e,n){"__proto__"==e&&ne?ne(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function sr(t,e){for(var n=-1,i=e.length,a=r(i),s=null==t;++n<i;)a[n]=s?o:Rs(t,e[n]);return a}function ur(t,e,n){return t==t&&(n!==o&&(t=t<=n?t:n),e!==o&&(t=t>=e?t:e)),t}function lr(t,e,n,r,i,a){var s,u=1&e,l=2&e,c=4&e;if(n&&(s=i?n(t,r,i,a):n(t)),s!==o)return s;if(!es(t))return t;var f=Ha(t);if(f){if(s=function(t){var e=t.length,n=new t.constructor(e);e&&"string"==typeof t[0]&&Nt.call(t,"index")&&(n.index=t.index,n.input=t.input);return n}(t),!u)return ko(t,s)}else{var d=yi(t),h=d==S||d==A;if(Ya(t))return Io(t,u);if(d==R||d==v||h&&!i){if(s=l||h?{}:vi(t),!u)return l?function(t,e){return Lo(t,gi(t),e)}(t,function(t,e){return t&&Lo(e,Os(e),t)}(s,t)):function(t,e){return Lo(t,pi(t),e)}(t,ir(s,t))}else{if(!le[d])return i?t:{};s=function(t,e,n){var r=t.constructor;switch(e){case U:return To(t);case w:case _:return new r(+t);case j:return function(t,e){var n=e?To(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case N:case M:case P:case W:case $:case D:case F:case z:case q:return Ro(t,n);case I:return new r;case T:case k:return new r(t);case C:return function(t){var e=new t.constructor(t.source,gt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case B:return new r;case L:return o=t,Wn?Rt(Wn.call(o)):{}}var o}(t,d,u)}}a||(a=new Kn);var p=a.get(t);if(p)return p;a.set(t,s),ss(t)?t.forEach((function(r){s.add(lr(r,e,n,r,t,a))})):rs(t)&&t.forEach((function(r,o){s.set(o,lr(r,e,n,o,t,a))}));var g=f?o:(c?l?ai:ii:l?Os:Ls)(t);return Ce(g||t,(function(r,o){g&&(r=t[o=r]),nr(s,o,lr(r,e,n,o,t,a))})),s}function cr(t,e,n){var r=n.length;if(null==t)return!r;for(t=Rt(t);r--;){var i=n[r],a=e[i],s=t[i];if(s===o&&!(i in t)||!a(s))return!1}return!0}function fr(t,e,n){if("function"!=typeof t)throw new Bt(i);return Li((function(){t.apply(o,n)}),e)}function dr(t,e,n,r){var o=-1,i=Oe,a=!0,s=t.length,u=[],l=e.length;if(!s)return u;n&&(e=je(e,Qe(n))),r?(i=Ue,a=!1):e.length>=200&&(i=en,a=!1,e=new Yn(e));t:for(;++o<s;){var c=t[o],f=null==n?c:n(c);if(c=r||0!==c?c:0,a&&f==f){for(var d=l;d--;)if(e[d]===f)continue t;u.push(c)}else i(e,f,r)||u.push(c)}return u}Dn.templateSettings={escape:Z,evaluate:Q,interpolate:tt,variable:"",imports:{_:Dn}},Dn.prototype=zn.prototype,Dn.prototype.constructor=Dn,qn.prototype=Fn(zn.prototype),qn.prototype.constructor=qn,Hn.prototype=Fn(zn.prototype),Hn.prototype.constructor=Hn,Vn.prototype.clear=function(){this.__data__=Bn?Bn(null):{},this.size=0},Vn.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Vn.prototype.get=function(t){var e=this.__data__;if(Bn){var n=e[t];return n===a?o:n}return Nt.call(e,t)?e[t]:o},Vn.prototype.has=function(t){var e=this.__data__;return Bn?e[t]!==o:Nt.call(e,t)},Vn.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=Bn&&e===o?a:e,this},Gn.prototype.clear=function(){this.__data__=[],this.size=0},Gn.prototype.delete=function(t){var e=this.__data__,n=rr(e,t);return!(n<0)&&(n==e.length-1?e.pop():Kt.call(e,n,1),--this.size,!0)},Gn.prototype.get=function(t){var e=this.__data__,n=rr(e,t);return n<0?o:e[n][1]},Gn.prototype.has=function(t){return rr(this.__data__,t)>-1},Gn.prototype.set=function(t,e){var n=this.__data__,r=rr(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},Jn.prototype.clear=function(){this.size=0,this.__data__={hash:new Vn,map:new(Tn||Gn),string:new Vn}},Jn.prototype.delete=function(t){var e=fi(this,t).delete(t);return this.size-=e?1:0,e},Jn.prototype.get=function(t){return fi(this,t).get(t)},Jn.prototype.has=function(t){return fi(this,t).has(t)},Jn.prototype.set=function(t,e){var n=fi(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},Yn.prototype.add=Yn.prototype.push=function(t){return this.__data__.set(t,a),this},Yn.prototype.has=function(t){return this.__data__.has(t)},Kn.prototype.clear=function(){this.__data__=new Gn,this.size=0},Kn.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Kn.prototype.get=function(t){return this.__data__.get(t)},Kn.prototype.has=function(t){return this.__data__.has(t)},Kn.prototype.set=function(t,e){var n=this.__data__;if(n instanceof Gn){var r=n.__data__;if(!Tn||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new Jn(r)}return n.set(t,e),this.size=n.size,this};var hr=jo(_r),pr=jo(Er,!0);function gr(t,e){var n=!0;return hr(t,(function(t,r,o){return n=!!e(t,r,o)})),n}function yr(t,e,n){for(var r=-1,i=t.length;++r<i;){var a=t[r],s=e(a);if(null!=s&&(u===o?s==s&&!ls(s):n(s,u)))var u=s,l=a}return l}function mr(t,e){var n=[];return hr(t,(function(t,r,o){e(t,r,o)&&n.push(t)})),n}function vr(t,e,n,r,o){var i=-1,a=t.length;for(n||(n=bi),o||(o=[]);++i<a;){var s=t[i];e>0&&n(s)?e>1?vr(s,e-1,n,r,o):Ne(o,s):r||(o[o.length]=s)}return o}var br=No(),wr=No(!0);function _r(t,e){return t&&br(t,e,Ls)}function Er(t,e){return t&&wr(t,e,Ls)}function Sr(t,e){return Le(e,(function(e){return Za(t[e])}))}function Ar(t,e){for(var n=0,r=(e=_o(e,t)).length;null!=t&&n<r;)t=t[Pi(e[n++])];return n&&n==r?t:o}function Ir(t,e,n){var r=e(t);return Ha(t)?r:Ne(r,n(t))}function Tr(t){return null==t?t===o?"[object Undefined]":"[object Null]":Qt&&Qt in Rt(t)?function(t){var e=Nt.call(t,Qt),n=t[Qt];try{t[Qt]=o;var r=!0}catch(t){}var i=Wt.call(t);r&&(e?t[Qt]=n:delete t[Qt]);return i}(t):function(t){return Wt.call(t)}(t)}function Rr(t,e){return t>e}function xr(t,e){return null!=t&&Nt.call(t,e)}function Cr(t,e){return null!=t&&e in Rt(t)}function Br(t,e,n){for(var i=n?Ue:Oe,a=t[0].length,s=t.length,u=s,l=r(s),c=1/0,f=[];u--;){var d=t[u];u&&e&&(d=je(d,Qe(e))),c=wn(d.length,c),l[u]=!n&&(e||a>=120&&d.length>=120)?new Yn(u&&d):o}d=t[0];var h=-1,p=l[0];t:for(;++h<a&&f.length<c;){var g=d[h],y=e?e(g):g;if(g=n||0!==g?g:0,!(p?en(p,y):i(f,y,n))){for(u=s;--u;){var m=l[u];if(!(m?en(m,y):i(t[u],y,n)))continue t}p&&p.push(y),f.push(g)}}return f}function kr(t,e,n){var r=null==(t=Ci(t,e=_o(e,t)))?t:t[Pi(Xi(e))];return null==r?o:Re(r,t,n)}function Lr(t){return ns(t)&&Tr(t)==v}function Or(t,e,n,r,i){return t===e||(null==t||null==e||!ns(t)&&!ns(e)?t!=t&&e!=e:function(t,e,n,r,i,a){var s=Ha(t),u=Ha(e),l=s?b:yi(t),c=u?b:yi(e),f=(l=l==v?R:l)==R,d=(c=c==v?R:c)==R,h=l==c;if(h&&Ya(t)){if(!Ya(e))return!1;s=!0,f=!1}if(h&&!f)return a||(a=new Kn),s||cs(t)?ri(t,e,n,r,i,a):function(t,e,n,r,o,i,a){switch(n){case j:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case U:return!(t.byteLength!=e.byteLength||!i(new Ht(t),new Ht(e)));case w:case _:case T:return Da(+t,+e);case E:return t.name==e.name&&t.message==e.message;case C:case k:return t==e+"";case I:var s=ln;case B:var u=1&r;if(s||(s=dn),t.size!=e.size&&!u)return!1;var l=a.get(t);if(l)return l==e;r|=2,a.set(t,e);var c=ri(s(t),s(e),r,o,i,a);return a.delete(t),c;case L:if(Wn)return Wn.call(t)==Wn.call(e)}return!1}(t,e,l,n,r,i,a);if(!(1&n)){var p=f&&Nt.call(t,"__wrapped__"),g=d&&Nt.call(e,"__wrapped__");if(p||g){var y=p?t.value():t,m=g?e.value():e;return a||(a=new Kn),i(y,m,n,r,a)}}if(!h)return!1;return a||(a=new Kn),function(t,e,n,r,i,a){var s=1&n,u=ii(t),l=u.length,c=ii(e),f=c.length;if(l!=f&&!s)return!1;var d=l;for(;d--;){var h=u[d];if(!(s?h in e:Nt.call(e,h)))return!1}var p=a.get(t),g=a.get(e);if(p&&g)return p==e&&g==t;var y=!0;a.set(t,e),a.set(e,t);var m=s;for(;++d<l;){var v=t[h=u[d]],b=e[h];if(r)var w=s?r(b,v,h,e,t,a):r(v,b,h,t,e,a);if(!(w===o?v===b||i(v,b,n,r,a):w)){y=!1;break}m||(m="constructor"==h)}if(y&&!m){var _=t.constructor,E=e.constructor;_==E||!("constructor"in t)||!("constructor"in e)||"function"==typeof _&&_ instanceof _&&"function"==typeof E&&E instanceof E||(y=!1)}return a.delete(t),a.delete(e),y}(t,e,n,r,i,a)}(t,e,n,r,Or,i))}function Ur(t,e,n,r){var i=n.length,a=i,s=!r;if(null==t)return!a;for(t=Rt(t);i--;){var u=n[i];if(s&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++i<a;){var l=(u=n[i])[0],c=t[l],f=u[1];if(s&&u[2]){if(c===o&&!(l in t))return!1}else{var d=new Kn;if(r)var h=r(c,f,l,t,e,d);if(!(h===o?Or(f,c,3,r,d):h))return!1}}return!0}function jr(t){return!(!es(t)||(e=t,Pt&&Pt in e))&&(Za(t)?Ft:vt).test(Wi(t));// removed by dead control flow
 var e; }function Nr(t){return"function"==typeof t?t:null==t?ou:"object"==typeof t?Ha(t)?Fr(t[0],t[1]):Dr(t):hu(t)}function Mr(t){if(!Ii(t))return Je(t);var e=[];for(var n in Rt(t))Nt.call(t,n)&&"constructor"!=n&&e.push(n);return e}function Pr(t){if(!es(t))return function(t){var e=[];if(null!=t)for(var n in Rt(t))e.push(n);return e}(t);var e=Ii(t),n=[];for(var r in t)("constructor"!=r||!e&&Nt.call(t,r))&&n.push(r);return n}function Wr(t,e){return t<e}function $r(t,e){var n=-1,o=Ga(t)?r(t.length):[];return hr(t,(function(t,r,i){o[++n]=e(t,r,i)})),o}function Dr(t){var e=di(t);return 1==e.length&&e[0][2]?Ri(e[0][0],e[0][1]):function(n){return n===t||Ur(n,t,e)}}function Fr(t,e){return Ei(t)&&Ti(e)?Ri(Pi(t),e):function(n){var r=Rs(n,t);return r===o&&r===e?xs(n,t):Or(e,r,3)}}function zr(t,e,n,r,i){t!==e&&br(e,(function(a,s){if(i||(i=new Kn),es(a))!function(t,e,n,r,i,a,s){var u=Bi(t,n),l=Bi(e,n),c=s.get(l);if(c)return void er(t,n,c);var f=a?a(u,l,n+"",t,e,s):o,d=f===o;if(d){var h=Ha(l),p=!h&&Ya(l),g=!h&&!p&&cs(l);f=l,h||p||g?Ha(u)?f=u:Ja(u)?f=ko(u):p?(d=!1,f=Io(l,!0)):g?(d=!1,f=Ro(l,!0)):f=[]:is(l)||qa(l)?(f=u,qa(u)?f=vs(u):es(u)&&!Za(u)||(f=vi(l))):d=!1}d&&(s.set(l,f),i(f,l,r,a,s),s.delete(l));er(t,n,f)}(t,e,s,n,zr,r,i);else{var u=r?r(Bi(t,s),a,s+"",t,e,i):o;u===o&&(u=a),er(t,s,u)}}),Os)}function qr(t,e){var n=t.length;if(n)return wi(e+=e<0?n:0,n)?t[e]:o}function Hr(t,e,n){e=e.length?je(e,(function(t){return Ha(t)?function(e){return Ar(e,1===t.length?t[0]:t)}:t})):[ou];var r=-1;e=je(e,Qe(ci()));var o=$r(t,(function(t,n,o){var i=je(e,(function(e){return e(t)}));return{criteria:i,index:++r,value:t}}));return function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(o,(function(t,e){return function(t,e,n){var r=-1,o=t.criteria,i=e.criteria,a=o.length,s=n.length;for(;++r<a;){var u=xo(o[r],i[r]);if(u)return r>=s?u:u*("desc"==n[r]?-1:1)}return t.index-e.index}(t,e,n)}))}function Vr(t,e,n){for(var r=-1,o=e.length,i={};++r<o;){var a=e[r],s=Ar(t,a);n(s,a)&&to(i,_o(a,t),s)}return i}function Gr(t,e,n,r){var o=r?qe:ze,i=-1,a=e.length,s=t;for(t===e&&(e=ko(e)),n&&(s=je(t,Qe(n)));++i<a;)for(var u=0,l=e[i],c=n?n(l):l;(u=o(s,c,u,r))>-1;)s!==t&&Kt.call(s,u,1),Kt.call(t,u,1);return t}function Jr(t,e){for(var n=t?e.length:0,r=n-1;n--;){var o=e[n];if(n==r||o!==i){var i=o;wi(o)?Kt.call(t,o,1):ho(t,o)}}return t}function Yr(t,e){return t+ye(Sn()*(e-t+1))}function Kr(t,e){var n="";if(!t||e<1||e>p)return n;do{e%2&&(n+=t),(e=ye(e/2))&&(t+=t)}while(e);return n}function Xr(t,e){return Oi(xi(t,e,ou),t+"")}function Zr(t){return Zn(Ds(t))}function Qr(t,e){var n=Ds(t);return Ni(n,ur(e,0,n.length))}function to(t,e,n,r){if(!es(t))return t;for(var i=-1,a=(e=_o(e,t)).length,s=a-1,u=t;null!=u&&++i<a;){var l=Pi(e[i]),c=n;if("__proto__"===l||"constructor"===l||"prototype"===l)return t;if(i!=s){var f=u[l];(c=r?r(f,l,u):o)===o&&(c=es(f)?f:wi(e[i+1])?[]:{})}nr(u,l,c),u=u[l]}return t}var eo=kn?function(t,e){return kn.set(t,e),t}:ou,no=ne?function(t,e){return ne(t,"toString",{configurable:!0,enumerable:!1,value:eu(e),writable:!0})}:ou;function ro(t){return Ni(Ds(t))}function oo(t,e,n){var o=-1,i=t.length;e<0&&(e=-e>i?0:i+e),(n=n>i?i:n)<0&&(n+=i),i=e>n?0:n-e>>>0,e>>>=0;for(var a=r(i);++o<i;)a[o]=t[o+e];return a}function io(t,e){var n;return hr(t,(function(t,r,o){return!(n=e(t,r,o))})),!!n}function ao(t,e,n){var r=0,o=null==t?r:t.length;if("number"==typeof e&&e==e&&o<=2147483647){for(;r<o;){var i=r+o>>>1,a=t[i];null!==a&&!ls(a)&&(n?a<=e:a<e)?r=i+1:o=i}return o}return so(t,e,ou,n)}function so(t,e,n,r){var i=0,a=null==t?0:t.length;if(0===a)return 0;for(var s=(e=n(e))!=e,u=null===e,l=ls(e),c=e===o;i<a;){var f=ye((i+a)/2),d=n(t[f]),h=d!==o,p=null===d,g=d==d,y=ls(d);if(s)var m=r||g;else m=c?g&&(r||h):u?g&&h&&(r||!p):l?g&&h&&!p&&(r||!y):!p&&!y&&(r?d<=e:d<e);m?i=f+1:a=f}return wn(a,4294967294)}function uo(t,e){for(var n=-1,r=t.length,o=0,i=[];++n<r;){var a=t[n],s=e?e(a):a;if(!n||!Da(s,u)){var u=s;i[o++]=0===a?0:a}}return i}function lo(t){return"number"==typeof t?t:ls(t)?g:+t}function co(t){if("string"==typeof t)return t;if(Ha(t))return je(t,co)+"";if(ls(t))return $n?$n.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function fo(t,e,n){var r=-1,o=Oe,i=t.length,a=!0,s=[],u=s;if(n)a=!1,o=Ue;else if(i>=200){var l=e?null:Xo(t);if(l)return dn(l);a=!1,o=en,u=new Yn}else u=e?[]:s;t:for(;++r<i;){var c=t[r],f=e?e(c):c;if(c=n||0!==c?c:0,a&&f==f){for(var d=u.length;d--;)if(u[d]===f)continue t;e&&u.push(f),s.push(c)}else o(u,f,n)||(u!==s&&u.push(f),s.push(c))}return s}function ho(t,e){return null==(t=Ci(t,e=_o(e,t)))||delete t[Pi(Xi(e))]}function po(t,e,n,r){return to(t,e,n(Ar(t,e)),r)}function go(t,e,n,r){for(var o=t.length,i=r?o:-1;(r?i--:++i<o)&&e(t[i],i,t););return n?oo(t,r?0:i,r?i+1:o):oo(t,r?i+1:0,r?o:i)}function yo(t,e){var n=t;return n instanceof Hn&&(n=n.value()),Me(e,(function(t,e){return e.func.apply(e.thisArg,Ne([t],e.args))}),n)}function mo(t,e,n){var o=t.length;if(o<2)return o?fo(t[0]):[];for(var i=-1,a=r(o);++i<o;)for(var s=t[i],u=-1;++u<o;)u!=i&&(a[i]=dr(a[i]||s,t[u],e,n));return fo(vr(a,1),e,n)}function vo(t,e,n){for(var r=-1,i=t.length,a=e.length,s={};++r<i;){var u=r<a?e[r]:o;n(s,t[r],u)}return s}function bo(t){return Ja(t)?t:[]}function wo(t){return"function"==typeof t?t:ou}function _o(t,e){return Ha(t)?t:Ei(t,e)?[t]:Mi(bs(t))}var Eo=Xr;function So(t,e,n){var r=t.length;return n=n===o?r:n,!e&&n>=r?t:oo(t,e,n)}var Ao=oe||function(t){return ge.clearTimeout(t)};function Io(t,e){if(e)return t.slice();var n=t.length,r=Vt?Vt(n):new t.constructor(n);return t.copy(r),r}function To(t){var e=new t.constructor(t.byteLength);return new Ht(e).set(new Ht(t)),e}function Ro(t,e){var n=e?To(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function xo(t,e){if(t!==e){var n=t!==o,r=null===t,i=t==t,a=ls(t),s=e!==o,u=null===e,l=e==e,c=ls(e);if(!u&&!c&&!a&&t>e||a&&s&&l&&!u&&!c||r&&s&&l||!n&&l||!i)return 1;if(!r&&!a&&!c&&t<e||c&&n&&i&&!r&&!a||u&&n&&i||!s&&i||!l)return-1}return 0}function Co(t,e,n,o){for(var i=-1,a=t.length,s=n.length,u=-1,l=e.length,c=bn(a-s,0),f=r(l+c),d=!o;++u<l;)f[u]=e[u];for(;++i<s;)(d||i<a)&&(f[n[i]]=t[i]);for(;c--;)f[u++]=t[i++];return f}function Bo(t,e,n,o){for(var i=-1,a=t.length,s=-1,u=n.length,l=-1,c=e.length,f=bn(a-u,0),d=r(f+c),h=!o;++i<f;)d[i]=t[i];for(var p=i;++l<c;)d[p+l]=e[l];for(;++s<u;)(h||i<a)&&(d[p+n[s]]=t[i++]);return d}function ko(t,e){var n=-1,o=t.length;for(e||(e=r(o));++n<o;)e[n]=t[n];return e}function Lo(t,e,n,r){var i=!n;n||(n={});for(var a=-1,s=e.length;++a<s;){var u=e[a],l=r?r(n[u],t[u],u,n,t):o;l===o&&(l=t[u]),i?ar(n,u,l):nr(n,u,l)}return n}function Oo(t,e){return function(n,r){var o=Ha(n)?xe:or,i=e?e():{};return o(n,t,ci(r,2),i)}}function Uo(t){return Xr((function(e,n){var r=-1,i=n.length,a=i>1?n[i-1]:o,s=i>2?n[2]:o;for(a=t.length>3&&"function"==typeof a?(i--,a):o,s&&_i(n[0],n[1],s)&&(a=i<3?o:a,i=1),e=Rt(e);++r<i;){var u=n[r];u&&t(e,u,r,a)}return e}))}function jo(t,e){return function(n,r){if(null==n)return n;if(!Ga(n))return t(n,r);for(var o=n.length,i=e?o:-1,a=Rt(n);(e?i--:++i<o)&&!1!==r(a[i],i,a););return n}}function No(t){return function(e,n,r){for(var o=-1,i=Rt(e),a=r(e),s=a.length;s--;){var u=a[t?s:++o];if(!1===n(i[u],u,i))break}return e}}function Mo(t){return function(e){var n=un(e=bs(e))?gn(e):o,r=n?n[0]:e.charAt(0),i=n?So(n,1).join(""):e.slice(1);return r[t]()+i}}function Po(t){return function(e){return Me(Zs(qs(e).replace(te,"")),t,"")}}function Wo(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=Fn(t.prototype),r=t.apply(n,e);return es(r)?r:n}}function $o(t){return function(e,n,r){var i=Rt(e);if(!Ga(e)){var a=ci(n,3);e=Ls(e),n=function(t){return a(i[t],t,i)}}var s=t(e,n,r);return s>-1?i[a?e[s]:s]:o}}function Do(t){return oi((function(e){var n=e.length,r=n,a=qn.prototype.thru;for(t&&e.reverse();r--;){var s=e[r];if("function"!=typeof s)throw new Bt(i);if(a&&!u&&"wrapper"==ui(s))var u=new qn([],!0)}for(r=u?r:n;++r<n;){var l=ui(s=e[r]),c="wrapper"==l?si(s):o;u=c&&Si(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?u[ui(c[0])].apply(u,c[3]):1==s.length&&Si(s)?u[l]():u.thru(s)}return function(){var t=arguments,r=t[0];if(u&&1==t.length&&Ha(r))return u.plant(r).value();for(var o=0,i=n?e[o].apply(this,t):r;++o<n;)i=e[o].call(this,i);return i}}))}function Fo(t,e,n,i,a,s,u,l,c,d){var h=e&f,p=1&e,g=2&e,y=24&e,m=512&e,v=g?o:Wo(t);return function f(){for(var b=arguments.length,w=r(b),_=b;_--;)w[_]=arguments[_];if(y)var E=li(f),S=function(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}(w,E);if(i&&(w=Co(w,i,a,y)),s&&(w=Bo(w,s,u,y)),b-=S,y&&b<d){var A=fn(w,E);return Yo(t,e,Fo,f.placeholder,n,w,A,l,c,d-b)}var I=p?n:this,T=g?I[t]:t;return b=w.length,l?w=function(t,e){var n=t.length,r=wn(e.length,n),i=ko(t);for(;r--;){var a=e[r];t[r]=wi(a,n)?i[a]:o}return t}(w,l):m&&b>1&&w.reverse(),h&&c<b&&(w.length=c),this&&this!==ge&&this instanceof f&&(T=v||Wo(T)),T.apply(I,w)}}function zo(t,e){return function(n,r){return function(t,e,n,r){return _r(t,(function(t,o,i){e(r,n(t),o,i)})),r}(n,t,e(r),{})}}function qo(t,e){return function(n,r){var i;if(n===o&&r===o)return e;if(n!==o&&(i=n),r!==o){if(i===o)return r;"string"==typeof n||"string"==typeof r?(n=co(n),r=co(r)):(n=lo(n),r=lo(r)),i=t(n,r)}return i}}function Ho(t){return oi((function(e){return e=je(e,Qe(ci())),Xr((function(n){var r=this;return t(e,(function(t){return Re(t,r,n)}))}))}))}function Vo(t,e){var n=(e=e===o?" ":co(e)).length;if(n<2)return n?Kr(e,t):e;var r=Kr(e,pe(t/pn(e)));return un(e)?So(gn(r),0,t).join(""):r.slice(0,t)}function Go(t){return function(e,n,i){return i&&"number"!=typeof i&&_i(e,n,i)&&(n=i=o),e=ps(e),n===o?(n=e,e=0):n=ps(n),function(t,e,n,o){for(var i=-1,a=bn(pe((e-t)/(n||1)),0),s=r(a);a--;)s[o?a:++i]=t,t+=n;return s}(e,n,i=i===o?e<n?1:-1:ps(i),t)}}function Jo(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=ms(e),n=ms(n)),t(e,n)}}function Yo(t,e,n,r,i,a,s,u,f,d){var h=8&e;e|=h?l:c,4&(e&=~(h?c:l))||(e&=-4);var p=[t,e,i,h?a:o,h?s:o,h?o:a,h?o:s,u,f,d],g=n.apply(o,p);return Si(t)&&ki(g,p),g.placeholder=r,Ui(g,t,e)}function Ko(t){var e=Tt[t];return function(t,n){if(t=ms(t),(n=null==n?0:wn(gs(n),292))&&we(t)){var r=(bs(t)+"e").split("e");return+((r=(bs(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var Xo=xn&&1/dn(new xn([,-0]))[1]==h?function(t){return new xn(t)}:lu;function Zo(t){return function(e){var n=yi(e);return n==I?ln(e):n==B?hn(e):function(t,e){return je(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Qo(t,e,n,a,h,p,g,y){var m=2&e;if(!m&&"function"!=typeof t)throw new Bt(i);var v=a?a.length:0;if(v||(e&=-97,a=h=o),g=g===o?g:bn(gs(g),0),y=y===o?y:gs(y),v-=h?h.length:0,e&c){var b=a,w=h;a=h=o}var _=m?o:si(t),E=[t,e,n,a,h,b,w,p,g,y];if(_&&function(t,e){var n=t[1],r=e[1],o=n|r,i=o<131,a=r==f&&8==n||r==f&&n==d&&t[7].length<=e[8]||384==r&&e[7].length<=e[8]&&8==n;if(!i&&!a)return t;1&r&&(t[2]=e[2],o|=1&n?0:4);var u=e[3];if(u){var l=t[3];t[3]=l?Co(l,u,e[4]):u,t[4]=l?fn(t[3],s):e[4]}(u=e[5])&&(l=t[5],t[5]=l?Bo(l,u,e[6]):u,t[6]=l?fn(t[5],s):e[6]);(u=e[7])&&(t[7]=u);r&f&&(t[8]=null==t[8]?e[8]:wn(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=o}(E,_),t=E[0],e=E[1],n=E[2],a=E[3],h=E[4],!(y=E[9]=E[9]===o?m?0:t.length:bn(E[9]-v,0))&&24&e&&(e&=-25),e&&1!=e)S=8==e||e==u?function(t,e,n){var i=Wo(t);return function a(){for(var s=arguments.length,u=r(s),l=s,c=li(a);l--;)u[l]=arguments[l];var f=s<3&&u[0]!==c&&u[s-1]!==c?[]:fn(u,c);return(s-=f.length)<n?Yo(t,e,Fo,a.placeholder,o,u,f,o,o,n-s):Re(this&&this!==ge&&this instanceof a?i:t,this,u)}}(t,e,y):e!=l&&33!=e||h.length?Fo.apply(o,E):function(t,e,n,o){var i=1&e,a=Wo(t);return function e(){for(var s=-1,u=arguments.length,l=-1,c=o.length,f=r(c+u),d=this&&this!==ge&&this instanceof e?a:t;++l<c;)f[l]=o[l];for(;u--;)f[l++]=arguments[++s];return Re(d,i?n:this,f)}}(t,e,n,a);else var S=function(t,e,n){var r=1&e,o=Wo(t);return function e(){return(this&&this!==ge&&this instanceof e?o:t).apply(r?n:this,arguments)}}(t,e,n);return Ui((_?eo:ki)(S,E),t,e)}function ti(t,e,n,r){return t===o||Da(t,Ot[n])&&!Nt.call(r,n)?e:t}function ei(t,e,n,r,i,a){return es(t)&&es(e)&&(a.set(e,t),zr(t,e,o,ei,a),a.delete(e)),t}function ni(t){return is(t)?o:t}function ri(t,e,n,r,i,a){var s=1&n,u=t.length,l=e.length;if(u!=l&&!(s&&l>u))return!1;var c=a.get(t),f=a.get(e);if(c&&f)return c==e&&f==t;var d=-1,h=!0,p=2&n?new Yn:o;for(a.set(t,e),a.set(e,t);++d<u;){var g=t[d],y=e[d];if(r)var m=s?r(y,g,d,e,t,a):r(g,y,d,t,e,a);if(m!==o){if(m)continue;h=!1;break}if(p){if(!We(e,(function(t,e){if(!en(p,e)&&(g===t||i(g,t,n,r,a)))return p.push(e)}))){h=!1;break}}else if(g!==y&&!i(g,y,n,r,a)){h=!1;break}}return a.delete(t),a.delete(e),h}function oi(t){return Oi(xi(t,o,Vi),t+"")}function ii(t){return Ir(t,Ls,pi)}function ai(t){return Ir(t,Os,gi)}var si=kn?function(t){return kn.get(t)}:lu;function ui(t){for(var e=t.name+"",n=Ln[e],r=Nt.call(Ln,e)?n.length:0;r--;){var o=n[r],i=o.func;if(null==i||i==t)return o.name}return e}function li(t){return(Nt.call(Dn,"placeholder")?Dn:t).placeholder}function ci(){var t=Dn.iteratee||iu;return t=t===iu?Nr:t,arguments.length?t(arguments[0],arguments[1]):t}function fi(t,e){var n,r,o=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof e?"string":"hash"]:o.map}function di(t){for(var e=Ls(t),n=e.length;n--;){var r=e[n],o=t[r];e[n]=[r,o,Ti(o)]}return e}function hi(t,e){var n=function(t,e){return null==t?o:t[e]}(t,e);return jr(n)?n:o}var pi=me?function(t){return null==t?[]:(t=Rt(t),Le(me(t),(function(e){return Yt.call(t,e)})))}:yu,gi=me?function(t){for(var e=[];t;)Ne(e,pi(t)),t=Gt(t);return e}:yu,yi=Tr;function mi(t,e,n){for(var r=-1,o=(e=_o(e,t)).length,i=!1;++r<o;){var a=Pi(e[r]);if(!(i=null!=t&&n(t,a)))break;t=t[a]}return i||++r!=o?i:!!(o=null==t?0:t.length)&&ts(o)&&wi(a,o)&&(Ha(t)||qa(t))}function vi(t){return"function"!=typeof t.constructor||Ii(t)?{}:Fn(Gt(t))}function bi(t){return Ha(t)||qa(t)||!!(Xt&&t&&t[Xt])}function wi(t,e){var n=typeof t;return!!(e=null==e?p:e)&&("number"==n||"symbol"!=n&&wt.test(t))&&t>-1&&t%1==0&&t<e}function _i(t,e,n){if(!es(n))return!1;var r=typeof e;return!!("number"==r?Ga(n)&&wi(e,n.length):"string"==r&&e in n)&&Da(n[e],t)}function Ei(t,e){if(Ha(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!ls(t))||(nt.test(t)||!et.test(t)||null!=e&&t in Rt(e))}function Si(t){var e=ui(t),n=Dn[e];if("function"!=typeof n||!(e in Hn.prototype))return!1;if(t===n)return!0;var r=si(n);return!!r&&t===r[0]}(In&&yi(new In(new ArrayBuffer(1)))!=j||Tn&&yi(new Tn)!=I||Rn&&yi(Rn.resolve())!=x||xn&&yi(new xn)!=B||Cn&&yi(new Cn)!=O)&&(yi=function(t){var e=Tr(t),n=e==R?t.constructor:o,r=n?Wi(n):"";if(r)switch(r){case On:return j;case Un:return I;case jn:return x;case Nn:return B;case Mn:return O}return e});var Ai=Ut?Za:mu;function Ii(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Ot)}function Ti(t){return t==t&&!es(t)}function Ri(t,e){return function(n){return null!=n&&(n[t]===e&&(e!==o||t in Rt(n)))}}function xi(t,e,n){return e=bn(e===o?t.length-1:e,0),function(){for(var o=arguments,i=-1,a=bn(o.length-e,0),s=r(a);++i<a;)s[i]=o[e+i];i=-1;for(var u=r(e+1);++i<e;)u[i]=o[i];return u[e]=n(s),Re(t,this,u)}}function Ci(t,e){return e.length<2?t:Ar(t,oo(e,0,-1))}function Bi(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var ki=ji(eo),Li=he||function(t,e){return ge.setTimeout(t,e)},Oi=ji(no);function Ui(t,e,n){var r=e+"";return Oi(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(ut,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return Ce(m,(function(n){var r="_."+n[0];e&n[1]&&!Oe(t,r)&&t.push(r)})),t.sort()}(function(t){var e=t.match(lt);return e?e[1].split(ct):[]}(r),n)))}function ji(t){var e=0,n=0;return function(){var r=_n(),i=16-(r-n);if(n=r,i>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(o,arguments)}}function Ni(t,e){var n=-1,r=t.length,i=r-1;for(e=e===o?r:e;++n<e;){var a=Yr(n,i),s=t[a];t[a]=t[n],t[n]=s}return t.length=e,t}var Mi=function(t){var e=ja(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(rt,(function(t,n,r,o){e.push(r?o.replace(ht,"$1"):n||t)})),e}));function Pi(t){if("string"==typeof t||ls(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Wi(t){if(null!=t){try{return jt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function $i(t){if(t instanceof Hn)return t.clone();var e=new qn(t.__wrapped__,t.__chain__);return e.__actions__=ko(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Di=Xr((function(t,e){return Ja(t)?dr(t,vr(e,1,Ja,!0)):[]})),Fi=Xr((function(t,e){var n=Xi(e);return Ja(n)&&(n=o),Ja(t)?dr(t,vr(e,1,Ja,!0),ci(n,2)):[]})),zi=Xr((function(t,e){var n=Xi(e);return Ja(n)&&(n=o),Ja(t)?dr(t,vr(e,1,Ja,!0),o,n):[]}));function qi(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=null==n?0:gs(n);return o<0&&(o=bn(r+o,0)),Fe(t,ci(e,3),o)}function Hi(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return n!==o&&(i=gs(n),i=n<0?bn(r+i,0):wn(i,r-1)),Fe(t,ci(e,3),i,!0)}function Vi(t){return(null==t?0:t.length)?vr(t,1):[]}function Gi(t){return t&&t.length?t[0]:o}var Ji=Xr((function(t){var e=je(t,bo);return e.length&&e[0]===t[0]?Br(e):[]})),Yi=Xr((function(t){var e=Xi(t),n=je(t,bo);return e===Xi(n)?e=o:n.pop(),n.length&&n[0]===t[0]?Br(n,ci(e,2)):[]})),Ki=Xr((function(t){var e=Xi(t),n=je(t,bo);return(e="function"==typeof e?e:o)&&n.pop(),n.length&&n[0]===t[0]?Br(n,o,e):[]}));function Xi(t){var e=null==t?0:t.length;return e?t[e-1]:o}var Zi=Xr(Qi);function Qi(t,e){return t&&t.length&&e&&e.length?Gr(t,e):t}var ta=oi((function(t,e){var n=null==t?0:t.length,r=sr(t,e);return Jr(t,je(e,(function(t){return wi(t,n)?+t:t})).sort(xo)),r}));function ea(t){return null==t?t:An.call(t)}var na=Xr((function(t){return fo(vr(t,1,Ja,!0))})),ra=Xr((function(t){var e=Xi(t);return Ja(e)&&(e=o),fo(vr(t,1,Ja,!0),ci(e,2))})),oa=Xr((function(t){var e=Xi(t);return e="function"==typeof e?e:o,fo(vr(t,1,Ja,!0),o,e)}));function ia(t){if(!t||!t.length)return[];var e=0;return t=Le(t,(function(t){if(Ja(t))return e=bn(t.length,e),!0})),Xe(e,(function(e){return je(t,Ge(e))}))}function aa(t,e){if(!t||!t.length)return[];var n=ia(t);return null==e?n:je(n,(function(t){return Re(e,o,t)}))}var sa=Xr((function(t,e){return Ja(t)?dr(t,e):[]})),ua=Xr((function(t){return mo(Le(t,Ja))})),la=Xr((function(t){var e=Xi(t);return Ja(e)&&(e=o),mo(Le(t,Ja),ci(e,2))})),ca=Xr((function(t){var e=Xi(t);return e="function"==typeof e?e:o,mo(Le(t,Ja),o,e)})),fa=Xr(ia);var da=Xr((function(t){var e=t.length,n=e>1?t[e-1]:o;return n="function"==typeof n?(t.pop(),n):o,aa(t,n)}));function ha(t){var e=Dn(t);return e.__chain__=!0,e}function pa(t,e){return e(t)}var ga=oi((function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,i=function(e){return sr(e,t)};return!(e>1||this.__actions__.length)&&r instanceof Hn&&wi(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:pa,args:[i],thisArg:o}),new qn(r,this.__chain__).thru((function(t){return e&&!t.length&&t.push(o),t}))):this.thru(i)}));var ya=Oo((function(t,e,n){Nt.call(t,n)?++t[n]:ar(t,n,1)}));var ma=$o(qi),va=$o(Hi);function ba(t,e){return(Ha(t)?Ce:hr)(t,ci(e,3))}function wa(t,e){return(Ha(t)?Be:pr)(t,ci(e,3))}var _a=Oo((function(t,e,n){Nt.call(t,n)?t[n].push(e):ar(t,n,[e])}));var Ea=Xr((function(t,e,n){var o=-1,i="function"==typeof e,a=Ga(t)?r(t.length):[];return hr(t,(function(t){a[++o]=i?Re(e,t,n):kr(t,e,n)})),a})),Sa=Oo((function(t,e,n){ar(t,n,e)}));function Aa(t,e){return(Ha(t)?je:$r)(t,ci(e,3))}var Ia=Oo((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]}));var Ta=Xr((function(t,e){if(null==t)return[];var n=e.length;return n>1&&_i(t,e[0],e[1])?e=[]:n>2&&_i(e[0],e[1],e[2])&&(e=[e[0]]),Hr(t,vr(e,1),[])})),Ra=ce||function(){return ge.Date.now()};function xa(t,e,n){return e=n?o:e,e=t&&null==e?t.length:e,Qo(t,f,o,o,o,o,e)}function Ca(t,e){var n;if("function"!=typeof e)throw new Bt(i);return t=gs(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=o),n}}var Ba=Xr((function(t,e,n){var r=1;if(n.length){var o=fn(n,li(Ba));r|=l}return Qo(t,r,e,n,o)})),ka=Xr((function(t,e,n){var r=3;if(n.length){var o=fn(n,li(ka));r|=l}return Qo(e,r,t,n,o)}));function La(t,e,n){var r,a,s,u,l,c,f=0,d=!1,h=!1,p=!0;if("function"!=typeof t)throw new Bt(i);function g(e){var n=r,i=a;return r=a=o,f=e,u=t.apply(i,n)}function y(t){var n=t-c;return c===o||n>=e||n<0||h&&t-f>=s}function m(){var t=Ra();if(y(t))return v(t);l=Li(m,function(t){var n=e-(t-c);return h?wn(n,s-(t-f)):n}(t))}function v(t){return l=o,p&&r?g(t):(r=a=o,u)}function b(){var t=Ra(),n=y(t);if(r=arguments,a=this,c=t,n){if(l===o)return function(t){return f=t,l=Li(m,e),d?g(t):u}(c);if(h)return Ao(l),l=Li(m,e),g(c)}return l===o&&(l=Li(m,e)),u}return e=ms(e)||0,es(n)&&(d=!!n.leading,s=(h="maxWait"in n)?bn(ms(n.maxWait)||0,e):s,p="trailing"in n?!!n.trailing:p),b.cancel=function(){l!==o&&Ao(l),f=0,r=c=a=l=o},b.flush=function(){return l===o?u:v(Ra())},b}var Oa=Xr((function(t,e){return fr(t,1,e)})),Ua=Xr((function(t,e,n){return fr(t,ms(e)||0,n)}));function ja(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new Bt(i);var n=function(){var r=arguments,o=e?e.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=t.apply(this,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(ja.Cache||Jn),n}function Na(t){if("function"!=typeof t)throw new Bt(i);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}ja.Cache=Jn;var Ma=Eo((function(t,e){var n=(e=1==e.length&&Ha(e[0])?je(e[0],Qe(ci())):je(vr(e,1),Qe(ci()))).length;return Xr((function(r){for(var o=-1,i=wn(r.length,n);++o<i;)r[o]=e[o].call(this,r[o]);return Re(t,this,r)}))})),Pa=Xr((function(t,e){var n=fn(e,li(Pa));return Qo(t,l,o,e,n)})),Wa=Xr((function(t,e){var n=fn(e,li(Wa));return Qo(t,c,o,e,n)})),$a=oi((function(t,e){return Qo(t,d,o,o,o,e)}));function Da(t,e){return t===e||t!=t&&e!=e}var Fa=Jo(Rr),za=Jo((function(t,e){return t>=e})),qa=Lr(function(){return arguments}())?Lr:function(t){return ns(t)&&Nt.call(t,"callee")&&!Yt.call(t,"callee")},Ha=r.isArray,Va=_e?Qe(_e):function(t){return ns(t)&&Tr(t)==U};function Ga(t){return null!=t&&ts(t.length)&&!Za(t)}function Ja(t){return ns(t)&&Ga(t)}var Ya=be||mu,Ka=Ee?Qe(Ee):function(t){return ns(t)&&Tr(t)==_};function Xa(t){if(!ns(t))return!1;var e=Tr(t);return e==E||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!is(t)}function Za(t){if(!es(t))return!1;var e=Tr(t);return e==S||e==A||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Qa(t){return"number"==typeof t&&t==gs(t)}function ts(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=p}function es(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function ns(t){return null!=t&&"object"==typeof t}var rs=Se?Qe(Se):function(t){return ns(t)&&yi(t)==I};function os(t){return"number"==typeof t||ns(t)&&Tr(t)==T}function is(t){if(!ns(t)||Tr(t)!=R)return!1;var e=Gt(t);if(null===e)return!0;var n=Nt.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&jt.call(n)==$t}var as=Ae?Qe(Ae):function(t){return ns(t)&&Tr(t)==C};var ss=Ie?Qe(Ie):function(t){return ns(t)&&yi(t)==B};function us(t){return"string"==typeof t||!Ha(t)&&ns(t)&&Tr(t)==k}function ls(t){return"symbol"==typeof t||ns(t)&&Tr(t)==L}var cs=Te?Qe(Te):function(t){return ns(t)&&ts(t.length)&&!!ue[Tr(t)]};var fs=Jo(Wr),ds=Jo((function(t,e){return t<=e}));function hs(t){if(!t)return[];if(Ga(t))return us(t)?gn(t):ko(t);if(Zt&&t[Zt])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Zt]());var e=yi(t);return(e==I?ln:e==B?dn:Ds)(t)}function ps(t){return t?(t=ms(t))===h||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function gs(t){var e=ps(t),n=e%1;return e==e?n?e-n:e:0}function ys(t){return t?ur(gs(t),0,y):0}function ms(t){if("number"==typeof t)return t;if(ls(t))return g;if(es(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=es(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=Ze(t);var n=mt.test(t);return n||bt.test(t)?de(t.slice(2),n?2:8):yt.test(t)?g:+t}function vs(t){return Lo(t,Os(t))}function bs(t){return null==t?"":co(t)}var ws=Uo((function(t,e){if(Ii(e)||Ga(e))Lo(e,Ls(e),t);else for(var n in e)Nt.call(e,n)&&nr(t,n,e[n])})),_s=Uo((function(t,e){Lo(e,Os(e),t)})),Es=Uo((function(t,e,n,r){Lo(e,Os(e),t,r)})),Ss=Uo((function(t,e,n,r){Lo(e,Ls(e),t,r)})),As=oi(sr);var Is=Xr((function(t,e){t=Rt(t);var n=-1,r=e.length,i=r>2?e[2]:o;for(i&&_i(e[0],e[1],i)&&(r=1);++n<r;)for(var a=e[n],s=Os(a),u=-1,l=s.length;++u<l;){var c=s[u],f=t[c];(f===o||Da(f,Ot[c])&&!Nt.call(t,c))&&(t[c]=a[c])}return t})),Ts=Xr((function(t){return t.push(o,ei),Re(js,o,t)}));function Rs(t,e,n){var r=null==t?o:Ar(t,e);return r===o?n:r}function xs(t,e){return null!=t&&mi(t,e,Cr)}var Cs=zo((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Wt.call(e)),t[e]=n}),eu(ou)),Bs=zo((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Wt.call(e)),Nt.call(t,e)?t[e].push(n):t[e]=[n]}),ci),ks=Xr(kr);function Ls(t){return Ga(t)?Xn(t):Mr(t)}function Os(t){return Ga(t)?Xn(t,!0):Pr(t)}var Us=Uo((function(t,e,n){zr(t,e,n)})),js=Uo((function(t,e,n,r){zr(t,e,n,r)})),Ns=oi((function(t,e){var n={};if(null==t)return n;var r=!1;e=je(e,(function(e){return e=_o(e,t),r||(r=e.length>1),e})),Lo(t,ai(t),n),r&&(n=lr(n,7,ni));for(var o=e.length;o--;)ho(n,e[o]);return n}));var Ms=oi((function(t,e){return null==t?{}:function(t,e){return Vr(t,e,(function(e,n){return xs(t,n)}))}(t,e)}));function Ps(t,e){if(null==t)return{};var n=je(ai(t),(function(t){return[t]}));return e=ci(e),Vr(t,n,(function(t,n){return e(t,n[0])}))}var Ws=Zo(Ls),$s=Zo(Os);function Ds(t){return null==t?[]:tn(t,Ls(t))}var Fs=Po((function(t,e,n){return e=e.toLowerCase(),t+(n?zs(e):e)}));function zs(t){return Xs(bs(t).toLowerCase())}function qs(t){return(t=bs(t))&&t.replace(_t,on).replace(ee,"")}var Hs=Po((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),Vs=Po((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),Gs=Mo("toLowerCase");var Js=Po((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()}));var Ys=Po((function(t,e,n){return t+(n?" ":"")+Xs(e)}));var Ks=Po((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),Xs=Mo("toUpperCase");function Zs(t,e,n){return t=bs(t),(e=n?o:e)===o?function(t){return ie.test(t)}(t)?function(t){return t.match(re)||[]}(t):function(t){return t.match(ft)||[]}(t):t.match(e)||[]}var Qs=Xr((function(t,e){try{return Re(t,o,e)}catch(t){return Xa(t)?t:new At(t)}})),tu=oi((function(t,e){return Ce(e,(function(e){e=Pi(e),ar(t,e,Ba(t[e],t))})),t}));function eu(t){return function(){return t}}var nu=Do(),ru=Do(!0);function ou(t){return t}function iu(t){return Nr("function"==typeof t?t:lr(t,1))}var au=Xr((function(t,e){return function(n){return kr(n,t,e)}})),su=Xr((function(t,e){return function(n){return kr(t,n,e)}}));function uu(t,e,n){var r=Ls(e),o=Sr(e,r);null!=n||es(e)&&(o.length||!r.length)||(n=e,e=t,t=this,o=Sr(e,Ls(e)));var i=!(es(n)&&"chain"in n&&!n.chain),a=Za(t);return Ce(o,(function(n){var r=e[n];t[n]=r,a&&(t.prototype[n]=function(){var e=this.__chain__;if(i||e){var n=t(this.__wrapped__);return(n.__actions__=ko(this.__actions__)).push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,Ne([this.value()],arguments))})})),t}function lu(){}var cu=Ho(je),fu=Ho(ke),du=Ho(We);function hu(t){return Ei(t)?Ge(Pi(t)):function(t){return function(e){return Ar(e,t)}}(t)}var pu=Go(),gu=Go(!0);function yu(){return[]}function mu(){return!1}var vu=qo((function(t,e){return t+e}),0),bu=Ko("ceil"),wu=qo((function(t,e){return t/e}),1),_u=Ko("floor");var Eu,Su=qo((function(t,e){return t*e}),1),Au=Ko("round"),Iu=qo((function(t,e){return t-e}),0);return Dn.after=function(t,e){if("function"!=typeof e)throw new Bt(i);return t=gs(t),function(){if(--t<1)return e.apply(this,arguments)}},Dn.ary=xa,Dn.assign=ws,Dn.assignIn=_s,Dn.assignInWith=Es,Dn.assignWith=Ss,Dn.at=As,Dn.before=Ca,Dn.bind=Ba,Dn.bindAll=tu,Dn.bindKey=ka,Dn.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Ha(t)?t:[t]},Dn.chain=ha,Dn.chunk=function(t,e,n){e=(n?_i(t,e,n):e===o)?1:bn(gs(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var a=0,s=0,u=r(pe(i/e));a<i;)u[s++]=oo(t,a,a+=e);return u},Dn.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,o=[];++e<n;){var i=t[e];i&&(o[r++]=i)}return o},Dn.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],o=t;o--;)e[o-1]=arguments[o];return Ne(Ha(n)?ko(n):[n],vr(e,1))},Dn.cond=function(t){var e=null==t?0:t.length,n=ci();return t=e?je(t,(function(t){if("function"!=typeof t[1])throw new Bt(i);return[n(t[0]),t[1]]})):[],Xr((function(n){for(var r=-1;++r<e;){var o=t[r];if(Re(o[0],this,n))return Re(o[1],this,n)}}))},Dn.conforms=function(t){return function(t){var e=Ls(t);return function(n){return cr(n,t,e)}}(lr(t,1))},Dn.constant=eu,Dn.countBy=ya,Dn.create=function(t,e){var n=Fn(t);return null==e?n:ir(n,e)},Dn.curry=function t(e,n,r){var i=Qo(e,8,o,o,o,o,o,n=r?o:n);return i.placeholder=t.placeholder,i},Dn.curryRight=function t(e,n,r){var i=Qo(e,u,o,o,o,o,o,n=r?o:n);return i.placeholder=t.placeholder,i},Dn.debounce=La,Dn.defaults=Is,Dn.defaultsDeep=Ts,Dn.defer=Oa,Dn.delay=Ua,Dn.difference=Di,Dn.differenceBy=Fi,Dn.differenceWith=zi,Dn.drop=function(t,e,n){var r=null==t?0:t.length;return r?oo(t,(e=n||e===o?1:gs(e))<0?0:e,r):[]},Dn.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?oo(t,0,(e=r-(e=n||e===o?1:gs(e)))<0?0:e):[]},Dn.dropRightWhile=function(t,e){return t&&t.length?go(t,ci(e,3),!0,!0):[]},Dn.dropWhile=function(t,e){return t&&t.length?go(t,ci(e,3),!0):[]},Dn.fill=function(t,e,n,r){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&_i(t,e,n)&&(n=0,r=i),function(t,e,n,r){var i=t.length;for((n=gs(n))<0&&(n=-n>i?0:i+n),(r=r===o||r>i?i:gs(r))<0&&(r+=i),r=n>r?0:ys(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},Dn.filter=function(t,e){return(Ha(t)?Le:mr)(t,ci(e,3))},Dn.flatMap=function(t,e){return vr(Aa(t,e),1)},Dn.flatMapDeep=function(t,e){return vr(Aa(t,e),h)},Dn.flatMapDepth=function(t,e,n){return n=n===o?1:gs(n),vr(Aa(t,e),n)},Dn.flatten=Vi,Dn.flattenDeep=function(t){return(null==t?0:t.length)?vr(t,h):[]},Dn.flattenDepth=function(t,e){return(null==t?0:t.length)?vr(t,e=e===o?1:gs(e)):[]},Dn.flip=function(t){return Qo(t,512)},Dn.flow=nu,Dn.flowRight=ru,Dn.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var o=t[e];r[o[0]]=o[1]}return r},Dn.functions=function(t){return null==t?[]:Sr(t,Ls(t))},Dn.functionsIn=function(t){return null==t?[]:Sr(t,Os(t))},Dn.groupBy=_a,Dn.initial=function(t){return(null==t?0:t.length)?oo(t,0,-1):[]},Dn.intersection=Ji,Dn.intersectionBy=Yi,Dn.intersectionWith=Ki,Dn.invert=Cs,Dn.invertBy=Bs,Dn.invokeMap=Ea,Dn.iteratee=iu,Dn.keyBy=Sa,Dn.keys=Ls,Dn.keysIn=Os,Dn.map=Aa,Dn.mapKeys=function(t,e){var n={};return e=ci(e,3),_r(t,(function(t,r,o){ar(n,e(t,r,o),t)})),n},Dn.mapValues=function(t,e){var n={};return e=ci(e,3),_r(t,(function(t,r,o){ar(n,r,e(t,r,o))})),n},Dn.matches=function(t){return Dr(lr(t,1))},Dn.matchesProperty=function(t,e){return Fr(t,lr(e,1))},Dn.memoize=ja,Dn.merge=Us,Dn.mergeWith=js,Dn.method=au,Dn.methodOf=su,Dn.mixin=uu,Dn.negate=Na,Dn.nthArg=function(t){return t=gs(t),Xr((function(e){return qr(e,t)}))},Dn.omit=Ns,Dn.omitBy=function(t,e){return Ps(t,Na(ci(e)))},Dn.once=function(t){return Ca(2,t)},Dn.orderBy=function(t,e,n,r){return null==t?[]:(Ha(e)||(e=null==e?[]:[e]),Ha(n=r?o:n)||(n=null==n?[]:[n]),Hr(t,e,n))},Dn.over=cu,Dn.overArgs=Ma,Dn.overEvery=fu,Dn.overSome=du,Dn.partial=Pa,Dn.partialRight=Wa,Dn.partition=Ia,Dn.pick=Ms,Dn.pickBy=Ps,Dn.property=hu,Dn.propertyOf=function(t){return function(e){return null==t?o:Ar(t,e)}},Dn.pull=Zi,Dn.pullAll=Qi,Dn.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?Gr(t,e,ci(n,2)):t},Dn.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?Gr(t,e,o,n):t},Dn.pullAt=ta,Dn.range=pu,Dn.rangeRight=gu,Dn.rearg=$a,Dn.reject=function(t,e){return(Ha(t)?Le:mr)(t,Na(ci(e,3)))},Dn.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,o=[],i=t.length;for(e=ci(e,3);++r<i;){var a=t[r];e(a,r,t)&&(n.push(a),o.push(r))}return Jr(t,o),n},Dn.rest=function(t,e){if("function"!=typeof t)throw new Bt(i);return Xr(t,e=e===o?e:gs(e))},Dn.reverse=ea,Dn.sampleSize=function(t,e,n){return e=(n?_i(t,e,n):e===o)?1:gs(e),(Ha(t)?Qn:Qr)(t,e)},Dn.set=function(t,e,n){return null==t?t:to(t,e,n)},Dn.setWith=function(t,e,n,r){return r="function"==typeof r?r:o,null==t?t:to(t,e,n,r)},Dn.shuffle=function(t){return(Ha(t)?tr:ro)(t)},Dn.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&_i(t,e,n)?(e=0,n=r):(e=null==e?0:gs(e),n=n===o?r:gs(n)),oo(t,e,n)):[]},Dn.sortBy=Ta,Dn.sortedUniq=function(t){return t&&t.length?uo(t):[]},Dn.sortedUniqBy=function(t,e){return t&&t.length?uo(t,ci(e,2)):[]},Dn.split=function(t,e,n){return n&&"number"!=typeof n&&_i(t,e,n)&&(e=n=o),(n=n===o?y:n>>>0)?(t=bs(t))&&("string"==typeof e||null!=e&&!as(e))&&!(e=co(e))&&un(t)?So(gn(t),0,n):t.split(e,n):[]},Dn.spread=function(t,e){if("function"!=typeof t)throw new Bt(i);return e=null==e?0:bn(gs(e),0),Xr((function(n){var r=n[e],o=So(n,0,e);return r&&Ne(o,r),Re(t,this,o)}))},Dn.tail=function(t){var e=null==t?0:t.length;return e?oo(t,1,e):[]},Dn.take=function(t,e,n){return t&&t.length?oo(t,0,(e=n||e===o?1:gs(e))<0?0:e):[]},Dn.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?oo(t,(e=r-(e=n||e===o?1:gs(e)))<0?0:e,r):[]},Dn.takeRightWhile=function(t,e){return t&&t.length?go(t,ci(e,3),!1,!0):[]},Dn.takeWhile=function(t,e){return t&&t.length?go(t,ci(e,3)):[]},Dn.tap=function(t,e){return e(t),t},Dn.throttle=function(t,e,n){var r=!0,o=!0;if("function"!=typeof t)throw new Bt(i);return es(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),La(t,e,{leading:r,maxWait:e,trailing:o})},Dn.thru=pa,Dn.toArray=hs,Dn.toPairs=Ws,Dn.toPairsIn=$s,Dn.toPath=function(t){return Ha(t)?je(t,Pi):ls(t)?[t]:ko(Mi(bs(t)))},Dn.toPlainObject=vs,Dn.transform=function(t,e,n){var r=Ha(t),o=r||Ya(t)||cs(t);if(e=ci(e,4),null==n){var i=t&&t.constructor;n=o?r?new i:[]:es(t)&&Za(i)?Fn(Gt(t)):{}}return(o?Ce:_r)(t,(function(t,r,o){return e(n,t,r,o)})),n},Dn.unary=function(t){return xa(t,1)},Dn.union=na,Dn.unionBy=ra,Dn.unionWith=oa,Dn.uniq=function(t){return t&&t.length?fo(t):[]},Dn.uniqBy=function(t,e){return t&&t.length?fo(t,ci(e,2)):[]},Dn.uniqWith=function(t,e){return e="function"==typeof e?e:o,t&&t.length?fo(t,o,e):[]},Dn.unset=function(t,e){return null==t||ho(t,e)},Dn.unzip=ia,Dn.unzipWith=aa,Dn.update=function(t,e,n){return null==t?t:po(t,e,wo(n))},Dn.updateWith=function(t,e,n,r){return r="function"==typeof r?r:o,null==t?t:po(t,e,wo(n),r)},Dn.values=Ds,Dn.valuesIn=function(t){return null==t?[]:tn(t,Os(t))},Dn.without=sa,Dn.words=Zs,Dn.wrap=function(t,e){return Pa(wo(e),t)},Dn.xor=ua,Dn.xorBy=la,Dn.xorWith=ca,Dn.zip=fa,Dn.zipObject=function(t,e){return vo(t||[],e||[],nr)},Dn.zipObjectDeep=function(t,e){return vo(t||[],e||[],to)},Dn.zipWith=da,Dn.entries=Ws,Dn.entriesIn=$s,Dn.extend=_s,Dn.extendWith=Es,uu(Dn,Dn),Dn.add=vu,Dn.attempt=Qs,Dn.camelCase=Fs,Dn.capitalize=zs,Dn.ceil=bu,Dn.clamp=function(t,e,n){return n===o&&(n=e,e=o),n!==o&&(n=(n=ms(n))==n?n:0),e!==o&&(e=(e=ms(e))==e?e:0),ur(ms(t),e,n)},Dn.clone=function(t){return lr(t,4)},Dn.cloneDeep=function(t){return lr(t,5)},Dn.cloneDeepWith=function(t,e){return lr(t,5,e="function"==typeof e?e:o)},Dn.cloneWith=function(t,e){return lr(t,4,e="function"==typeof e?e:o)},Dn.conformsTo=function(t,e){return null==e||cr(t,e,Ls(e))},Dn.deburr=qs,Dn.defaultTo=function(t,e){return null==t||t!=t?e:t},Dn.divide=wu,Dn.endsWith=function(t,e,n){t=bs(t),e=co(e);var r=t.length,i=n=n===o?r:ur(gs(n),0,r);return(n-=e.length)>=0&&t.slice(n,i)==e},Dn.eq=Da,Dn.escape=function(t){return(t=bs(t))&&X.test(t)?t.replace(Y,an):t},Dn.escapeRegExp=function(t){return(t=bs(t))&&it.test(t)?t.replace(ot,"\\$&"):t},Dn.every=function(t,e,n){var r=Ha(t)?ke:gr;return n&&_i(t,e,n)&&(e=o),r(t,ci(e,3))},Dn.find=ma,Dn.findIndex=qi,Dn.findKey=function(t,e){return De(t,ci(e,3),_r)},Dn.findLast=va,Dn.findLastIndex=Hi,Dn.findLastKey=function(t,e){return De(t,ci(e,3),Er)},Dn.floor=_u,Dn.forEach=ba,Dn.forEachRight=wa,Dn.forIn=function(t,e){return null==t?t:br(t,ci(e,3),Os)},Dn.forInRight=function(t,e){return null==t?t:wr(t,ci(e,3),Os)},Dn.forOwn=function(t,e){return t&&_r(t,ci(e,3))},Dn.forOwnRight=function(t,e){return t&&Er(t,ci(e,3))},Dn.get=Rs,Dn.gt=Fa,Dn.gte=za,Dn.has=function(t,e){return null!=t&&mi(t,e,xr)},Dn.hasIn=xs,Dn.head=Gi,Dn.identity=ou,Dn.includes=function(t,e,n,r){t=Ga(t)?t:Ds(t),n=n&&!r?gs(n):0;var o=t.length;return n<0&&(n=bn(o+n,0)),us(t)?n<=o&&t.indexOf(e,n)>-1:!!o&&ze(t,e,n)>-1},Dn.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=null==n?0:gs(n);return o<0&&(o=bn(r+o,0)),ze(t,e,o)},Dn.inRange=function(t,e,n){return e=ps(e),n===o?(n=e,e=0):n=ps(n),function(t,e,n){return t>=wn(e,n)&&t<bn(e,n)}(t=ms(t),e,n)},Dn.invoke=ks,Dn.isArguments=qa,Dn.isArray=Ha,Dn.isArrayBuffer=Va,Dn.isArrayLike=Ga,Dn.isArrayLikeObject=Ja,Dn.isBoolean=function(t){return!0===t||!1===t||ns(t)&&Tr(t)==w},Dn.isBuffer=Ya,Dn.isDate=Ka,Dn.isElement=function(t){return ns(t)&&1===t.nodeType&&!is(t)},Dn.isEmpty=function(t){if(null==t)return!0;if(Ga(t)&&(Ha(t)||"string"==typeof t||"function"==typeof t.splice||Ya(t)||cs(t)||qa(t)))return!t.length;var e=yi(t);if(e==I||e==B)return!t.size;if(Ii(t))return!Mr(t).length;for(var n in t)if(Nt.call(t,n))return!1;return!0},Dn.isEqual=function(t,e){return Or(t,e)},Dn.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:o)?n(t,e):o;return r===o?Or(t,e,o,n):!!r},Dn.isError=Xa,Dn.isFinite=function(t){return"number"==typeof t&&we(t)},Dn.isFunction=Za,Dn.isInteger=Qa,Dn.isLength=ts,Dn.isMap=rs,Dn.isMatch=function(t,e){return t===e||Ur(t,e,di(e))},Dn.isMatchWith=function(t,e,n){return n="function"==typeof n?n:o,Ur(t,e,di(e),n)},Dn.isNaN=function(t){return os(t)&&t!=+t},Dn.isNative=function(t){if(Ai(t))throw new At("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return jr(t)},Dn.isNil=function(t){return null==t},Dn.isNull=function(t){return null===t},Dn.isNumber=os,Dn.isObject=es,Dn.isObjectLike=ns,Dn.isPlainObject=is,Dn.isRegExp=as,Dn.isSafeInteger=function(t){return Qa(t)&&t>=-9007199254740991&&t<=p},Dn.isSet=ss,Dn.isString=us,Dn.isSymbol=ls,Dn.isTypedArray=cs,Dn.isUndefined=function(t){return t===o},Dn.isWeakMap=function(t){return ns(t)&&yi(t)==O},Dn.isWeakSet=function(t){return ns(t)&&"[object WeakSet]"==Tr(t)},Dn.join=function(t,e){return null==t?"":$e.call(t,e)},Dn.kebabCase=Hs,Dn.last=Xi,Dn.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r;return n!==o&&(i=(i=gs(n))<0?bn(r+i,0):wn(i,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,i):Fe(t,He,i,!0)},Dn.lowerCase=Vs,Dn.lowerFirst=Gs,Dn.lt=fs,Dn.lte=ds,Dn.max=function(t){return t&&t.length?yr(t,ou,Rr):o},Dn.maxBy=function(t,e){return t&&t.length?yr(t,ci(e,2),Rr):o},Dn.mean=function(t){return Ve(t,ou)},Dn.meanBy=function(t,e){return Ve(t,ci(e,2))},Dn.min=function(t){return t&&t.length?yr(t,ou,Wr):o},Dn.minBy=function(t,e){return t&&t.length?yr(t,ci(e,2),Wr):o},Dn.stubArray=yu,Dn.stubFalse=mu,Dn.stubObject=function(){return{}},Dn.stubString=function(){return""},Dn.stubTrue=function(){return!0},Dn.multiply=Su,Dn.nth=function(t,e){return t&&t.length?qr(t,gs(e)):o},Dn.noConflict=function(){return ge._===this&&(ge._=Dt),this},Dn.noop=lu,Dn.now=Ra,Dn.pad=function(t,e,n){t=bs(t);var r=(e=gs(e))?pn(t):0;if(!e||r>=e)return t;var o=(e-r)/2;return Vo(ye(o),n)+t+Vo(pe(o),n)},Dn.padEnd=function(t,e,n){t=bs(t);var r=(e=gs(e))?pn(t):0;return e&&r<e?t+Vo(e-r,n):t},Dn.padStart=function(t,e,n){t=bs(t);var r=(e=gs(e))?pn(t):0;return e&&r<e?Vo(e-r,n)+t:t},Dn.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),En(bs(t).replace(at,""),e||0)},Dn.random=function(t,e,n){if(n&&"boolean"!=typeof n&&_i(t,e,n)&&(e=n=o),n===o&&("boolean"==typeof e?(n=e,e=o):"boolean"==typeof t&&(n=t,t=o)),t===o&&e===o?(t=0,e=1):(t=ps(t),e===o?(e=t,t=0):e=ps(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var i=Sn();return wn(t+i*(e-t+fe("1e-"+((i+"").length-1))),e)}return Yr(t,e)},Dn.reduce=function(t,e,n){var r=Ha(t)?Me:Ye,o=arguments.length<3;return r(t,ci(e,4),n,o,hr)},Dn.reduceRight=function(t,e,n){var r=Ha(t)?Pe:Ye,o=arguments.length<3;return r(t,ci(e,4),n,o,pr)},Dn.repeat=function(t,e,n){return e=(n?_i(t,e,n):e===o)?1:gs(e),Kr(bs(t),e)},Dn.replace=function(){var t=arguments,e=bs(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Dn.result=function(t,e,n){var r=-1,i=(e=_o(e,t)).length;for(i||(i=1,t=o);++r<i;){var a=null==t?o:t[Pi(e[r])];a===o&&(r=i,a=n),t=Za(a)?a.call(t):a}return t},Dn.round=Au,Dn.runInContext=t,Dn.sample=function(t){return(Ha(t)?Zn:Zr)(t)},Dn.size=function(t){if(null==t)return 0;if(Ga(t))return us(t)?pn(t):t.length;var e=yi(t);return e==I||e==B?t.size:Mr(t).length},Dn.snakeCase=Js,Dn.some=function(t,e,n){var r=Ha(t)?We:io;return n&&_i(t,e,n)&&(e=o),r(t,ci(e,3))},Dn.sortedIndex=function(t,e){return ao(t,e)},Dn.sortedIndexBy=function(t,e,n){return so(t,e,ci(n,2))},Dn.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=ao(t,e);if(r<n&&Da(t[r],e))return r}return-1},Dn.sortedLastIndex=function(t,e){return ao(t,e,!0)},Dn.sortedLastIndexBy=function(t,e,n){return so(t,e,ci(n,2),!0)},Dn.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var n=ao(t,e,!0)-1;if(Da(t[n],e))return n}return-1},Dn.startCase=Ys,Dn.startsWith=function(t,e,n){return t=bs(t),n=null==n?0:ur(gs(n),0,t.length),e=co(e),t.slice(n,n+e.length)==e},Dn.subtract=Iu,Dn.sum=function(t){return t&&t.length?Ke(t,ou):0},Dn.sumBy=function(t,e){return t&&t.length?Ke(t,ci(e,2)):0},Dn.template=function(t,e,n){var r=Dn.templateSettings;n&&_i(t,e,n)&&(e=o),t=bs(t),e=Es({},e,r,ti);var i,a,s=Es({},e.imports,r.imports,ti),u=Ls(s),l=tn(s,u),c=0,f=e.interpolate||Et,d="__p += '",h=xt((e.escape||Et).source+"|"+f.source+"|"+(f===tt?pt:Et).source+"|"+(e.evaluate||Et).source+"|$","g"),p="//# sourceURL="+(Nt.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++se+"]")+"\n";t.replace(h,(function(e,n,r,o,s,u){return r||(r=o),d+=t.slice(c,u).replace(St,sn),n&&(i=!0,d+="' +\n__e("+n+") +\n'"),s&&(a=!0,d+="';\n"+s+";\n__p += '"),r&&(d+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=u+e.length,e})),d+="';\n";var g=Nt.call(e,"variable")&&e.variable;if(g){if(dt.test(g))throw new At("Invalid `variable` option passed into `_.template`")}else d="with (obj) {\n"+d+"\n}\n";d=(a?d.replace(H,""):d).replace(V,"$1").replace(G,"$1;"),d="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var y=Qs((function(){return It(u,p+"return "+d).apply(o,l)}));if(y.source=d,Xa(y))throw y;return y},Dn.times=function(t,e){if((t=gs(t))<1||t>p)return[];var n=y,r=wn(t,y);e=ci(e),t-=y;for(var o=Xe(r,e);++n<t;)e(n);return o},Dn.toFinite=ps,Dn.toInteger=gs,Dn.toLength=ys,Dn.toLower=function(t){return bs(t).toLowerCase()},Dn.toNumber=ms,Dn.toSafeInteger=function(t){return t?ur(gs(t),-9007199254740991,p):0===t?t:0},Dn.toString=bs,Dn.toUpper=function(t){return bs(t).toUpperCase()},Dn.trim=function(t,e,n){if((t=bs(t))&&(n||e===o))return Ze(t);if(!t||!(e=co(e)))return t;var r=gn(t),i=gn(e);return So(r,nn(r,i),rn(r,i)+1).join("")},Dn.trimEnd=function(t,e,n){if((t=bs(t))&&(n||e===o))return t.slice(0,yn(t)+1);if(!t||!(e=co(e)))return t;var r=gn(t);return So(r,0,rn(r,gn(e))+1).join("")},Dn.trimStart=function(t,e,n){if((t=bs(t))&&(n||e===o))return t.replace(at,"");if(!t||!(e=co(e)))return t;var r=gn(t);return So(r,nn(r,gn(e))).join("")},Dn.truncate=function(t,e){var n=30,r="...";if(es(e)){var i="separator"in e?e.separator:i;n="length"in e?gs(e.length):n,r="omission"in e?co(e.omission):r}var a=(t=bs(t)).length;if(un(t)){var s=gn(t);a=s.length}if(n>=a)return t;var u=n-pn(r);if(u<1)return r;var l=s?So(s,0,u).join(""):t.slice(0,u);if(i===o)return l+r;if(s&&(u+=l.length-u),as(i)){if(t.slice(u).search(i)){var c,f=l;for(i.global||(i=xt(i.source,bs(gt.exec(i))+"g")),i.lastIndex=0;c=i.exec(f);)var d=c.index;l=l.slice(0,d===o?u:d)}}else if(t.indexOf(co(i),u)!=u){var h=l.lastIndexOf(i);h>-1&&(l=l.slice(0,h))}return l+r},Dn.unescape=function(t){return(t=bs(t))&&K.test(t)?t.replace(J,mn):t},Dn.uniqueId=function(t){var e=++Mt;return bs(t)+e},Dn.upperCase=Ks,Dn.upperFirst=Xs,Dn.each=ba,Dn.eachRight=wa,Dn.first=Gi,uu(Dn,(Eu={},_r(Dn,(function(t,e){Nt.call(Dn.prototype,e)||(Eu[e]=t)})),Eu),{chain:!1}),Dn.VERSION="4.17.21",Ce(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Dn[t].placeholder=Dn})),Ce(["drop","take"],(function(t,e){Hn.prototype[t]=function(n){n=n===o?1:bn(gs(n),0);var r=this.__filtered__&&!e?new Hn(this):this.clone();return r.__filtered__?r.__takeCount__=wn(n,r.__takeCount__):r.__views__.push({size:wn(n,y),type:t+(r.__dir__<0?"Right":"")}),r},Hn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),Ce(["filter","map","takeWhile"],(function(t,e){var n=e+1,r=1==n||3==n;Hn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:ci(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}})),Ce(["head","last"],(function(t,e){var n="take"+(e?"Right":"");Hn.prototype[t]=function(){return this[n](1).value()[0]}})),Ce(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");Hn.prototype[t]=function(){return this.__filtered__?new Hn(this):this[n](1)}})),Hn.prototype.compact=function(){return this.filter(ou)},Hn.prototype.find=function(t){return this.filter(t).head()},Hn.prototype.findLast=function(t){return this.reverse().find(t)},Hn.prototype.invokeMap=Xr((function(t,e){return"function"==typeof t?new Hn(this):this.map((function(n){return kr(n,t,e)}))})),Hn.prototype.reject=function(t){return this.filter(Na(ci(t)))},Hn.prototype.slice=function(t,e){t=gs(t);var n=this;return n.__filtered__&&(t>0||e<0)?new Hn(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==o&&(n=(e=gs(e))<0?n.dropRight(-e):n.take(e-t)),n)},Hn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Hn.prototype.toArray=function(){return this.take(y)},_r(Hn.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),i=Dn[r?"take"+("last"==e?"Right":""):e],a=r||/^find/.test(e);i&&(Dn.prototype[e]=function(){var e=this.__wrapped__,s=r?[1]:arguments,u=e instanceof Hn,l=s[0],c=u||Ha(e),f=function(t){var e=i.apply(Dn,Ne([t],s));return r&&d?e[0]:e};c&&n&&"function"==typeof l&&1!=l.length&&(u=c=!1);var d=this.__chain__,h=!!this.__actions__.length,p=a&&!d,g=u&&!h;if(!a&&c){e=g?e:new Hn(this);var y=t.apply(e,s);return y.__actions__.push({func:pa,args:[f],thisArg:o}),new qn(y,d)}return p&&g?t.apply(this,s):(y=this.thru(f),p?r?y.value()[0]:y.value():y)})})),Ce(["pop","push","shift","sort","splice","unshift"],(function(t){var e=kt[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Dn.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var o=this.value();return e.apply(Ha(o)?o:[],t)}return this[n]((function(n){return e.apply(Ha(n)?n:[],t)}))}})),_r(Hn.prototype,(function(t,e){var n=Dn[e];if(n){var r=n.name+"";Nt.call(Ln,r)||(Ln[r]=[]),Ln[r].push({name:e,func:n})}})),Ln[Fo(o,2).name]=[{name:"wrapper",func:o}],Hn.prototype.clone=function(){var t=new Hn(this.__wrapped__);return t.__actions__=ko(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=ko(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=ko(this.__views__),t},Hn.prototype.reverse=function(){if(this.__filtered__){var t=new Hn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Hn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=Ha(t),r=e<0,o=n?t.length:0,i=function(t,e,n){var r=-1,o=n.length;for(;++r<o;){var i=n[r],a=i.size;switch(i.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=wn(e,t+a);break;case"takeRight":t=bn(t,e-a)}}return{start:t,end:e}}(0,o,this.__views__),a=i.start,s=i.end,u=s-a,l=r?s:a-1,c=this.__iteratees__,f=c.length,d=0,h=wn(u,this.__takeCount__);if(!n||!r&&o==u&&h==u)return yo(t,this.__actions__);var p=[];t:for(;u--&&d<h;){for(var g=-1,y=t[l+=e];++g<f;){var m=c[g],v=m.iteratee,b=m.type,w=v(y);if(2==b)y=w;else if(!w){if(1==b)continue t;break t}}p[d++]=y}return p},Dn.prototype.at=ga,Dn.prototype.chain=function(){return ha(this)},Dn.prototype.commit=function(){return new qn(this.value(),this.__chain__)},Dn.prototype.next=function(){this.__values__===o&&(this.__values__=hs(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?o:this.__values__[this.__index__++]}},Dn.prototype.plant=function(t){for(var e,n=this;n instanceof zn;){var r=$i(n);r.__index__=0,r.__values__=o,e?i.__wrapped__=r:e=r;var i=r;n=n.__wrapped__}return i.__wrapped__=t,e},Dn.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Hn){var e=t;return this.__actions__.length&&(e=new Hn(this)),(e=e.reverse()).__actions__.push({func:pa,args:[ea],thisArg:o}),new qn(e,this.__chain__)}return this.thru(ea)},Dn.prototype.toJSON=Dn.prototype.valueOf=Dn.prototype.value=function(){return yo(this.__wrapped__,this.__actions__)},Dn.prototype.first=Dn.prototype.head,Zt&&(Dn.prototype[Zt]=function(){return this}),Dn}();ge._=vn,(r=function(){return vn}.call(e,n,e,t))===o||(t.exports=r)}.call(this)},300:(t,e,n)=>{var r,o;t=n.nmd(t),function(e){e.runningInNodeJS=function(){return"object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node},e.runningInMainNodeJSModule=function(){return e.runningInNodeJS()&&n.c[n.s]===t},e.commonJSAvailable=function(){return"object"==typeof t.exports},e.runningInWebWorker=function(){return"undefined"==typeof window&&"object"==typeof self&&"function"==typeof self.addEventListener&&"function"==typeof self.close},e.runningInNodeChildProcess=function(){return e.runningInNodeJS()&&"function"==typeof process.send},e.runningInNullOrigin=function(){return"object"==typeof window&&"object"==typeof window.location&&"object"==typeof document&&("http:"!==document.location.protocol&&"https:"!==document.location.protocol)},e.webWorkersAvailable=function(){return"function"==typeof Worker&&!e.runningInNullOrigin()&&(!e.runningInNodeJS()&&!(navigator&&navigator.userAgent&&navigator.userAgent.indexOf("Android 4.3")>=0))},e.log=function(t,e){void 0===e&&(e=!1),"object"==typeof console&&(console.log(t),e&&"object"==typeof document&&(document.body.innerHTML+=t+"<br/>"))},e.createErrorMessage=function(t,n){if(void 0===n&&(n="Unhandled exception"),null==t)return n;if(n+=": ","object"==typeof t.content){if(e.runningInNodeJS())return n+t.content.stack;var r=JSON.stringify(t.content);return"{}"!==r?n+r:n+t.content}return"string"==typeof t.content?n+t.content:n+t},e.printExceptionAndStackTraceToConsole=function(t,n){void 0===n&&(n="Unhandled exception"),e.log(e.createErrorMessage(t,n))},e.getGlobalObject=function(){return"object"==typeof n.g?n.g:"object"==typeof window?window:"object"==typeof self?self:{}},e.toString=Object.prototype.toString,e.commonJSAvailable()&&(t.exports=e)}(o||(o={})),function(t){if("function"==typeof Uint8Array&&0!==new Uint8Array(1).subarray(1).byteLength){var e=function(t,e){var n=function(t,e,n){return t<e?e:t>n?n:t};t|=0,e|=0,arguments.length<1&&(t=0),arguments.length<2&&(e=this.length),t<0&&(t=this.length+t),e<0&&(e=this.length+e),t=n(t,0,this.length);var r=(e=n(e,0,this.length))-t;return r<0&&(r=0),new this.constructor(this.buffer,this.byteOffset+t*this.BYTES_PER_ELEMENT,r)},n=["Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array"],r=void 0;if("object"==typeof window?r=window:"object"==typeof self&&(r=self),void 0!==r)for(var o=0;o<n.length;o++)r[n[o]]&&(r[n[o]].prototype.subarray=e)}}(r||(r={})),function(t){var e=function(){function e(){}return e.compressAsync=function(e,n,r){var o=new t.Timer,i=new t.Compressor;if(!r)throw new TypeError("compressAsync: No callback argument given");if("string"==typeof e)e=t.encodeUTF8(e);else if(null==e||!(e instanceof Uint8Array))return void r(void 0,new TypeError("compressAsync: Invalid input argument, only 'string' and 'Uint8Array' are supported"));var a=t.ArrayTools.splitByteArray(e,n.blockSize),s=[],u=function(e){if(e<a.length){var l=void 0;try{l=i.compressBlock(a[e])}catch(t){return void r(void 0,t)}s.push(l),o.getElapsedTime()<=20?u(e+1):(t.enqueueImmediate((function(){return u(e+1)})),o.restart())}else{var c=t.ArrayTools.concatUint8Arrays(s);t.enqueueImmediate((function(){var e;try{e=t.CompressionCommon.encodeCompressedBytes(c,n.outputEncoding)}catch(t){return void r(void 0,t)}t.enqueueImmediate((function(){return r(e)}))}))}};t.enqueueImmediate((function(){return u(0)}))},e.createCompressionStream=function(){var e=new t.Compressor,r=new(n(99).Transform)({decodeStrings:!0,highWaterMark:65536});return r._transform=function(n,o,i){var a;try{a=t.BufferTools.uint8ArrayToBuffer(e.compressBlock(t.BufferTools.bufferToUint8Array(n)))}catch(t){return void r.emit("error",t)}r.push(a),i()},r},e}();t.AsyncCompressor=e}(o||(o={})),function(t){var e=function(){function e(){}return e.decompressAsync=function(e,n,r){if(!r)throw new TypeError("decompressAsync: No callback argument given");var o=new t.Timer;try{e=t.CompressionCommon.decodeCompressedBytes(e,n.inputEncoding)}catch(t){return void r(void 0,t)}var i=new t.Decompressor,a=t.ArrayTools.splitByteArray(e,n.blockSize),s=[],u=function(e){if(e<a.length){var l=void 0;try{l=i.decompressBlock(a[e])}catch(t){return void r(void 0,t)}s.push(l),o.getElapsedTime()<=20?u(e+1):(t.enqueueImmediate((function(){return u(e+1)})),o.restart())}else{var c=t.ArrayTools.concatUint8Arrays(s);t.enqueueImmediate((function(){var e;try{e=t.CompressionCommon.encodeDecompressedBytes(c,n.outputEncoding)}catch(t){return void r(void 0,t)}t.enqueueImmediate((function(){return r(e)}))}))}};t.enqueueImmediate((function(){return u(0)}))},e.createDecompressionStream=function(){var e=new t.Decompressor,r=new(n(99).Transform)({decodeStrings:!0,highWaterMark:65536});return r._transform=function(n,o,i){var a;try{a=t.BufferTools.uint8ArrayToBuffer(e.decompressBlock(t.BufferTools.bufferToUint8Array(n)))}catch(t){return void r.emit("error",t)}r.push(a),i()},r},e}();t.AsyncDecompressor=e}(o||(o={})),function(t){var e;!function(e){e.compressAsync=function(t,n,r){if("ByteArray"!=n.inputEncoding||t instanceof Uint8Array){var o={token:Math.random().toString(),type:"compress",data:t,inputEncoding:n.inputEncoding,outputEncoding:n.outputEncoding},i=function(t){var n=t.data;n&&n.token==o.token&&(e.globalWorker.removeEventListener("message",i),"error"==n.type?r(void 0,new Error(n.error)):r(n.data))};e.globalWorker.addEventListener("message",i),e.globalWorker.postMessage(o,[])}else r(void 0,new TypeError("compressAsync: input is not a Uint8Array"))},e.decompressAsync=function(t,n,r){var o={token:Math.random().toString(),type:"decompress",data:t,inputEncoding:n.inputEncoding,outputEncoding:n.outputEncoding},i=function(t){var n=t.data;n&&n.token==o.token&&(e.globalWorker.removeEventListener("message",i),"error"==n.type?r(void 0,new Error(n.error)):r(n.data))};e.globalWorker.addEventListener("message",i),e.globalWorker.postMessage(o,[])},e.installWebWorkerIfNeeded=function(){"object"==typeof self&&void 0===self.document&&null!=self.addEventListener&&(self.addEventListener("message",(function(e){var n=e.data;if("compress"==n.type){var r=void 0;try{r=t.compress(n.data,{outputEncoding:n.outputEncoding})}catch(e){return void self.postMessage({token:n.token,type:"error",error:t.createErrorMessage(e)},[])}(o={token:n.token,type:"compressionResult",data:r,encoding:n.outputEncoding}).data instanceof Uint8Array&&-1===navigator.appVersion.indexOf("MSIE 10")?self.postMessage(o,[o.data.buffer]):self.postMessage(o,[])}else if("decompress"==n.type){var o,i=void 0;try{i=t.decompress(n.data,{inputEncoding:n.inputEncoding,outputEncoding:n.outputEncoding})}catch(e){return void self.postMessage({token:n.token,type:"error",error:t.createErrorMessage(e)},[])}(o={token:n.token,type:"decompressionResult",data:i,encoding:n.outputEncoding}).data instanceof Uint8Array&&-1===navigator.appVersion.indexOf("MSIE 10")?self.postMessage(o,[o.data.buffer]):self.postMessage(o,[])}})),self.addEventListener("error",(function(e){t.log(t.createErrorMessage(e.error,"Unexpected LZUTF8 WebWorker exception"))})))},e.createGlobalWorkerIfNeeded=function(){if(e.globalWorker)return!0;if(!t.webWorkersAvailable())return!1;if(!e.scriptURI&&"object"==typeof document){var n=document.getElementById("lzutf8");null!=n&&(e.scriptURI=n.getAttribute("src")||void 0)}return!!e.scriptURI&&(e.globalWorker=new Worker(e.scriptURI),!0)},e.terminate=function(){e.globalWorker&&(e.globalWorker.terminate(),e.globalWorker=void 0)}}(e=t.WebWorker||(t.WebWorker={})),e.installWebWorkerIfNeeded()}(o||(o={})),function(t){var e=function(){function t(t,e,n){this.container=t,this.startPosition=e,this.length=n}return t.prototype.get=function(t){return this.container[this.startPosition+t]},t.prototype.getInReversedOrder=function(t){return this.container[this.startPosition+this.length-1-t]},t.prototype.set=function(t,e){this.container[this.startPosition+t]=e},t}();t.ArraySegment=e}(o||(o={})),function(t){!function(t){t.copyElements=function(t,e,n,r,o){for(;o--;)n[r++]=t[e++]},t.zeroElements=function(t,e,n){for(;n--;)t[e++]=0},t.countNonzeroValuesInArray=function(t){for(var e=0,n=0;n<t.length;n++)t[n]&&e++;return e},t.truncateStartingElements=function(t,e){if(t.length<=e)throw new RangeError("truncateStartingElements: Requested length should be smaller than array length");for(var n=t.length-e,r=0;r<e;r++)t[r]=t[n+r];t.length=e},t.doubleByteArrayCapacity=function(t){var e=new Uint8Array(2*t.length);return e.set(t),e},t.concatUint8Arrays=function(t){for(var e=0,n=0,r=t;n<r.length;n++){e+=(u=r[n]).length}for(var o=new Uint8Array(e),i=0,a=0,s=t;a<s.length;a++){var u=s[a];o.set(u,i),i+=u.length}return o},t.splitByteArray=function(t,e){for(var n=[],r=0;r<t.length;){var o=Math.min(e,t.length-r);n.push(t.subarray(r,r+o)),r+=o}return n}}(t.ArrayTools||(t.ArrayTools={}))}(o||(o={})),function(t){!function(t){t.convertToUint8ArrayIfNeeded=function(e){return"function"==typeof Buffer&&Buffer.isBuffer(e)?t.bufferToUint8Array(e):e},t.uint8ArrayToBuffer=function(t){if(Buffer.prototype instanceof Uint8Array){var e=new Uint8Array(t.buffer,t.byteOffset,t.byteLength);return Object.setPrototypeOf(e,Buffer.prototype),e}for(var n=t.length,r=new Buffer(n),o=0;o<n;o++)r[o]=t[o];return r},t.bufferToUint8Array=function(t){if(Buffer.prototype instanceof Uint8Array)return new Uint8Array(t.buffer,t.byteOffset,t.byteLength);for(var e=t.length,n=new Uint8Array(e),r=0;r<e;r++)n[r]=t[r];return n}}(t.BufferTools||(t.BufferTools={}))}(o||(o={})),function(t){!function(e){e.getCroppedBuffer=function(t,e,n,r){void 0===r&&(r=0);var o=new Uint8Array(n+r);return o.set(t.subarray(e,e+n)),o},e.getCroppedAndAppendedByteArray=function(e,n,r,o){return t.ArrayTools.concatUint8Arrays([e.subarray(n,n+r),o])},e.detectCompressionSourceEncoding=function(t){if(null==t)throw new TypeError("detectCompressionSourceEncoding: input is null or undefined");if("string"==typeof t)return"String";if(t instanceof Uint8Array||"function"==typeof Buffer&&Buffer.isBuffer(t))return"ByteArray";throw new TypeError("detectCompressionSourceEncoding: input must be of type 'string', 'Uint8Array' or 'Buffer'")},e.encodeCompressedBytes=function(e,n){switch(n){case"ByteArray":return e;case"Buffer":return t.BufferTools.uint8ArrayToBuffer(e);case"Base64":return t.encodeBase64(e);case"BinaryString":return t.encodeBinaryString(e);case"StorageBinaryString":return t.encodeStorageBinaryString(e);default:throw new TypeError("encodeCompressedBytes: invalid output encoding requested")}},e.decodeCompressedBytes=function(e,n){if(null==n)throw new TypeError("decodeCompressedData: Input is null or undefined");switch(n){case"ByteArray":case"Buffer":var r=t.BufferTools.convertToUint8ArrayIfNeeded(e);if(!(r instanceof Uint8Array))throw new TypeError("decodeCompressedData: 'ByteArray' or 'Buffer' input type was specified but input is not a Uint8Array or Buffer");return r;case"Base64":if("string"!=typeof e)throw new TypeError("decodeCompressedData: 'Base64' input type was specified but input is not a string");return t.decodeBase64(e);case"BinaryString":if("string"!=typeof e)throw new TypeError("decodeCompressedData: 'BinaryString' input type was specified but input is not a string");return t.decodeBinaryString(e);case"StorageBinaryString":if("string"!=typeof e)throw new TypeError("decodeCompressedData: 'StorageBinaryString' input type was specified but input is not a string");return t.decodeStorageBinaryString(e);default:throw new TypeError("decodeCompressedData: invalid input encoding requested: '".concat(n,"'"))}},e.encodeDecompressedBytes=function(e,n){switch(n){case"String":return t.decodeUTF8(e);case"ByteArray":return e;case"Buffer":if("function"!=typeof Buffer)throw new TypeError("encodeDecompressedBytes: a 'Buffer' type was specified but is not supported at the current envirnment");return t.BufferTools.uint8ArrayToBuffer(e);default:throw new TypeError("encodeDecompressedBytes: invalid output encoding requested")}}}(t.CompressionCommon||(t.CompressionCommon={}))}(o||(o={})),function(t){var e;!function(e){var n,r=[];e.enqueueImmediate=function(t){r.push(t),1===r.length&&n()},e.initializeScheduler=function(){var e=function(){for(var e=0,n=r;e<n.length;e++){var o=n[e];try{o.call(void 0)}catch(e){t.printExceptionAndStackTraceToConsole(e,"enqueueImmediate exception")}}r.length=0};if(t.runningInNodeJS())n=function(){return setImmediate((function(){return e()}))};else if("object"==typeof window&&"function"==typeof window.addEventListener&&"function"==typeof window.postMessage){var o,i="enqueueImmediate-"+Math.random().toString();window.addEventListener("message",(function(t){t.data===i&&e()})),o=t.runningInNullOrigin()?"*":window.location.href,n=function(){return window.postMessage(i,o)}}else if("function"==typeof MessageChannel&&"function"==typeof MessagePort){var a=new MessageChannel;a.port1.onmessage=function(){return e()},n=function(){return a.port2.postMessage(0)}}else n=function(){return setTimeout((function(){return e()}),0)}},e.initializeScheduler()}(e=t.EventLoop||(t.EventLoop={})),t.enqueueImmediate=function(t){return e.enqueueImmediate(t)}}(o||(o={})),function(t){!function(t){t.override=function(e,n){return t.extend(e,n)},t.extend=function(t,e){if(null==t)throw new TypeError("obj is null or undefined");if("object"!=typeof t)throw new TypeError("obj is not an object");if(null==e&&(e={}),"object"!=typeof e)throw new TypeError("newProperties is not an object");if(null!=e)for(var n in e)t[n]=e[n];return t}}(t.ObjectTools||(t.ObjectTools={}))}(o||(o={})),function(t){t.getRandomIntegerInRange=function(t,e){return t+Math.floor(Math.random()*(e-t))},t.getRandomUTF16StringOfLength=function(e){for(var n="",r=0;r<e;r++){var o=void 0;do{o=t.getRandomIntegerInRange(0,1114112)}while(o>=55296&&o<=57343);n+=t.Encoding.CodePoint.decodeToString(o)}return n}}(o||(o={})),function(t){var e=function(){function t(t){void 0===t&&(t=1024),this.outputBufferCapacity=t,this.outputPosition=0,this.outputString="",this.outputBuffer=new Uint16Array(this.outputBufferCapacity)}return t.prototype.appendCharCode=function(t){this.outputBuffer[this.outputPosition++]=t,this.outputPosition===this.outputBufferCapacity&&this.flushBufferToOutputString()},t.prototype.appendCharCodes=function(t){for(var e=0,n=t.length;e<n;e++)this.appendCharCode(t[e])},t.prototype.appendString=function(t){for(var e=0,n=t.length;e<n;e++)this.appendCharCode(t.charCodeAt(e))},t.prototype.appendCodePoint=function(t){if(t<=65535)this.appendCharCode(t);else{if(!(t<=1114111))throw new Error("appendCodePoint: A code point of ".concat(t," cannot be encoded in UTF-16"));this.appendCharCode(55296+(t-65536>>>10)),this.appendCharCode(56320+(t-65536&1023))}},t.prototype.getOutputString=function(){return this.flushBufferToOutputString(),this.outputString},t.prototype.flushBufferToOutputString=function(){this.outputPosition===this.outputBufferCapacity?this.outputString+=String.fromCharCode.apply(null,this.outputBuffer):this.outputString+=String.fromCharCode.apply(null,this.outputBuffer.subarray(0,this.outputPosition)),this.outputPosition=0},t}();t.StringBuilder=e}(o||(o={})),function(t){var e=function(){function e(){this.restart()}return e.prototype.restart=function(){this.startTime=e.getTimestamp()},e.prototype.getElapsedTime=function(){return e.getTimestamp()-this.startTime},e.prototype.getElapsedTimeAndRestart=function(){var t=this.getElapsedTime();return this.restart(),t},e.prototype.logAndRestart=function(e,n){void 0===n&&(n=!0);var r=this.getElapsedTime(),o="".concat(e,": ").concat(r.toFixed(3),"ms");return t.log(o,n),this.restart(),r},e.getTimestamp=function(){return this.timestampFunc||this.createGlobalTimestampFunction(),this.timestampFunc()},e.getMicrosecondTimestamp=function(){return Math.floor(1e3*e.getTimestamp())},e.createGlobalTimestampFunction=function(){if("object"==typeof process&&"function"==typeof process.hrtime){var t=0;this.timestampFunc=function(){var e=process.hrtime(),n=1e3*e[0]+e[1]/1e6;return t+n},t=Date.now()-this.timestampFunc()}else if("object"==typeof chrome&&chrome.Interval){var e=Date.now(),n=new chrome.Interval;n.start(),this.timestampFunc=function(){return e+n.microseconds()/1e3}}else if("object"==typeof performance&&performance.now){var r=Date.now()-performance.now();this.timestampFunc=function(){return r+performance.now()}}else Date.now?this.timestampFunc=function(){return Date.now()}:this.timestampFunc=function(){return(new Date).getTime()}},e}();t.Timer=e}(o||(o={})),function(t){var e=function(){function e(e){void 0===e&&(e=!0),this.MinimumSequenceLength=4,this.MaximumSequenceLength=31,this.MaximumMatchDistance=32767,this.PrefixHashTableSize=65537,this.inputBufferStreamOffset=1,e&&"function"==typeof Uint32Array?this.prefixHashTable=new t.CompressorCustomHashTable(this.PrefixHashTableSize):this.prefixHashTable=new t.CompressorSimpleHashTable(this.PrefixHashTableSize)}return e.prototype.compressBlock=function(e){if(null==e)throw new TypeError("compressBlock: undefined or null input received");return"string"==typeof e&&(e=t.encodeUTF8(e)),e=t.BufferTools.convertToUint8ArrayIfNeeded(e),this.compressUtf8Block(e)},e.prototype.compressUtf8Block=function(t){if(!t||0==t.length)return new Uint8Array(0);var e=this.cropAndAddNewBytesToInputBuffer(t),n=this.inputBuffer,r=this.inputBuffer.length;this.outputBuffer=new Uint8Array(t.length),this.outputBufferPosition=0;for(var o=0,i=e;i<r;i++){var a=n[i],s=i<o;if(i>r-this.MinimumSequenceLength)s||this.outputRawByte(a);else{var u=this.getBucketIndexForPrefix(i);if(!s){var l=this.findLongestMatch(i,u);null!=l&&(this.outputPointerBytes(l.length,l.distance),o=i+l.length,s=!0)}s||this.outputRawByte(a);var c=this.inputBufferStreamOffset+i;this.prefixHashTable.addValueToBucket(u,c)}}return this.outputBuffer.subarray(0,this.outputBufferPosition)},e.prototype.findLongestMatch=function(t,e){var n=this.prefixHashTable.getArraySegmentForBucketIndex(e,this.reusableArraySegmentObject);if(null==n)return null;for(var r,o=this.inputBuffer,i=0,a=0;a<n.length;a++){var s=n.getInReversedOrder(a)-this.inputBufferStreamOffset,u=t-s,l=void 0;if(l=void 0===r?this.MinimumSequenceLength-1:r<128&&u>=128?i+(i>>>1):i,u>this.MaximumMatchDistance||l>=this.MaximumSequenceLength||t+l>=o.length)break;if(o[s+l]===o[t+l])for(var c=0;;c++){if(t+c===o.length||o[s+c]!==o[t+c]){c>l&&(r=u,i=c);break}if(c===this.MaximumSequenceLength)return{distance:u,length:this.MaximumSequenceLength}}}return void 0!==r?{distance:r,length:i}:null},e.prototype.getBucketIndexForPrefix=function(t){return(7880599*this.inputBuffer[t]+39601*this.inputBuffer[t+1]+199*this.inputBuffer[t+2]+this.inputBuffer[t+3])%this.PrefixHashTableSize},e.prototype.outputPointerBytes=function(t,e){e<128?(this.outputRawByte(192|t),this.outputRawByte(e)):(this.outputRawByte(224|t),this.outputRawByte(e>>>8),this.outputRawByte(255&e))},e.prototype.outputRawByte=function(t){this.outputBuffer[this.outputBufferPosition++]=t},e.prototype.cropAndAddNewBytesToInputBuffer=function(e){if(void 0===this.inputBuffer)return this.inputBuffer=e,0;var n=Math.min(this.inputBuffer.length,this.MaximumMatchDistance),r=this.inputBuffer.length-n;return this.inputBuffer=t.CompressionCommon.getCroppedAndAppendedByteArray(this.inputBuffer,r,n,e),this.inputBufferStreamOffset+=r,n},e}();t.Compressor=e}(o||(o={})),function(t){var e=function(){function e(t){this.minimumBucketCapacity=4,this.maximumBucketCapacity=64,this.bucketLocators=new Uint32Array(2*t),this.storage=new Uint32Array(2*t),this.storageIndex=1}return e.prototype.addValueToBucket=function(e,n){e<<=1,this.storageIndex>=this.storage.length>>>1&&this.compact();var r,o=this.bucketLocators[e];if(0===o)o=this.storageIndex,r=1,this.storage[this.storageIndex]=n,this.storageIndex+=this.minimumBucketCapacity;else{(r=this.bucketLocators[e+1])===this.maximumBucketCapacity-1&&(r=this.truncateBucketToNewerElements(o,r,this.maximumBucketCapacity/2));var i=o+r;0===this.storage[i]?(this.storage[i]=n,i===this.storageIndex&&(this.storageIndex+=r)):(t.ArrayTools.copyElements(this.storage,o,this.storage,this.storageIndex,r),o=this.storageIndex,this.storageIndex+=r,this.storage[this.storageIndex++]=n,this.storageIndex+=r),r++}this.bucketLocators[e]=o,this.bucketLocators[e+1]=r},e.prototype.truncateBucketToNewerElements=function(e,n,r){var o=e+n-r;return t.ArrayTools.copyElements(this.storage,o,this.storage,e,r),t.ArrayTools.zeroElements(this.storage,e+r,n-r),r},e.prototype.compact=function(){var e=this.bucketLocators,n=this.storage;this.bucketLocators=new Uint32Array(this.bucketLocators.length),this.storageIndex=1;for(var r=0;r<e.length;r+=2){var o=e[r+1];0!==o&&(this.bucketLocators[r]=this.storageIndex,this.bucketLocators[r+1]=o,this.storageIndex+=Math.max(Math.min(2*o,this.maximumBucketCapacity),this.minimumBucketCapacity))}this.storage=new Uint32Array(8*this.storageIndex);for(r=0;r<e.length;r+=2){var i=e[r];if(0!==i){var a=this.bucketLocators[r],s=this.bucketLocators[r+1];t.ArrayTools.copyElements(n,i,this.storage,a,s)}}},e.prototype.getArraySegmentForBucketIndex=function(e,n){e<<=1;var r=this.bucketLocators[e];return 0===r?null:(void 0===n&&(n=new t.ArraySegment(this.storage,r,this.bucketLocators[e+1])),n)},e.prototype.getUsedBucketCount=function(){return Math.floor(t.ArrayTools.countNonzeroValuesInArray(this.bucketLocators)/2)},e.prototype.getTotalElementCount=function(){for(var t=0,e=0;e<this.bucketLocators.length;e+=2)t+=this.bucketLocators[e+1];return t},e}();t.CompressorCustomHashTable=e}(o||(o={})),function(t){var e=function(){function e(t){this.maximumBucketCapacity=64,this.buckets=new Array(t)}return e.prototype.addValueToBucket=function(e,n){var r=this.buckets[e];void 0===r?this.buckets[e]=[n]:(r.length===this.maximumBucketCapacity-1&&t.ArrayTools.truncateStartingElements(r,this.maximumBucketCapacity/2),r.push(n))},e.prototype.getArraySegmentForBucketIndex=function(e,n){var r=this.buckets[e];return void 0===r?null:(void 0===n&&(n=new t.ArraySegment(r,0,r.length)),n)},e.prototype.getUsedBucketCount=function(){return t.ArrayTools.countNonzeroValuesInArray(this.buckets)},e.prototype.getTotalElementCount=function(){for(var t=0,e=0;e<this.buckets.length;e++)void 0!==this.buckets[e]&&(t+=this.buckets[e].length);return t},e}();t.CompressorSimpleHashTable=e}(o||(o={})),function(t){var e=function(){function e(){this.MaximumMatchDistance=32767,this.outputPosition=0}return e.prototype.decompressBlockToString=function(e){return e=t.BufferTools.convertToUint8ArrayIfNeeded(e),t.decodeUTF8(this.decompressBlock(e))},e.prototype.decompressBlock=function(e){this.inputBufferRemainder&&(e=t.ArrayTools.concatUint8Arrays([this.inputBufferRemainder,e]),this.inputBufferRemainder=void 0);for(var n=this.cropOutputBufferToWindowAndInitialize(Math.max(4*e.length,1024)),r=0,o=e.length;r<o;r++){var i=e[r];if(i>>>6==3){var a=i>>>5;if(r==o-1||r==o-2&&7==a){this.inputBufferRemainder=e.subarray(r);break}if(e[r+1]>>>7==1)this.outputByte(i);else{var s=31&i,u=void 0;6==a?(u=e[r+1],r+=1):(u=e[r+1]<<8|e[r+2],r+=2);for(var l=this.outputPosition-u,c=0;c<s;c++)this.outputByte(this.outputBuffer[l+c])}}else this.outputByte(i)}return this.rollBackIfOutputBufferEndsWithATruncatedMultibyteSequence(),t.CompressionCommon.getCroppedBuffer(this.outputBuffer,n,this.outputPosition-n)},e.prototype.outputByte=function(e){this.outputPosition===this.outputBuffer.length&&(this.outputBuffer=t.ArrayTools.doubleByteArrayCapacity(this.outputBuffer)),this.outputBuffer[this.outputPosition++]=e},e.prototype.cropOutputBufferToWindowAndInitialize=function(e){if(!this.outputBuffer)return this.outputBuffer=new Uint8Array(e),0;var n=Math.min(this.outputPosition,this.MaximumMatchDistance);if(this.outputBuffer=t.CompressionCommon.getCroppedBuffer(this.outputBuffer,this.outputPosition-n,n,e),this.outputPosition=n,this.outputBufferRemainder){for(var r=0;r<this.outputBufferRemainder.length;r++)this.outputByte(this.outputBufferRemainder[r]);this.outputBufferRemainder=void 0}return n},e.prototype.rollBackIfOutputBufferEndsWithATruncatedMultibyteSequence=function(){for(var t=1;t<=4&&this.outputPosition-t>=0;t++){var e=this.outputBuffer[this.outputPosition-t];if(t<4&&e>>>3==30||t<3&&e>>>4==14||t<2&&e>>>5==6)return this.outputBufferRemainder=this.outputBuffer.subarray(this.outputPosition-t,this.outputPosition),void(this.outputPosition-=t)}},e}();t.Decompressor=e}(o||(o={})),function(t){!function(e){!function(e){var n=new Uint8Array([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47]),r=new Uint8Array([255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,62,255,255,255,63,52,53,54,55,56,57,58,59,60,61,255,255,255,0,255,255,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,255,255,255,255,255,255,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,255,255,255,255]);e.encode=function(n){return n&&0!=n.length?t.runningInNodeJS()?t.BufferTools.uint8ArrayToBuffer(n).toString("base64"):e.encodeWithJS(n):""},e.decode=function(n){return n?t.runningInNodeJS()?t.BufferTools.bufferToUint8Array(Buffer.from(n,"base64")):e.decodeWithJS(n):new Uint8Array(0)},e.encodeWithJS=function(e,r){if(void 0===r&&(r=!0),!e||0==e.length)return"";for(var o,i=n,a=new t.StringBuilder,s=0,u=e.length;s<u;s+=3)s<=u-3?(o=e[s]<<16|e[s+1]<<8|e[s+2],a.appendCharCode(i[o>>>18&63]),a.appendCharCode(i[o>>>12&63]),a.appendCharCode(i[o>>>6&63]),a.appendCharCode(i[63&o]),o=0):s===u-2?(o=e[s]<<16|e[s+1]<<8,a.appendCharCode(i[o>>>18&63]),a.appendCharCode(i[o>>>12&63]),a.appendCharCode(i[o>>>6&63]),r&&a.appendCharCode(61)):s===u-1&&(o=e[s]<<16,a.appendCharCode(i[o>>>18&63]),a.appendCharCode(i[o>>>12&63]),r&&(a.appendCharCode(61),a.appendCharCode(61)));return a.getOutputString()},e.decodeWithJS=function(t,e){if(!t||0==t.length)return new Uint8Array(0);var n=t.length%4;if(1===n)throw new Error("Invalid Base64 string: length % 4 == 1");2===n?t+="==":3===n&&(t+="="),e||(e=new Uint8Array(t.length));for(var o=0,i=t.length,a=0;a<i;a+=4){var s=r[t.charCodeAt(a)]<<18|r[t.charCodeAt(a+1)]<<12|r[t.charCodeAt(a+2)]<<6|r[t.charCodeAt(a+3)];e[o++]=s>>>16&255,e[o++]=s>>>8&255,e[o++]=255&s}return 61==t.charCodeAt(i-1)&&o--,61==t.charCodeAt(i-2)&&o--,e.subarray(0,o)}}(e.Base64||(e.Base64={}))}(t.Encoding||(t.Encoding={}))}(o||(o={})),function(t){!function(e){!function(e){e.encode=function(e){if(null==e)throw new TypeError("BinaryString.encode: undefined or null input received");if(0===e.length)return"";for(var n=e.length,r=new t.StringBuilder,o=0,i=1,a=0;a<n;a+=2){var s=void 0;s=a==n-1?e[a]<<8:e[a]<<8|e[a+1],r.appendCharCode(o<<16-i|s>>>i),o=s&(1<<i)-1,15===i?(r.appendCharCode(o),o=0,i=1):i+=1,a>=n-2&&r.appendCharCode(o<<16-i)}return r.appendCharCode(32768|n%2),r.getOutputString()},e.decode=function(t){if("string"!=typeof t)throw new TypeError("BinaryString.decode: invalid input type");if(""==t)return new Uint8Array(0);for(var e=new Uint8Array(3*t.length),n=0,r=function(t){e[n++]=t>>>8,e[n++]=255&t},o=0,i=0,a=0;a<t.length;a++){var s=t.charCodeAt(a);s>=32768?(32769==s&&n--,i=0):(0==i?o=s:(r(o<<i|s>>>15-i),o=s&(1<<15-i)-1),15==i?i=0:i+=1)}return e.subarray(0,n)}}(e.BinaryString||(e.BinaryString={}))}(t.Encoding||(t.Encoding={}))}(o||(o={})),function(t){!function(t){!function(t){t.encodeFromString=function(t,e){var n=t.charCodeAt(e);if(n<55296||n>56319)return n;var r=t.charCodeAt(e+1);if(r>=56320&&r<=57343)return r-56320+(n-55296<<10)+65536;throw new Error("getUnicodeCodePoint: Received a lead surrogate character, char code ".concat(n,", followed by ").concat(r,", which is not a trailing surrogate character code."))},t.decodeToString=function(t){if(t<=65535)return String.fromCharCode(t);if(t<=1114111)return String.fromCharCode(55296+(t-65536>>>10),56320+(t-65536&1023));throw new Error("getStringFromUnicodeCodePoint: A code point of ".concat(t," cannot be encoded in UTF-16"))}}(t.CodePoint||(t.CodePoint={}))}(t.Encoding||(t.Encoding={}))}(o||(o={})),function(t){!function(t){!function(t){var e=["000","001","002","003","004","005","006","007","008","009","010","011","012","013","014","015","016","017","018","019","020","021","022","023","024","025","026","027","028","029","030","031","032","033","034","035","036","037","038","039","040","041","042","043","044","045","046","047","048","049","050","051","052","053","054","055","056","057","058","059","060","061","062","063","064","065","066","067","068","069","070","071","072","073","074","075","076","077","078","079","080","081","082","083","084","085","086","087","088","089","090","091","092","093","094","095","096","097","098","099","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255"];t.encode=function(t){for(var n=[],r=0;r<t.length;r++)n.push(e[t[r]]);return n.join(" ")}}(t.DecimalString||(t.DecimalString={}))}(t.Encoding||(t.Encoding={}))}(o||(o={})),function(t){!function(t){!function(e){e.encode=function(e){return t.BinaryString.encode(e).replace(/\0/g,"耂")},e.decode=function(e){return t.BinaryString.decode(e.replace(/\u8002/g,"\0"))}}(t.StorageBinaryString||(t.StorageBinaryString={}))}(t.Encoding||(t.Encoding={}))}(o||(o={})),function(t){!function(e){!function(n){var r,o;n.encode=function(e){return e&&0!=e.length?t.runningInNodeJS()?t.BufferTools.bufferToUint8Array(Buffer.from(e,"utf8")):n.createNativeTextEncoderAndDecoderIfAvailable()?r.encode(e):n.encodeWithJS(e):new Uint8Array(0)},n.decode=function(e){return e&&0!=e.length?t.runningInNodeJS()?t.BufferTools.uint8ArrayToBuffer(e).toString("utf8"):n.createNativeTextEncoderAndDecoderIfAvailable()?o.decode(e):n.decodeWithJS(e):""},n.encodeWithJS=function(t,n){if(!t||0==t.length)return new Uint8Array(0);n||(n=new Uint8Array(4*t.length));for(var r=0,o=0;o<t.length;o++){var i=e.CodePoint.encodeFromString(t,o);if(i<=127)n[r++]=i;else if(i<=2047)n[r++]=192|i>>>6,n[r++]=128|63&i;else if(i<=65535)n[r++]=224|i>>>12,n[r++]=128|i>>>6&63,n[r++]=128|63&i;else{if(!(i<=1114111))throw new Error("Invalid UTF-16 string: Encountered a character unsupported by UTF-8/16 (RFC 3629)");n[r++]=240|i>>>18,n[r++]=128|i>>>12&63,n[r++]=128|i>>>6&63,n[r++]=128|63&i,o++}}return n.subarray(0,r)},n.decodeWithJS=function(e,n,r){if(void 0===n&&(n=0),!e||0==e.length)return"";void 0===r&&(r=e.length);for(var o,i,a=new t.StringBuilder,s=n,u=r;s<u;){if((i=e[s])>>>7==0)o=i,s+=1;else if(i>>>5==6){if(s+1>=r)throw new Error("Invalid UTF-8 stream: Truncated codepoint sequence encountered at position "+s);o=(31&i)<<6|63&e[s+1],s+=2}else if(i>>>4==14){if(s+2>=r)throw new Error("Invalid UTF-8 stream: Truncated codepoint sequence encountered at position "+s);o=(15&i)<<12|(63&e[s+1])<<6|63&e[s+2],s+=3}else{if(i>>>3!=30)throw new Error("Invalid UTF-8 stream: An invalid lead byte value encountered at position "+s);if(s+3>=r)throw new Error("Invalid UTF-8 stream: Truncated codepoint sequence encountered at position "+s);o=(7&i)<<18|(63&e[s+1])<<12|(63&e[s+2])<<6|63&e[s+3],s+=4}a.appendCodePoint(o)}return a.getOutputString()},n.createNativeTextEncoderAndDecoderIfAvailable=function(){return!!r||"function"==typeof TextEncoder&&(r=new TextEncoder("utf-8"),o=new TextDecoder("utf-8"),!0)}}(e.UTF8||(e.UTF8={}))}(t.Encoding||(t.Encoding={}))}(o||(o={})),function(t){t.compress=function(e,n){if(void 0===n&&(n={}),null==e)throw new TypeError("compress: undefined or null input received");var r=t.CompressionCommon.detectCompressionSourceEncoding(e);n=t.ObjectTools.override({inputEncoding:r,outputEncoding:"ByteArray"},n);var o=(new t.Compressor).compressBlock(e);return t.CompressionCommon.encodeCompressedBytes(o,n.outputEncoding)},t.decompress=function(e,n){if(void 0===n&&(n={}),null==e)throw new TypeError("decompress: undefined or null input received");n=t.ObjectTools.override({inputEncoding:"ByteArray",outputEncoding:"String"},n);var r=t.CompressionCommon.decodeCompressedBytes(e,n.inputEncoding),o=(new t.Decompressor).decompressBlock(r);return t.CompressionCommon.encodeDecompressedBytes(o,n.outputEncoding)},t.compressAsync=function(e,n,r){var o;null==r&&(r=function(){});try{o=t.CompressionCommon.detectCompressionSourceEncoding(e)}catch(t){return void r(void 0,t)}n=t.ObjectTools.override({inputEncoding:o,outputEncoding:"ByteArray",useWebWorker:!0,blockSize:65536},n),t.enqueueImmediate((function(){n.useWebWorker&&t.WebWorker.createGlobalWorkerIfNeeded()?t.WebWorker.compressAsync(e,n,r):t.AsyncCompressor.compressAsync(e,n,r)}))},t.decompressAsync=function(e,n,r){if(null==r&&(r=function(){}),null!=e){n=t.ObjectTools.override({inputEncoding:"ByteArray",outputEncoding:"String",useWebWorker:!0,blockSize:65536},n);var o=t.BufferTools.convertToUint8ArrayIfNeeded(e);t.EventLoop.enqueueImmediate((function(){n.useWebWorker&&t.WebWorker.createGlobalWorkerIfNeeded()?t.WebWorker.decompressAsync(o,n,r):t.AsyncDecompressor.decompressAsync(e,n,r)}))}else r(void 0,new TypeError("decompressAsync: undefined or null input received"))},t.createCompressionStream=function(){return t.AsyncCompressor.createCompressionStream()},t.createDecompressionStream=function(){return t.AsyncDecompressor.createDecompressionStream()},t.encodeUTF8=function(e){return t.Encoding.UTF8.encode(e)},t.decodeUTF8=function(e){return t.Encoding.UTF8.decode(e)},t.encodeBase64=function(e){return t.Encoding.Base64.encode(e)},t.decodeBase64=function(e){return t.Encoding.Base64.decode(e)},t.encodeBinaryString=function(e){return t.Encoding.BinaryString.encode(e)},t.decodeBinaryString=function(e){return t.Encoding.BinaryString.decode(e)},t.encodeStorageBinaryString=function(e){return t.Encoding.StorageBinaryString.encode(e)},t.decodeStorageBinaryString=function(e){return t.Encoding.StorageBinaryString.decode(e)}}(o||(o={}))},374:(t,e,n)=>{const{AbortError:r,codes:o}=n(141),{isNodeStream:i,isWebStream:a,kControllerErrorFunction:s}=n(132),u=n(86),{ERR_INVALID_ARG_TYPE:l}=o;t.exports.addAbortSignal=function(e,n){if(((t,e)=>{if("object"!=typeof t||!("aborted"in t))throw new l(e,"AbortSignal",t)})(e,"signal"),!i(n)&&!a(n))throw new l("stream",["ReadableStream","WritableStream","Stream"],n);return t.exports.addAbortSignalNoValidate(e,n)},t.exports.addAbortSignalNoValidate=function(t,e){if("object"!=typeof t||!("aborted"in t))return e;const n=i(e)?()=>{e.destroy(new r(void 0,{cause:t.reason}))}:()=>{e[s](new r(void 0,{cause:t.reason}))};return t.aborted?n():(t.addEventListener("abort",n),u(e,(()=>t.removeEventListener("abort",n)))),e}},616:(t,e,n)=>{const{StringPrototypeSlice:r,SymbolIterator:o,TypedArrayPrototypeSet:i,Uint8Array:a}=n(191),{Buffer:s}=n(485),{inspect:u}=n(775);t.exports=class{constructor(){this.head=null,this.tail=null,this.length=0}push(t){const e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length}unshift(t){const e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length}shift(){if(0===this.length)return;const t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}clear(){this.head=this.tail=null,this.length=0}join(t){if(0===this.length)return"";let e=this.head,n=""+e.data;for(;null!==(e=e.next);)n+=t+e.data;return n}concat(t){if(0===this.length)return s.alloc(0);const e=s.allocUnsafe(t>>>0);let n=this.head,r=0;for(;n;)i(e,n.data,r),r+=n.data.length,n=n.next;return e}consume(t,e){const n=this.head.data;if(t<n.length){const e=n.slice(0,t);return this.head.data=n.slice(t),e}return t===n.length?this.shift():e?this._getString(t):this._getBuffer(t)}first(){return this.head.data}*[o](){for(let t=this.head;t;t=t.next)yield t.data}_getString(t){let e="",n=this.head,o=0;do{const i=n.data;if(!(t>i.length)){t===i.length?(e+=i,++o,n.next?this.head=n.next:this.head=this.tail=null):(e+=r(i,0,t),this.head=n,n.data=r(i,t));break}e+=i,t-=i.length,++o}while(null!==(n=n.next));return this.length-=o,e}_getBuffer(t){const e=s.allocUnsafe(t),n=t;let r=this.head,o=0;do{const s=r.data;if(!(t>s.length)){t===s.length?(i(e,s,n-t),++o,r.next?this.head=r.next:this.head=this.tail=null):(i(e,new a(s.buffer,s.byteOffset,t),n-t),this.head=r,r.data=s.slice(t));break}i(e,s,n-t),t-=s.length,++o}while(null!==(r=r.next));return this.length-=o,e}[Symbol.for("nodejs.util.inspect.custom")](t,e){return u(this,{...e,depth:0,customInspect:!1})}}},818:(t,e,n)=>{const{pipeline:r}=n(754),o=n(182),{destroyer:i}=n(230),{isNodeStream:a,isReadable:s,isWritable:u,isWebStream:l,isTransformStream:c,isWritableStream:f,isReadableStream:d}=n(132),{AbortError:h,codes:{ERR_INVALID_ARG_VALUE:p,ERR_MISSING_ARGS:g}}=n(141),y=n(86);t.exports=function(...t){if(0===t.length)throw new g("streams");if(1===t.length)return o.from(t[0]);const e=[...t];if("function"==typeof t[0]&&(t[0]=o.from(t[0])),"function"==typeof t[t.length-1]){const e=t.length-1;t[e]=o.from(t[e])}for(let n=0;n<t.length;++n)if(a(t[n])||l(t[n])){if(n<t.length-1&&!(s(t[n])||d(t[n])||c(t[n])))throw new p(`streams[${n}]`,e[n],"must be readable");if(n>0&&!(u(t[n])||f(t[n])||c(t[n])))throw new p(`streams[${n}]`,e[n],"must be writable")}let n,m,v,b,w;const _=t[0],E=r(t,(function(t){const e=b;b=null,e?e(t):t?w.destroy(t):A||S||w.destroy()})),S=!!(u(_)||f(_)||c(_)),A=!!(s(E)||d(E)||c(E));if(w=new o({writableObjectMode:!(null==_||!_.writableObjectMode),readableObjectMode:!(null==E||!E.writableObjectMode),writable:S,readable:A}),S){if(a(_))w._write=function(t,e,r){_.write(t,e)?r():n=r},w._final=function(t){_.end(),m=t},_.on("drain",(function(){if(n){const t=n;n=null,t()}}));else if(l(_)){const t=(c(_)?_.writable:_).getWriter();w._write=async function(e,n,r){try{await t.ready,t.write(e).catch((()=>{})),r()}catch(t){r(t)}},w._final=async function(e){try{await t.ready,t.close().catch((()=>{})),m=e}catch(t){e(t)}}}const t=c(E)?E.readable:E;y(t,(()=>{if(m){const t=m;m=null,t()}}))}if(A)if(a(E))E.on("readable",(function(){if(v){const t=v;v=null,t()}})),E.on("end",(function(){w.push(null)})),w._read=function(){for(;;){const t=E.read();if(null===t)return void(v=w._read);if(!w.push(t))return}};else if(l(E)){const t=(c(E)?E.readable:E).getReader();w._read=async function(){for(;;)try{const{value:e,done:n}=await t.read();if(!w.push(e))return;if(n)return void w.push(null)}catch{return}}}return w._destroy=function(t,e){t||null===b||(t=new h),v=null,n=null,m=null,null===b?e(t):(b=e,a(E)&&i(E,t))},w}},230:(t,e,n)=>{const r=n(533),{aggregateTwoErrors:o,codes:{ERR_MULTIPLE_CALLBACK:i},AbortError:a}=n(141),{Symbol:s}=n(191),{kDestroyed:u,isDestroyed:l,isFinished:c,isServerRequest:f}=n(132),d=s("kDestroy"),h=s("kConstruct");function p(t,e,n){t&&(t.stack,e&&!e.errored&&(e.errored=t),n&&!n.errored&&(n.errored=t))}function g(t,e,n){let o=!1;function i(e){if(o)return;o=!0;const i=t._readableState,a=t._writableState;p(e,a,i),a&&(a.closed=!0),i&&(i.closed=!0),"function"==typeof n&&n(e),e?r.nextTick(y,t,e):r.nextTick(m,t)}try{t._destroy(e||null,i)}catch(e){i(e)}}function y(t,e){v(t,e),m(t)}function m(t){const e=t._readableState,n=t._writableState;n&&(n.closeEmitted=!0),e&&(e.closeEmitted=!0),(null!=n&&n.emitClose||null!=e&&e.emitClose)&&t.emit("close")}function v(t,e){const n=t._readableState,r=t._writableState;null!=r&&r.errorEmitted||null!=n&&n.errorEmitted||(r&&(r.errorEmitted=!0),n&&(n.errorEmitted=!0),t.emit("error",e))}function b(t,e,n){const o=t._readableState,i=t._writableState;if(null!=i&&i.destroyed||null!=o&&o.destroyed)return this;null!=o&&o.autoDestroy||null!=i&&i.autoDestroy?t.destroy(e):e&&(e.stack,i&&!i.errored&&(i.errored=e),o&&!o.errored&&(o.errored=e),n?r.nextTick(v,t,e):v(t,e))}function w(t){let e=!1;function n(n){if(e)return void b(t,null!=n?n:new i);e=!0;const o=t._readableState,a=t._writableState,s=a||o;o&&(o.constructed=!0),a&&(a.constructed=!0),s.destroyed?t.emit(d,n):n?b(t,n,!0):r.nextTick(_,t)}try{t._construct((t=>{r.nextTick(n,t)}))}catch(t){r.nextTick(n,t)}}function _(t){t.emit(h)}function E(t){return(null==t?void 0:t.setHeader)&&"function"==typeof t.abort}function S(t){t.emit("close")}function A(t,e){t.emit("error",e),r.nextTick(S,t)}t.exports={construct:function(t,e){if("function"!=typeof t._construct)return;const n=t._readableState,o=t._writableState;n&&(n.constructed=!1),o&&(o.constructed=!1),t.once(h,e),t.listenerCount(h)>1||r.nextTick(w,t)},destroyer:function(t,e){t&&!l(t)&&(e||c(t)||(e=new a),f(t)?(t.socket=null,t.destroy(e)):E(t)?t.abort():E(t.req)?t.req.abort():"function"==typeof t.destroy?t.destroy(e):"function"==typeof t.close?t.close():e?r.nextTick(A,t,e):r.nextTick(S,t),t.destroyed||(t[u]=!0))},destroy:function(t,e){const n=this._readableState,r=this._writableState,i=r||n;return null!=r&&r.destroyed||null!=n&&n.destroyed?("function"==typeof e&&e(),this):(p(t,r,n),r&&(r.destroyed=!0),n&&(n.destroyed=!0),i.constructed?g(this,t,e):this.once(d,(function(n){g(this,o(n,t),e)})),this)},undestroy:function(){const t=this._readableState,e=this._writableState;t&&(t.constructed=!0,t.closed=!1,t.closeEmitted=!1,t.destroyed=!1,t.errored=null,t.errorEmitted=!1,t.reading=!1,t.ended=!1===t.readable,t.endEmitted=!1===t.readable),e&&(e.constructed=!0,e.destroyed=!1,e.closed=!1,e.closeEmitted=!1,e.errored=null,e.errorEmitted=!1,e.finalCalled=!1,e.prefinished=!1,e.ended=!1===e.writable,e.ending=!1===e.writable,e.finished=!1===e.writable)},errorOrDestroy:b}},182:(t,e,n)=>{const{ObjectDefineProperties:r,ObjectGetOwnPropertyDescriptor:o,ObjectKeys:i,ObjectSetPrototypeOf:a}=n(191);t.exports=l;const s=n(858),u=n(373);a(l.prototype,s.prototype),a(l,s);{const t=i(u.prototype);for(let e=0;e<t.length;e++){const n=t[e];l.prototype[n]||(l.prototype[n]=u.prototype[n])}}function l(t){if(!(this instanceof l))return new l(t);s.call(this,t),u.call(this,t),t?(this.allowHalfOpen=!1!==t.allowHalfOpen,!1===t.readable&&(this._readableState.readable=!1,this._readableState.ended=!0,this._readableState.endEmitted=!0),!1===t.writable&&(this._writableState.writable=!1,this._writableState.ending=!0,this._writableState.ended=!0,this._writableState.finished=!0)):this.allowHalfOpen=!0}let c,f;function d(){return void 0===c&&(c={}),c}r(l.prototype,{writable:{__proto__:null,...o(u.prototype,"writable")},writableHighWaterMark:{__proto__:null,...o(u.prototype,"writableHighWaterMark")},writableObjectMode:{__proto__:null,...o(u.prototype,"writableObjectMode")},writableBuffer:{__proto__:null,...o(u.prototype,"writableBuffer")},writableLength:{__proto__:null,...o(u.prototype,"writableLength")},writableFinished:{__proto__:null,...o(u.prototype,"writableFinished")},writableCorked:{__proto__:null,...o(u.prototype,"writableCorked")},writableEnded:{__proto__:null,...o(u.prototype,"writableEnded")},writableNeedDrain:{__proto__:null,...o(u.prototype,"writableNeedDrain")},destroyed:{__proto__:null,get(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set(t){this._readableState&&this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}}),l.fromWeb=function(t,e){return d().newStreamDuplexFromReadableWritablePair(t,e)},l.toWeb=function(t){return d().newReadableWritablePairFromDuplex(t)},l.from=function(t){return f||(f=n(749)),f(t,"body")}},749:(t,e,n)=>{const r=n(533),o=n(485),{isReadable:i,isWritable:a,isIterable:s,isNodeStream:u,isReadableNodeStream:l,isWritableNodeStream:c,isDuplexNodeStream:f}=n(132),d=n(86),{AbortError:h,codes:{ERR_INVALID_ARG_TYPE:p,ERR_INVALID_RETURN_VALUE:g}}=n(141),{destroyer:y}=n(230),m=n(182),v=n(858),{createDeferredPromise:b}=n(775),w=n(913),_=globalThis.Blob||o.Blob,E=void 0!==_?function(t){return t instanceof _}:function(t){return!1},S=globalThis.AbortController||n(876).AbortController,{FunctionPrototypeCall:A}=n(191);class I extends m{constructor(t){super(t),!1===(null==t?void 0:t.readable)&&(this._readableState.readable=!1,this._readableState.ended=!0,this._readableState.endEmitted=!0),!1===(null==t?void 0:t.writable)&&(this._writableState.writable=!1,this._writableState.ending=!0,this._writableState.ended=!0,this._writableState.finished=!0)}}function T(t){const e=t.readable&&"function"!=typeof t.readable.read?v.wrap(t.readable):t.readable,n=t.writable;let r,o,s,u,l,c=!!i(e),f=!!a(n);function p(t){const e=u;u=null,e?e(t):t&&l.destroy(t)}return l=new I({readableObjectMode:!(null==e||!e.readableObjectMode),writableObjectMode:!(null==n||!n.writableObjectMode),readable:c,writable:f}),f&&(d(n,(t=>{f=!1,t&&y(e,t),p(t)})),l._write=function(t,e,o){n.write(t,e)?o():r=o},l._final=function(t){n.end(),o=t},n.on("drain",(function(){if(r){const t=r;r=null,t()}})),n.on("finish",(function(){if(o){const t=o;o=null,t()}}))),c&&(d(e,(t=>{c=!1,t&&y(e,t),p(t)})),e.on("readable",(function(){if(s){const t=s;s=null,t()}})),e.on("end",(function(){l.push(null)})),l._read=function(){for(;;){const t=e.read();if(null===t)return void(s=l._read);if(!l.push(t))return}}),l._destroy=function(t,i){t||null===u||(t=new h),s=null,r=null,o=null,null===u?i(t):(u=i,y(n,t),y(e,t))},l}t.exports=function t(e,n){if(f(e))return e;if(l(e))return T({readable:e});if(c(e))return T({writable:e});if(u(e))return T({writable:!1,readable:!1});if("function"==typeof e){const{value:t,write:o,final:i,destroy:a}=function(t){let{promise:e,resolve:n}=b();const o=new S,i=o.signal,a=t(async function*(){for(;;){const t=e;e=null;const{chunk:o,done:a,cb:s}=await t;if(r.nextTick(s),a)return;if(i.aborted)throw new h(void 0,{cause:i.reason});({promise:e,resolve:n}=b()),yield o}}(),{signal:i});return{value:a,write(t,e,r){const o=n;n=null,o({chunk:t,done:!1,cb:r})},final(t){const e=n;n=null,e({done:!0,cb:t})},destroy(t,e){o.abort(),e(t)}}}(e);if(s(t))return w(I,t,{objectMode:!0,write:o,final:i,destroy:a});const u=null==t?void 0:t.then;if("function"==typeof u){let e;const n=A(u,t,(t=>{if(null!=t)throw new g("nully","body",t)}),(t=>{y(e,t)}));return e=new I({objectMode:!0,readable:!1,write:o,final(t){i((async()=>{try{await n,r.nextTick(t,null)}catch(e){r.nextTick(t,e)}}))},destroy:a})}throw new g("Iterable, AsyncIterable or AsyncFunction",n,t)}if(E(e))return t(e.arrayBuffer());if(s(e))return w(I,e,{objectMode:!0,writable:!1});if("object"==typeof(null==e?void 0:e.writable)||"object"==typeof(null==e?void 0:e.readable)){return T({readable:null!=e&&e.readable?l(null==e?void 0:e.readable)?null==e?void 0:e.readable:t(e.readable):void 0,writable:null!=e&&e.writable?c(null==e?void 0:e.writable)?null==e?void 0:e.writable:t(e.writable):void 0})}const o=null==e?void 0:e.then;if("function"==typeof o){let t;return A(o,e,(e=>{null!=e&&t.push(e),t.push(null)}),(e=>{y(t,e)})),t=new I({objectMode:!0,writable:!1,read(){}})}throw new p(n,["Blob","ReadableStream","WritableStream","Stream","Iterable","AsyncIterable","Function","{ readable, writable } pair","Promise"],e)}},86:(t,e,n)=>{const r=n(533),{AbortError:o,codes:i}=n(141),{ERR_INVALID_ARG_TYPE:a,ERR_STREAM_PREMATURE_CLOSE:s}=i,{kEmptyObject:u,once:l}=n(775),{validateAbortSignal:c,validateFunction:f,validateObject:d,validateBoolean:h}=n(904),{Promise:p,PromisePrototypeThen:g}=n(191),{isClosed:y,isReadable:m,isReadableNodeStream:v,isReadableStream:b,isReadableFinished:w,isReadableErrored:_,isWritable:E,isWritableNodeStream:S,isWritableStream:A,isWritableFinished:I,isWritableErrored:T,isNodeStream:R,willEmitClose:x,kIsClosedPromise:C}=n(132);const B=()=>{};function k(t,e,n){var i,h;if(2===arguments.length?(n=e,e=u):null==e?e=u:d(e,"options"),f(n,"callback"),c(e.signal,"options.signal"),n=l(n),b(t)||A(t))return function(t,e,n){let i=!1,a=B;if(e.signal)if(a=()=>{i=!0,n.call(t,new o(void 0,{cause:e.signal.reason}))},e.signal.aborted)r.nextTick(a);else{const r=n;n=l(((...n)=>{e.signal.removeEventListener("abort",a),r.apply(t,n)})),e.signal.addEventListener("abort",a)}const s=(...e)=>{i||r.nextTick((()=>n.apply(t,e)))};return g(t[C].promise,s,s),B}(t,e,n);if(!R(t))throw new a("stream",["ReadableStream","WritableStream","Stream"],t);const p=null!==(i=e.readable)&&void 0!==i?i:v(t),k=null!==(h=e.writable)&&void 0!==h?h:S(t),L=t._writableState,O=t._readableState,U=()=>{t.writable||M()};let j=x(t)&&v(t)===p&&S(t)===k,N=I(t,!1);const M=()=>{N=!0,t.destroyed&&(j=!1),(!j||t.readable&&!p)&&(p&&!P||n.call(t))};let P=w(t,!1);const W=()=>{P=!0,t.destroyed&&(j=!1),(!j||t.writable&&!k)&&(k&&!N||n.call(t))},$=e=>{n.call(t,e)};let D=y(t);const F=()=>{D=!0;const e=T(t)||_(t);return e&&"boolean"!=typeof e?n.call(t,e):p&&!P&&v(t,!0)&&!w(t,!1)?n.call(t,new s):!k||N||I(t,!1)?void n.call(t):n.call(t,new s)},z=()=>{D=!0;const e=T(t)||_(t);if(e&&"boolean"!=typeof e)return n.call(t,e);n.call(t)},q=()=>{t.req.on("finish",M)};!function(t){return t.setHeader&&"function"==typeof t.abort}(t)?k&&!L&&(t.on("end",U),t.on("close",U)):(t.on("complete",M),j||t.on("abort",F),t.req?q():t.on("request",q)),j||"boolean"!=typeof t.aborted||t.on("aborted",F),t.on("end",W),t.on("finish",M),!1!==e.error&&t.on("error",$),t.on("close",F),D?r.nextTick(F):null!=L&&L.errorEmitted||null!=O&&O.errorEmitted?j||r.nextTick(z):(p||j&&!m(t)||!N&&!1!==E(t))&&(k||j&&!E(t)||!P&&!1!==m(t))?O&&t.req&&t.aborted&&r.nextTick(z):r.nextTick(z);const H=()=>{n=B,t.removeListener("aborted",F),t.removeListener("complete",M),t.removeListener("abort",F),t.removeListener("request",q),t.req&&t.req.removeListener("finish",M),t.removeListener("end",U),t.removeListener("close",U),t.removeListener("finish",M),t.removeListener("end",W),t.removeListener("error",$),t.removeListener("close",F)};if(e.signal&&!D){const i=()=>{const r=n;H(),r.call(t,new o(void 0,{cause:e.signal.reason}))};if(e.signal.aborted)r.nextTick(i);else{const r=n;n=l(((...n)=>{e.signal.removeEventListener("abort",i),r.apply(t,n)})),e.signal.addEventListener("abort",i)}}return H}t.exports=k,t.exports.finished=function(t,e){var n;let r=!1;return null===e&&(e=u),null!==(n=e)&&void 0!==n&&n.cleanup&&(h(e.cleanup,"cleanup"),r=e.cleanup),new p(((n,o)=>{const i=k(t,e,(t=>{r&&i(),t?o(t):n()}))}))}},913:(t,e,n)=>{const r=n(533),{PromisePrototypeThen:o,SymbolAsyncIterator:i,SymbolIterator:a}=n(191),{Buffer:s}=n(485),{ERR_INVALID_ARG_TYPE:u,ERR_STREAM_NULL_VALUES:l}=n(141).codes;t.exports=function(t,e,n){let c,f;if("string"==typeof e||e instanceof s)return new t({objectMode:!0,...n,read(){this.push(e),this.push(null)}});if(e&&e[i])f=!0,c=e[i]();else{if(!e||!e[a])throw new u("iterable",["Iterable"],e);f=!1,c=e[a]()}const d=new t({objectMode:!0,highWaterMark:1,...n});let h=!1;return d._read=function(){h||(h=!0,async function(){for(;;){try{const{value:t,done:e}=f?await c.next():c.next();if(e)d.push(null);else{const e=t&&"function"==typeof t.then?await t:t;if(null===e)throw h=!1,new l;if(d.push(e))continue;h=!1}}catch(t){d.destroy(t)}break}}())},d._destroy=function(t,e){o(async function(t){const e=null!=t,n="function"==typeof c.throw;if(e&&n){const{value:e,done:n}=await c.throw(t);if(await e,n)return}if("function"==typeof c.return){const{value:t}=await c.return();await t}}(t),(()=>r.nextTick(e,t)),(n=>r.nextTick(e,n||t)))},d}},200:(t,e,n)=>{const{ArrayIsArray:r,ObjectSetPrototypeOf:o}=n(191),{EventEmitter:i}=n(465);function a(t){i.call(this,t)}function s(t,e,n){if("function"==typeof t.prependListener)return t.prependListener(e,n);t._events&&t._events[e]?r(t._events[e])?t._events[e].unshift(n):t._events[e]=[n,t._events[e]]:t.on(e,n)}o(a.prototype,i.prototype),o(a,i),a.prototype.pipe=function(t,e){const n=this;function r(e){t.writable&&!1===t.write(e)&&n.pause&&n.pause()}function o(){n.readable&&n.resume&&n.resume()}n.on("data",r),t.on("drain",o),t._isStdio||e&&!1===e.end||(n.on("end",u),n.on("close",l));let a=!1;function u(){a||(a=!0,t.end())}function l(){a||(a=!0,"function"==typeof t.destroy&&t.destroy())}function c(t){f(),0===i.listenerCount(this,"error")&&this.emit("error",t)}function f(){n.removeListener("data",r),t.removeListener("drain",o),n.removeListener("end",u),n.removeListener("close",l),n.removeListener("error",c),t.removeListener("error",c),n.removeListener("end",f),n.removeListener("close",f),t.removeListener("close",f)}return s(n,"error",c),s(t,"error",c),n.on("end",f),n.on("close",f),t.on("close",f),t.emit("pipe",n),t},t.exports={Stream:a,prependListener:s}},554:(t,e,n)=>{const r=globalThis.AbortController||n(876).AbortController,{codes:{ERR_INVALID_ARG_VALUE:o,ERR_INVALID_ARG_TYPE:i,ERR_MISSING_ARGS:a,ERR_OUT_OF_RANGE:s},AbortError:u}=n(141),{validateAbortSignal:l,validateInteger:c,validateObject:f}=n(904),d=n(191).Symbol("kWeak"),{finished:h}=n(86),p=n(818),{addAbortSignalNoValidate:g}=n(374),{isWritable:y,isNodeStream:m}=n(132),{ArrayPrototypePush:v,MathFloor:b,Number:w,NumberIsNaN:_,Promise:E,PromiseReject:S,PromisePrototypeThen:A,Symbol:I}=n(191),T=I("kEmpty"),R=I("kEof");function x(t,e){if("function"!=typeof t)throw new i("fn",["Function","AsyncFunction"],t);null!=e&&f(e,"options"),null!=(null==e?void 0:e.signal)&&l(e.signal,"options.signal");let n=1;return null!=(null==e?void 0:e.concurrency)&&(n=b(e.concurrency)),c(n,"concurrency",1),async function*(){var o,i;const a=new r,s=this,l=[],c=a.signal,f={signal:c},d=()=>a.abort();let h,p;null!=e&&null!==(o=e.signal)&&void 0!==o&&o.aborted&&d(),null==e||null===(i=e.signal)||void 0===i||i.addEventListener("abort",d);let g=!1;function y(){g=!0}!async function(){try{for await(let e of s){var r;if(g)return;if(c.aborted)throw new u;try{e=t(e,f)}catch(t){e=S(t)}e!==T&&("function"==typeof(null===(r=e)||void 0===r?void 0:r.catch)&&e.catch(y),l.push(e),h&&(h(),h=null),!g&&l.length&&l.length>=n&&await new E((t=>{p=t})))}l.push(R)}catch(t){const e=S(t);A(e,void 0,y),l.push(e)}finally{var o;g=!0,h&&(h(),h=null),null==e||null===(o=e.signal)||void 0===o||o.removeEventListener("abort",d)}}();try{for(;;){for(;l.length>0;){const t=await l[0];if(t===R)return;if(c.aborted)throw new u;t!==T&&(yield t),l.shift(),p&&(p(),p=null)}await new E((t=>{h=t}))}}finally{a.abort(),g=!0,p&&(p(),p=null)}}.call(this)}async function C(t,e=void 0){for await(const n of B.call(this,t,e))return!0;return!1}function B(t,e){if("function"!=typeof t)throw new i("fn",["Function","AsyncFunction"],t);return x.call(this,(async function(e,n){return await t(e,n)?e:T}),e)}class k extends a{constructor(){super("reduce"),this.message="Reduce of an empty stream requires an initial value"}}function L(t){if(t=w(t),_(t))return 0;if(t<0)throw new s("number",">= 0",t);return t}t.exports.streamReturningOperators={asIndexedPairs:function(t=void 0){return null!=t&&f(t,"options"),null!=(null==t?void 0:t.signal)&&l(t.signal,"options.signal"),async function*(){let e=0;for await(const r of this){var n;if(null!=t&&null!==(n=t.signal)&&void 0!==n&&n.aborted)throw new u({cause:t.signal.reason});yield[e++,r]}}.call(this)},drop:function(t,e=void 0){return null!=e&&f(e,"options"),null!=(null==e?void 0:e.signal)&&l(e.signal,"options.signal"),t=L(t),async function*(){var n;if(null!=e&&null!==(n=e.signal)&&void 0!==n&&n.aborted)throw new u;for await(const n of this){var r;if(null!=e&&null!==(r=e.signal)&&void 0!==r&&r.aborted)throw new u;t--<=0&&(yield n)}}.call(this)},filter:B,flatMap:function(t,e){const n=x.call(this,t,e);return async function*(){for await(const t of n)yield*t}.call(this)},map:x,take:function(t,e=void 0){return null!=e&&f(e,"options"),null!=(null==e?void 0:e.signal)&&l(e.signal,"options.signal"),t=L(t),async function*(){var n;if(null!=e&&null!==(n=e.signal)&&void 0!==n&&n.aborted)throw new u;for await(const n of this){var r;if(null!=e&&null!==(r=e.signal)&&void 0!==r&&r.aborted)throw new u;if(!(t-- >0))return;yield n}}.call(this)},compose:function(t,e){if(null!=e&&f(e,"options"),null!=(null==e?void 0:e.signal)&&l(e.signal,"options.signal"),m(t)&&!y(t))throw new o("stream",t,"must be writable");const n=p(this,t);return null!=e&&e.signal&&g(e.signal,n),n}},t.exports.promiseReturningOperators={every:async function(t,e=void 0){if("function"!=typeof t)throw new i("fn",["Function","AsyncFunction"],t);return!await C.call(this,(async(...e)=>!await t(...e)),e)},forEach:async function(t,e){if("function"!=typeof t)throw new i("fn",["Function","AsyncFunction"],t);for await(const n of x.call(this,(async function(e,n){return await t(e,n),T}),e));},reduce:async function(t,e,n){var o;if("function"!=typeof t)throw new i("reducer",["Function","AsyncFunction"],t);null!=n&&f(n,"options"),null!=(null==n?void 0:n.signal)&&l(n.signal,"options.signal");let a=arguments.length>1;if(null!=n&&null!==(o=n.signal)&&void 0!==o&&o.aborted){const t=new u(void 0,{cause:n.signal.reason});throw this.once("error",(()=>{})),await h(this.destroy(t)),t}const s=new r,c=s.signal;if(null!=n&&n.signal){const t={once:!0,[d]:this};n.signal.addEventListener("abort",(()=>s.abort()),t)}let p=!1;try{for await(const r of this){var g;if(p=!0,null!=n&&null!==(g=n.signal)&&void 0!==g&&g.aborted)throw new u;a?e=await t(e,r,{signal:c}):(e=r,a=!0)}if(!p&&!a)throw new k}finally{s.abort()}return e},toArray:async function(t){null!=t&&f(t,"options"),null!=(null==t?void 0:t.signal)&&l(t.signal,"options.signal");const e=[];for await(const r of this){var n;if(null!=t&&null!==(n=t.signal)&&void 0!==n&&n.aborted)throw new u(void 0,{cause:t.signal.reason});v(e,r)}return e},some:C,find:async function(t,e){for await(const n of B.call(this,t,e))return n}}},467:(t,e,n)=>{const{ObjectSetPrototypeOf:r}=n(191);t.exports=i;const o=n(210);function i(t){if(!(this instanceof i))return new i(t);o.call(this,t)}r(i.prototype,o.prototype),r(i,o),i.prototype._transform=function(t,e,n){n(null,t)}},754:(t,e,n)=>{const r=n(533),{ArrayIsArray:o,Promise:i,SymbolAsyncIterator:a}=n(191),s=n(86),{once:u}=n(775),l=n(230),c=n(182),{aggregateTwoErrors:f,codes:{ERR_INVALID_ARG_TYPE:d,ERR_INVALID_RETURN_VALUE:h,ERR_MISSING_ARGS:p,ERR_STREAM_DESTROYED:g,ERR_STREAM_PREMATURE_CLOSE:y},AbortError:m}=n(141),{validateFunction:v,validateAbortSignal:b}=n(904),{isIterable:w,isReadable:_,isReadableNodeStream:E,isNodeStream:S,isTransformStream:A,isWebStream:I,isReadableStream:T,isReadableEnded:R}=n(132),x=globalThis.AbortController||n(876).AbortController;let C,B;function k(t,e,n){let r=!1;t.on("close",(()=>{r=!0}));return{destroy:e=>{r||(r=!0,l.destroyer(t,e||new g("pipe")))},cleanup:s(t,{readable:e,writable:n},(t=>{r=!t}))}}function L(t){if(w(t))return t;if(E(t))return async function*(t){B||(B=n(858));yield*B.prototype[a].call(t)}(t);throw new d("val",["Readable","Iterable","AsyncIterable"],t)}async function O(t,e,n,{end:r}){let o,a=null;const u=t=>{if(t&&(o=t),a){const t=a;a=null,t()}},l=()=>new i(((t,e)=>{o?e(o):a=()=>{o?e(o):t()}}));e.on("drain",u);const c=s(e,{readable:!1},u);try{e.writableNeedDrain&&await l();for await(const n of t)e.write(n)||await l();r&&e.end(),await l(),n()}catch(t){n(o!==t?f(o,t):t)}finally{c(),e.off("drain",u)}}async function U(t,e,n,{end:r}){A(e)&&(e=e.writable);const o=e.getWriter();try{for await(const e of t)await o.ready,o.write(e).catch((()=>{}));await o.ready,r&&await o.close(),n()}catch(t){try{await o.abort(t),n(t)}catch(t){n(t)}}}function j(t,e,i){if(1===t.length&&o(t[0])&&(t=t[0]),t.length<2)throw new p("streams");const a=new x,s=a.signal,u=null==i?void 0:i.signal,l=[];function f(){M(new m)}let g,y;b(u,"options.signal"),null==u||u.addEventListener("abort",f);const v=[];let R,B=0;function j(t){M(t,0==--B)}function M(t,n){if(!t||g&&"ERR_STREAM_PREMATURE_CLOSE"!==g.code||(g=t),g||n){for(;v.length;)v.shift()(g);null==u||u.removeEventListener("abort",f),a.abort(),n&&(g||l.forEach((t=>t())),r.nextTick(e,g,y))}}for(let D=0;D<t.length;D++){const F=t[D],z=D<t.length-1,q=D>0,H=z||!1!==(null==i?void 0:i.end),V=D===t.length-1;if(S(F)){if(H){const{destroy:G,cleanup:J}=k(F,z,q);v.push(G),_(F)&&V&&l.push(J)}function P(t){t&&"AbortError"!==t.name&&"ERR_STREAM_PREMATURE_CLOSE"!==t.code&&j(t)}F.on("error",P),_(F)&&V&&l.push((()=>{F.removeListener("error",P)}))}if(0===D)if("function"==typeof F){if(R=F({signal:s}),!w(R))throw new h("Iterable, AsyncIterable or Stream","source",R)}else R=w(F)||E(F)||A(F)?F:c.from(F);else if("function"==typeof F){var W;if(A(R))R=L(null===(W=R)||void 0===W?void 0:W.readable);else R=L(R);if(R=F(R,{signal:s}),z){if(!w(R,!0))throw new h("AsyncIterable",`transform[${D-1}]`,R)}else{var $;C||(C=n(467));const Y=new C({objectMode:!0}),K=null===($=R)||void 0===$?void 0:$.then;if("function"==typeof K)B++,K.call(R,(t=>{y=t,null!=t&&Y.write(t),H&&Y.end(),r.nextTick(j)}),(t=>{Y.destroy(t),r.nextTick(j,t)}));else if(w(R,!0))B++,O(R,Y,j,{end:H});else{if(!T(R)&&!A(R))throw new h("AsyncIterable or Promise","destination",R);{const Q=R.readable||R;B++,O(Q,Y,j,{end:H})}}R=Y;const{destroy:X,cleanup:Z}=k(R,!1,!0);v.push(X),V&&l.push(Z)}}else if(S(F)){if(E(R)){B+=2;const tt=N(R,F,j,{end:H});_(F)&&V&&l.push(tt)}else if(A(R)||T(R)){const et=R.readable||R;B++,O(et,F,j,{end:H})}else{if(!w(R))throw new d("val",["Readable","Iterable","AsyncIterable","ReadableStream","TransformStream"],R);B++,O(R,F,j,{end:H})}R=F}else if(I(F)){if(E(R))B++,U(L(R),F,j,{end:H});else if(T(R)||w(R))B++,U(R,F,j,{end:H});else{if(!A(R))throw new d("val",["Readable","Iterable","AsyncIterable","ReadableStream","TransformStream"],R);B++,U(R.readable,F,j,{end:H})}R=F}else R=c.from(F)}return(null!=s&&s.aborted||null!=u&&u.aborted)&&r.nextTick(f),R}function N(t,e,n,{end:o}){let i=!1;if(e.on("close",(()=>{i||n(new y)})),t.pipe(e,{end:!1}),o){function a(){i=!0,e.end()}R(t)?r.nextTick(a):t.once("end",a)}else n();return s(t,{readable:!0,writable:!1},(e=>{const r=t._readableState;e&&"ERR_STREAM_PREMATURE_CLOSE"===e.code&&r&&r.ended&&!r.errored&&!r.errorEmitted?t.once("end",n).once("error",n):n(e)})),s(e,{readable:!1,writable:!0},n)}t.exports={pipelineImpl:j,pipeline:function(...t){return j(t,u(function(t){return v(t[t.length-1],"streams[stream.length - 1]"),t.pop()}(t)))}}},858:(t,e,n)=>{const r=n(533),{ArrayPrototypeIndexOf:o,NumberIsInteger:i,NumberIsNaN:a,NumberParseInt:s,ObjectDefineProperties:u,ObjectKeys:l,ObjectSetPrototypeOf:c,Promise:f,SafeSet:d,SymbolAsyncIterator:h,Symbol:p}=n(191);t.exports=W,W.ReadableState=P;const{EventEmitter:g}=n(465),{Stream:y,prependListener:m}=n(200),{Buffer:v}=n(485),{addAbortSignal:b}=n(374),w=n(86);let _=n(775).debuglog("stream",(t=>{_=t}));const E=n(616),S=n(230),{getHighWaterMark:A,getDefaultHighWaterMark:I}=n(498),{aggregateTwoErrors:T,codes:{ERR_INVALID_ARG_TYPE:R,ERR_METHOD_NOT_IMPLEMENTED:x,ERR_OUT_OF_RANGE:C,ERR_STREAM_PUSH_AFTER_EOF:B,ERR_STREAM_UNSHIFT_AFTER_END_EVENT:k}}=n(141),{validateObject:L}=n(904),O=p("kPaused"),{StringDecoder:U}=n(464),j=n(913);c(W.prototype,y.prototype),c(W,y);const N=()=>{},{errorOrDestroy:M}=S;function P(t,e,r){"boolean"!=typeof r&&(r=e instanceof n(182)),this.objectMode=!(!t||!t.objectMode),r&&(this.objectMode=this.objectMode||!(!t||!t.readableObjectMode)),this.highWaterMark=t?A(this,t,"readableHighWaterMark",r):I(!1),this.buffer=new E,this.length=0,this.pipes=[],this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.constructed=!0,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this[O]=null,this.errorEmitted=!1,this.emitClose=!t||!1!==t.emitClose,this.autoDestroy=!t||!1!==t.autoDestroy,this.destroyed=!1,this.errored=null,this.closed=!1,this.closeEmitted=!1,this.defaultEncoding=t&&t.defaultEncoding||"utf8",this.awaitDrainWriters=null,this.multiAwaitDrain=!1,this.readingMore=!1,this.dataEmitted=!1,this.decoder=null,this.encoding=null,t&&t.encoding&&(this.decoder=new U(t.encoding),this.encoding=t.encoding)}function W(t){if(!(this instanceof W))return new W(t);const e=this instanceof n(182);this._readableState=new P(t,this,e),t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.construct&&(this._construct=t.construct),t.signal&&!e&&b(t.signal,this)),y.call(this,t),S.construct(this,(()=>{this._readableState.needReadable&&H(this,this._readableState)}))}function $(t,e,n,r){_("readableAddChunk",e);const o=t._readableState;let i;if(o.objectMode||("string"==typeof e?(n=n||o.defaultEncoding,o.encoding!==n&&(r&&o.encoding?e=v.from(e,n).toString(o.encoding):(e=v.from(e,n),n=""))):e instanceof v?n="":y._isUint8Array(e)?(e=y._uint8ArrayToBuffer(e),n=""):null!=e&&(i=new R("chunk",["string","Buffer","Uint8Array"],e))),i)M(t,i);else if(null===e)o.reading=!1,function(t,e){if(_("onEofChunk"),e.ended)return;if(e.decoder){const t=e.decoder.end();t&&t.length&&(e.buffer.push(t),e.length+=e.objectMode?1:t.length)}e.ended=!0,e.sync?z(t):(e.needReadable=!1,e.emittedReadable=!0,q(t))}(t,o);else if(o.objectMode||e&&e.length>0)if(r)if(o.endEmitted)M(t,new k);else{if(o.destroyed||o.errored)return!1;D(t,o,e,!0)}else if(o.ended)M(t,new B);else{if(o.destroyed||o.errored)return!1;o.reading=!1,o.decoder&&!n?(e=o.decoder.write(e),o.objectMode||0!==e.length?D(t,o,e,!1):H(t,o)):D(t,o,e,!1)}else r||(o.reading=!1,H(t,o));return!o.ended&&(o.length<o.highWaterMark||0===o.length)}function D(t,e,n,r){e.flowing&&0===e.length&&!e.sync&&t.listenerCount("data")>0?(e.multiAwaitDrain?e.awaitDrainWriters.clear():e.awaitDrainWriters=null,e.dataEmitted=!0,t.emit("data",n)):(e.length+=e.objectMode?1:n.length,r?e.buffer.unshift(n):e.buffer.push(n),e.needReadable&&z(t)),H(t,e)}W.prototype.destroy=S.destroy,W.prototype._undestroy=S.undestroy,W.prototype._destroy=function(t,e){e(t)},W.prototype[g.captureRejectionSymbol]=function(t){this.destroy(t)},W.prototype.push=function(t,e){return $(this,t,e,!1)},W.prototype.unshift=function(t,e){return $(this,t,e,!0)},W.prototype.isPaused=function(){const t=this._readableState;return!0===t[O]||!1===t.flowing},W.prototype.setEncoding=function(t){const e=new U(t);this._readableState.decoder=e,this._readableState.encoding=this._readableState.decoder.encoding;const n=this._readableState.buffer;let r="";for(const t of n)r+=e.write(t);return n.clear(),""!==r&&n.push(r),this._readableState.length=r.length,this};function F(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:a(t)?e.flowing&&e.length?e.buffer.first().length:e.length:t<=e.length?t:e.ended?e.length:0}function z(t){const e=t._readableState;_("emitReadable",e.needReadable,e.emittedReadable),e.needReadable=!1,e.emittedReadable||(_("emitReadable",e.flowing),e.emittedReadable=!0,r.nextTick(q,t))}function q(t){const e=t._readableState;_("emitReadable_",e.destroyed,e.length,e.ended),e.destroyed||e.errored||!e.length&&!e.ended||(t.emit("readable"),e.emittedReadable=!1),e.needReadable=!e.flowing&&!e.ended&&e.length<=e.highWaterMark,K(t)}function H(t,e){!e.readingMore&&e.constructed&&(e.readingMore=!0,r.nextTick(V,t,e))}function V(t,e){for(;!e.reading&&!e.ended&&(e.length<e.highWaterMark||e.flowing&&0===e.length);){const n=e.length;if(_("maybeReadMore read 0"),t.read(0),n===e.length)break}e.readingMore=!1}function G(t){const e=t._readableState;e.readableListening=t.listenerCount("readable")>0,e.resumeScheduled&&!1===e[O]?e.flowing=!0:t.listenerCount("data")>0?t.resume():e.readableListening||(e.flowing=null)}function J(t){_("readable nexttick read 0"),t.read(0)}function Y(t,e){_("resume",e.reading),e.reading||t.read(0),e.resumeScheduled=!1,t.emit("resume"),K(t),e.flowing&&!e.reading&&t.read(0)}function K(t){const e=t._readableState;for(_("flow",e.flowing);e.flowing&&null!==t.read(););}function X(t,e){"function"!=typeof t.read&&(t=W.wrap(t,{objectMode:!0}));const n=async function*(t,e){let n,r=N;function o(e){this===t?(r(),r=N):r=e}t.on("readable",o);const i=w(t,{writable:!1},(t=>{n=t?T(n,t):null,r(),r=N}));try{for(;;){const e=t.destroyed?null:t.read();if(null!==e)yield e;else{if(n)throw n;if(null===n)return;await new f(o)}}}catch(t){throw n=T(n,t),n}finally{!n&&!1===(null==e?void 0:e.destroyOnReturn)||void 0!==n&&!t._readableState.autoDestroy?(t.off("readable",o),i()):S.destroyer(t,null)}}(t,e);return n.stream=t,n}function Z(t,e){if(0===e.length)return null;let n;return e.objectMode?n=e.buffer.shift():!t||t>=e.length?(n=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.first():e.buffer.concat(e.length),e.buffer.clear()):n=e.buffer.consume(t,e.decoder),n}function Q(t){const e=t._readableState;_("endReadable",e.endEmitted),e.endEmitted||(e.ended=!0,r.nextTick(tt,e,t))}function tt(t,e){if(_("endReadableNT",t.endEmitted,t.length),!t.errored&&!t.closeEmitted&&!t.endEmitted&&0===t.length)if(t.endEmitted=!0,e.emit("end"),e.writable&&!1===e.allowHalfOpen)r.nextTick(et,e);else if(t.autoDestroy){const t=e._writableState;(!t||t.autoDestroy&&(t.finished||!1===t.writable))&&e.destroy()}}function et(t){t.writable&&!t.writableEnded&&!t.destroyed&&t.end()}let nt;function rt(){return void 0===nt&&(nt={}),nt}W.prototype.read=function(t){_("read",t),void 0===t?t=NaN:i(t)||(t=s(t,10));const e=this._readableState,n=t;if(t>e.highWaterMark&&(e.highWaterMark=function(t){if(t>1073741824)throw new C("size","<= 1GiB",t);return t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,++t}(t)),0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&((0!==e.highWaterMark?e.length>=e.highWaterMark:e.length>0)||e.ended))return _("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?Q(this):z(this),null;if(0===(t=F(t,e))&&e.ended)return 0===e.length&&Q(this),null;let r,o=e.needReadable;if(_("need readable",o),(0===e.length||e.length-t<e.highWaterMark)&&(o=!0,_("length less than watermark",o)),e.ended||e.reading||e.destroyed||e.errored||!e.constructed)o=!1,_("reading, ended or constructing",o);else if(o){_("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0);try{this._read(e.highWaterMark)}catch(t){M(this,t)}e.sync=!1,e.reading||(t=F(n,e))}return r=t>0?Z(t,e):null,null===r?(e.needReadable=e.length<=e.highWaterMark,t=0):(e.length-=t,e.multiAwaitDrain?e.awaitDrainWriters.clear():e.awaitDrainWriters=null),0===e.length&&(e.ended||(e.needReadable=!0),n!==t&&e.ended&&Q(this)),null===r||e.errorEmitted||e.closeEmitted||(e.dataEmitted=!0,this.emit("data",r)),r},W.prototype._read=function(t){throw new x("_read()")},W.prototype.pipe=function(t,e){const n=this,o=this._readableState;1===o.pipes.length&&(o.multiAwaitDrain||(o.multiAwaitDrain=!0,o.awaitDrainWriters=new d(o.awaitDrainWriters?[o.awaitDrainWriters]:[]))),o.pipes.push(t),_("pipe count=%d opts=%j",o.pipes.length,e);const i=(!e||!1!==e.end)&&t!==r.stdout&&t!==r.stderr?s:y;function a(e,r){_("onunpipe"),e===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,function(){_("cleanup"),t.removeListener("close",p),t.removeListener("finish",g),u&&t.removeListener("drain",u);t.removeListener("error",h),t.removeListener("unpipe",a),n.removeListener("end",s),n.removeListener("end",y),n.removeListener("data",f),l=!0,u&&o.awaitDrainWriters&&(!t._writableState||t._writableState.needDrain)&&u()}())}function s(){_("onend"),t.end()}let u;o.endEmitted?r.nextTick(i):n.once("end",i),t.on("unpipe",a);let l=!1;function c(){l||(1===o.pipes.length&&o.pipes[0]===t?(_("false write response, pause",0),o.awaitDrainWriters=t,o.multiAwaitDrain=!1):o.pipes.length>1&&o.pipes.includes(t)&&(_("false write response, pause",o.awaitDrainWriters.size),o.awaitDrainWriters.add(t)),n.pause()),u||(u=function(t,e){return function(){const n=t._readableState;n.awaitDrainWriters===e?(_("pipeOnDrain",1),n.awaitDrainWriters=null):n.multiAwaitDrain&&(_("pipeOnDrain",n.awaitDrainWriters.size),n.awaitDrainWriters.delete(e)),n.awaitDrainWriters&&0!==n.awaitDrainWriters.size||!t.listenerCount("data")||t.resume()}}(n,t),t.on("drain",u))}function f(e){_("ondata");const n=t.write(e);_("dest.write",n),!1===n&&c()}function h(e){if(_("onerror",e),y(),t.removeListener("error",h),0===t.listenerCount("error")){const n=t._writableState||t._readableState;n&&!n.errorEmitted?M(t,e):t.emit("error",e)}}function p(){t.removeListener("finish",g),y()}function g(){_("onfinish"),t.removeListener("close",p),y()}function y(){_("unpipe"),n.unpipe(t)}return n.on("data",f),m(t,"error",h),t.once("close",p),t.once("finish",g),t.emit("pipe",n),!0===t.writableNeedDrain?o.flowing&&c():o.flowing||(_("pipe resume"),n.resume()),t},W.prototype.unpipe=function(t){const e=this._readableState;if(0===e.pipes.length)return this;if(!t){const t=e.pipes;e.pipes=[],this.pause();for(let e=0;e<t.length;e++)t[e].emit("unpipe",this,{hasUnpiped:!1});return this}const n=o(e.pipes,t);return-1===n||(e.pipes.splice(n,1),0===e.pipes.length&&this.pause(),t.emit("unpipe",this,{hasUnpiped:!1})),this},W.prototype.on=function(t,e){const n=y.prototype.on.call(this,t,e),o=this._readableState;return"data"===t?(o.readableListening=this.listenerCount("readable")>0,!1!==o.flowing&&this.resume()):"readable"===t&&(o.endEmitted||o.readableListening||(o.readableListening=o.needReadable=!0,o.flowing=!1,o.emittedReadable=!1,_("on readable",o.length,o.reading),o.length?z(this):o.reading||r.nextTick(J,this))),n},W.prototype.addListener=W.prototype.on,W.prototype.removeListener=function(t,e){const n=y.prototype.removeListener.call(this,t,e);return"readable"===t&&r.nextTick(G,this),n},W.prototype.off=W.prototype.removeListener,W.prototype.removeAllListeners=function(t){const e=y.prototype.removeAllListeners.apply(this,arguments);return"readable"!==t&&void 0!==t||r.nextTick(G,this),e},W.prototype.resume=function(){const t=this._readableState;return t.flowing||(_("resume"),t.flowing=!t.readableListening,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,r.nextTick(Y,t,e))}(this,t)),t[O]=!1,this},W.prototype.pause=function(){return _("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(_("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState[O]=!0,this},W.prototype.wrap=function(t){let e=!1;t.on("data",(n=>{!this.push(n)&&t.pause&&(e=!0,t.pause())})),t.on("end",(()=>{this.push(null)})),t.on("error",(t=>{M(this,t)})),t.on("close",(()=>{this.destroy()})),t.on("destroy",(()=>{this.destroy()})),this._read=()=>{e&&t.resume&&(e=!1,t.resume())};const n=l(t);for(let e=1;e<n.length;e++){const r=n[e];void 0===this[r]&&"function"==typeof t[r]&&(this[r]=t[r].bind(t))}return this},W.prototype[h]=function(){return X(this)},W.prototype.iterator=function(t){return void 0!==t&&L(t,"options"),X(this,t)},u(W.prototype,{readable:{__proto__:null,get(){const t=this._readableState;return!(!t||!1===t.readable||t.destroyed||t.errorEmitted||t.endEmitted)},set(t){this._readableState&&(this._readableState.readable=!!t)}},readableDidRead:{__proto__:null,enumerable:!1,get:function(){return this._readableState.dataEmitted}},readableAborted:{__proto__:null,enumerable:!1,get:function(){return!(!1===this._readableState.readable||!this._readableState.destroyed&&!this._readableState.errored||this._readableState.endEmitted)}},readableHighWaterMark:{__proto__:null,enumerable:!1,get:function(){return this._readableState.highWaterMark}},readableBuffer:{__proto__:null,enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}},readableFlowing:{__proto__:null,enumerable:!1,get:function(){return this._readableState.flowing},set:function(t){this._readableState&&(this._readableState.flowing=t)}},readableLength:{__proto__:null,enumerable:!1,get(){return this._readableState.length}},readableObjectMode:{__proto__:null,enumerable:!1,get(){return!!this._readableState&&this._readableState.objectMode}},readableEncoding:{__proto__:null,enumerable:!1,get(){return this._readableState?this._readableState.encoding:null}},errored:{__proto__:null,enumerable:!1,get(){return this._readableState?this._readableState.errored:null}},closed:{__proto__:null,get(){return!!this._readableState&&this._readableState.closed}},destroyed:{__proto__:null,enumerable:!1,get(){return!!this._readableState&&this._readableState.destroyed},set(t){this._readableState&&(this._readableState.destroyed=t)}},readableEnded:{__proto__:null,enumerable:!1,get(){return!!this._readableState&&this._readableState.endEmitted}}}),u(P.prototype,{pipesCount:{__proto__:null,get(){return this.pipes.length}},paused:{__proto__:null,get(){return!1!==this[O]},set(t){this[O]=!!t}}}),W._fromList=Z,W.from=function(t,e){return j(W,t,e)},W.fromWeb=function(t,e){return rt().newStreamReadableFromReadableStream(t,e)},W.toWeb=function(t,e){return rt().newReadableStreamFromStreamReadable(t,e)},W.wrap=function(t,e){var n,r;return new W({objectMode:null===(n=null!==(r=t.readableObjectMode)&&void 0!==r?r:t.objectMode)||void 0===n||n,...e,destroy(e,n){S.destroyer(t,e),n(e)}}).wrap(t)}},498:(t,e,n)=>{const{MathFloor:r,NumberIsInteger:o}=n(191),{ERR_INVALID_ARG_VALUE:i}=n(141).codes;function a(t){return t?16:16384}t.exports={getHighWaterMark:function(t,e,n,s){const u=function(t,e,n){return null!=t.highWaterMark?t.highWaterMark:e?t[n]:null}(e,s,n);if(null!=u){if(!o(u)||u<0){throw new i(s?`options.${n}`:"options.highWaterMark",u)}return r(u)}return a(t.objectMode)},getDefaultHighWaterMark:a}},210:(t,e,n)=>{const{ObjectSetPrototypeOf:r,Symbol:o}=n(191);t.exports=l;const{ERR_METHOD_NOT_IMPLEMENTED:i}=n(141).codes,a=n(182),{getHighWaterMark:s}=n(498);r(l.prototype,a.prototype),r(l,a);const u=o("kCallback");function l(t){if(!(this instanceof l))return new l(t);const e=t?s(this,t,"readableHighWaterMark",!0):null;0===e&&(t={...t,highWaterMark:null,readableHighWaterMark:e,writableHighWaterMark:t.writableHighWaterMark||0}),a.call(this,t),this._readableState.sync=!1,this[u]=null,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",f)}function c(t){"function"!=typeof this._flush||this.destroyed?(this.push(null),t&&t()):this._flush(((e,n)=>{e?t?t(e):this.destroy(e):(null!=n&&this.push(n),this.push(null),t&&t())}))}function f(){this._final!==c&&c.call(this)}l.prototype._final=c,l.prototype._transform=function(t,e,n){throw new i("_transform()")},l.prototype._write=function(t,e,n){const r=this._readableState,o=this._writableState,i=r.length;this._transform(t,e,((t,e)=>{t?n(t):(null!=e&&this.push(e),o.ended||i===r.length||r.length<r.highWaterMark?n():this[u]=n)}))},l.prototype._read=function(){if(this[u]){const t=this[u];this[u]=null,t()}}},132:(t,e,n)=>{const{Symbol:r,SymbolAsyncIterator:o,SymbolIterator:i,SymbolFor:a}=n(191),s=r("kDestroyed"),u=r("kIsErrored"),l=r("kIsReadable"),c=r("kIsDisturbed"),f=a("nodejs.webstream.isClosedPromise"),d=a("nodejs.webstream.controllerErrorFunction");function h(t,e=!1){var n;return!(!t||"function"!=typeof t.pipe||"function"!=typeof t.on||e&&("function"!=typeof t.pause||"function"!=typeof t.resume)||t._writableState&&!1===(null===(n=t._readableState)||void 0===n?void 0:n.readable)||t._writableState&&!t._readableState)}function p(t){var e;return!(!t||"function"!=typeof t.write||"function"!=typeof t.on||t._readableState&&!1===(null===(e=t._writableState)||void 0===e?void 0:e.writable))}function g(t){return t&&(t._readableState||t._writableState||"function"==typeof t.write&&"function"==typeof t.on||"function"==typeof t.pipe&&"function"==typeof t.on)}function y(t){return!(!t||g(t)||"function"!=typeof t.pipeThrough||"function"!=typeof t.getReader||"function"!=typeof t.cancel)}function m(t){return!(!t||g(t)||"function"!=typeof t.getWriter||"function"!=typeof t.abort)}function v(t){return!(!t||g(t)||"object"!=typeof t.readable||"object"!=typeof t.writable)}function b(t){if(!g(t))return null;const e=t._writableState,n=t._readableState,r=e||n;return!!(t.destroyed||t[s]||null!=r&&r.destroyed)}function w(t){if(!p(t))return null;if(!0===t.writableEnded)return!0;const e=t._writableState;return(null==e||!e.errored)&&("boolean"!=typeof(null==e?void 0:e.ended)?null:e.ended)}function _(t,e){if(!h(t))return null;const n=t._readableState;return(null==n||!n.errored)&&("boolean"!=typeof(null==n?void 0:n.endEmitted)?null:!!(n.endEmitted||!1===e&&!0===n.ended&&0===n.length))}function E(t){return t&&null!=t[l]?t[l]:"boolean"!=typeof(null==t?void 0:t.readable)?null:!b(t)&&(h(t)&&t.readable&&!_(t))}function S(t){return"boolean"!=typeof(null==t?void 0:t.writable)?null:!b(t)&&(p(t)&&t.writable&&!w(t))}function A(t){return"boolean"==typeof t._closed&&"boolean"==typeof t._defaultKeepAlive&&"boolean"==typeof t._removedConnection&&"boolean"==typeof t._removedContLen}function I(t){return"boolean"==typeof t._sent100&&A(t)}t.exports={kDestroyed:s,isDisturbed:function(t){var e;return!(!t||!(null!==(e=t[c])&&void 0!==e?e:t.readableDidRead||t.readableAborted))},kIsDisturbed:c,isErrored:function(t){var e,n,r,o,i,a,s,l,c,f;return!(!t||!(null!==(e=null!==(n=null!==(r=null!==(o=null!==(i=null!==(a=t[u])&&void 0!==a?a:t.readableErrored)&&void 0!==i?i:t.writableErrored)&&void 0!==o?o:null===(s=t._readableState)||void 0===s?void 0:s.errorEmitted)&&void 0!==r?r:null===(l=t._writableState)||void 0===l?void 0:l.errorEmitted)&&void 0!==n?n:null===(c=t._readableState)||void 0===c?void 0:c.errored)&&void 0!==e?e:null===(f=t._writableState)||void 0===f?void 0:f.errored))},kIsErrored:u,isReadable:E,kIsReadable:l,kIsClosedPromise:f,kControllerErrorFunction:d,isClosed:function(t){if(!g(t))return null;if("boolean"==typeof t.closed)return t.closed;const e=t._writableState,n=t._readableState;return"boolean"==typeof(null==e?void 0:e.closed)||"boolean"==typeof(null==n?void 0:n.closed)?(null==e?void 0:e.closed)||(null==n?void 0:n.closed):"boolean"==typeof t._closed&&A(t)?t._closed:null},isDestroyed:b,isDuplexNodeStream:function(t){return!(!t||"function"!=typeof t.pipe||!t._readableState||"function"!=typeof t.on||"function"!=typeof t.write)},isFinished:function(t,e){return g(t)?!!b(t)||(!1===(null==e?void 0:e.readable)||!E(t))&&(!1===(null==e?void 0:e.writable)||!S(t)):null},isIterable:function(t,e){return null!=t&&(!0===e?"function"==typeof t[o]:!1===e?"function"==typeof t[i]:"function"==typeof t[o]||"function"==typeof t[i])},isReadableNodeStream:h,isReadableStream:y,isReadableEnded:function(t){if(!h(t))return null;if(!0===t.readableEnded)return!0;const e=t._readableState;return!(!e||e.errored)&&("boolean"!=typeof(null==e?void 0:e.ended)?null:e.ended)},isReadableFinished:_,isReadableErrored:function(t){var e,n;return g(t)?t.readableErrored?t.readableErrored:null!==(e=null===(n=t._readableState)||void 0===n?void 0:n.errored)&&void 0!==e?e:null:null},isNodeStream:g,isWebStream:function(t){return y(t)||m(t)||v(t)},isWritable:S,isWritableNodeStream:p,isWritableStream:m,isWritableEnded:w,isWritableFinished:function(t,e){if(!p(t))return null;if(!0===t.writableFinished)return!0;const n=t._writableState;return(null==n||!n.errored)&&("boolean"!=typeof(null==n?void 0:n.finished)?null:!!(n.finished||!1===e&&!0===n.ended&&0===n.length))},isWritableErrored:function(t){var e,n;return g(t)?t.writableErrored?t.writableErrored:null!==(e=null===(n=t._writableState)||void 0===n?void 0:n.errored)&&void 0!==e?e:null:null},isServerRequest:function(t){var e;return"boolean"==typeof t._consuming&&"boolean"==typeof t._dumped&&void 0===(null===(e=t.req)||void 0===e?void 0:e.upgradeOrConnect)},isServerResponse:I,willEmitClose:function(t){if(!g(t))return null;const e=t._writableState,n=t._readableState,r=e||n;return!r&&I(t)||!!(r&&r.autoDestroy&&r.emitClose&&!1===r.closed)},isTransformStream:v}},373:(t,e,n)=>{const r=n(533),{ArrayPrototypeSlice:o,Error:i,FunctionPrototypeSymbolHasInstance:a,ObjectDefineProperty:s,ObjectDefineProperties:u,ObjectSetPrototypeOf:l,StringPrototypeToLowerCase:c,Symbol:f,SymbolHasInstance:d}=n(191);t.exports=U,U.WritableState=L;const{EventEmitter:h}=n(465),p=n(200).Stream,{Buffer:g}=n(485),y=n(230),{addAbortSignal:m}=n(374),{getHighWaterMark:v,getDefaultHighWaterMark:b}=n(498),{ERR_INVALID_ARG_TYPE:w,ERR_METHOD_NOT_IMPLEMENTED:_,ERR_MULTIPLE_CALLBACK:E,ERR_STREAM_CANNOT_PIPE:S,ERR_STREAM_DESTROYED:A,ERR_STREAM_ALREADY_FINISHED:I,ERR_STREAM_NULL_VALUES:T,ERR_STREAM_WRITE_AFTER_END:R,ERR_UNKNOWN_ENCODING:x}=n(141).codes,{errorOrDestroy:C}=y;function B(){}l(U.prototype,p.prototype),l(U,p);const k=f("kOnFinished");function L(t,e,r){"boolean"!=typeof r&&(r=e instanceof n(182)),this.objectMode=!(!t||!t.objectMode),r&&(this.objectMode=this.objectMode||!(!t||!t.writableObjectMode)),this.highWaterMark=t?v(this,t,"writableHighWaterMark",r):b(!1),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;const o=!(!t||!1!==t.decodeStrings);this.decodeStrings=!o,this.defaultEncoding=t&&t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=P.bind(void 0,e),this.writecb=null,this.writelen=0,this.afterWriteTickInfo=null,O(this),this.pendingcb=0,this.constructed=!0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!t||!1!==t.emitClose,this.autoDestroy=!t||!1!==t.autoDestroy,this.errored=null,this.closed=!1,this.closeEmitted=!1,this[k]=[]}function O(t){t.buffered=[],t.bufferedIndex=0,t.allBuffers=!0,t.allNoop=!0}function U(t){const e=this instanceof n(182);if(!e&&!a(U,this))return new U(t);this._writableState=new L(t,this,e),t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final),"function"==typeof t.construct&&(this._construct=t.construct),t.signal&&m(t.signal,this)),p.call(this,t),y.construct(this,(()=>{const t=this._writableState;t.writing||F(this,t),H(this,t)}))}function j(t,e,n,o){const i=t._writableState;if("function"==typeof n)o=n,n=i.defaultEncoding;else{if(n){if("buffer"!==n&&!g.isEncoding(n))throw new x(n)}else n=i.defaultEncoding;"function"!=typeof o&&(o=B)}if(null===e)throw new T;if(!i.objectMode)if("string"==typeof e)!1!==i.decodeStrings&&(e=g.from(e,n),n="buffer");else if(e instanceof g)n="buffer";else{if(!p._isUint8Array(e))throw new w("chunk",["string","Buffer","Uint8Array"],e);e=p._uint8ArrayToBuffer(e),n="buffer"}let a;return i.ending?a=new R:i.destroyed&&(a=new A("write")),a?(r.nextTick(o,a),C(t,a,!0),a):(i.pendingcb++,function(t,e,n,r,o){const i=e.objectMode?1:n.length;e.length+=i;const a=e.length<e.highWaterMark;a||(e.needDrain=!0);e.writing||e.corked||e.errored||!e.constructed?(e.buffered.push({chunk:n,encoding:r,callback:o}),e.allBuffers&&"buffer"!==r&&(e.allBuffers=!1),e.allNoop&&o!==B&&(e.allNoop=!1)):(e.writelen=i,e.writecb=o,e.writing=!0,e.sync=!0,t._write(n,r,e.onwrite),e.sync=!1);return a&&!e.errored&&!e.destroyed}(t,i,e,n,o))}function N(t,e,n,r,o,i,a){e.writelen=r,e.writecb=a,e.writing=!0,e.sync=!0,e.destroyed?e.onwrite(new A("write")):n?t._writev(o,e.onwrite):t._write(o,i,e.onwrite),e.sync=!1}function M(t,e,n,r){--e.pendingcb,r(n),D(e),C(t,n)}function P(t,e){const n=t._writableState,o=n.sync,i=n.writecb;"function"==typeof i?(n.writing=!1,n.writecb=null,n.length-=n.writelen,n.writelen=0,e?(e.stack,n.errored||(n.errored=e),t._readableState&&!t._readableState.errored&&(t._readableState.errored=e),o?r.nextTick(M,t,n,e,i):M(t,n,e,i)):(n.buffered.length>n.bufferedIndex&&F(t,n),o?null!==n.afterWriteTickInfo&&n.afterWriteTickInfo.cb===i?n.afterWriteTickInfo.count++:(n.afterWriteTickInfo={count:1,cb:i,stream:t,state:n},r.nextTick(W,n.afterWriteTickInfo)):$(t,n,1,i))):C(t,new E)}function W({stream:t,state:e,count:n,cb:r}){return e.afterWriteTickInfo=null,$(t,e,n,r)}function $(t,e,n,r){for(!e.ending&&!t.destroyed&&0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"));n-- >0;)e.pendingcb--,r();e.destroyed&&D(e),H(t,e)}function D(t){if(t.writing)return;for(let n=t.bufferedIndex;n<t.buffered.length;++n){var e;const{chunk:r,callback:o}=t.buffered[n],i=t.objectMode?1:r.length;t.length-=i,o(null!==(e=t.errored)&&void 0!==e?e:new A("write"))}const n=t[k].splice(0);for(let e=0;e<n.length;e++){var r;n[e](null!==(r=t.errored)&&void 0!==r?r:new A("end"))}O(t)}function F(t,e){if(e.corked||e.bufferProcessing||e.destroyed||!e.constructed)return;const{buffered:n,bufferedIndex:r,objectMode:i}=e,a=n.length-r;if(!a)return;let s=r;if(e.bufferProcessing=!0,a>1&&t._writev){e.pendingcb-=a-1;const r=e.allNoop?B:t=>{for(let e=s;e<n.length;++e)n[e].callback(t)},i=e.allNoop&&0===s?n:o(n,s);i.allBuffers=e.allBuffers,N(t,e,!0,e.length,i,"",r),O(e)}else{do{const{chunk:r,encoding:o,callback:a}=n[s];n[s++]=null;N(t,e,!1,i?1:r.length,r,o,a)}while(s<n.length&&!e.writing);s===n.length?O(e):s>256?(n.splice(0,s),e.bufferedIndex=0):e.bufferedIndex=s}e.bufferProcessing=!1}function z(t){return t.ending&&!t.destroyed&&t.constructed&&0===t.length&&!t.errored&&0===t.buffered.length&&!t.finished&&!t.writing&&!t.errorEmitted&&!t.closeEmitted}function q(t,e){e.prefinished||e.finalCalled||("function"!=typeof t._final||e.destroyed?(e.prefinished=!0,t.emit("prefinish")):(e.finalCalled=!0,function(t,e){let n=!1;function o(o){if(n)C(t,null!=o?o:E());else if(n=!0,e.pendingcb--,o){const n=e[k].splice(0);for(let t=0;t<n.length;t++)n[t](o);C(t,o,e.sync)}else z(e)&&(e.prefinished=!0,t.emit("prefinish"),e.pendingcb++,r.nextTick(V,t,e))}e.sync=!0,e.pendingcb++;try{t._final(o)}catch(t){o(t)}e.sync=!1}(t,e)))}function H(t,e,n){z(e)&&(q(t,e),0===e.pendingcb&&(n?(e.pendingcb++,r.nextTick(((t,e)=>{z(e)?V(t,e):e.pendingcb--}),t,e)):z(e)&&(e.pendingcb++,V(t,e))))}function V(t,e){e.pendingcb--,e.finished=!0;const n=e[k].splice(0);for(let t=0;t<n.length;t++)n[t]();if(t.emit("finish"),e.autoDestroy){const e=t._readableState;(!e||e.autoDestroy&&(e.endEmitted||!1===e.readable))&&t.destroy()}}L.prototype.getBuffer=function(){return o(this.buffered,this.bufferedIndex)},s(L.prototype,"bufferedRequestCount",{__proto__:null,get(){return this.buffered.length-this.bufferedIndex}}),s(U,d,{__proto__:null,value:function(t){return!!a(this,t)||this===U&&(t&&t._writableState instanceof L)}}),U.prototype.pipe=function(){C(this,new S)},U.prototype.write=function(t,e,n){return!0===j(this,t,e,n)},U.prototype.cork=function(){this._writableState.corked++},U.prototype.uncork=function(){const t=this._writableState;t.corked&&(t.corked--,t.writing||F(this,t))},U.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=c(t)),!g.isEncoding(t))throw new x(t);return this._writableState.defaultEncoding=t,this},U.prototype._write=function(t,e,n){if(!this._writev)throw new _("_write()");this._writev([{chunk:t,encoding:e}],n)},U.prototype._writev=null,U.prototype.end=function(t,e,n){const o=this._writableState;let a;if("function"==typeof t?(n=t,t=null,e=null):"function"==typeof e&&(n=e,e=null),null!=t){const n=j(this,t,e);n instanceof i&&(a=n)}return o.corked&&(o.corked=1,this.uncork()),a||(o.errored||o.ending?o.finished?a=new I("end"):o.destroyed&&(a=new A("end")):(o.ending=!0,H(this,o,!0),o.ended=!0)),"function"==typeof n&&(a||o.finished?r.nextTick(n,a):o[k].push(n)),this},u(U.prototype,{closed:{__proto__:null,get(){return!!this._writableState&&this._writableState.closed}},destroyed:{__proto__:null,get(){return!!this._writableState&&this._writableState.destroyed},set(t){this._writableState&&(this._writableState.destroyed=t)}},writable:{__proto__:null,get(){const t=this._writableState;return!(!t||!1===t.writable||t.destroyed||t.errored||t.ending||t.ended)},set(t){this._writableState&&(this._writableState.writable=!!t)}},writableFinished:{__proto__:null,get(){return!!this._writableState&&this._writableState.finished}},writableObjectMode:{__proto__:null,get(){return!!this._writableState&&this._writableState.objectMode}},writableBuffer:{__proto__:null,get(){return this._writableState&&this._writableState.getBuffer()}},writableEnded:{__proto__:null,get(){return!!this._writableState&&this._writableState.ending}},writableNeedDrain:{__proto__:null,get(){const t=this._writableState;return!!t&&(!t.destroyed&&!t.ending&&t.needDrain)}},writableHighWaterMark:{__proto__:null,get(){return this._writableState&&this._writableState.highWaterMark}},writableCorked:{__proto__:null,get(){return this._writableState?this._writableState.corked:0}},writableLength:{__proto__:null,get(){return this._writableState&&this._writableState.length}},errored:{__proto__:null,enumerable:!1,get(){return this._writableState?this._writableState.errored:null}},writableAborted:{__proto__:null,enumerable:!1,get:function(){return!(!1===this._writableState.writable||!this._writableState.destroyed&&!this._writableState.errored||this._writableState.finished)}}});const G=y.destroy;let J;function Y(){return void 0===J&&(J={}),J}U.prototype.destroy=function(t,e){const n=this._writableState;return!n.destroyed&&(n.bufferedIndex<n.buffered.length||n[k].length)&&r.nextTick(D,n),G.call(this,t,e),this},U.prototype._undestroy=y.undestroy,U.prototype._destroy=function(t,e){e(t)},U.prototype[h.captureRejectionSymbol]=function(t){this.destroy(t)},U.fromWeb=function(t,e){return Y().newStreamWritableFromWritableStream(t,e)},U.toWeb=function(t){return Y().newWritableStreamFromStreamWritable(t)}},904:(t,e,n)=>{const{ArrayIsArray:r,ArrayPrototypeIncludes:o,ArrayPrototypeJoin:i,ArrayPrototypeMap:a,NumberIsInteger:s,NumberIsNaN:u,NumberMAX_SAFE_INTEGER:l,NumberMIN_SAFE_INTEGER:c,NumberParseInt:f,ObjectPrototypeHasOwnProperty:d,RegExpPrototypeExec:h,String:p,StringPrototypeToUpperCase:g,StringPrototypeTrim:y}=n(191),{hideStackFrames:m,codes:{ERR_SOCKET_BAD_PORT:v,ERR_INVALID_ARG_TYPE:b,ERR_INVALID_ARG_VALUE:w,ERR_OUT_OF_RANGE:_,ERR_UNKNOWN_SIGNAL:E}}=n(141),{normalizeEncoding:S}=n(775),{isAsyncFunction:A,isArrayBufferView:I}=n(775).types,T={};const R=/^[0-7]+$/;const x=m(((t,e,n=c,r=l)=>{if("number"!=typeof t)throw new b(e,"number",t);if(!s(t))throw new _(e,"an integer",t);if(t<n||t>r)throw new _(e,`>= ${n} && <= ${r}`,t)})),C=m(((t,e,n=-2147483648,r=2147483647)=>{if("number"!=typeof t)throw new b(e,"number",t);if(!s(t))throw new _(e,"an integer",t);if(t<n||t>r)throw new _(e,`>= ${n} && <= ${r}`,t)})),B=m(((t,e,n=!1)=>{if("number"!=typeof t)throw new b(e,"number",t);if(!s(t))throw new _(e,"an integer",t);const r=n?1:0,o=4294967295;if(t<r||t>o)throw new _(e,`>= ${r} && <= ${o}`,t)}));function k(t,e){if("string"!=typeof t)throw new b(e,"string",t)}const L=m(((t,e,n)=>{if(!o(n,t)){const r=i(a(n,(t=>"string"==typeof t?`'${t}'`:p(t))),", ");throw new w(e,t,"must be one of: "+r)}}));function O(t,e){if("boolean"!=typeof t)throw new b(e,"boolean",t)}function U(t,e,n){return null!=t&&d(t,e)?t[e]:n}const j=m(((t,e,n=null)=>{const o=U(n,"allowArray",!1),i=U(n,"allowFunction",!1);if(!U(n,"nullable",!1)&&null===t||!o&&r(t)||"object"!=typeof t&&(!i||"function"!=typeof t))throw new b(e,"Object",t)})),N=m(((t,e)=>{if(null!=t&&"object"!=typeof t&&"function"!=typeof t)throw new b(e,"a dictionary",t)})),M=m(((t,e,n=0)=>{if(!r(t))throw new b(e,"Array",t);if(t.length<n){throw new w(e,t,`must be longer than ${n}`)}}));const P=m(((t,e="buffer")=>{if(!I(t))throw new b(e,["Buffer","TypedArray","DataView"],t)}));const W=m(((t,e)=>{if(void 0!==t&&(null===t||"object"!=typeof t||!("aborted"in t)))throw new b(e,"AbortSignal",t)})),$=m(((t,e)=>{if("function"!=typeof t)throw new b(e,"Function",t)})),D=m(((t,e)=>{if("function"!=typeof t||A(t))throw new b(e,"Function",t)})),F=m(((t,e)=>{if(void 0!==t)throw new b(e,"undefined",t)}));const z=/^(?:<[^>]*>)(?:\s*;\s*[^;"\s]+(?:=(")?[^;"\s]*\1)?)*$/;function q(t,e){if(void 0===t||!h(z,t))throw new w(e,t,'must be an array or string of format "</styles.css>; rel=preload; as=style"')}t.exports={isInt32:function(t){return t===(0|t)},isUint32:function(t){return t===t>>>0},parseFileMode:function(t,e,n){if(void 0===t&&(t=n),"string"==typeof t){if(null===h(R,t))throw new w(e,t,"must be a 32-bit unsigned integer or an octal string");t=f(t,8)}return B(t,e),t},validateArray:M,validateStringArray:function(t,e){M(t,e);for(let n=0;n<t.length;n++)k(t[n],`${e}[${n}]`)},validateBooleanArray:function(t,e){M(t,e);for(let n=0;n<t.length;n++)O(t[n],`${e}[${n}]`)},validateBoolean:O,validateBuffer:P,validateDictionary:N,validateEncoding:function(t,e){const n=S(e),r=t.length;if("hex"===n&&r%2!=0)throw new w("encoding",e,`is invalid for data of length ${r}`)},validateFunction:$,validateInt32:C,validateInteger:x,validateNumber:function(t,e,n=void 0,r){if("number"!=typeof t)throw new b(e,"number",t);if(null!=n&&t<n||null!=r&&t>r||(null!=n||null!=r)&&u(t))throw new _(e,`${null!=n?`>= ${n}`:""}${null!=n&&null!=r?" && ":""}${null!=r?`<= ${r}`:""}`,t)},validateObject:j,validateOneOf:L,validatePlainFunction:D,validatePort:function(t,e="Port",n=!0){if("number"!=typeof t&&"string"!=typeof t||"string"==typeof t&&0===y(t).length||+t!=+t>>>0||t>65535||0===t&&!n)throw new v(e,t,n);return 0|t},validateSignalName:function(t,e="signal"){if(k(t,e),void 0===T[t]){if(void 0!==T[g(t)])throw new E(t+" (signals must use all capital letters)");throw new E(t)}},validateString:k,validateUint32:B,validateUndefined:F,validateUnion:function(t,e,n){if(!o(n,t))throw new b(e,`('${i(n,"|")}')`,t)},validateAbortSignal:W,validateLinkHeaderValue:function(t){if("string"==typeof t)return q(t,"hints"),t;if(r(t)){const e=t.length;let n="";if(0===e)return n;for(let r=0;r<e;r++){const o=t[r];q(o,"hints"),n+=o,r!==e-1&&(n+=", ")}return n}throw new w("hints",t,'must be an array or string of format "</styles.css>; rel=preload; as=style"')}}},99:(t,e,n)=>{const r=n(292),o=n(760),i=r.Readable.destroy;t.exports=r.Readable,t.exports._uint8ArrayToBuffer=r._uint8ArrayToBuffer,t.exports._isUint8Array=r._isUint8Array,t.exports.isDisturbed=r.isDisturbed,t.exports.isErrored=r.isErrored,t.exports.isReadable=r.isReadable,t.exports.Readable=r.Readable,t.exports.Writable=r.Writable,t.exports.Duplex=r.Duplex,t.exports.Transform=r.Transform,t.exports.PassThrough=r.PassThrough,t.exports.addAbortSignal=r.addAbortSignal,t.exports.finished=r.finished,t.exports.destroy=r.destroy,t.exports.destroy=i,t.exports.pipeline=r.pipeline,t.exports.compose=r.compose,Object.defineProperty(r,"promises",{configurable:!0,enumerable:!0,get:()=>o}),t.exports.Stream=r.Stream,t.exports.default=t.exports},141:(t,e,n)=>{const{format:r,inspect:o,AggregateError:i}=n(775),a=globalThis.AggregateError||i,s=Symbol("kIsNodeError"),u=["string","function","number","object","Function","Object","boolean","bigint","symbol"],l=/^([A-Z][a-z0-9]*)+$/,c={};function f(t,e){if(!t)throw new c.ERR_INTERNAL_ASSERTION(e)}function d(t){let e="",n=t.length;const r="-"===t[0]?1:0;for(;n>=r+4;n-=3)e=`_${t.slice(n-3,n)}${e}`;return`${t.slice(0,n)}${e}`}function h(t,e,n){n||(n=Error);class NodeError extends n{constructor(...n){super(function(t,e,n){if("function"==typeof e)return f(e.length<=n.length,`Code: ${t}; The provided arguments length (${n.length}) does not match the required ones (${e.length}).`),e(...n);const o=(e.match(/%[dfijoOs]/g)||[]).length;return f(o===n.length,`Code: ${t}; The provided arguments length (${n.length}) does not match the required ones (${o}).`),0===n.length?e:r(e,...n)}(t,e,n))}toString(){return`${this.name} [${t}]: ${this.message}`}}Object.defineProperties(NodeError.prototype,{name:{value:n.name,writable:!0,enumerable:!1,configurable:!0},toString:{value(){return`${this.name} [${t}]: ${this.message}`},writable:!0,enumerable:!1,configurable:!0}}),NodeError.prototype.code=t,NodeError.prototype[s]=!0,c[t]=NodeError}function p(t){const e="__node_internal_"+t.name;return Object.defineProperty(t,"name",{value:e}),t}class AbortError extends Error{constructor(t="The operation was aborted",e=void 0){if(void 0!==e&&"object"!=typeof e)throw new c.ERR_INVALID_ARG_TYPE("options","Object",e);super(t,e),this.code="ABORT_ERR",this.name="AbortError"}}h("ERR_ASSERTION","%s",Error),h("ERR_INVALID_ARG_TYPE",((t,e,n)=>{f("string"==typeof t,"'name' must be a string"),Array.isArray(e)||(e=[e]);let r="The ";t.endsWith(" argument")?r+=`${t} `:r+=`"${t}" ${t.includes(".")?"property":"argument"} `,r+="must be ";const i=[],a=[],s=[];for(const t of e)f("string"==typeof t,"All expected entries have to be of type string"),u.includes(t)?i.push(t.toLowerCase()):l.test(t)?a.push(t):(f("object"!==t,'The value "object" should be written as "Object"'),s.push(t));if(a.length>0){const t=i.indexOf("object");-1!==t&&(i.splice(i,t,1),a.push("Object"))}if(i.length>0){switch(i.length){case 1:r+=`of type ${i[0]}`;break;case 2:r+=`one of type ${i[0]} or ${i[1]}`;break;default:{const t=i.pop();r+=`one of type ${i.join(", ")}, or ${t}`}}(a.length>0||s.length>0)&&(r+=" or ")}if(a.length>0){switch(a.length){case 1:r+=`an instance of ${a[0]}`;break;case 2:r+=`an instance of ${a[0]} or ${a[1]}`;break;default:{const t=a.pop();r+=`an instance of ${a.join(", ")}, or ${t}`}}s.length>0&&(r+=" or ")}switch(s.length){case 0:break;case 1:s[0].toLowerCase()!==s[0]&&(r+="an "),r+=`${s[0]}`;break;case 2:r+=`one of ${s[0]} or ${s[1]}`;break;default:{const t=s.pop();r+=`one of ${s.join(", ")}, or ${t}`}}if(null==n)r+=`. Received ${n}`;else if("function"==typeof n&&n.name)r+=`. Received function ${n.name}`;else if("object"==typeof n){var c;if(null!==(c=n.constructor)&&void 0!==c&&c.name)r+=`. Received an instance of ${n.constructor.name}`;else{r+=`. Received ${o(n,{depth:-1})}`}}else{let t=o(n,{colors:!1});t.length>25&&(t=`${t.slice(0,25)}...`),r+=`. Received type ${typeof n} (${t})`}return r}),TypeError),h("ERR_INVALID_ARG_VALUE",((t,e,n="is invalid")=>{let r=o(e);r.length>128&&(r=r.slice(0,128)+"...");return`The ${t.includes(".")?"property":"argument"} '${t}' ${n}. Received ${r}`}),TypeError),h("ERR_INVALID_RETURN_VALUE",((t,e,n)=>{var r;return`Expected ${t} to be returned from the "${e}" function but got ${null!=n&&null!==(r=n.constructor)&&void 0!==r&&r.name?`instance of ${n.constructor.name}`:"type "+typeof n}.`}),TypeError),h("ERR_MISSING_ARGS",((...t)=>{let e;f(t.length>0,"At least one arg needs to be specified");const n=t.length;switch(t=(Array.isArray(t)?t:[t]).map((t=>`"${t}"`)).join(" or "),n){case 1:e+=`The ${t[0]} argument`;break;case 2:e+=`The ${t[0]} and ${t[1]} arguments`;break;default:{const n=t.pop();e+=`The ${t.join(", ")}, and ${n} arguments`}}return`${e} must be specified`}),TypeError),h("ERR_OUT_OF_RANGE",((t,e,n)=>{let r;return f(e,'Missing "range" argument'),Number.isInteger(n)&&Math.abs(n)>2**32?r=d(String(n)):"bigint"==typeof n?(r=String(n),(n>2n**32n||n<-(2n**32n))&&(r=d(r)),r+="n"):r=o(n),`The value of "${t}" is out of range. It must be ${e}. Received ${r}`}),RangeError),h("ERR_MULTIPLE_CALLBACK","Callback called multiple times",Error),h("ERR_METHOD_NOT_IMPLEMENTED","The %s method is not implemented",Error),h("ERR_STREAM_ALREADY_FINISHED","Cannot call %s after a stream was finished",Error),h("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable",Error),h("ERR_STREAM_DESTROYED","Cannot call %s after a stream was destroyed",Error),h("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),h("ERR_STREAM_PREMATURE_CLOSE","Premature close",Error),h("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF",Error),h("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event",Error),h("ERR_STREAM_WRITE_AFTER_END","write after end",Error),h("ERR_UNKNOWN_ENCODING","Unknown encoding: %s",TypeError),t.exports={AbortError,aggregateTwoErrors:p((function(t,e){if(t&&e&&t!==e){if(Array.isArray(e.errors))return e.errors.push(t),e;const n=new a([e,t],e.message);return n.code=e.code,n}return t||e})),hideStackFrames:p,codes:c}},191:t=>{t.exports={ArrayIsArray:t=>Array.isArray(t),ArrayPrototypeIncludes:(t,e)=>t.includes(e),ArrayPrototypeIndexOf:(t,e)=>t.indexOf(e),ArrayPrototypeJoin:(t,e)=>t.join(e),ArrayPrototypeMap:(t,e)=>t.map(e),ArrayPrototypePop:(t,e)=>t.pop(e),ArrayPrototypePush:(t,e)=>t.push(e),ArrayPrototypeSlice:(t,e,n)=>t.slice(e,n),Error,FunctionPrototypeCall:(t,e,...n)=>t.call(e,...n),FunctionPrototypeSymbolHasInstance:(t,e)=>Function.prototype[Symbol.hasInstance].call(t,e),MathFloor:Math.floor,Number,NumberIsInteger:Number.isInteger,NumberIsNaN:Number.isNaN,NumberMAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER,NumberMIN_SAFE_INTEGER:Number.MIN_SAFE_INTEGER,NumberParseInt:Number.parseInt,ObjectDefineProperties:(t,e)=>Object.defineProperties(t,e),ObjectDefineProperty:(t,e,n)=>Object.defineProperty(t,e,n),ObjectGetOwnPropertyDescriptor:(t,e)=>Object.getOwnPropertyDescriptor(t,e),ObjectKeys:t=>Object.keys(t),ObjectSetPrototypeOf:(t,e)=>Object.setPrototypeOf(t,e),Promise,PromisePrototypeCatch:(t,e)=>t.catch(e),PromisePrototypeThen:(t,e,n)=>t.then(e,n),PromiseReject:t=>Promise.reject(t),ReflectApply:Reflect.apply,RegExpPrototypeTest:(t,e)=>t.test(e),SafeSet:Set,String,StringPrototypeSlice:(t,e,n)=>t.slice(e,n),StringPrototypeToLowerCase:t=>t.toLowerCase(),StringPrototypeToUpperCase:t=>t.toUpperCase(),StringPrototypeTrim:t=>t.trim(),Symbol,SymbolFor:Symbol.for,SymbolAsyncIterator:Symbol.asyncIterator,SymbolHasInstance:Symbol.hasInstance,SymbolIterator:Symbol.iterator,TypedArrayPrototypeSet:(t,e,n)=>t.set(e,n),Uint8Array}},775:(t,e,n)=>{const r=n(485),o=Object.getPrototypeOf((async function(){})).constructor,i=globalThis.Blob||r.Blob,a=void 0!==i?function(t){return t instanceof i}:function(t){return!1};class AggregateError extends Error{constructor(t){if(!Array.isArray(t))throw new TypeError("Expected input to be an Array, got "+typeof t);let e="";for(let n=0;n<t.length;n++)e+=`    ${t[n].stack}\n`;super(e),this.name="AggregateError",this.errors=t}}t.exports={AggregateError,kEmptyObject:Object.freeze({}),once(t){let e=!1;return function(...n){e||(e=!0,t.apply(this,n))}},createDeferredPromise:function(){let t,e;return{promise:new Promise(((n,r)=>{t=n,e=r})),resolve:t,reject:e}},promisify:t=>new Promise(((e,n)=>{t(((t,...r)=>t?n(t):e(...r)))})),debuglog:()=>function(){},format:(t,...e)=>t.replace(/%([sdifj])/g,(function(...[t,n]){const r=e.shift();if("f"===n)return r.toFixed(6);if("j"===n)return JSON.stringify(r);if("s"===n&&"object"==typeof r){return`${r.constructor!==Object?r.constructor.name:""} {}`.trim()}return r.toString()})),inspect(t){switch(typeof t){case"string":if(t.includes("'")){if(!t.includes('"'))return`"${t}"`;if(!t.includes("`")&&!t.includes("${"))return`\`${t}\``}return`'${t}'`;case"number":return isNaN(t)?"NaN":Object.is(t,-0)?String(t):t;case"bigint":return`${String(t)}n`;case"boolean":case"undefined":return String(t);case"object":return"{}"}},types:{isAsyncFunction:t=>t instanceof o,isArrayBufferView:t=>ArrayBuffer.isView(t)},isBlob:a},t.exports.promisify.custom=Symbol.for("nodejs.util.promisify.custom")},292:(t,e,n)=>{const{Buffer:r}=n(485),{ObjectDefineProperty:o,ObjectKeys:i,ReflectApply:a}=n(191),{promisify:{custom:s}}=n(775),{streamReturningOperators:u,promiseReturningOperators:l}=n(554),{codes:{ERR_ILLEGAL_CONSTRUCTOR:c}}=n(141),f=n(818),{pipeline:d}=n(754),{destroyer:h}=n(230),p=n(86),g=n(760),y=n(132),m=t.exports=n(200).Stream;m.isDisturbed=y.isDisturbed,m.isErrored=y.isErrored,m.isReadable=y.isReadable,m.Readable=n(858);for(const w of i(u)){const _=u[w];function v(...t){if(new.target)throw c();return m.Readable.from(a(_,this,t))}o(v,"name",{__proto__:null,value:_.name}),o(v,"length",{__proto__:null,value:_.length}),o(m.Readable.prototype,w,{__proto__:null,value:v,enumerable:!1,configurable:!0,writable:!0})}for(const E of i(l)){const S=l[E];function v(...t){if(new.target)throw c();return a(S,this,t)}o(v,"name",{__proto__:null,value:S.name}),o(v,"length",{__proto__:null,value:S.length}),o(m.Readable.prototype,E,{__proto__:null,value:v,enumerable:!1,configurable:!0,writable:!0})}m.Writable=n(373),m.Duplex=n(182),m.Transform=n(210),m.PassThrough=n(467),m.pipeline=d;const{addAbortSignal:b}=n(374);m.addAbortSignal=b,m.finished=p,m.destroy=h,m.compose=f,o(m,"promises",{__proto__:null,configurable:!0,enumerable:!0,get:()=>g}),o(d,s,{__proto__:null,enumerable:!0,get:()=>g.pipeline}),o(p,s,{__proto__:null,enumerable:!0,get:()=>g.finished}),m.Stream=m,m._isUint8Array=function(t){return t instanceof Uint8Array},m._uint8ArrayToBuffer=function(t){return r.from(t.buffer,t.byteOffset,t.byteLength)}},760:(t,e,n)=>{const{ArrayPrototypePop:r,Promise:o}=n(191),{isIterable:i,isNodeStream:a,isWebStream:s}=n(132),{pipelineImpl:u}=n(754),{finished:l}=n(86);n(91),t.exports={finished:l,pipeline:function(...t){return new o(((e,n)=>{let o,l;const c=t[t.length-1];if(c&&"object"==typeof c&&!a(c)&&!i(c)&&!s(c)){const e=r(t);o=e.signal,l=e.end}u(t,((t,r)=>{t?n(t):e(r)}),{signal:o,end:l})}))}}},533:t=>{var e,n,r=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(t){if(e===setTimeout)return setTimeout(t,0);if((e===o||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(n){try{return e.call(null,t,0)}catch(n){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:o}catch(t){e=o}try{n="function"==typeof clearTimeout?clearTimeout:i}catch(t){n=i}}();var s,u=[],l=!1,c=-1;function f(){l&&s&&(l=!1,s.length?u=s.concat(u):c=-1,u.length&&d())}function d(){if(!l){var t=a(f);l=!0;for(var e=u.length;e;){for(s=u,u=[];++c<e;)s&&s[c].run();c=-1,e=u.length}s=null,l=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{return n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function h(t,e){this.fun=t,this.array=e}function p(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];u.push(new h(t,e)),1!==u.length||l||a(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=p,r.addListener=p,r.once=p,r.off=p,r.removeListener=p,r.removeAllListeners=p,r.emit=p,r.prependListener=p,r.prependOnceListener=p,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},377:(t,e,n)=>{var r=n(485),o=r.Buffer;function i(t,e){for(var n in t)e[n]=t[n]}function a(t,e,n){return o(t,e,n)}o.from&&o.alloc&&o.allocUnsafe&&o.allocUnsafeSlow?t.exports=r:(i(r,e),e.Buffer=a),i(o,a),a.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return o(t,e,n)},a.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=o(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},a.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return o(t)},a.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},464:(t,e,n)=>{var r=n(377).Buffer,o=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function i(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===o||!o(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=l,e=4;break;case"utf8":this.fillLast=s,e=4;break;case"base64":this.text=c,this.end=f,e=3;break;default:return this.write=d,void(this.end=h)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function a(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function s(t){var e=this.lastTotal-this.lastNeed,n=function(t,e,n){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==n?n:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var n=t.toString("utf16le",e);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function l(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,n)}return e}function c(t,e){var n=(t.length-e)%3;return 0===n?t.toString("base64",e):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-n))}function f(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function d(t){return t.toString(this.encoding)}function h(t){return t&&t.length?this.write(t):""}e.StringDecoder=i,i.prototype.write=function(t){if(0===t.length)return"";var e,n;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<t.length?e?e+this.text(t,n):this.text(t,n):e||""},i.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},i.prototype.text=function(t,e){var n=function(t,e,n){var r=e.length-1;if(r<n)return 0;var o=a(e[r]);if(o>=0)return o>0&&(t.lastNeed=o-1),o;if(--r<n||-2===o)return 0;if(o=a(e[r]),o>=0)return o>0&&(t.lastNeed=o-2),o;if(--r<n||-2===o)return 0;if(o=a(e[r]),o>=0)return o>0&&(2===o?o=0:t.lastNeed=o-3),o;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=n;var r=t.length-(n-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},i.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},54:(t,e,n)=>{n.d(e,{MS:()=>A,cF:()=>I,AK:()=>T,M_:()=>R,cX:()=>x,BT:()=>InteropError,_W:()=>B,Pg:()=>lt,$j:()=>Y,U$:()=>N,U7:()=>M});var r={d:(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},o={};r.d(o,{MS:()=>ApiError,cF:()=>ApiRequestError,AK:()=>AuthTokenExpiredError,M_:()=>AuthorizationError,cX:()=>InitializationError,Yd:()=>l,nj:()=>NotImplementedError,O4:()=>S,_W:()=>ParameterError,U$:()=>a,U7:()=>s});class ApiError extends Error{constructor(t,e){var n,r;super(t=null!==(n=null!=t?t:null==e?void 0:e.message)&&void 0!==n?n:"An unexpected error has occurred"),this.name=this.constructor.name,this.stack=(t?this.stack:null!==(r=null==e?void 0:e.stack)&&void 0!==r?r:this.stack).replace(/^(\w*Error)/,`${this.constructor.name}`)}}class ApiRequestError extends ApiError{constructor(t,e,n){var r;super(t=null!==(r=null!=t?t:null==n?void 0:n.message)&&void 0!==r?r:"An error occurred when executing the API request",n),this.status=e}}class AuthorizationError extends ApiError{constructor(t,e){var n;super(t=null!==(n=null!=t?t:null==e?void 0:e.message)&&void 0!==n?n:"An authorization error occurred",e)}}class AuthTokenExpiredError extends ApiError{constructor(t,e){var n;super(t=null!==(n=null!=t?t:null==e?void 0:e.message)&&void 0!==n?n:"The API request failed as the authorization tokens have expired",e)}}class InitializationError extends ApiError{constructor(t,e){var n;super(t=null!==(n=null!=t?t:null==e?void 0:e.message)&&void 0!==n?n:"An initialization error occurred",e)}}class NotImplementedError extends ApiError{constructor(t,e){var n;super(t=null!==(n=null!=t?t:null==e?void 0:e.message)&&void 0!==n?n:"The method has not been implemented",e)}}class ParameterError extends ApiError{constructor(t){super(t=null!=t?t:"Invalid parameter detected")}}const i=t=>{let e=fin.Integrations;e||(fin.Integrations={},e=fin.Integrations);let n=e[t];return n||(e[t]={},n=e[t]),n},a=t=>{i(t).loggingEnabled=!1},s=(t,e="0.0.0")=>{i(t).loggingEnabled=!0,console.log(u(t),`v${e}`)},u=t=>`[@openfin/${t.toLowerCase()}]`;class l{constructor(t){this.name=t,this.prefix=u(t),this.isLoggingEnabled=this.isLoggingEnabled.bind(this),this.logError=this.logError.bind(this),this.logInfo=this.logInfo.bind(this),this.logWarning=this.logWarning.bind(this)}isLoggingEnabled(){return i(this.name).loggingEnabled}logError(t){this.isLoggingEnabled()&&(t.innerError?console.error(this.prefix,t,"\n\n(inner)",t.innerError):console.error(this.prefix,t))}logInfo(...t){this.isLoggingEnabled()&&console.log(this.prefix,...t)}logWarning(...t){this.isLoggingEnabled()&&console.warn(this.prefix,...t)}}const c="oauth-api-auth-flow",f=(t,e,n,r,o,i,a,s)=>async u=>{const l=new URL(u);if(0!==l.href.toLowerCase().indexOf(o.toLowerCase()))return!1;if(window.clearInterval(s),window.clearTimeout(e),window.clearTimeout(n),t.removeAllListeners(),t.close(!0),l.searchParams.get("error")){const t=new ApiError("Authorization error");return t.data=l.toString(),a(t),!0}if(l.searchParams.get("state")!==r){const t=new ApiError("State mismatch");return t.data=l.toString(),a(t),!0}const c=l.searchParams.get("code");if(!c){const t=new ApiError("Authorization code missing");return t.data=l.toString(),a(t),!0}return i(c),!0},d=(t,e,n,r)=>async(o,i)=>{let a;const s=window.setTimeout((()=>{window.clearInterval(a),window.clearTimeout(s),t.removeAllListeners(),t.close(!0),i(new ApiError("Authorization timed out"))}),3e5);t.addListener("closing",(async()=>{r.logInfo("User closed auth window"),window.clearInterval(a),window.clearTimeout(s),t.removeAllListeners(),i(new ApiError("Failed to complete authorization code flow"))}));const u=window.setTimeout((async()=>{try{await t.isShowing()||(r.logInfo("Showing auth window"),await t.show(!0),await t.focus())}catch(t){r.logWarning("Unable to show auth window")}}),2e3),{version:l}=await fin.System.getRuntimeInfo();parseInt(l.split(".")[0],10)>=30?await f(t,s,u,e,n,o,i)((await t.getInfo()).url)||await t.addListener("url-changed",(a=>{r.logInfo("Auth window navigated to",a.url),f(t,s,u,e,n,o,i)(a.url)})):a=window.setInterval((()=>(async(t,e,n,r,o,i,a,s)=>{let u;try{u=await t.getInfo()}catch(t){return window.clearInterval(e),window.clearTimeout(n),window.clearTimeout(r),s(new ApiError("Could not locate auth window")),!1}return f(t,n,r,o,i,a,s,e)(u.url)})(t,a,s,u,e,n,o,i)),500)},h=()=>{let t,e,n,r;const o=async(e,n=!1)=>{const{command:r,data:a,id:s}=e,u={command:r,id:s};try{if(!t)throw new Error("Access token not found");const{apiRequestUrl:r,data:s,headers:l,httpMethod:c,includeAuthorization:f}=a,d=await(async(e,n,r,o,i)=>{var a,s;const u=Object.assign({Accept:"application/json"},o);"PATCH"!==n&&"POST"!==n&&"PUT"!==n||/content-type/i.test(Object.keys(u).join(","))||(u["Content-Type"]="application/json"),i&&(u.Authorization=`Bearer ${t}`);const l=await fetch(e,{body:"object"==typeof r?JSON.stringify(r):r,headers:u,method:n});if(!l.ok){const t={message:"Failed to execute API request"};return(null===(a=l.headers.get("Content-Type"))||void 0===a?void 0:a.includes("application/json"))&&(t.data=await l.json()),[l.status,void 0,void 0,t]}let c;const f=null!==(s=l.headers.get("Content-Type"))&&void 0!==s?s:"";switch(!0){case!f:break;case/^application\/(\w+\+)?json/i.test(f):c=await l.json();break;case/^multipart\/form-?data|^application\/x-?www-?form-?urlencoded/i.test(f):c=await l.formData();break;case/^application\/(([^/]+)?xml|vnd\.openxmlformats)|^text\/|^image\/svg/i.test(f):c=await l.text();break;default:c=await l.arrayBuffer()}return[l.status,c,f,void 0]})(r,c,s,l,f),[h,p,g,y]=d;if(u.status=h,y){if(!n&&401===h){const[t,n]=await i();return n?(u.status=t,u.error=n,u):await o(e,!0)}u.error=y}else p&&(u.data=p,u.type=g)}catch(t){t instanceof Error?u.error={message:t.message}:u.error={message:"Failed to execute API request"}}return Promise.resolve(u)},i=async()=>{var o;if(!n)throw new Error("Authorization server metadata not set");if(!e)throw new Error("Client ID not set");const i=`grant_type=refresh_token&client_id=${e}&refresh_token=${r}`,a=await fetch(n.token_endpoint,{body:i,headers:{Accept:"application/json","Content-Type":"application/x-www-form-urlencoded"},method:"POST"});if(!a.ok){const t={message:"Failed to refresh access token"};return(null===(o=a.headers.get("Content-Type"))||void 0===o?void 0:o.includes("application/json"))&&(t.data=await a.json()),[a.status,t]}const s=await a.json();return t=s.access_token,[a.status]};self.onmessage=async i=>{const{command:a,id:s}=i.data;let u={command:a,id:s};switch(a){case"API_REQUEST":u=await o(i.data);break;case"CODE_EXCHANGE":u=await(async o=>{var i;const{command:a,data:s,id:u}=o,l={command:a,id:u};try{if(!n)throw new Error("Authorization server metadata not set");if(!e)throw new Error("Client ID not set");const{code:o,codeVerifier:a,redirectUri:u}=s,c=`grant_type=authorization_code&client_id=${e}&code=${o}&code_verifier=${a}&redirect_uri=${u}`,f=await fetch(n.token_endpoint,{body:c,headers:{Accept:"application/json","Content-Type":"application/x-www-form-urlencoded"},method:"POST"});if(f.ok){const e=await f.json();t=e.access_token,r=e.refresh_token}else{const t={message:"Failed to retrieve tokens"};(null===(i=f.headers.get("Content-Type"))||void 0===i?void 0:i.includes("application/json"))&&(t.data=await f.json()),l.error=t}}catch(t){t instanceof Error?l.error={message:t.message}:l.error={message:"Failed to retrieve tokens"}}return Promise.resolve(l)})(i.data);break;case"EXPIRE_TOKENS":u=await(async e=>{var o;const{command:i,expireAccessTokenOnly:a,id:s}=e,u={command:i,id:s};try{if(!a&&!r)throw new Error("Refresh token not found");if(!n)throw new Error("Authorization server metadata not set");if(!n.revocation_endpoint)throw new Error("Revocation endpoint missing in authorization server metadata");const e=a?t:r,i=await fetch(`${n.revocation_endpoint}?token=${e}`,{headers:{Accept:"application/json"}});if(!i.ok){const t={message:"Failed to revoke tokens"};(null===(o=i.headers.get("Content-Type"))||void 0===o?void 0:o.includes("application/json"))&&(t.data=await i.json()),u.error=t}}catch(t){t instanceof Error?u.error={message:t.message}:u.error={message:"Failed to revoke tokens"}}return Promise.resolve(u)})(i.data);break;case"INIT":u=await(async t=>{const{command:r,data:o,id:i}=t,a={command:r,id:i};return e=o.clientId,n=o.metadata,Promise.resolve(a)})(i.data);break;default:u.error=new Error(`Unexpected oauth worker command: ${a}`)}self.postMessage(u)}};var p;!function(t){t.ApiRequest="API_REQUEST",t.CodeExchange="CODE_EXCHANGE",t.ExpireTokens="EXPIRE_TOKENS",t.Init="INIT"}(p||(p={}));const g=[],y=t=>{g.push(t)},m=(t,e)=>(n,r,o)=>new Promise(((i,a)=>{const s={command:p.CodeExchange,data:{code:n,codeVerifier:r,redirectUri:o},id:Date.now().toString()},{command:u,id:l}=s;y({command:u,id:l,reject:a,resolve:i}),t.postMessage(s),e.logInfo("Worker request sent",s)})),v=(t,e,n)=>(r,o,i,a,s)=>new Promise(((u,l)=>{const c={command:p.ApiRequest,data:{apiRequestUrl:r,clientId:t,data:i,headers:a,httpMethod:o,includeAuthorization:s},id:Date.now().toString()},{command:f,id:d}=c;y({command:f,id:d,reject:l,resolve:u}),e.postMessage(c),n.logInfo("Worker request sent",c)})),b=(t,e)=>n=>new Promise(((r,o)=>{const i={command:p.ExpireTokens,expireAccessTokenOnly:n,id:Date.now().toString()},{command:a,id:s}=i;y({command:a,id:s,reject:o,resolve:r}),t.postMessage(i),e.logInfo("Worker request sent",i)})),w=t=>e=>{t.logInfo("Worker response received",e.data);const n=e.data,{command:r,error:o,id:i}=n,a=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(t);o<r.length;o++)e.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(t,r[o])&&(n[r[o]]=t[r[o]])}return n}(n,["command","error","id"]),s=((t,e)=>g.find((n=>n.command===e&&n.id===t)))(i,r);s?(o?("status"in a&&void 0!==a.status&&(o.status=a.status),s.reject(o)):s.resolve(a),_(i,r)):t.logError(new Error("Unable to locate awaited request"))},_=(t,e)=>{const n=g.findIndex((n=>n.command===e&&n.id===t));n>=0&&g.splice(n,1)},E=(t,e)=>async()=>{try{await b(t,e)(!1)}catch(t){e.logWarning(t.message)}t.terminate(),e.logInfo("Worker terminated")};class S{get apiOrigin(){return this._apiOrigin}get clientId(){return this._clientId}get logger(){return this._logger}get metadata(){return this._metadata}get worker(){return this._worker}constructor(t,e,n,r,o){if(this.executeApiRequest=async(t,e="GET",n,r,o=!0,i=!1)=>{this._logger.logInfo("ExecuteApiRequest started",t,e,n,r);try{const i=await((t,e)=>async(n,r,o,i,a)=>{try{return await e.executeApiRequest(`${t}${n}`,r,o,i,a)}catch(t){let e;const{data:n,message:r,status:o}=t;throw e=t instanceof Error?new ApiRequestError(r,o):"Failed to refresh access token"===r?new AuthTokenExpiredError(r):new ApiRequestError(r,o),e.data=n,e}})(this._apiOrigin,this._worker)(t,e,n,r,o);return this._logger.logInfo("ExecuteApiRequest completed",i),i}catch(t){if(t instanceof ApiRequestError){const{data:e,message:n,name:r,stack:o}=t,i=this.getErrorMessageFromServerResponse(e);i&&(t.message=i,t.stack=null==o?void 0:o.replace(`${r}: ${n}`,`${r}: ${i}`))}throw i&&this.logger.logError(t),t}},!(t&&e&&n&&r&&o))throw new InitializationError("Provider has not been properly initialized (call init to create new instances)");this._apiOrigin=t,this._clientId=e,this._metadata=n,this._worker=r,this._logger=o,this.authorize=this.authorize.bind(this),this.close=this.close.bind(this),this.executeApiRequest=this.executeApiRequest.bind(this),this.expireTokens=this.expireTokens.bind(this),this.getErrorMessageFromServerResponse=this.getErrorMessageFromServerResponse.bind(this)}async authorize(t,e,n){if(this._logger.logInfo("Authorize started",t,e,n),!this._metadata||!this._clientId||!this._worker)throw new InitializationError("Provider has not been properly initialized (call init to create new instances)");try{await(r=this._metadata,o=this._clientId,i=this._worker,a=this._logger,async(t,e,n)=>{const{authorization_endpoint:s}=r,u=fin.Application.getCurrentSync(),l=(await u.getChildWindows()).find((t=>t.identity.name===c));l&&await l.close(!0);const f=(new Date).getTime().toString(),h=(()=>{const t=new Uint32Array(64);return window.crypto.getRandomValues(t),Array.from(t,(t=>`0${t.toString(16)}`.slice(-2))).join("")})(),p=(await(async t=>{const e=(new TextEncoder).encode(t),n=await window.crypto.subtle.digest("SHA-256",e),r=await(t=>new Promise(((e,n)=>{try{const r=new Blob([t]),o=new FileReader;o.onload=t=>{var r,o;const i=null===(r=t.target)||void 0===r?void 0:r.result;if(i){const[,t]=Array.from(null!==(o=i.match(/base64,(.*)$/i))&&void 0!==o?o:[]);e(null!=t?t:"")}n(new Error("Unexpected empty result"))},o.readAsDataURL(r)}catch(t){n(t)}})))(n);return r.replace(/\+/g,"-").replace(/\//g,"_")})(h)).replace(/=+$/,"");let g="";e&&(g="&",g+=Object.entries(e).map((t=>`${encodeURIComponent(t[0])}=${encodeURIComponent(t[1])}`)).join("&"));const y=`${s}?client_id=${encodeURIComponent(o)}&redirect_uri=${encodeURIComponent(t)}&response_type=code&state=${f}&code_challenge=${p}&code_challenge_method=S256${g}`,m=null!=n?n:{},{defaultHeight:v,defaultWidth:b}=m,w=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(t);o<r.length;o++)e.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(t,r[o])&&(n[r[o]]=t[r[o]])}return n}(m,["defaultHeight","defaultWidth"]);a.logInfo("Starting OAuth flow",y);const _=await fin.Window.create(Object.assign({alwaysOnTop:!0,maximizable:!1,minimizable:!1,autoShow:!1,defaultCentered:!0,defaultHeight:null!=v?v:700,defaultWidth:null!=b?b:600,includeInSnapshots:!1,name:c,resizable:!1,saveWindowState:!1,showTaskbarIcon:!1,url:y},w)),E=await new Promise(d(_,f,t,a));a.logInfo("Received authorization code"),await i.exchangeCodeForTokens(E,h,t),a.logInfo("Received tokens")})(t,e,n),this._logger.logInfo("Authorize completed")}catch(t){let e;if(t instanceof ApiError){const{data:n}=t,r=this.getErrorMessageFromServerResponse(n);e=new AuthorizationError(r,t),e.data=n}else e=new AuthorizationError(void 0,t);throw this.logger.logError(e),e}var r,o,i,a}async close(){var t;this._logger.logInfo("Close started");try{await(null===(t=this._worker)||void 0===t?void 0:t.terminate()),this._worker=void 0,this._apiOrigin=void 0,this._clientId=void 0,this._metadata=void 0,this._logger.logInfo("Close completed")}catch(t){const e=new ApiError(void 0,t);throw this._logger.logError(e),e}}async expireTokens(t=!1){var e;this._logger.logInfo("ExpireTokens started");try{await(null===(e=this._worker)||void 0===e?void 0:e.expireTokens(t)),this._logger.logInfo("ExpireTokens completed")}catch(t){const e=new ApiError(void 0,t);throw this._logger.logError(e),e}}getErrorMessageFromServerResponse(t){t&&this._logger.logWarning(t)}static async init(t,e,n,r,...o){const i=new l(r);let a;i.logInfo("Init started",t,e,n);try{a=new URL(e)}catch(t){const e=new ParameterError("Unexpected invalid API origin");throw i.logError(e),e}try{const e=await(async t=>{let e;try{e=new URL(t)}catch(t){throw new ParameterError("Unexpected invalid metadata URL")}const n=await fetch(e,{headers:{Accept:"application/json"}});if(!n.ok)throw new Error("Failed to retrieve authorization server metadata");const r=await n.json();if(!r)throw new Error("Unexpected empty authorization server metadata response");if(!r.response_types_supported.find((t=>"code"===t.toLowerCase())))throw new Error("Authorization server does not support the authorization code response type");return r})(t),r=await(async(t,e,n)=>{const r=new Blob([`(${h})()`],{type:"text/javascript"}),o=URL.createObjectURL(r),i=new Worker(o);return i.onmessage=w(n),await((t,e,n,r)=>new Promise(((o,i)=>{const a={command:p.Init,data:{clientId:e,metadata:t},id:Date.now().toString()},{command:s,id:u}=a;y({command:s,id:u,reject:i,resolve:o}),n.postMessage(a),r.logInfo("Worker request sent",a)})))(t,e,i,n),{exchangeCodeForTokens:m(i,n),executeApiRequest:v(e,i,n),expireTokens:b(i,n),terminate:E(i,n)}})(e,n,i);return i.logInfo("Init completed",e),new S(a.origin,n,e,r,i)}catch(t){let e;throw e=t instanceof ApiError?t:new InitializationError(void 0,t),i.logError(e),e}}}var A=o.MS,I=o.cF,T=o.AK,R=o.M_,x=o.cX,C=o.O4,B=o._W,k=o.U$,L=o.U7,O=n(951);const U="1.0.1",j="Microsoft365",N=()=>{k(j)},M=()=>{L(j,U)};"undefined"!=typeof window&&("undefined"==typeof fin&&Object.assign(window,{fin:{}}),Object.assign(fin,{Integrations:{Microsoft365:{enableLogging:M,disableLogging:N}}}));const P=t=>async(e,n,r,o,i)=>{var a;return e=(a=e).startsWith("/")?a:`/${a}`,t.executeApiRequest(e,n,r,o,i,!0)},W=async(t,e,n=[])=>{const r=["id","userPrincipalName","userType",...n].join(","),o=await(async(t,e=[])=>{if(!(null==e?void 0:e.length))return[];const n=[];for(let r=0;r<e.length;r+=20){const o={requests:e.slice(r,r+20).map((t=>(t.id=crypto.randomUUID(),t)))};n.push(t.executeApiRequest("/v1.0/$batch","POST",o))}const r=(await Promise.all(n)).flatMap((t=>t.data.responses));return e.map((t=>{var e;return null===(e=r.find((e=>e.id===t.id)))||void 0===e?void 0:e.body}))})(t,e.map((t=>({method:"GET",url:`/users?$filter=mail eq '${encodeURIComponent(t)}'&$select=${r}`})))),i=o.map((t=>{var e;return null===(e=t.value)||void 0===e?void 0:e[0]}));return t.logger.logInfo("Resolved users from email addresses",i,e),i};var $=n(300);const D=t=>t.map((t=>t?{id:t.userPrincipalName,emailAddress:t.mail,name:t.displayName}:void 0)),F=async(t,e)=>{try{await fin.System.registerUsage({type:"integration-feature",data:{apiVersion:U,componentName:t}})}catch(n){e.logWarning(`Unable to register usage for feature ${t}: ${null==n?void 0:n.message}`)}},z=t=>{let e=t;return Array.isArray(t)?t.filter(Boolean).map(z):("object"==typeof t&&(e=Object.fromEntries(Object.entries(t).filter((([,t])=>void 0!==(null!=t?t:void 0))).map((([t,e])=>[t,z(e)])))),e)},q=t=>/#EXT#@/.test(t.userPrincipalName);var H;!function(t){t.MS365="MS-365",t.Teams="MS-TEAMS"}(H||(H={}));class V extends C{get currentUser(){return this._currentUser}get redirectUri(){return this._redirectUri}get permissions(){return this._permissions}get tenantId(){return this._tenantId}constructor(t,e,n,r,o,i,a,s){super(t,e,i,a,s),this._permissions=o,this._redirectUri=r,this._tenantId=n,F(H.MS365,s)}async authorize(t,e,n){await super.authorize(t,e,n);const r=await(async t=>{const{data:e}=await t.executeApiRequest("/v1.0/me");return e})(this);this._currentUser=r}getErrorMessageFromServerResponse(t){var e,n,r;if("string"==typeof t)try{return null===(n=null===(e=new URL(t).searchParams.get("error_description"))||void 0===e?void 0:e.split(/\r\n/))||void 0===n?void 0:n[0]}catch(t){return}return null===(r=null==t?void 0:t.error)||void 0===r?void 0:r.message}static async init(t,e,n,r,o,i,a){const s=await super.init(t,e,n,r);return new V(e,n,o,i,a,null==s?void 0:s.metadata,null==s?void 0:s.worker,null==s?void 0:s.logger)}}const G=["User.ReadBasic.All","Team.ReadBasic.All","Channel.ReadBasic.All","ChannelMessage.Send","Chat.Create","ChatMessage.Send","offline_access"];let J;const Y=async(t,e,n,r=[],o,i)=>{await K(t,e,n,r);const a=Object.assign({scope:[...G,...r].join(" ")},o),s=Object.assign({defaultHeight:600,defaultWidth:550},i);return await J.authorize(n,a,s),{clientId:t,currentUser:J.currentUser,disconnect:J.close,executeApiRequest:P(J),provider:J,tenantId:e}},K=async(t,e,n,r)=>{if(!t)throw new B("Invalid client ID");if(!e)throw new B("Invalid tenant ID");if(!n)throw new B("Invalid redirect URI");const o=`https://login.microsoftonline.com/${e}/v2.0/.well-known/openid-configuration`;(!J||J.clientId!==t||J.tenantId!==e||J.redirectUri!==n||(0,O.xor)(J.permissions,r).length>0)&&(J=await V.init(o,"https://graph.microsoft.com",t,j,e,n,r))};class InteropError extends A{constructor(t,e){var n;super(t=null!==(n=null!=t?t:null==e?void 0:e.message)&&void 0!==n?n:"An interop error occurred",e)}}var X,Z,Q;!function(t){t.AppNotFound="AppNotFound",t.ErrorOnLaunch="ErrorOnLaunch",t.AppTimeout="AppTimeout",t.ResolverUnavailable="ResolverUnavailable"}(X||(X={})),function(t){t.NoAppsFound="NoAppsFound",t.ResolverUnavailable="ResolverUnavailable",t.ResolverTimeout="ResolverTimeout"}(Z||(Z={})),function(t){t.NoChannelFound="NoChannelFound",t.AccessDenied="AccessDenied",t.CreationFailed="CreationFailed"}(Q||(Q={}));var tt,et;tt=function(t){var e=function(t){var e,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var o=e&&e.prototype instanceof y?e:y,i=Object.create(o.prototype),a=new x(r||[]);return i._invoke=function(t,e,n){var r=f;return function(o,i){if(r===h)throw new Error("Generator is already running");if(r===p){if("throw"===o)throw i;return B()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=I(a,n);if(s){if(s===g)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=p,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var u=c(t,e,n);if("normal"===u.type){if(r=n.done?p:d,u.arg===g)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=p,n.method="throw",n.arg=u.arg)}}}(t,n,a),i}function c(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=l;var f="suspendedStart",d="suspendedYield",h="executing",p="completed",g={};function y(){}function m(){}function v(){}var b={};b[i]=function(){return this};var w=Object.getPrototypeOf,_=w&&w(w(C([])));_&&_!==n&&r.call(_,i)&&(b=_);var E=v.prototype=y.prototype=Object.create(b);function S(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function A(t,e){function n(o,i,a,s){var u=c(t[o],t,i);if("throw"!==u.type){var l=u.arg,f=l.value;return f&&"object"==typeof f&&r.call(f,"__await")?e.resolve(f.__await).then((function(t){n("next",t,a,s)}),(function(t){n("throw",t,a,s)})):e.resolve(f).then((function(t){l.value=t,a(l)}),(function(t){return n("throw",t,a,s)}))}s(u.arg)}var o;this._invoke=function(t,r){function i(){return new e((function(e,o){n(t,r,e,o)}))}return o=o?o.then(i,i):i()}}function I(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,I(t,n),"throw"===n.method))return g;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var o=c(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function T(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function R(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function x(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(T,this),this.reset(!0)}function C(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}return{next:B}}function B(){return{value:e,done:!0}}return m.prototype=E.constructor=v,v.constructor=m,m.displayName=u(v,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===m||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,v):(t.__proto__=v,u(t,s,"GeneratorFunction")),t.prototype=Object.create(E),t},t.awrap=function(t){return{__await:t}},S(A.prototype),A.prototype[a]=function(){return this},t.AsyncIterator=A,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new A(l(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},S(E),u(E,s,"Generator"),E[i]=function(){return this},E.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=C,x.prototype={constructor:x,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(R),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return s.type="throw",s.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=r.call(a,"catchLoc"),l=r.call(a,"finallyLoc");if(u&&l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,g):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),R(n),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;R(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:C(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}},tt(et={exports:{}},et.exports);var nt;!function(t){t.Contact="fdc3.contact",t.ContactList="fdc3.contactList",t.Country="fdc3.country",t.Instrument="fdc3.instrument",t.Organization="fdc3.organization",t.Portfolio="fdc3.portfolio",t.Position="fdc3.position"}(nt||(nt={}));var rt;!function(t){t.StartCall="StartCall",t.StartChat="StartChat",t.ViewChart="ViewChart",t.ViewContact="ViewContact",t.ViewQuote="ViewQuote",t.ViewNews="ViewNews",t.ViewInstrument="ViewInstrument",t.ViewAnalysis="ViewAnalysis"}(rt||(rt={}));const ot="ofms365action",it=async(t,e)=>{var n,r,o,i;const{chartImage:a,context:s}=e,{priceCurrent:u,priceHigh:l,priceLow:c,priceOpen:f}=e,d=(null===(r=null===(n=s.id)||void 0===n?void 0:n.ticker)||void 0===r?void 0:r.trim())||void 0,h=(null===(o=s.name)||void 0===o?void 0:o.trim())||void 0;let p,g,y,m,v,b;if(null!=e.timestamp||!a)try{p=new Date(null!==(i=e.timestamp)&&void 0!==i?i:Date.now()).toISOString().replace(/\.\d+Z$/,"+00:00")}catch(n){t.logger.logWarning("Invalid timestamp",e.timestamp)}if(null!=u&&null!=f&&(g=u-f,y=g/f*100,v=g>0?"▲":g<0?"▼":"●",m=g>0?"Good":g<0?"Attention":"Warning"),a){if(!/^image\/(gif|jp(e|e?g)|png)$/i.test(a.type))throw new B("Chart image MIME type not supported");try{b=await(async t=>new Promise(((e,n)=>{const r=new FileReader;r.onloadend=()=>e(r.result),r.onerror=()=>n(new Error("Failed to convert blob to base64")),r.readAsDataURL(t)})))(a)}catch(t){throw new A("Failed to convert blob to base64",t)}}const w=(await fin.System.getRuntimeInfo()).manifestUrl,_={context:s,intent:a?rt.ViewChart:rt.ViewInstrument,version:U},E=(S=_,(0,$.compress)(JSON.stringify(S),{outputEncoding:"Base64"}));var S;const I=`${w}?$$${ot}=${encodeURIComponent(E)}`,T=`https://start.openfin.co/?manifest=${encodeURIComponent(I)}`,R={$schema:"http://adaptivecards.io/schemas/adaptive-card.json",type:"AdaptiveCard",version:"1.4",body:[{type:"ColumnSet",columns:[{type:"Column",width:"stretch",items:[{type:"Container",items:[{type:"TextBlock",text:null!=h?h:d.toUpperCase(),wrap:!0,size:"Large",spacing:"None"},h&&{type:"TextBlock",text:d.toUpperCase(),isSubtle:!0,wrap:!0,spacing:"None"},p&&{type:"TextBlock",text:`{{DATE(${p}, SHORT)}} {{TIME(${p})}}`,wrap:!0,size:"Small"}]}]},null!=u&&!b&&{type:"Column",width:"stretch",items:[{type:"TextBlock",text:u.toFixed(2),size:"ExtraLarge",wrap:!0,horizontalAlignment:"Right"},null!=g&&null!=y&&{type:"TextBlock",text:`${v} ${g.toFixed(2)} (${y.toFixed(2)}%)`,color:m,spacing:"None",wrap:!0,horizontalAlignment:"Right"},(null!=f||null!=l||null!=c)&&{type:"Container",horizontalAlignment:"Right",items:[{type:"ColumnSet",columns:[{type:"Column",width:"stretch",items:[null!=f&&{type:"TextBlock",text:"Open",wrap:!0,horizontalAlignment:"Right",size:"Small",weight:"Bolder",spacing:"None"},null!=l&&{type:"TextBlock",text:"High",wrap:!0,spacing:"None",horizontalAlignment:"Right",size:"Small",weight:"Bolder"},null!=c&&{type:"TextBlock",text:"Low",wrap:!0,spacing:"None",horizontalAlignment:"Right",size:"Small",weight:"Bolder"}]},{type:"Column",width:"auto",items:[null!=f&&{type:"TextBlock",text:f.toFixed(2),wrap:!0,spacing:"None",horizontalAlignment:"Right",size:"Small"},null!=l&&{type:"TextBlock",text:l.toFixed(2),wrap:!0,spacing:"None",horizontalAlignment:"Right",size:"Small"},null!=c&&{type:"TextBlock",text:c.toFixed(2),wrap:!0,spacing:"None",horizontalAlignment:"Right",size:"Small"}]}]}],spacing:"Small"}]}]},b&&{type:"Image",url:"../hostedContents/1/$value",spacing:"Small"},{type:"ActionSet",actions:[{type:"Action.OpenUrl",url:T,title:"Open"}]}]},x={attachments:[{id:"1",contentType:"application/vnd.microsoft.card.adaptive",content:JSON.stringify(z(R))}],body:{contentType:"html",content:'<attachment id="1"></attachment>'},summary:"Test summary"};if(b){const[,t,e]=[...b.match(/^data:([^;]+);base64,(.+)$/i)];x.hostedContents=[{"@microsoft.graph.temporaryId":"1",contentBytes:e,contentType:t}]}return x},at=t=>t?"msteams:":"https://teams.microsoft.com",st=async t=>{const e=null==t?void 0:t[ot];if(e)try{const t=(t=>{const e=(0,$.decompress)(t,{inputEncoding:"Base64",outputEncoding:"String"});return JSON.parse(e)})(e),{context:n,intent:r}=t,o={context:n,name:r};return await fin.me.interop.fireIntent(o),o}catch(t){const e=t.message;throw new A("Failed to decompress share payload"+(e?` (${e})`:""),t)}},ut=async(t,e,n)=>{const r=await(async(t,e,n=[])=>{try{const r=["id",...n].join(","),{data:o}=await t.executeApiRequest(`/v1.0/teams/${encodeURIComponent(e)}?$select=${r}`);return o}catch(t){if(404!==t.status)throw t}})(t,e,["displayName"]);if(!r)return;let o;if(t.logger.logInfo("Resolved team",r),n){if(o=await(async(t,e,n,r=[])=>{try{const o=["id",...r].join(","),{data:i}=await t.executeApiRequest(`/v1.0/teams/${encodeURIComponent(n)}/channels/${encodeURIComponent(e)}?$select=${o}`);return i}catch(t){if(404!==t.status)throw t}})(t,n,e,["displayName"]),!o)return void t.logger.logWarning(`Could not resolve channel from id ${n}`)}else{t.logger.logInfo("No channel id supplied, using primary channel");const{data:n}=await t.executeApiRequest(`/v1.0/teams/${encodeURIComponent(e)}/primaryChannel?$select=displayName,id`);o=n}const i={channelId:o.id,channelName:o.displayName,teamId:r.id,teamName:r.displayName};return t.logger.logInfo("Resolved team channel",e,n,i),i};class lt{constructor(t,e=!0){this.logger=t.provider.logger,this.provider=t.provider,this.useMsTeamsProtocol=e,this.registerIntentHandlers=this.registerIntentHandlers.bind(this),this.share=this.share.bind(this),this.startCall=this.startCall.bind(this),this.startChat=this.startChat.bind(this),this.enableSharePayloadHandler(),F(H.Teams,this.logger)}async enableSharePayloadHandler(){const{initialOptions:t}=await fin.Application.getCurrentSync().getInfo(),{userAppConfigArgs:e}=t,n=await st(e);n&&this.logger.logInfo("Firing intent",n),fin.Application.getCurrentSync().addListener("run-requested",(async t=>{try{const e=await st(t.userAppConfigArgs);e&&this.logger.logInfo("Firing intent",e)}catch(t){this.logger.logError(t)}}))}async openUrl(t){this.logger.logInfo("openUrl started",t);try{const e=this.useMsTeamsProtocol?t.replace(/^https:\/\/teams.microsoft.com\//i,"msteams:"):t;this.logger.logInfo("Opening url",e),await fin.System.openUrlWithBrowser(e),this.logger.logInfo("openUrl completed")}catch(t){throw this.logger.logError(t),t}}async registerIntentHandlers(){if(this.logger.logInfo("registerIntentHandlers started"),this.unsubscribeIntentHandlers)return{unsubscribe:this.unsubscribeIntentHandlers};try{await fin.me.interop.getContextGroups();const t=await fin.me.interop.registerIntentHandler((async t=>{try{await((t,e)=>async n=>{var r,o,i,a;if(t.logger.logInfo("handleStartCallIntent started",n),(null===(r=n.name)||void 0===r?void 0:r.toLowerCase())!==rt.StartCall.toLowerCase())throw new A(`Unexpected intent type: ${n.name}`);const{context:s}=n;if((null===(o=s.type)||void 0===o?void 0:o.toLowerCase())!==nt.Contact.toLowerCase()&&(null===(i=s.type)||void 0===i?void 0:i.toLowerCase())!==nt.ContactList.toLowerCase())throw new A(`Unexpected context type: ${s.type}`);const u=(null===(a=s.type)||void 0===a?void 0:a.toLowerCase())===nt.ContactList.toLowerCase()?s.contacts.map((t=>t.id.email)).filter(Boolean):[s.id.email],l=await e(u);t.logger.logInfo("handleStartCallIntent completed",l)})(this.provider,this.startCall)(t)}catch(t){throw this.logger.logError(t),t}}),"StartCall"),e=await fin.me.interop.registerIntentHandler((async t=>{try{await((t,e)=>async n=>{var r,o,i,a;if(t.logger.logInfo("handleStartChatIntent started",n),(null===(r=n.name)||void 0===r?void 0:r.toLowerCase())!==rt.StartChat.toLowerCase())throw new A(`Unexpected intent type: ${n.name}`);const{context:s}=n;if((null===(o=s.type)||void 0===o?void 0:o.toLowerCase())!==nt.Contact.toLowerCase()&&(null===(i=s.type)||void 0===i?void 0:i.toLowerCase())!==nt.ContactList.toLowerCase())throw new A(`Unexpected context type: ${s.type}`);const u=(null===(a=s.type)||void 0===a?void 0:a.toLowerCase())===nt.ContactList.toLowerCase()?s.contacts.map((t=>t.id.email)).filter(Boolean):[s.id.email],l=await e({emailAddresses:u,topicName:s.name});t.logger.logInfo("handleStartChatIntent completed",l)})(this.provider,this.startChat)(t)}catch(t){throw this.logger.logError(t),t}}),"StartChat");return this.unsubscribeIntentHandlers=async()=>{this.logger.logInfo("unsubscribeIntentHandlers started"),await t.unsubscribe(),await e.unsubscribe(),this.unsubscribeIntentHandlers=void 0,this.logger.logInfo("unsubscribeIntentHandlers completed")},this.logger.logInfo("registerIntentHandlers completed"),{unsubscribe:this.unsubscribeIntentHandlers}}catch(t){const e=new InteropError(t.message);throw this.logger.logError(e),e}}async share(t){var e,n,r,o;this.logger.logInfo("share started",t);try{if(!t.target)throw new B("Target not provided");if((null===(e=t.context)||void 0===e?void 0:e.type.toLowerCase())!==nt.Instrument.toLowerCase())throw new B("Unsupported context type");if(!(null===(r=null===(n=t.context)||void 0===n?void 0:n.id)||void 0===r?void 0:r.ticker))throw new B("Ticker not provided");if(!t.chartImage&&null==t.priceCurrent)throw new B("Current price not provided");const i=null===(o=t.showMessage)||void 0===o||o,a=await it(this.provider,t);let s;if(Array.isArray(t.target)){const{target:e}=t,n=await W(this.provider,e,["displayName","mail"]),r=n.filter(Boolean);if(!r.length)return this.logger.logWarning("Could not resolve any valid users from email addresses",e),e.map((()=>{}));const{id:o,webUrl:u}=await(async(t,e)=>{const n={chatType:e.length>2?"group":"oneOnOne",members:e.map((e=>({"@odata.type":"#microsoft.graph.aadUserConversationMember",roles:q(e)?["guest"]:["owner"],"user@odata.bind":`${t.apiOrigin}/v1.0/users('${e.id}')`})))},{data:r}=await t.executeApiRequest("/v1.0/chats","POST",n);return r})(this.provider,[this.provider.currentUser,...r]),{data:l}=await this.provider.executeApiRequest(`/v1.0/chats/${encodeURIComponent(o)}/messages`,"POST",a);this.logger.logInfo("Sent chat message",l),i&&await this.openUrl(u),s=D(n)}else{const{target:e}=t,n=await ut(this.provider,e.teamId,e.channelId);if(!n)return void this.logger.logWarning("Could not resolve team/channel",e.teamId,e.channelId);const{channelId:r,teamId:o}=n,{data:u}=await this.provider.executeApiRequest(`/v1.0/teams/${encodeURIComponent(o)}/channels/${encodeURIComponent(r)}/messages`,"POST",a);this.logger.logInfo("Sent chat message",u),i&&await this.openUrl(u.webUrl),s=n}return this.logger.logInfo("share completed",s),s}catch(t){throw this.logger.logError(t),t}}async startCall(t=[],e=!1){this.logger.logInfo("startCall started",t);try{let n=`${at(this.useMsTeamsProtocol)}/l/call/0/0?`;const r=await W(this.provider,t,["displayName","mail"]),o=r.filter(Boolean).map((t=>encodeURIComponent(t.userPrincipalName)));if(!o.length)return this.logger.logWarning("Could not resolve any valid users from supplied emails",t),t.map((()=>{}));n+=`users=${o.join(",")}&withVideo=${e}`,this.logger.logInfo("Opening Teams",n),await fin.System.openUrlWithBrowser(n);const i=D(r);return this.logger.logInfo("startCall completed",i),i}catch(t){throw this.logger.logError(t),t}}async startChat(t){this.logger.logInfo("startChat started",t);try{let e,n;if("teamId"in t){const{teamId:r,channelId:o}=t,i=await ut(this.provider,r,o);if(!i)return void this.logger.logWarning("Could not resolve team/channel",r,o);e=`${at(this.useMsTeamsProtocol)}/l/channel/${encodeURIComponent(i.channelId)}/${encodeURIComponent(i.channelName)}?groupId=${i.teamId}&tenantId=${this.provider.tenantId}`,n=i}else{const{emailAddresses:r,message:o,topicName:i}=t;e=`${at(this.useMsTeamsProtocol)}/l/chat/0/0?`;const a=await W(this.provider,r,["displayName","mail"]),s=a.filter(Boolean).map((t=>encodeURIComponent(t.userPrincipalName)));if(!s.length)return this.logger.logWarning("Could not resolve any valid users from email addresses",r),r.map((()=>{}));e+=`users=${s.join(",")}`,i&&(e+=`&topicName=${encodeURIComponent(i)}`),o&&(e+=`&message=${encodeURIComponent(o)}`),n=D(a)}return this.logger.logInfo("Opening Teams",e),await fin.System.openUrlWithBrowser(e),this.logger.logInfo("startChat completed",n),n}catch(t){throw this.logger.logError(t),t}}}},91:()=>{}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}n.c=e,n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var r=n(n.s=54),o=r.MS,i=r.cF,a=r.AK,s=r.M_,u=r.cX,l=r.BT,c=r._W,f=r.Pg,d=r.$j,h=r.U$,p=r.U7;

/***/ }),

/***/ "../../node_modules/@openfin/workspace/index.js":
/*!******************************************************!*\
  !*** ../../node_modules/@openfin/workspace/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(()=>{var e={847:(e,t)=>{var a={2346:function(e,t,a){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getMostReadable=t.darkenColor=t.lightenColor=void 0;const r=n(a(6535));t.lightenColor=(e,t)=>o(e,"lighten",t),t.darkenColor=(e,t)=>o(e,"darken",t);const o=(e,t,a)=>{if(a&&(a<0||a>100))throw new Error(`${a} must be a number between 0 and 100`);return(0,r.default)(e)[t](a).toString()};t.getMostReadable=(e,t)=>r.default.mostReadable(e,t).toHexString()},2317:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.IconSize=t.Transition=t.LineHeight=t.FontWeight=t.FontSize=t.FontFamily=t.Shadow=t.Radius=t.UnitPx=t.Unit=t.SizeName=t.Size=t.Color=void 0,t.Color={white:"#FFFFFF",lightGray1:"#FAFBFE",lightGray2:"#F3F5F8",lightGray3:"#ECEEF1",lightGray4:"#DDDFE4",lightGray5:"#C9CBD2",neutralGray:"#7D808A",neutralGray80:"rgba(125,128,138,0.8)",silverGray:"#C0C1C2",darkGray1:"#53565F",darkGray2:"#383A40",darkGray3:"#2F3136",darkGray4:"#24262B",darkGray5:"#1E1F23",darkGray6:"#111214",openFinDarkest:"#3D39CD",openFinDarker:"#4642E0",openFin:"#504CFF",openFinLight:"#5254FB",openFinLighter:"#5C5EFE",openFinLightest:"#6864FF",functional1:"#207735",functional2:"#46C8F1",functional3:"#0A76D3",functional4:"#6CADE5",functional5:"#0A76D3",functional6:"#882BFE",functional7:"#F31818",functional8:"#C93400",functional9:"#FF5E60",functional10:"#F48F00",purple:"#8C61FF",lightblue:"#36C3FE",aqua:"#00CC88",yellow:"#FFEB00",salmon:"#FF8C4C",pink:"#FF5E60",lightpink:"#FF8FB8",white00:"rgba(255,255,255,0.0)",white10:"rgba(255,255,255,0.1)",white20:"rgba(255,255,255,0.2)",white30:"rgba(255,255,255,0.3)",white40:"rgba(255,255,255,0.4)",white50:"rgba(255,255,255,0.5)",white60:"rgba(255,255,255,0.6)",white70:"rgba(255,255,255,0.7)",white80:"rgba(255,255,255,0.8)",white90:"rgba(255,255,255,0.9)",black00:"rgba(0,0,0,0.0)",black10:"rgba(0,0,0,0.1)",black20:"rgba(0,0,0,0.2)",black30:"rgba(0,0,0,0.3)",black40:"rgba(0,0,0,0.4)",black50:"rgba(0,0,0,0.5)",black60:"rgba(0,0,0,0.6)",black70:"rgba(0,0,0,0.7)",black80:"rgba(0,0,0,0.8)",black90:"rgba(0,0,0,0.9)",transparent:"transparent",openFinActive:"#4642FF",openFinHover:"#6965FF",lightGray4Active:"#D7DADF",lightGray4Hover:"#EBECEF",darkGray2Active:"#33353B",darkGray2Hover:"#44464E"},t.Size={xsmall:"xsmall",small:"small",base:"base",large:"large",xlarge:"xlarge",xxlarge:"xxlarge",xxxlarge:"xxxlarge",xxxxlarge:"xxxxlarge"},t.SizeName={[t.Size.xsmall]:"Extra Small",[t.Size.small]:"Small",[t.Size.base]:"Base",[t.Size.large]:"Large",[t.Size.xlarge]:"Extra Large",[t.Size.xxlarge]:"2X Large",[t.Size.xxxlarge]:"3X Large",[t.Size.xxxxlarge]:"4X Large"},t.Unit={[t.Size.xsmall]:4,[t.Size.small]:8,[t.Size.base]:12,[t.Size.large]:16,[t.Size.xlarge]:20,[t.Size.xxlarge]:24,[t.Size.xxxlarge]:32,[t.Size.xxxxlarge]:48},t.UnitPx={[t.Size.xsmall]:"4px",[t.Size.small]:"8px",[t.Size.base]:"12px",[t.Size.large]:"16px",[t.Size.xlarge]:"20px",[t.Size.xxlarge]:"24px",[t.Size.xxxlarge]:"32px",[t.Size.xxxxlarge]:"48px"},t.Radius={[t.Size.xsmall]:"2px",[t.Size.small]:"4px",[t.Size.base]:"8px",[t.Size.large]:"24px",pill:"100vh",round:"50%",none:"0"},t.Shadow={[t.Size.base]:"0 4px 4px rgba(0, 0, 0, 0.25)"},t.FontFamily=["Inter","system-ui","BlinkMacSystemFont","Segoe UI","Roboto","Oxygen-Sans","Ubuntu","Cantarell","Helvetica Neue","sans-serif"].join(","),t.FontSize={[t.Size.xsmall]:"8px",[t.Size.small]:"10px",[t.Size.base]:"12px",[t.Size.large]:"14px",[t.Size.xlarge]:"16px",[t.Size.xxlarge]:"18px",[t.Size.xxxlarge]:"20px",[t.Size.xxxxlarge]:"40px"},t.FontWeight={normal:400,bold:600},t.LineHeight={ui:1,heading:1.2,text:1.5},t.Transition={base:"200ms cubic-bezier(0.16, 1, 0.3, 1)",none:"0ms"},t.IconSize={[t.Size.xsmall]:t.UnitPx.small,[t.Size.small]:t.UnitPx.base,[t.Size.base]:"15px",[t.Size.large]:t.UnitPx.xlarge,[t.Size.xlarge]:t.UnitPx.xxlarge,[t.Size.xxlarge]:t.UnitPx.xxxlarge,[t.Size.xxxlarge]:t.UnitPx.xxxxlarge}},6893:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createTheme=void 0;const n=a(2317),r=a(2346),o=a(5939),i={fontFamily:n.FontFamily,fontSize:n.FontSize,fontWeight:n.FontWeight,lineHeight:n.LineHeight,iconSize:n.IconSize,radius:n.Radius,shadow:n.Shadow,transition:n.Transition,unit:n.Unit,px:n.UnitPx},s=(e,t)=>({[`${e}Active`]:(0,r.darkenColor)(t,2),[`${e}Hover`]:(0,r.lightenColor)(t,5),[`${e}Focused`]:(0,r.getMostReadable)(t,[n.Color.white,n.Color.darkGray5]),[`${e}Text`]:(0,r.getMostReadable)(t,[n.Color.white,n.Color.darkGray5])});t.createTheme=e=>Object.assign(Object.assign({},i),{palette:Object.assign(Object.assign(Object.assign({},s(o.Palette.brandPrimary,e.brandPrimary)),s(o.Palette.brandSecondary,e.brandSecondary)),e)})},5939:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Palette=void 0,t.Palette={background1:"background1",background2:"background2",background3:"background3",background4:"background4",background5:"background5",background6:"background6",brandPrimary:"brandPrimary",brandSecondary:"brandSecondary",brandPrimaryActive:"brandPrimaryActive",brandPrimaryHover:"brandPrimaryHover",brandPrimaryFocused:"brandPrimaryFocused",brandPrimaryText:"brandPrimaryText",brandSecondaryActive:"brandSecondaryActive",brandSecondaryHover:"brandSecondaryHover",brandSecondaryFocused:"brandSecondaryFocused",brandSecondaryText:"brandSecondaryText",inputBackground:"inputBackground",inputColor:"inputColor",inputPlaceholder:"inputPlaceholder",inputDisabled:"inputDisabled",inputFocused:"inputFocused",inputBorder:"inputBorder",statusSuccess:"statusSuccess",statusWarning:"statusWarning",statusCritical:"statusCritical",statusActive:"statusActive",textDefault:"textDefault",textHelp:"textHelp",textInactive:"textInactive",borderNeutral:"borderNeutral",contentBackground1:"contentBackground1",contentBackground2:"contentBackground2",contentBackground3:"contentBackground3",contentBackground4:"contentBackground4",contentBackground5:"contentBackground5",linkDefault:"linkDefault",linkHover:"linkHover"}},6535:function(e){e.exports=function(){function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}var t=/^\s+/,a=/\s+$/;function n(r,o){if(o=o||{},(r=r||"")instanceof n)return r;if(!(this instanceof n))return new n(r,o);var i=function(n){var r,o,i,s={r:0,g:0,b:0},c=1,d=null,l=null,u=null,p=!1,h=!1;return"string"==typeof n&&(n=function(e){e=e.replace(t,"").replace(a,"").toLowerCase();var n,r=!1;if(v[e])e=v[e],r=!0;else if("transparent"==e)return{r:0,g:0,b:0,a:0,format:"name"};return(n=O.rgb.exec(e))?{r:n[1],g:n[2],b:n[3]}:(n=O.rgba.exec(e))?{r:n[1],g:n[2],b:n[3],a:n[4]}:(n=O.hsl.exec(e))?{h:n[1],s:n[2],l:n[3]}:(n=O.hsla.exec(e))?{h:n[1],s:n[2],l:n[3],a:n[4]}:(n=O.hsv.exec(e))?{h:n[1],s:n[2],v:n[3]}:(n=O.hsva.exec(e))?{h:n[1],s:n[2],v:n[3],a:n[4]}:(n=O.hex8.exec(e))?{r:A(n[1]),g:A(n[2]),b:A(n[3]),a:F(n[4]),format:r?"name":"hex8"}:(n=O.hex6.exec(e))?{r:A(n[1]),g:A(n[2]),b:A(n[3]),format:r?"name":"hex"}:(n=O.hex4.exec(e))?{r:A(n[1]+""+n[1]),g:A(n[2]+""+n[2]),b:A(n[3]+""+n[3]),a:F(n[4]+""+n[4]),format:r?"name":"hex8"}:!!(n=O.hex3.exec(e))&&{r:A(n[1]+""+n[1]),g:A(n[2]+""+n[2]),b:A(n[3]+""+n[3]),format:r?"name":"hex"}}(n)),"object"==e(n)&&(E(n.r)&&E(n.g)&&E(n.b)?(r=n.r,o=n.g,i=n.b,s={r:255*P(r,255),g:255*P(o,255),b:255*P(i,255)},p=!0,h="%"===String(n.r).substr(-1)?"prgb":"rgb"):E(n.h)&&E(n.s)&&E(n.v)?(d=M(n.s),l=M(n.v),s=function(e,t,a){e=6*P(e,360),t=P(t,100),a=P(a,100);var n=Math.floor(e),r=e-n,o=a*(1-t),i=a*(1-r*t),s=a*(1-(1-r)*t),c=n%6;return{r:255*[a,i,o,o,s,a][c],g:255*[s,a,a,i,o,o][c],b:255*[o,o,s,a,a,i][c]}}(n.h,d,l),p=!0,h="hsv"):E(n.h)&&E(n.s)&&E(n.l)&&(d=M(n.s),u=M(n.l),s=function(e,t,a){var n,r,o;function i(e,t,a){return a<0&&(a+=1),a>1&&(a-=1),a<1/6?e+6*(t-e)*a:a<.5?t:a<2/3?e+(t-e)*(2/3-a)*6:e}if(e=P(e,360),t=P(t,100),a=P(a,100),0===t)n=r=o=a;else{var s=a<.5?a*(1+t):a+t-a*t,c=2*a-s;n=i(c,s,e+1/3),r=i(c,s,e),o=i(c,s,e-1/3)}return{r:255*n,g:255*r,b:255*o}}(n.h,d,u),p=!0,h="hsl"),n.hasOwnProperty("a")&&(c=n.a)),c=S(c),{ok:p,format:n.format||h,r:Math.min(255,Math.max(s.r,0)),g:Math.min(255,Math.max(s.g,0)),b:Math.min(255,Math.max(s.b,0)),a:c}}(r);this._originalInput=r,this._r=i.r,this._g=i.g,this._b=i.b,this._a=i.a,this._roundA=Math.round(100*this._a)/100,this._format=o.format||i.format,this._gradientType=o.gradientType,this._r<1&&(this._r=Math.round(this._r)),this._g<1&&(this._g=Math.round(this._g)),this._b<1&&(this._b=Math.round(this._b)),this._ok=i.ok}function r(e,t,a){e=P(e,255),t=P(t,255),a=P(a,255);var n,r,o=Math.max(e,t,a),i=Math.min(e,t,a),s=(o+i)/2;if(o==i)n=r=0;else{var c=o-i;switch(r=s>.5?c/(2-o-i):c/(o+i),o){case e:n=(t-a)/c+(t<a?6:0);break;case t:n=(a-e)/c+2;break;case a:n=(e-t)/c+4}n/=6}return{h:n,s:r,l:s}}function o(e,t,a){e=P(e,255),t=P(t,255),a=P(a,255);var n,r,o=Math.max(e,t,a),i=Math.min(e,t,a),s=o,c=o-i;if(r=0===o?0:c/o,o==i)n=0;else{switch(o){case e:n=(t-a)/c+(t<a?6:0);break;case t:n=(a-e)/c+2;break;case a:n=(e-t)/c+4}n/=6}return{h:n,s:r,v:s}}function i(e,t,a,n){var r=[x(Math.round(e).toString(16)),x(Math.round(t).toString(16)),x(Math.round(a).toString(16))];return n&&r[0].charAt(0)==r[0].charAt(1)&&r[1].charAt(0)==r[1].charAt(1)&&r[2].charAt(0)==r[2].charAt(1)?r[0].charAt(0)+r[1].charAt(0)+r[2].charAt(0):r.join("")}function s(e,t,a,n){return[x(I(n)),x(Math.round(e).toString(16)),x(Math.round(t).toString(16)),x(Math.round(a).toString(16))].join("")}function c(e,t){t=0===t?0:t||10;var a=n(e).toHsl();return a.s-=t/100,a.s=C(a.s),n(a)}function d(e,t){t=0===t?0:t||10;var a=n(e).toHsl();return a.s+=t/100,a.s=C(a.s),n(a)}function l(e){return n(e).desaturate(100)}function u(e,t){t=0===t?0:t||10;var a=n(e).toHsl();return a.l+=t/100,a.l=C(a.l),n(a)}function p(e,t){t=0===t?0:t||10;var a=n(e).toRgb();return a.r=Math.max(0,Math.min(255,a.r-Math.round(-t/100*255))),a.g=Math.max(0,Math.min(255,a.g-Math.round(-t/100*255))),a.b=Math.max(0,Math.min(255,a.b-Math.round(-t/100*255))),n(a)}function h(e,t){t=0===t?0:t||10;var a=n(e).toHsl();return a.l-=t/100,a.l=C(a.l),n(a)}function f(e,t){var a=n(e).toHsl(),r=(a.h+t)%360;return a.h=r<0?360+r:r,n(a)}function g(e){var t=n(e).toHsl();return t.h=(t.h+180)%360,n(t)}function m(e,t){if(isNaN(t)||t<=0)throw new Error("Argument to polyad must be a positive number");for(var a=n(e).toHsl(),r=[n(e)],o=360/t,i=1;i<t;i++)r.push(n({h:(a.h+i*o)%360,s:a.s,l:a.l}));return r}function w(e){var t=n(e).toHsl(),a=t.h;return[n(e),n({h:(a+72)%360,s:t.s,l:t.l}),n({h:(a+216)%360,s:t.s,l:t.l})]}function y(e,t,a){t=t||6,a=a||30;var r=n(e).toHsl(),o=360/a,i=[n(e)];for(r.h=(r.h-(o*t>>1)+720)%360;--t;)r.h=(r.h+o)%360,i.push(n(r));return i}function k(e,t){t=t||6;for(var a=n(e).toHsv(),r=a.h,o=a.s,i=a.v,s=[],c=1/t;t--;)s.push(n({h:r,s:o,v:i})),i=(i+c)%1;return s}n.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var e=this.toRgb();return(299*e.r+587*e.g+114*e.b)/1e3},getLuminance:function(){var e,t,a,n=this.toRgb();return e=n.r/255,t=n.g/255,a=n.b/255,.2126*(e<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4))+.7152*(t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4))+.0722*(a<=.03928?a/12.92:Math.pow((a+.055)/1.055,2.4))},setAlpha:function(e){return this._a=S(e),this._roundA=Math.round(100*this._a)/100,this},toHsv:function(){var e=o(this._r,this._g,this._b);return{h:360*e.h,s:e.s,v:e.v,a:this._a}},toHsvString:function(){var e=o(this._r,this._g,this._b),t=Math.round(360*e.h),a=Math.round(100*e.s),n=Math.round(100*e.v);return 1==this._a?"hsv("+t+", "+a+"%, "+n+"%)":"hsva("+t+", "+a+"%, "+n+"%, "+this._roundA+")"},toHsl:function(){var e=r(this._r,this._g,this._b);return{h:360*e.h,s:e.s,l:e.l,a:this._a}},toHslString:function(){var e=r(this._r,this._g,this._b),t=Math.round(360*e.h),a=Math.round(100*e.s),n=Math.round(100*e.l);return 1==this._a?"hsl("+t+", "+a+"%, "+n+"%)":"hsla("+t+", "+a+"%, "+n+"%, "+this._roundA+")"},toHex:function(e){return i(this._r,this._g,this._b,e)},toHexString:function(e){return"#"+this.toHex(e)},toHex8:function(e){return function(e,t,a,n,r){var o=[x(Math.round(e).toString(16)),x(Math.round(t).toString(16)),x(Math.round(a).toString(16)),x(I(n))];return r&&o[0].charAt(0)==o[0].charAt(1)&&o[1].charAt(0)==o[1].charAt(1)&&o[2].charAt(0)==o[2].charAt(1)&&o[3].charAt(0)==o[3].charAt(1)?o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0)+o[3].charAt(0):o.join("")}(this._r,this._g,this._b,this._a,e)},toHex8String:function(e){return"#"+this.toHex8(e)},toRgb:function(){return{r:Math.round(this._r),g:Math.round(this._g),b:Math.round(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+Math.round(this._r)+", "+Math.round(this._g)+", "+Math.round(this._b)+")":"rgba("+Math.round(this._r)+", "+Math.round(this._g)+", "+Math.round(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:Math.round(100*P(this._r,255))+"%",g:Math.round(100*P(this._g,255))+"%",b:Math.round(100*P(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+Math.round(100*P(this._r,255))+"%, "+Math.round(100*P(this._g,255))+"%, "+Math.round(100*P(this._b,255))+"%)":"rgba("+Math.round(100*P(this._r,255))+"%, "+Math.round(100*P(this._g,255))+"%, "+Math.round(100*P(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":!(this._a<1)&&(b[i(this._r,this._g,this._b,!0)]||!1)},toFilter:function(e){var t="#"+s(this._r,this._g,this._b,this._a),a=t,r=this._gradientType?"GradientType = 1, ":"";if(e){var o=n(e);a="#"+s(o._r,o._g,o._b,o._a)}return"progid:DXImageTransform.Microsoft.gradient("+r+"startColorstr="+t+",endColorstr="+a+")"},toString:function(e){var t=!!e;e=e||this._format;var a=!1,n=this._a<1&&this._a>=0;return t||!n||"hex"!==e&&"hex6"!==e&&"hex3"!==e&&"hex4"!==e&&"hex8"!==e&&"name"!==e?("rgb"===e&&(a=this.toRgbString()),"prgb"===e&&(a=this.toPercentageRgbString()),"hex"!==e&&"hex6"!==e||(a=this.toHexString()),"hex3"===e&&(a=this.toHexString(!0)),"hex4"===e&&(a=this.toHex8String(!0)),"hex8"===e&&(a=this.toHex8String()),"name"===e&&(a=this.toName()),"hsl"===e&&(a=this.toHslString()),"hsv"===e&&(a=this.toHsvString()),a||this.toHexString()):"name"===e&&0===this._a?this.toName():this.toRgbString()},clone:function(){return n(this.toString())},_applyModification:function(e,t){var a=e.apply(null,[this].concat([].slice.call(t)));return this._r=a._r,this._g=a._g,this._b=a._b,this.setAlpha(a._a),this},lighten:function(){return this._applyModification(u,arguments)},brighten:function(){return this._applyModification(p,arguments)},darken:function(){return this._applyModification(h,arguments)},desaturate:function(){return this._applyModification(c,arguments)},saturate:function(){return this._applyModification(d,arguments)},greyscale:function(){return this._applyModification(l,arguments)},spin:function(){return this._applyModification(f,arguments)},_applyCombination:function(e,t){return e.apply(null,[this].concat([].slice.call(t)))},analogous:function(){return this._applyCombination(y,arguments)},complement:function(){return this._applyCombination(g,arguments)},monochromatic:function(){return this._applyCombination(k,arguments)},splitcomplement:function(){return this._applyCombination(w,arguments)},triad:function(){return this._applyCombination(m,[3])},tetrad:function(){return this._applyCombination(m,[4])}},n.fromRatio=function(t,a){if("object"==e(t)){var r={};for(var o in t)t.hasOwnProperty(o)&&(r[o]="a"===o?t[o]:M(t[o]));t=r}return n(t,a)},n.equals=function(e,t){return!(!e||!t)&&n(e).toRgbString()==n(t).toRgbString()},n.random=function(){return n.fromRatio({r:Math.random(),g:Math.random(),b:Math.random()})},n.mix=function(e,t,a){a=0===a?0:a||50;var r=n(e).toRgb(),o=n(t).toRgb(),i=a/100;return n({r:(o.r-r.r)*i+r.r,g:(o.g-r.g)*i+r.g,b:(o.b-r.b)*i+r.b,a:(o.a-r.a)*i+r.a})},n.readability=function(e,t){var a=n(e),r=n(t);return(Math.max(a.getLuminance(),r.getLuminance())+.05)/(Math.min(a.getLuminance(),r.getLuminance())+.05)},n.isReadable=function(e,t,a){var r,o,i,s,c,d=n.readability(e,t);switch(o=!1,(i=a,"AA"!==(s=((i=i||{level:"AA",size:"small"}).level||"AA").toUpperCase())&&"AAA"!==s&&(s="AA"),"small"!==(c=(i.size||"small").toLowerCase())&&"large"!==c&&(c="small"),r={level:s,size:c}).level+r.size){case"AAsmall":case"AAAlarge":o=d>=4.5;break;case"AAlarge":o=d>=3;break;case"AAAsmall":o=d>=7}return o},n.mostReadable=function(e,t,a){var r,o,i,s,c=null,d=0;o=(a=a||{}).includeFallbackColors,i=a.level,s=a.size;for(var l=0;l<t.length;l++)(r=n.readability(e,t[l]))>d&&(d=r,c=n(t[l]));return n.isReadable(e,c,{level:i,size:s})||!o?c:(a.includeFallbackColors=!1,n.mostReadable(e,["#fff","#000"],a))};var v=n.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},b=n.hexNames=function(e){var t={};for(var a in e)e.hasOwnProperty(a)&&(t[e[a]]=a);return t}(v);function S(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function P(e,t){(function(e){return"string"==typeof e&&-1!=e.indexOf(".")&&1===parseFloat(e)})(e)&&(e="100%");var a=function(e){return"string"==typeof e&&-1!=e.indexOf("%")}(e);return e=Math.min(t,Math.max(0,parseFloat(e))),a&&(e=parseInt(e*t,10)/100),Math.abs(e-t)<1e-6?1:e%t/parseFloat(t)}function C(e){return Math.min(1,Math.max(0,e))}function A(e){return parseInt(e,16)}function x(e){return 1==e.length?"0"+e:""+e}function M(e){return e<=1&&(e=100*e+"%"),e}function I(e){return Math.round(255*parseFloat(e)).toString(16)}function F(e){return A(e)/255}var W,T,D,O=(T="[\\s|\\(]+("+(W="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)")+")[,|\\s]+("+W+")[,|\\s]+("+W+")\\s*\\)?",D="[\\s|\\(]+("+W+")[,|\\s]+("+W+")[,|\\s]+("+W+")[,|\\s]+("+W+")\\s*\\)?",{CSS_UNIT:new RegExp(W),rgb:new RegExp("rgb"+T),rgba:new RegExp("rgba"+D),hsl:new RegExp("hsl"+T),hsla:new RegExp("hsla"+D),hsv:new RegExp("hsv"+T),hsva:new RegExp("hsva"+D),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/});function E(e){return!!O.CSS_UNIT.exec(e)}return n}()}},n={};function r(e){var t=n[e];if(void 0!==t)return t.exports;var o=n[e]={exports:{}};return a[e].call(o.exports,o,o.exports,r),o.exports}var o={};(()=>{var e=o;Object.defineProperty(e,"__esModule",{value:!0}),e.createTheme=e.Palette=e.Color=void 0;var t=r(2317);Object.defineProperty(e,"Color",{enumerable:!0,get:function(){return t.Color}});var a=r(5939);Object.defineProperty(e,"Palette",{enumerable:!0,get:function(){return a.Palette}});var n=r(6893);Object.defineProperty(e,"createTheme",{enumerable:!0,get:function(){return n.createTheme}})})();var i=t;for(var s in o)i[s]=o[s];o.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})},877:()=>{},67:()=>{},861:(e,t,a)=>{"use strict";a.d(t,{Nt:()=>Ge,Ag:()=>Ne});var n={};a.r(n),a.d(n,{createNamespacedLocalStorage:()=>C,getItem:()=>M,removeItem:()=>I,setItem:()=>x});var r=a(675),o=a(723),i=a(181);async function s(){const e="getManifestOverrides",{manifest:t,initialOptions:a}=await fin.Application.getCurrentSync().getInfo();return t?.platform.workspace||t?.platform.home||a?.workspace||a?.home||console.warn(`${e}: Missing Home development manifest overrides, using Desktop Owner Settings.`),t?.platform.workspace?(JSON.stringify(t?.platform.workspace),t?.platform.workspace):t?.platform.home?(JSON.stringify(t?.platform.home),t?.platform.home):a?.workspace?(JSON.stringify(a?.workspace),a?.workspace):a?.home?(JSON.stringify(a?.home),a?.home):{}}const c=e=>fin.System.getSystemAppConfig(e);async function d(){const e="getDOSOverrides";if(!o.cI)return console.warn(`${e}: the fin API was not available, returning no result`),{};try{let t=await c("workspace").catch((t=>{console.warn(`${e}: customConfig entry for SystemApp workspace not available in Desktop Owner Settings. ${t?.message}`)}));return t||(t=await c("home")),JSON.stringify(t),t}catch(t){if(!o.Hd)return{};if(!(t instanceof Error))throw t;console.warn(`${e}: Missing Workspace Desktop Owner Settings configuration, using defaults. ${t?.message}`)}return{}}let l,u;const p=e=>e.replace(/\/$/,"");async function h(){const e=(await async function(){if(l)return l;const e="getOverrides";if(!o.cI)return o.YY&&console.warn(`${e}: The Fin API was not available. Returning an empty result.`),{};const[t,a]=await Promise.all([d(),s()]);return l={...a,...t,disableRuntimeValidation:a.disableRuntimeValidation||t.disableRuntimeValidation},l}()).browserBaseUrl;if(e)try{const t=new URL(e);if(t.pathname.endsWith("/"))t.pathname=p(t.pathname);else{if("/workspace"===t.pathname)return t.pathname+=`/${o.et}`,t.toString();console.warn(`@openfin/workspace-platform: browserOverrideBaseUrl must be a valid url, with path: /workspace. Expected <protocol>://<optional subdomain>.<domain>/workspace but got ${e}`)}}catch(t){console.warn(`@openfin/workspace-platform: browserOverrideBaseUrl must be a valid url. Expected <protocol>://<optional subdomain>.<domain>/workspace but got ${e}`)}return u??o.bD}async function f(e=!1){const t=await h()+i.Ay.EnterpriseBrowser;return e?t:p(t)}var g=a(70);const m=(e,t)=>{const a=e;return a.workspacePlatform||(a.workspacePlatform={}),a.workspacePlatform._internalDeferShowOptions={setAsForeground:!!t,deferShowEnabled:!0,autoShow:a.workspacePlatform?._internalAutoShow||a.workspacePlatform?._internalDeferShowOptions?.autoShow||void 0===a.autoShow||a.autoShow},a.autoShow=!1,a};var w,y;!function(e){e.RelativeToParentWindow="relative-to-parent-window",e.RelativeToMonitor="relative-to-monitor"}(w||(w={})),function(e){e.Top="top",e.Below="below"}(y||(y={}));const k=async e=>{const t=e&&await(0,g.Iq)(e).getBounds(),a=e?await(0,g.jz)(t):(await fin.System.getMonitorInfo()).primaryMonitor;return(0,g.VE)(a.availableRect)};var v=a(957);function b(){let e,t;return{promise:new Promise(((a,n)=>{e=a,t=n})),resolve:e,reject:t}}const S="dock3",P=__webpack_require__(/*! dexie */ "../../node_modules/dexie/import-wrapper.mjs"),C=e=>({setItem:(t,a)=>{localStorage.setItem(`${e}-${t}`,a)},getItem:t=>localStorage.getItem(`${e}-${t}`),removeItem:t=>localStorage.removeItem(`${e}-${t}`)}),A=C(o.$h),x=A.setItem,M=A.getItem,I=A.removeItem;var F;!function(e){e.CurrentWorkspaceId="currentWorkspaceId",e.LastFocusedBrowserWindow="lastFocusedBrowserWindow",e.MachineName="machineName",e.NewTabPageLayout="NewTabPageLayout",e.NewTabPageSort="NewTabPageSort",e.DockPosition="DockPosition",e.SelectedColorScheme="SelectedColorScheme",e.ThemePaletteSheet="ThemePaletteSheet",e.HasMovedStore="HasMovedStore",e.PageDragState="BrowserPageDragState"}(F||(F={}));const W=F,T=e=>e+"-"+fin.me.uuid,D=(e,t)=>{const a=o.AT&&o.cI&&new P.Dexie(e);return a&&a.version(.1).stores({[t]:""}),a},O=(e,t)=>{const a=D(T(e),t),n=D(e,t);if(!a||!n)throw new Error("Unable to migrate store - IndexDB not supported");return(async(e,t,a)=>{const n=M(W.HasMovedStore),r=n?JSON.parse(n):{};if(r&&r[a])return;r[a]=!0,x(W.HasMovedStore,JSON.stringify(r));const o=await e[a].toArray();await t[a].bulkPut(o)})(n,a,e),a},E="dock3-provider-config",_=o.AT&&o.cI&&new P.Dexie(T("dock3-provider-config"));_&&_.version(.1).stores({[E]:""});var B,R,$,L,N=function(e,t,a,n,r){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?r.call(e,a):r?r.value=a:t.set(e,a),a},G=function(e,t,a,n){if("a"===a&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===a?n:"a"===a?n.call(e):n?n.value:t.get(e)};class U{static getOverrideConstructor(...e){return class extends U{constructor(){super(...e)}}}constructor(e,t){if(B.set(this,void 0),R.set(this,void 0),$.set(this,null),L.set(this,b()),U.instance)throw new Error("Dock3Provider has already been initialized.");U.instance=this,N(this,B,e,"f"),N(this,R,t,"f"),this.registerChannelActions()}async launchEntry(e){}get ready(){return G(this,L,"f").promise}async bookmarkContentMenuEntry(e){}get config(){return G(this,B,"f")}set config(e){N(this,B,e,"f")}async updateConfig(e){await this.handleConfigChange(e)}async shutdown(){await Promise.all([G(this,R,"f").destroy(),this.getWindowSync().close(!0)]),U.instance=null}async saveConfig({config:e}){N(this,B,e,"f"),await async function(e){if(!_)throw new Error("Unable to save Dock provider config - IndexedDb not supported");await _[E].put(e,"latest")}(e)}async handleConfigChange(e){G(this,$,"f")&&await G(this,R,"f").dispatch(G(this,$,"f"),"handle-dock-config-updated",e)}async loadConfig(){const e=await async function(){if(!_)throw new Error("Unable to get Dock provider config - IndexedDB not supported");try{return await _[E].get("latest")}catch(e){return void console.warn("Failed to retrieve Dock provider config from IndexedDB",e)}}();return e&&N(this,B,e,"f"),G(this,B,"f")}getWindowSync(){return fin.Window.wrapSync({uuid:fin.me.identity.uuid,name:S})}registerChannelActions(){G(this,R,"f").register("launch-entry",this.launchEntry.bind(this)),G(this,R,"f").register("save-config",this.saveConfig.bind(this)),G(this,R,"f").register("bookmark-content-menu-entry",this.bookmarkContentMenuEntry.bind(this)),G(this,R,"f").onConnection((e=>{e.name===S&&N(this,$,e,"f")})),G(this,R,"f").register("ready",(async(e,t)=>{if(G(this,$,"f")?.endpointId!==t.endpointId)throw new Error(`Dock3Provider: 'ready' action received from unexpected client ${t.name} (${t.uuid})`);G(this,L,"f").resolve()})),G(this,R,"f").onDisconnection((e=>{G(this,$,"f")?.endpointId===e.endpointId&&(N(this,$,null,"f"),N(this,L,b(),"f"))}))}}B=new WeakMap,R=new WeakMap,$=new WeakMap,L=new WeakMap,U.instance=null;const V=async e=>{const t=e?fin.Window.wrapSync(e):fin.Window.getCurrentSync(),a=await t.getOptions();return a.workspacePlatform?.windowType&&"enterprise"===a.workspacePlatform.windowType};let H;a(277);var z=a(438);const q=__webpack_require__(/*! lodash.debounce */ "../../node_modules/lodash.debounce/index.js");var j=a.n(q);function K(){return localStorage.getItem(W.MachineName)??"unknown"}let X;async function Q(){return X||(X=await fin.System.getMachineId()),X}var Y=a(333);const Z=async e=>({...e,layoutDetails:{machineId:await Q(),machineName:K()}}),J=async e=>{const t=await(async(e,t)=>({pageId:(0,Y.N)(),title:e,layout:await Z(t),isReadOnly:!1}))(e.title,He(e.layout));return e.panels&&(t.panels=e.panels.map((e=>({...e,viewOptions:Ve(e.viewOptions)})))),{...e,...t}};var ee=a(79),te=a(786);var ae=a(102);const ne=(e,t)=>t?`${t}-${e.uuid}-${e.name}`:`__browser_window__-${e.uuid}-${e.name}`,re=new Map,oe=(e,t)=>{const a=ne(e,t);return n=a,re.has(n)||re.set(n,(0,ae.A)(n)),re.get(n)();// removed by dead control flow
 var n; };var ie,se,ce,de,le,ue;!function(e){e.CloseBrowserWindow="close-browser-window",e.QuitPlatform="quit-platform",e.ClosePage="close-page",e.AddToChannel="add-to-channel",e.RemoveFromChannel="remove-from-channel",e.OpenSaveModalInternal="open-save-modal-internal",e.DuplicatePage="duplicate-page",e.SetSelectedScheme="set-selected-scheme",e.ShowBrowserIndicator="show-browser-indicator",e.SetSelectedLanguage="set-selected-language",e.RefreshBookmarksInternal="refresh-bookmarks",e.GetLayoutsWithSelectedViewsInternal="get-layouts-with-selected-views",e.FocusAndExpandSearchInternal="focus-and-expand-search"}(ie||(ie={})),function(e){e.GetPages="get-pages",e.GetActivePageForWindow="get-active-page-for-window",e.AttachPagesToWindow="attach-pages-to-window",e.DetachPagesFromWindow="detach-pages-from-window",e.SetActivePageForWindow="set-active-page-for-window",e.RenamePage="rename-page",e.ReorderPagesForWindow="reorder-pages-for-window",e.UpdatePageForWindow="update-page-for-window",e.UpdatePagesWindowOptions="update-pages-window-options",e.IsDetachingPages="is-detaching-pages",e.IsActivePageChanging="is-active-page-changing"}(se||(se={})),function(e){e.GetApps="get-apps",e.GetCuratedContent="get-curated-content",e.GetRecentlyVisited="get-recently-visited",e.GetSearchProviders="get-search-providers"}(ce||(ce={})),function(e){e.CreateBookmarkNode="create-bookmark-node",e.GetBookmarkNode="get-bookmark-node",e.SearchBookmarkNodes="search-bookmark-nodes",e.UpdateBookmarkNode="update-bookmark-node",e.DeleteBookmarkNode="delete-bookmark-node"}(de||(de={})),function(e){e.UpdateFavoriteEntries="update-favorite-entries",e.UpdateContentMenu="update-content-menu",e.NavigateContentMenu="navigate-content-menu"}(le||(le={})),function(e){e.SendUpdateVersionModalResponse="send-update-version-modal-response"}(ue||(ue={}));const pe={...ie,...se,...le},he=(0,ae.A)(`${"undefined"!=typeof fin&&fin?.me.identity.uuid}-enterprise-bookmarks`),fe=e=>({identity:e,openfinWindow:fin.Window.wrapSync(e),_bookmarks:{_createBookmarkNode:async e=>(async e=>(await he()).dispatch(de.CreateBookmarkNode,e))(e),_getBookmarkNode:async e=>(async e=>(await he()).dispatch(de.GetBookmarkNode,e))(e),_searchBookmarkNodes:async e=>(async e=>(await he()).dispatch(de.SearchBookmarkNodes,e))(e),_updateBookmarkNode:async e=>(async e=>(await he()).dispatch(de.UpdateBookmarkNode,e))(e),_deleteBookmarkNode:async e=>(async e=>(await he()).dispatch(de.DeleteBookmarkNode,e))(e)},getPages:async()=>(await(0,ee.bW)(e)).dispatch(ee.OF.GetPagesForWindow,e),getPage:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.GetPageForWindow,{identity:e,pageId:t}),addPage:async t=>Ge().Browser.wrapSync(e)._addPage(t),_addPage:async(t,a)=>{const n=await(0,ee.bW)(e),r={identity:e,page:t,insertionIndex:a?.index,multiInstanceViewBehavior:a?.multiInstanceViewBehavior};return n.dispatch(ee.OF.AddPage,r)},_addPages:async(t,a,n)=>{const r=await(0,ee.bW)(e),o=t.map((({page:e,opts:t})=>({...e,multiInstanceViewBehavior:t?.multiInstanceViewBehavior||"duplicate"}))),i={identity:e,pages:o,insertionIndex:a,replaceActivePage:n};return r.dispatch(ee.OF.AttachPagesToWindow,i)},removePage:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.DetachPagesFromWindow,{identity:e,pageIds:[t]}),reparentPage:async t=>Ge().Browser.wrapSync(e)._reparentPage(t),_reparentPage:async t=>{const{pageId:a}=t,n=await(0,ee.bW)(e),r=(await n.dispatch(ee.OF.GetAllAttachedPages,void 0)).find((({pageId:e})=>e===a));if(!r)throw new Error(`Reparent Page Error: Target page with pageId ${a} not found`);r.multiInstanceViewBehavior="reparent";const o={identity:e,pages:[r],insertionIndex:t.index};return n.dispatch(ee.OF.AttachPagesToWindow,o)},setActivePage:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.SetActivePage,{identity:e,pageId:t}),updatePage:async t=>{const a=await(0,ee.bW)(e);return t.identity=e,a.dispatch(ee.OF.UpdatePageForWindow,t)},reorderPages:async t=>{const a=await(0,ee.bW)(e);return t.identity=e,a.dispatch(ee.OF.ReorderPagesForWindow,t)},_openGlobalContextMenu:async t=>{const a=await(0,ee.bW)(e);return t.identity=e,a.dispatch(ee.OF.OpenGlobalContextMenuInternal,t)},replaceToolbarOptions:async t=>{await(0,ee.bW)(e);const a=fin.Window.wrapSync(e);await a.updateOptions({workspacePlatform:{toolbarOptions:t}})},replaceWindowStateButtonOptions:async t=>{await(0,ee.bW)(e);const a=fin.Window.wrapSync(e);await a.updateOptions({workspacePlatform:{windowStateButtonOptions:t}})},updateBrowserWindowTitle:async t=>{const a=fin.Window.wrapSync(e);"string"!=typeof t?await a.updateOptions({workspacePlatform:{title:t}}):console.warn("Type string for window title is deprecated, please use WindowTitle type instead",t)},_openViewTabContextMenu:async t=>{const a=await(0,ee.bW)(e);return t.identity=e,a.dispatch(ee.OF.OpenViewTabContextMenuInternal,t)},_openPageTabContextMenu:async t=>{const a=await(0,ee.bW)(e);return t.identity=e,a.dispatch(ee.OF.OpenPageTabContextMenuInternal,t)},_openSaveModal:async t=>{await(0,ee.bW)(e);return(await oe(e)).dispatch(pe.OpenSaveModalInternal,t)},_getLayoutsWithSelectedViews:async()=>(await oe(e)).dispatch(pe.GetLayoutsWithSelectedViewsInternal,e),_openSaveButtonContextMenu:async t=>{const a=await(0,ee.bW)(e);return t.identity=e,a.dispatch(ee.OF.OpenSaveButtonContextMenuInternal,t)},_addDefaultPage:async t=>{const a=await(0,ee.bW)(e);return t.identity=e,a.dispatch(ee.OF.AddDefaultPage,t)},_trackRemovedTab:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.TrackRemovedTabInternal,t),_restoreRemovedTab:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.RestoreRemovedTabInternal,t),_trackVisitedSite:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.TrackVisitedSiteInternal,t),_getRecentlyVisitedSites:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.GetRecentlyVisitedSitesInternal,t),_getFrequentlyVisitedSites:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.GetFrequentlyVisitedSitesInternal,t),_searchSites:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.SearchSitesInternal,{identity:e,req:t}),_getSearchProviders:async()=>(await(0,ee.bW)(e)).dispatch(ee.OF.GetSearchProvidersInternal,{identity:e}),_getCuratedContent:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.GetCuratedContentInternal,{identity:e,req:t}),_handleRequestNavigation:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.HandleRequestNavigationInternal,t),_sendUpdateVersionModalResponse:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.SendUpdateVersionModalResponseInternal,t)}),ge=e=>{const t=fin.Platform.wrapSync(e);return{wrapSync:e=>fe(e),createWindow:async a=>{const n=(()=>{const e=`browser-window-startup-${(0,Y.N)()}`;return te.A.markStart(e),e})();(e=>{fin.Application.wrapSync({uuid:fin.me.identity.uuid}).once("window-shown",(()=>{te.A.markAndMeasure("browser-window-shown",e)}))})(n),await(0,ee.bW)(e);const r=await t.createWindow(a);return(e=>{te.A.markAndMeasure("browser-window-started",e)})(n),fe(r.identity)},getAllAttachedPages:async()=>(await(0,ee.bW)(e)).dispatch(ee.OF.GetAllAttachedPages,void 0),getAllWindows:async()=>{await(0,ee.bW)(e);return(await(0,g.Io)()).map((e=>fe(e.identity)))},getUniquePageTitle:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.GetUniquePageTitle,t),getLastFocusedWindow:async()=>(await(0,ee.bW)(e)).dispatch(ee.OF.GetLastFocusedBrowserWindow,void 0),getPageByViewIdentity:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.GetPageByViewIdentity,t)}},me=(e,t=0)=>{let a,n,r=!1;const o=async n=>{const i=await e(...n);if(r){await new Promise((e=>setTimeout(e,t)));const e=a;return a=void 0,r=!1,o(e)}return i};return(...e)=>(n?(r=!0,a=e):n=o(e).catch((e=>{throw console.error("makeDebouncedFunc",e),e})).finally((()=>{n=void 0})),n)};var we=a(523);function ye(e,t){return async(a,...n)=>{e.has(a)&&e.get(a).forEach((e=>e(...n))),t&&await t({event:a,payload:n})}}function ke(e,t){return t&&t((t=>{const{event:a,payload:n}=t;e.has(a)&&e.get(a).forEach((e=>e(...n)))})),(t,a)=>{e.has(t)||e.set(t,new Set),e.get(t).add(a)}}function ve(e){return(t,a)=>{e.has(t)||e.set(t,new Set);const n=e.get(t),r=(...e)=>{a(...e),n.delete(r)};n.add(r)}}function be(e){return(t,a)=>{e.has(t)&&e.get(t).delete(a)}}const Se={name:g.Q.BrowserMenu,alwaysOnTop:!0,autoShow:!0,frame:!1,resizable:!1,backgroundColor:"#2f3136",smallWindow:!0,showTaskbarIcon:!1,backgroundThrottling:!1,saveWindowState:!1};function Pe(e){const t={...Se,...e};return t.url=(0,we.Tt)(t.url??""),t}const Ce=function(e){const t=new Map;return{emit:ye(t,(t=>o.cI&&fin.InterApplicationBus.publish(e,t))),addListener:ke(t,(t=>o.cI&&fin.InterApplicationBus.subscribe({uuid:fin.me.uuid},e,t))),addListenerWithUUID:a=>ke(t,(t=>o.cI&&fin.InterApplicationBus.subscribe({uuid:a},e,t))),removeListener:be(t),once:ve(t)}}("window.menu"),Ae=(e,t)=>fin.Window.wrapSync(e).updateOptions({opacity:t}),xe=e=>Ce.emit("response",e),Me=me((()=>(0,z.v1)().getChildWindows()),500);const Ie=new Map;async function Fe(e,t,a){const n=Pe(e),o=await(0,v.qq)(fin.me.identity),i=await(0,v.l5)(fin.me.identity)===r.qT.Dark,s=o?.theme;if(n.backgroundColor=s?.[i?r.qT.Dark:r.qT.Light]?.palette?.inputBackground||n.backgroundColor,!Ie.has(n.name)){return new Promise((r=>{Ce.once("ready",(async e=>{if(e.name===n.name){const t=await Ie.get(n.name);n.preventBlur||t.once("blurred",(async()=>{if(Ae(e,0),t.hide(),xe({name:n.name,data:{actionName:"Cancel"}}),a=t.identity.name,[g.Q.BrowserSaveMenu,g.Q.DockSaveWorkspaceMenu,g.Q.DesktopSignalsModal].includes(a)){const e=await t.getOptions();"submitting"!==e.customContext&&"error"!==e.customContext&&t.close()}else t.identity.name.startsWith(g.Q.BrowserMenu)&&t.close();var a})),setTimeout((async()=>{await Ae(e,1);1!==(await fin.Window.wrapSync(e).getOptions()).opacity&&Ae(e,1)})),r(t)}}));const o=(async()=>{const r=await fin.Platform.getCurrentSync().createWindow(m({...n,opacity:0,url:t||n.url,defaultLeft:a?.left,defaultTop:a?.top,defaultWidth:a?.width,defaultHeight:a?.height,workspacePlatform:{preventBlur:e.preventBlur}},!0));return r.once("closed",(()=>{Ie.delete(n.name)})),r})();Ie.set(n.name,o)}))}return Ie.get(n.name)}async function We(e,t){const a=Pe(e),n={top:a.top,left:a.left,width:a.defaultWidth||a.width,height:a.defaultHeight||a.height};return t.set("parentName",fin.Window.getCurrentSync().identity.name),{name:a.name,bounds:n,route:`${a.url}#${t.toString()}`}}async function Te({options:e,parameters:t}){const a=t??new URLSearchParams,n=Pe(e),{name:r,modalParentIdentity:o}=n;if(!a.has("isEnterprise")){const e=`${await(async e=>(H||(H=await V(e)),H))(o)}`;a.set("isEnterprise",e)}let i=await async function(e){return(await Me()).find((t=>t.identity.name===e))}(r);if(i)await async function(e,t){const{name:a,bounds:n,route:r}=await We(e,t),o={uuid:fin.me.identity.uuid,name:a},i=fin.Window.wrapSync(o);await Promise.all([i.hide(),Ae(o,0),i.setBounds(n)]),e.preventBlur||i.once("blurred",(()=>{Ae(o,0),i.hide(),xe({name:o.name,data:{actionName:"Cancel"}})})),Ce.emit("update",a,n,r),await xe({name:a,data:{actionName:"Cancel"}})}(n,a);else{const{route:t,bounds:r}=await We(e,a);i=await Fe({...n},t,r)}return i}const De=e=>({createPage:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.CreateSavedPageInternal,t),deletePage:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.DeleteSavedPageInternal,t),updatePage:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.UpdateSavedPageInternal,t),getPage:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.GetSavedPage,t),getPages:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.GetSavedPages,t),savePage:async t=>(await(0,ee.bW)(e)).dispatch(ee.OF.SavePage,t),createWorkspace:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.CreateSavedWorkspace,t),deleteWorkspace:async t=>{const a=Ge(),n=await a.getCurrentWorkspace();if(n.workspaceId===t)throw new Error(`Cannot delete current active workspace ${n.title}`);return(await(0,ee.N)(e)).dispatch(ee.OF.DeleteSavedWorkspace,t)},updateWorkspace:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.UpdateSavedWorkspace,t),getWorkspace:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.GetSavedWorkspace,t),getWorkspaces:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.GetSavedWorkspaces,t),getWorkspacesMetadata:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.GetSavedWorkspacesMetadata,t),saveWorkspace:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.SaveWorkspace,t),getDockProviderConfig:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.GetDockProviderConfig,t),saveDockProviderConfig:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.SaveDockProviderConfig,t)});var Oe;!function(e){e.UpdatePlatformThemeScheme="update-platform-theme-scheme"}(Oe||(Oe={}));(0,ae.A)("of-workspace-notifications-sync");a(695);var Ee=a(898);const _e=r.qT.System,Be=e=>Object.entries(e).reduce(((e,[t,a])=>`${e}--workspace-palette-${t}: ${a};`),""),Re=(e,t)=>{const a=!!e.contentBackground5&&"#000000"!==e.contentBackground5,n=!!e.contentBackground4&&"#000000"!==e.contentBackground4,r=(0,Ee.b4)(e.textDefault),o=(0,Ee.b4)(e.textInactive),i=r.rgb,s=o.rgb,c=r.alpha?parseFloat(r.alpha.toString()):1,d=o.alpha?parseFloat(o.alpha.toString()):1;return{dockExpandedContainerBorderColor:a?e.contentBackground5:e.background4,dockExpandedContainerBorderRadius:a&&t?"0":"10px",dockExpandedContainerBackground:n?e.contentBackground4:e.background1,fillerBackgroundColor:n?e.contentBackground4:"inherit",dockCompanionContainerBackground:n?e.contentBackground4:"inherit",dockComponentContainerBackground:a?e.contentBackground5:e.background5,styledDropdownActiveBackground:`${a?e.contentBackground5:e.background4}`,contentMenuWrapperInternalDivBorderColor:a?e.contentBackground5:e.background5,contentMenuItemContainerActiveBackground:a?e.contentBackground5:e.background3,contentMenuItemContainerHoverBackground:a?e.contentBackground5:e.background2,contentMenuHeaderBorderColor:a?e.contentBackground5:e.background5,dockCompanionSeparatorBorderColor:a?e.contentBackground5:e.background3,dockComponentContainerBorderColor:a?e.contentBackground5:e.background5,companionDockButtonActiveBackground:a?e.contentBackground5:e.background4,companionDockButtonHoverBackground:a?e.contentBackground5:e.background4,"computed-scrollbar-thumb-alpha":c,"computed-scrollbar-track-alpha":d,"scrollbar-thumb-rgb":i,"scrollbar-track-rgb":s}},$e=(e,t,a)=>({selectedTab:"dark"===t?e.background3:e.background1,...Re(e,a)});new class{constructor(e){this.providerStorage=e,this.getVarsByScheme=e=>"dark"===e?this.darkPaletteVars:this.lightPaletteVars,this.setWorkspaceStorage=e=>{this.workspaceStorage=e},this.trySynchronizeWorkspaceStorage=()=>{if(this.workspaceStorage){const e=this.getScheme();if(this.workspaceStorage.setItem(W.SelectedColorScheme,e),this.darkPaletteVars&&this.lightPaletteVars)if("dark"===e||"light"===e)this.workspaceStorage.setItem(W.ThemePaletteSheet,`:root{${this.getVarsByScheme(e)}}`);else{const e=`@media (prefers-color-scheme: dark){:root {${this.getVarsByScheme("dark")}}}`,t=`@media (prefers-color-scheme: light){:root{${this.getVarsByScheme("light")}}}`;this.workspaceStorage.setItem(W.ThemePaletteSheet,`${t}${e}`)}}},this.setPalettes=async({light:e,dark:t},a)=>{this.lightPaletteVars=Be({...e,...$e(e,"light",a)}),this.darkPaletteVars=Be({...t,...$e(t,"dark",a)})}}setScheme(e){this.providerStorage.setItem(W.SelectedColorScheme,e)}getScheme(){return null===this.providerStorage.getItem(W.SelectedColorScheme)&&this.providerStorage.setItem(W.SelectedColorScheme,_e),this.providerStorage.getItem(W.SelectedColorScheme)}}(n);const Le=e=>({getThemes:async()=>(await(0,ee.N)(e)).dispatch(ee.OF.GetThemes,void 0),setSelectedScheme:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.SetSelectedScheme,t),getSelectedScheme:async()=>(await(0,ee.N)(e)).dispatch(ee.OF.GetSelectedScheme,void 0)}),Ne=e=>{const t=fin.Platform.wrapSync(e);let a;const n=Object.assign(t,{applySnapshot:async(t,a)=>{if("string"!=typeof t&&!t?.windows)throw new Error("Not a valid browser snapshot");return fin.Platform.wrapSync(e).applySnapshot(t,a)},getSnapshot:()=>fin.Platform.wrapSync(e).getSnapshot().then((e=>e)),getViewSnapshot:t=>fin.Platform.wrapSync(e).getViewSnapshot(t),createView:(t,a,n)=>fin.Platform.wrapSync(e).createView(t,a,n),launchApp:async t=>{console.warn("launchApp method is deprecated. It is recommended to use createView - https://developers.openfin.co/of-docs/docs/platform-getting-started#add-a-view-to-an-existing-window or  createWindow - https://developers.openfin.co/of-docs/docs/platform-getting-started#create-a-platform-window instead."),t.target||(t.target={uuid:o.$h,name:o.vL,entityType:o.fT||"unknown"});return(await(0,ee.N)(e)).dispatch(ee.OF.LaunchApp,t)},_invokeCustomAction:async(t,a)=>{const n=await(0,ee.N)(e),o={actionId:t,payload:{...a,callerType:a.callerType||r.vc.API}};return n.dispatch(ee.OF.InvokeCustomActionInternal,o)},_requestQuitPlatformDialog:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.RequestQuitPlatformDialogInternal,t),_showUpdateVersionModal:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.ShowUpdateVersionModalInternal,t),getCurrentWorkspace:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.GetCurrentWorkspace,t),applyWorkspace:async(t,a)=>(await(0,ee.N)(e)).dispatch(ee.OF.ApplyWorkspace,{...t,options:a}),restoreLastSavedWorkspace:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.RestoreLastSavedWorkspaceInternal,t),setActiveWorkspace:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.SetActiveWorkspace,t),getLanguage:async()=>(await(0,ee.N)(e)).dispatch(ee.OF.GetLanguage),_getLanguageResources:async()=>(await(0,ee.N)(e)).dispatch(ee.OF.GetLanguageResourcesInternal),setLanguage:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.SetLanguage,t),_raiseAnalytics:async t=>{if(a||(a=await(0,ee.KZ)(e)),"object"==typeof a&&a?.analytics?.isSupported){return(await(0,ee.N)(e)).dispatch(ee.OF.Analytics,t)}e.uuid},getNotificationsConfig:async()=>(await(0,ee.N)(e)).dispatch(ee.OF.GetNotificationsConfig),_refreshBookmarksInternal:async()=>(await(0,ee.N)(e)).dispatch(ee.OF.RefreshBookmarksInternal),_launchBookmarkInternal:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.LaunchBookmarkInternal,t),_updateDockFavoritesInternal:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.UpdateDockFavoritesInternal,t),_updateContentMenuInternal:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.UpdateContentMenuInternal,t),_launchDockEntryInternal:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.LaunchDockEntryInternal,t),_setDockFavoritesInternal:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.SetDockFavoritesOrderInternal,t),_setDefaultDockButtonsOrderInternal:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.SetDefaultDockButtonsOrderInternal,t),_removeDockFavoriteInternal:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.RemoveDockFavoriteInternal,t),_addDockFavoriteInternal:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.AddDockFavoriteInternal,t),_navigateContentMenuInternal:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.NavigateContentMenuInternal,t),_openDockWorkspacesContextMenuInternal:async()=>(await(0,ee.N)(e)).dispatch(ee.OF.GetDockWorkspacesContextMenuInternal),_handleDockWorkspacesMenuResponseInternal:async t=>(await(0,ee.N)(e)).dispatch(ee.OF.HandleDockWorkspacesMenuResponseInternal,t),_focusAndExpandSearchInternal:async()=>(await(0,ee.N)(e)).dispatch(ee.OF.FocusAndExpandSearchInternal),_showAboutPagePopup:async e=>(async e=>{const t=new URLSearchParams({...e,title:"About"}),a=await k(fin.me.identity),n=e.copyrightMessage?320:286,r=(0,g.Xq)(a,{height:n,width:360});return Te({options:{frame:!0,smallWindow:!0,saveWindowState:!1,showTaskbarIcon:!0,includeInSnapshots:!1,workspacePlatform:{windowType:"enterprise"},resizable:!1,name:g.Q.AboutPageWindow,url:await f()+i.Ay.EnterpriseAboutPage,defaultWidth:360,defaultHeight:n,preventBlur:!0,...r},parameters:t})})(e),Theme:Le(e),Browser:ge(e),Storage:De(e)});return n},Ge=()=>Ne(fin.me.identity);const Ue=(e,t)=>e.content?{...e,content:e.content.map((e=>Ue(e,t)))}:{...e,componentState:t(e.componentState)},Ve=e=>({...e,name:void 0}),He=e=>{const t={...e};return Ue(t,Ve)},ze=e=>{const t=[];return(e&&Array.isArray(e)?e:[]).forEach((e=>{if("component"===e.type)return t.push(e.componentState);const a=ze(e.content);t.push(...a)})),t};new Map,new Map;const qe=async(e,t)=>{const a=(e=>{const t=fin.Platform.Layout.wrapSync(e);return{show:async()=>{const a=await t.getConfig(),{settings:n,dimensions:r}=a,o=await V(e);await t.replace({...a,settings:{...n,hasHeaders:!0,reorderEnabled:!0},dimensions:{...r,headerHeight:o?28:30}})},hide:async e=>{const a=await t.getConfig(),{settings:n,dimensions:r}=await a;await t.replace({...a,settings:{...n,hasHeaders:!1,reorderEnabled:e?.settings?.reorderEnabled??!1},dimensions:{...r,headerHeight:0}})},isShowingTabs:async()=>{try{const e=await t.getConfig(),{settings:a}=await e;return a.hasHeaders}catch(e){return console.error("failed to get layout config: ",e),!0}}}})({...g.$p,layoutName:e.layoutContainerKey}),n=await a.isShowingTabs();t>1?n||await a.show():1===t&&n&&await a.hide({settings:{reorderEnabled:!0}})},je=(j()((async e=>{try{if(!e||!e.layoutContainerKey)return;const t=await(async e=>fin.Platform.Layout.wrapSync({...fin.me.identity,layoutName:e}).getConfig())(e.layoutContainerKey),a=t.content?ze(t.content):[],n=a.length;n>1?(async e=>{if("multiView"!==e.attachedPageType){const t=await Ge().Browser.getUniquePageTitle();Ge().Browser.wrapSync(g.$p).updatePage({pageId:e.pageId,page:{title:e.title??t,singleViewName:null,attachedPageType:"multiView"}})}})(e):1===n&&(async(e,t)=>{const a=Ge().Browser.wrapSync(g.$p);if("singleView"!==e.attachedPageType){const n=await J(e);delete n.layout,delete n.pageId;const r=fin.View.wrapSync({uuid:g.$p.uuid,name:t}),o=await r.getInfo(),i={...n,title:null,singleViewName:t,hasUnsavedChanges:!1,attachedPageType:"singleView",pageIcon:o.favicons[0]};await a.updatePage({pageId:e.pageId,page:i})}})(e,a[0].name),await qe(e,n)}catch(e){}}),50,{leading:!1,trailing:!0}),__webpack_require__(/*! react-i18next */ "../../node_modules/react-i18next/dist/es/index.js"),__webpack_require__(/*! i18next */ "../../node_modules/i18next/dist/cjs/i18next.js"));a.n(je)().t;new class{constructor(){this.queue=[],this.locked=!1}lock(){return new Promise((e=>{this.locked?this.queue.push(e):(this.locked=!0,e())}))}unlock(){if(this.queue.length>0){const e=this.queue.shift();e&&e()}else this.locked=!1}};new Map;const Ke=m({alwaysOnTop:!0,autoShow:!1,frame:!1,resizable:!1,showTaskbarIcon:!1});!function(e=Ke){const t=new Map}();new Map;Date.now();j()((async()=>{const e=await fin.Platform.getCurrentSync().Application.getChildWindows();let t,a=!1;for(const n of e)if(n.identity.name===g.Q.BrowserMenu||n.identity.name===g.Q.BrowserSaveMenu?t=n:await(0,g.hb)(n.identity)&&(a=!0),a)break;!a&&t&&t.close()}),100,{leading:!1,trailing:!0});var Xe,Qe;!function(e){e.Save="Save",e.SaveAs="SaveAs"}(Xe||(Xe={})),function(e){e.GlobalMenu="global-menu",e.ContextMenu="context-menu",e.RenameSupertab="rename-supertab",e.AddEditBookmark="add-edit-bookmark",e.DropdownMenu="dropdown-menu",e.ZoomControls="zoom-controls"}(Qe||(Qe={}));const Ye="visited-sites",Ze="removed-tab-stack",Je=(o.AT&&o.cI&&O("openfin-home-pages","pages"),o.AT&&o.cI&&new P.Dexie(T("openfin-enterprise-site-history")));Je&&Je.version(.1).stores({[Ye]:"id, url"});const et=o.AT&&o.cI&&new P.Dexie(T("openfin-enterprise-tab-history"));et&&et.version(.1).stores({[Ze]:""});var tt;!function(e){e.Label="normal",e.Separator="separator",e.Submenu="submenu",e.Checkbox="checkbox"}(tt||(tt={}));tt.Separator;a(995);new Map([["blue",{name:"Blue",color:"#0091EB"}],["indigo",{name:"Indigo",color:"#6450FF"}],["pink",{name:"Pink",color:"#E878CF"}],["teal",{name:"Teal",color:"#24D1D1"}],["green",{name:"Green",color:"#00AF78"}],["orange",{name:"Orange",color:"#FF7D37"}],["red",{name:"Red",color:"#F94144"}],["yellow",{name:"Yellow",color:"#F9C74F"}],["gray",{name:"Gray",color:"#828788"}]]);var at;!function(e){e[e.TopLeft=0]="TopLeft",e[e.TopRight=1]="TopRight",e[e.BottomLeft=2]="BottomLeft",e[e.BottomRight=3]="BottomRight",e[e.Center=4]="Center"}(at||(at={}));(0,ae.A)(`${"undefined"!=typeof fin&&fin?.me.identity.uuid}-enterprise-dock`);const nt="dock-provider-configs",rt=o.AT&&o.cI&&new P.Dexie(T("dock-provider-configs"));rt&&rt.version(.1).stores({[nt]:""});const ot="workspaces";o.AT&&o.cI&&O("openfin-workspace-platform-workspaces",ot);a(250);a(179)},675:(e,t,a)=>{"use strict";a.d(t,{qT:()=>o,vc:()=>h});var n,r,o,i,s,c,d,l,u,p,h;a(179),a(250);!function(e){e.UrlChange="URL_CHANGE",e.ViewAdded="VIEW_ADDED",e.ViewRemoved="VIEW_REMOVED",e.PageContextAdded="PAGE_CONTEXT_ADDED",e.PageContextRemoved="PAGE_CONTEXT_REMOVED"}(n||(n={})),function(e){e.NewWindow="NewWindow",e.NewPage="NewPage",e.SavePage="SavePage",e.SavePageAs="SavePageAs",e.Print="Print",e.PrintAll="PrintAll",e.PrintScreen="PrintScreen",e.CloseWindow="CloseWindow",e.RestoreChanges="RestoreChanges",e.SaveWorkspace="SaveWorkspace",e.SaveWorkspaceAs="SaveWorkspaceAs",e.RenameWorkspace="RenameWorkspace",e.SwitchWorkspace="SwitchWorkspace",e.DeleteWorkspace="DeleteWorkspace",e.Downloads="Downloads",e.OpenStorefront="OpenStorefront",e.ManageDesktopSignals="ManageDesktopSignals",e.Appearance="Appearance",e.Quit="Quit",e.Custom="Custom"}(r||(r={})),function(e){e.Light="light",e.Dark="dark",e.System="system"}(o||(o={})),function(e){e.Close="Close",e.Duplicate="Duplicate",e.Rename="Rename",e.Save="Save",e.SaveAs="Save As",e.NewPage="New Page",e.DeletePage="Delete Page",e.SaveWorkspaceAs="SaveWorkspaceAs",e.Refresh="Refresh",e.CloseOthers="Close others",e.Delete="Delete",e.Print="Print",e.PrintAll="PrintAll",e.PrintScreen="PrintScreen",e.ManageDesktopSignals="ManageDesktopSignals",e.AddToChannel="AddToChannel",e.Custom="Custom"}(i||(i={})),function(e){e.Lock="Lock",e.ShowHideTabs="ShowHideTabs",e.AddToChanel="AddToChannel",e.ManageDesktopSignals="ManageDesktopSignals",e.Print="Print",e.Pin="Pin"}(s||(s={})),function(e){e.EditName="Edit Name",e.Move="Move",e.Delete="Delete"}(c||(c={})),function(e){e.NewView="NewView",e.DuplicateViews="DuplicateView",e.OpenWithDefaultBrowser="OpenWithDefaultBrowser",e.ReloadViews="ReloadTab",e.CloseViews="CloseTab",e.AddToChannel="AddToChannel",e.RemoveFromChannel="RemoveFromChannel",e.Back="Back",e.Forward="Forward",e.Print="Print",e.PrintAll="PrintAll",e.PrintScreen="PrintScreen",e.Custom="Custom"}(d||(d={})),function(e){e.ShowHideTabs="ShowHideTabs",e.ColorLinking="ColorLinking",e.PresetLayouts="PresetLayouts",e.LockUnlockPage="LockUnlockPage",e.SaveMenu="SaveMenu",e.SavePage="SavePage",e.Minimise="Minimise",e.Maximise="Maximise",e.Close="Close",e.Custom="Custom"}(l||(l={})),function(e){e.SavePage="SavePage",e.SaveWorkspace="SaveWorkspace",e.SavePageAs="SavePageAs",e.SaveWorkspaceAs="SaveWorkspaceAs",e.Custom="Custom"}(u||(u={})),function(e){e.Browser="browser",e.Platform="platform"}(p||(p={})),function(e){e.CustomButton="CustomButton",e.StoreCustomButton="StoreCustomButton",e.CustomDropdownItem="CustomDropdownItem",e.GlobalContextMenu="GlobalContextMenu",e.ViewTabContextMenu="ViewTabContextMenu",e.PageTabContextMenu="PageTabContextMenu",e.SaveButtonContextMenu="SaveButtonContextMenu",e.API="API"}(h||(h={}));var f;!function(e){e.SAVE_PAGE="SAVE_PAGE",e.SAVE_WORKSPACE="SAVE_WORKSPACE",e.SAVE_PAGE_AS="SAVE_PAGE_AS",e.SAVE_WORKSPACE_AS="SAVE_WORKSPACE_AS",e.RENAME_PAGE="RENAME_PAGE",e.RENAME_WORKSPACE="RENAME_WORKSPACE"}(f||(f={}))},248:(e,t,a)=>{"use strict";a.d(t,{H:()=>o});var n=a(438),r=a(786);const o=(e,t)=>{r.A.markStart(`${e}-registration`),(0,n.BY)().once("started",(()=>r.A.markAndMeasure("workspace-app-started",`${e}-registration`)));const a=fin.Window.wrapSync(t);a.once("initialized",(()=>r.A.markAndMeasure(`${e}-window-initialized`,`${e}-registration`))),a.once("shown",(()=>{r.A.markAndMeasure(`${e}-show`,`${e}-registration`)}))}},834:(e,t,a)=>{"use strict";a.r(t),a.d(t,{CLIAction:()=>x.PK,CLIFilterOptionType:()=>x.oo,CLITemplate:()=>x.fC,deregister:()=>F,hide:()=>T,register:()=>I,show:()=>W});var n=a(723),r=a(786),o=a(277),i=a(70);const s="0",c="2",d="3",l="5",u="6";var p=a(695),h=a(79),f=a(870);var g=a(905);const m=()=>{};function w(e){const t={};let a=[];let n=[];let r=null;let o=g.Zo.Initial;t.getStatus=()=>o,t.getResultBuffer=()=>a,t.setResultBuffer=e=>{a=e,a?.length&&t.onChange()},t.getRevokedBuffer=()=>n,t.setRevokedBuffer=e=>{n=e,n?.length&&t.onChange()},t.setUpdatedContext=e=>{r=e,null!==r&&t.onChange()},t.getUpdatedContext=()=>r,t.onChange=m;const i={};return t.res=i,i.close=()=>{o!==g.Zo.Close&&(o=g.Zo.Close,t.onChange())},i.open=()=>{o!==g.Zo.Open&&(o=g.Zo.Open,t.onChange())},i.respond=a=>{const n=function(e=[],t=[],a="ascending"){const n=[],r=new Map;t.forEach((e=>{if(e.key)return r.set(e.key,e);n.push(e)}));let o=e.map((e=>{if(e.key){const t=r.get(e.key);if(t)return r.delete(e.key),t}return e}));return o.push(...r.values(),...n),o="ascending"===a?o.sort(((e,t)=>(e?.score??1/0)-(t?.score??1/0))):o.sort(((e,t)=>(t?.score??1/0)-(e?.score??1/0))),o}(t.getResultBuffer(),a,e);t.setResultBuffer(n)},i.revoke=(...e)=>{const a=new Set(e),n=t.getResultBuffer().filter((({key:e})=>{const t=a.has(e);return t&&a.delete(e),!t}));t.setResultBuffer(n),a.size&&(t.getRevokedBuffer().forEach((e=>a.add(e))),t.setRevokedBuffer([...a]))},i.updateContext=e=>{t.setUpdatedContext(e)},t}const y=new Map;async function k(e){const{id:t,providerId:a}=e,n=P.getProviderOrFail(a);let r=y.get(t);r||(r=function(e,t){const a=new Set;let n=!1;return{close:()=>{n=!0;for(const e of a)e()},req:{id:e,...t,context:t?.context||{},onClose:e=>{a.add(e),n&&e()},removeListener:e=>{a.delete(e)}}}}(t,e),y.set(t,r));const o=w(),i=()=>{const e=o.getResultBuffer();o.setResultBuffer([]);const n=o.getRevokedBuffer();o.setRevokedBuffer([]);const r=o.getUpdatedContext();o.setUpdatedContext(null);const i=o.getStatus();!async function(e){(await(0,p.gj)()).dispatch(s,e)}({id:t,providerId:a,results:e,revoked:n,status:i,context:r})};let c=!0,d=!1;o.onChange=()=>{if(c)return c=!1,void i();d||(d=!0,setTimeout((()=>{d=!1,i()}),100))};try{const{results:e,context:i}=await n.onUserInput(r.req,o.res),s=o.getStatus();return{id:t,providerId:a,status:s,results:e,context:i}}catch(e){return console.error(`OpenFin/Workspace/Home. Uncaught exception in search provider ${a} for search ${t}`,"This is likely a bug in the implementation of the search provider.",e),{id:t,providerId:a,error:e?.message}}}async function v(){for(const{req:e,close:t}of y.values())t(),y.delete(e.id)}async function b(e,t){const a=P.getProviderOrFail(e.providerId);return e.result.dispatcherIdentity=t,a.onResultDispatch?.(e.result)}function S(e){const t=y.get(e.id);t?.close(),y.delete(e.id)}const P=new f.xM("home"),C=async e=>{await(0,p.nA)();!("skipPlatformInitCheck"in e&&!0===e.skipPlatformInitCheck)&&await(0,h.KZ)(fin.me.identity);P.assertNotAlreadyRegistered(e.id),P.setProvider(e);const t=await(0,p.gj)();return function(e){e.homeChannelActionsRegistered||(e.homeChannelActionsRegistered=!0,e.register(s,k),e.register(u,S),e.register(l,b),e.addDisconnectionListener(v))}(t),t.dispatch(c,{id:e.id,title:e.title,icon:e.icon,clientAPIVersion:n.et,identity:fin.me.identity,scoreOrder:e.scoreOrder,commandCode:e.commandCode,description:e.description,hidden:e.hidden,listTitle:e.listTitle,inputPlaceholder:e.inputPlaceholder,inputLandingPlaceholder:e.inputLandingPlaceholder,logoUrl:e.logoUrl,dispatchFocusEvents:e.dispatchFocusEvents})};var A=a(248),x=a(872);let M;const I=async e=>{if(!e.icon)throw new Error(`${e.id} provider needs to have icon property defined.`);(0,A.H)("home",i.F2);const t=await C(e);return M=new Promise(((a,i)=>{try{(0,o.GR)({allowed:!0,componentVersion:t?.workspaceVersion}),n.et,a({...t,clientAPIVersion:n.et,setSearchQuery:async t=>(await(0,p.N7)()).dispatch("set-search-query",{query:t,providerID:e.id})})}catch(e){(0,o.GR)({allowed:!1,rejectionCode:e instanceof Error?e.message:"unknown"}),i(e)}finally{r.A.markEndAndMeasure("home-registration")}})),M},F=async e=>{P.deleteProvider(e);const t=await(0,p.gj)();await t.dispatch(d,e)};async function W(){r.A.markStart("home-show"),await M;const e=await(0,p.N7)();await e.dispatch("show-home",void 0)}async function T(){await M;const e=await(0,p.N7)();await e.dispatch("hide-home",void 0)}},870:(e,t,a)=>{"use strict";a.d(t,{xM:()=>s});var n=a(995);class r extends Error{constructor(e,t){const a=(0,n.titleCase)(e);super(`${a} Provider. ${a} Provider${t?` with id ${t}`:""} is not currently registered.`)}}class o extends Error{constructor(e,t){const a=(0,n.titleCase)(e);super(`${a} Provider. ${a} Provider${t?` with id ${t}`:""} is already registered. Call \`deregister\` before registering again.`)}}class i extends Error{constructor(e,t){const a=(0,n.titleCase)(e);super(`Failed to get ${a} Provider. ${a} Provider with id ${t} is not currently registered.`)}}class s{constructor(e){this.providersMap=new Map,this.providerType=e}assertNotAlreadyRegistered(e){if(this.hasProvider(e))throw new o(this.providerType,e)}assertRegistered(e){if(!this.hasProvider(e))throw new r(this.providerType,e)}getProvider(e){return this.providersMap.get(e)}hasProvider(e){return this.providersMap.has(e)}setProvider(e){this.providersMap.set(e.id,e)}deleteProvider(e){this.providersMap.delete(e)}getProviderOrFail(e){const t=this.getProvider(e);if(!t)throw new i(this.providerType,e);return t}clearProviders(){this.providersMap.clear()}}},129:(e,t,a)=>{"use strict";var n,r,o;a.d(t,{P:()=>r,R:()=>o}),function(e){e.Fetching="fetching",e.Fetched="fetched",e.Complete="complete"}(n||(n={})),function(e){e.UserAction="user-action",e.FocusChange="focus-change",e.Reload="reload"}(r||(r={})),function(e){e.Active="active",e.Default="default"}(o||(o={}))},600:(e,t,a)=>{"use strict";var n;a.d(t,{a:()=>n}),function(e){e.ActionButton="ActionButton",e.DropdownButton="DropdownButton"}(n||(n={}))},872:(e,t,a)=>{"use strict";var n,r,o;a.d(t,{PK:()=>n,fC:()=>r,oo:()=>o}),function(e){e.Suggestion="suggestion"}(n||(n={})),function(e){e.Contact="Contact",e.Custom="Custom",e.List="List",e.Plain="Plain",e.SimpleText="SimpleText",e.Loading="Loading",e.Error="Error"}(r||(r={})),function(e){e.MultiSelect="MultiSelect"}(o||(o={}))},179:(e,t,a)=>{"use strict";a(129),a(872),a(710),a(184),a(600)},710:(e,t,a)=>{"use strict";var n,r;a.d(t,{v:()=>n,z:()=>r}),function(e){e.Snapshot="snapshot",e.Manifest="manifest",e.View="view",e.External="external"}(n||(n={})),function(e){e.LandingPage="landingPage",e.AppGrid="appGrid"}(r||(r={}))},184:(e,t,a)=>{"use strict";a.d(t,{SM:()=>o,ce:()=>n,in:()=>i,np:()=>r});const n={Container:"Container",Button:"Button",SplitButton:"SplitButton"},r={Text:"Text",Image:"Image",List:"List"},o={...n,...r};var i;!function(e){e.Primary="primary",e.Secondary="secondary",e.TextOnly="textOnly"}(i||(i={}))},598:(e,t,a)=>{"use strict";a.r(t),a.d(t,{AppManifestType:()=>o.v,StorefrontTemplate:()=>o.z,deregister:()=>y,hide:()=>k,register:()=>w,show:()=>v});var n=a(277),r=a(695),o=a(710),i=a(723),s=a(786),c=a(70),d=a(79),l=a(870);let u=!1;async function p(e,t,a){const n=await(0,r.p4)();try{return await n.dispatch(e.action,e.payload)}catch(r){if(r instanceof Error&&-1!==r.toString().indexOf(e.action))return u||console.warn("You are using a newer version of the Workspace client library that is not supported by the currently running workspace provider. Please upgrade the Workspace to version 9.0 or later."),u=!0,await n.dispatch(t.action,t.payload),a;throw r}}const h=new l.xM("storefront"),f=async e=>{await(0,d.KZ)(fin.me.identity);const t=await(0,r.N7)();return h.assertNotAlreadyRegistered(e.id),h.setProvider(e),(e=>{e.storefrontChannelActionsRegistered||(e.storefrontChannelActionsRegistered=!0,e.register("get-storefront-provider-apps",(e=>h.getProviderOrFail(e).getApps())),e.register("get-storefront-provider-footer",(e=>h.getProviderOrFail(e).getFooter())),e.register("get-storefront-provider-landing-page",(e=>h.getProviderOrFail(e).getLandingPage())),e.register("get-storefront-provider-navigation",(e=>h.getProviderOrFail(e).getNavigation())),e.register("launch-storefront-provider-app",(({id:e,app:t})=>h.getProviderOrFail(e).launchApp(t))))})(t),e.clientAPIVersion=i.et,p({action:"register-provider",payload:{providerType:"storefront",info:e}},{action:"register-storefront-provider",payload:e},{workspaceVersion:"unknown"})};var g=a(248);let m;const w=async e=>{(0,g.H)("store",c.gQ);const t=await f(e);return m=new Promise(((a,o)=>{try{(0,n.xt)({allowed:!0,componentVersion:t?.workspaceVersion}),i.et,a({clientAPIVersion:i.et,workspaceVersion:t?.workspaceVersion??"",updateAppCardButtons:async t=>{const a=await(0,r.mQ)();await a.dispatch("update-app-card-button-config",{...t,id:e.id,title:e.title,icon:e.icon,platformIdentity:fin.me.identity})}})}catch(e){(0,n.xt)({allowed:!1,rejectionCode:e instanceof Error?e.message:"unknown"}),o(e)}finally{s.A.markEndAndMeasure("store-registration")}})),m},y=async e=>(await m,h.assertRegistered(e),h.deleteProvider(e),await(0,r.nA)(),p({action:"deregister-provider",payload:{providerType:"storefront",id:e}},{action:"deregister-storefront-provider",payload:e})),k=async()=>(await m,await(0,r.nA)(),p({action:"hide-provider-window",payload:{providerType:"storefront"}},{action:"hide-storefront"})),v=async()=>(s.A.markStart("store-show"),await m,await(0,r.nA)(),p({action:"show-provider-window",payload:{providerType:"storefront"}},{action:"show-storefront"}))},250:(e,t,a)=>{"use strict";var n;!function(e){e.Left="Left",e.Right="Right",e.Top="Top",e.Bottom="Bottom"}(n||(n={}))},79:(e,t,a)=>{"use strict";var n;a.d(t,{KZ:()=>o,N:()=>i,OF:()=>n,bW:()=>s}),function(e){e.LaunchApp="launchApp",e.SavePage="savePage",e.GetSavedPage="getSavedPage",e.CreateSavedPage="createSavedPage",e.UpdateSavedPage="updateSavedPage",e.DeleteSavedPage="deleteSavedPage",e.GetSavedPages="getSavedPages",e.CreateSavedPageInternal="createSavedPageInternal",e.UpdateSavedPageInternal="updateSavedPageInternal",e.DeleteSavedPageInternal="deleteSavedPageInternal",e.UpdatePageForWindow="updatePageForWindow",e.AttachPagesToWindow="attachPagesToWindow",e.DetachPagesFromWindow="detachPagesFromWindow",e.ReorderPagesForWindow="reorderPagesForWindow",e.SetActivePage="setActivePage",e.AddPage="addPage",e.AddDefaultPage="addDefaultPage",e.GetAllAttachedPages="getAllAttachedPages",e.GetActivePageIdForWindow="getActivePageIdForWindow",e.GetPagesForWindow="getPagesForWindow",e.GetPageForWindow="getPageForWindow",e.GetSavedPageMetadata="getSavedPageMetadata",e.GetUniquePageTitle="getUniquePageTitle",e.GetLastFocusedBrowserWindow="getLastFocusedBrowserWindow",e.GetPageByViewIdentity="getPageByViewIdentity",e.GetThemes="getThemes",e.GetSelectedScheme="getSelectedScheme",e.SetSelectedScheme="setSelectedScheme",e.OpenGlobalContextMenuInternal="openGlobalContextMenuInternal",e.OpenViewTabContextMenuInternal="openViewTabContextMenuInternal",e.OpenPageTabContextMenuInternal="openPageTabContextMenuInternal",e.OpenSaveButtonContextMenuInternal="openSaveButtonContextMenuInternal",e.InvokeCustomActionInternal="invokeCustomActionInternal",e.RequestQuitPlatformDialogInternal="requestQuitPlatformDialogInternal",e.GetSavedWorkspace="getSavedWorkspace",e.CreateSavedWorkspace="createSavedWorkspace",e.UpdateSavedWorkspace="updateSavedWorkspace",e.DeleteSavedWorkspace="deleteSavedWorkspace",e.GetSavedWorkspaces="getSavedWorkspaces",e.GetSavedWorkspacesMetadata="getSavedWorkspacesMetadata",e.SaveWorkspace="saveWorkspace",e.GetCurrentWorkspace="getCurrentWorkspace",e.ApplyWorkspace="applyWorkspace",e.RestoreLastSavedWorkspaceInternal="restoreLastSavedWorkspaceInternal",e.SetActiveWorkspace="setActiveWorkspace",e.IsBrowserInitialized="isBrowserInitialized",e.Analytics="analyticsInternal",e.GetLanguage="getLanguage",e.GetLanguageResourcesInternal="getLanguageResourcesInternal",e.SetLanguage="setLanguage",e.GetDockProviderConfig="getDockProviderConfig",e.SaveDockProviderConfig="saveDockProviderConfig",e.HandleSaveModalOnPageClose="handleSaveModalOnPageClose",e.ShouldPageClose="shouldPageClose",e.ShouldWindowClose="shouldWindowClose",e.CopyPage="copyPage",e.HandlePageChanges="handlePageChanges",e.MarkUnsavedPagesAsSavedInternal="markUnsavedPagesAsSavedInternal",e.TrackRemovedTabInternal="trackRemovedTabInternal",e.RestoreRemovedTabInternal="restoreRemovedTabInternal",e.TrackVisitedSiteInternal="trackVisitedSiteInternal",e.GetRecentlyVisitedSitesInternal="getRecentlyVisitedSitesInternal",e.GetFrequentlyVisitedSitesInternal="getFrequentlyVisitedSitesInternal",e.SearchSitesInternal="searchSitesInternal",e.GetSearchProvidersInternal="getSearchProvidersInternal",e.GetCuratedContentInternal="getCuratedContentInternal",e.HandleRequestNavigationInternal="handleRequestNavigationInternal",e.RefreshBookmarksInternal="refreshBookmarksInternal",e.LaunchBookmarkInternal="launchBookmarkInternal",e.GetNotificationsConfig="getNotificationsConfig",e.UpdateDockFavoritesInternal="updateDockFavoritesInternal",e.UpdateContentMenuInternal="updateContentMenuInternal",e.LaunchDockEntryInternal="launchDockEntryInternal",e.SetDockFavoritesOrderInternal="setDockFavoritesOrderInternal",e.NavigateContentMenuInternal="navigateContentMenuInternal",e.SetDefaultDockButtonsOrderInternal="setDefaultDockButtonsOrderInternal",e.GetDockWorkspacesContextMenuInternal="getDockWorkspacesContextMenuInternal",e.HandleDockWorkspacesMenuResponseInternal="handleDockWorkspacesMenuResponseInternal",e.RemoveDockFavoriteInternal="removeDockFavoriteInternal",e.AddDockFavoriteInternal="addDockFavoriteInternal",e.FocusAndExpandSearchInternal="focusAndExpandSearchInternal",e.SendUpdateVersionModalResponseInternal="sendUpdateVersionModalResponseInternal",e.ShowUpdateVersionModalInternal="showUpdateVersionModalInternal"}(n||(n={}));const r=async e=>fin.Platform.wrapSync(e).getClient(),o=async e=>{const t=await r(e),a="Target is not a Workspace Platform. Target must call WorkspacePlatform.init";let n;try{n=await t.dispatch("isWorkspacePlatform")}catch(e){throw new Error(a)}if("boolean"==typeof n&&n)return console.warn("You are using an older version of the workspace platform. Please update your workspace platform."),n;if("object"==typeof n&&n.isWorkspacePlatform)return n;throw new Error(a)},i=async e=>(await o(e),r(e)),s=async e=>{const t=await o(e);if("object"==typeof t&&!0!==t?.isBrowserInitialized)throw new Error("Target is not a Browser-enabled Workspace Platform.");return r(e)}},695:(e,t,a)=>{"use strict";a.d(t,{N7:()=>f,gj:()=>l,mQ:()=>h,nA:()=>p,p4:()=>c});var n=a(102),r=a(723),o=a(70),i=a(905);const s=(0,n.A)("__of_workspace_protocol__"),c=s,d=s,l=(0,n.A)(i.BT),u=e=>{const t=new URL(e);return t.searchParams.append("isLaunchedViaLib","true"),t.toString()},p=async()=>{if(!await(0,o.C)(o.xt)){if(r.jw||-1===navigator.userAgent.indexOf("Win"))return void await fin.Application.startFromManifest(u(r.m7));await fin.System.openUrlWithBrowser(u(r.t8))}},h=async()=>(await p(),c()),f=async()=>(await p(),d())},905:(e,t,a)=>{"use strict";a.d(t,{BT:()=>n,Zo:()=>o});const n="__search-openfin-browser-home-topic__";var r,o;!function(e){e.Fetching="fetching",e.Fetched="fetched",e.Complete="complete"}(r||(r={})),function(e){e[e.Initial=0]="Initial",e[e.Open=1]="Open",e[e.Close=2]="Close"}(o||(o={}))},957:(e,t,a)=>{"use strict";a.d(t,{qq:()=>S,l5:()=>P});var n=a(847),r=a(898),o=a(70),i=a(861),s=a(675),c=a(877),d=a.n(c),l=a(67),u=a.n(l);const p={light:{symbol:u()?.src||""},dark:{symbol:d()?.src||""}};a(695);var h=a(79);const f="dark",g={[n.Palette.brandPrimary]:"#0A76D3",[n.Palette.brandPrimaryActive]:"#0A71C9",[n.Palette.brandPrimaryHover]:"#0B84EB",[n.Palette.brandPrimaryFocused]:n.Color.white,[n.Palette.brandPrimaryText]:n.Color.white,[n.Palette.statusSuccess]:n.Color.functional1,[n.Palette.statusWarning]:n.Color.functional10,[n.Palette.statusCritical]:n.Color.functional7,[n.Palette.statusActive]:n.Color.functional3,[n.Palette.contentBackground1]:"#0A76D3",[n.Palette.contentBackground2]:"#000000",[n.Palette.contentBackground3]:"#000000",[n.Palette.contentBackground4]:"#000000",[n.Palette.contentBackground5]:"#000000",[n.Palette.borderNeutral]:n.Color.silverGray},m={...g,[n.Palette.background1]:n.Color.white,[n.Palette.background2]:n.Color.lightGray1,[n.Palette.background3]:n.Color.lightGray2,[n.Palette.background4]:n.Color.lightGray3,[n.Palette.background5]:n.Color.lightGray4,[n.Palette.background6]:n.Color.lightGray5,[n.Palette.brandSecondary]:n.Color.lightGray4,[n.Palette.brandSecondaryActive]:n.Color.lightGray4Active,[n.Palette.brandSecondaryHover]:n.Color.lightGray4Hover,[n.Palette.brandSecondaryFocused]:n.Color.darkGray5,[n.Palette.brandSecondaryText]:n.Color.darkGray5,[n.Palette.inputBackground]:n.Color.lightGray3,[n.Palette.inputColor]:n.Color.darkGray5,[n.Palette.inputPlaceholder]:n.Color.darkGray2,[n.Palette.inputDisabled]:n.Color.neutralGray,[n.Palette.inputFocused]:n.Color.lightGray5,[n.Palette.inputBorder]:n.Color.neutralGray,[n.Palette.textDefault]:n.Color.darkGray5,[n.Palette.textHelp]:n.Color.darkGray3,[n.Palette.textInactive]:n.Color.neutralGray},w={...g,[n.Palette.background1]:n.Color.darkGray6,[n.Palette.background2]:n.Color.darkGray5,[n.Palette.background3]:n.Color.darkGray4,[n.Palette.background4]:n.Color.darkGray3,[n.Palette.background5]:n.Color.darkGray2,[n.Palette.background6]:n.Color.darkGray1,[n.Palette.brandSecondary]:n.Color.darkGray2,[n.Palette.brandSecondaryActive]:n.Color.darkGray2Active,[n.Palette.brandSecondaryHover]:n.Color.darkGray2Hover,[n.Palette.brandSecondaryFocused]:n.Color.white,[n.Palette.brandSecondaryText]:n.Color.white,[n.Palette.inputBackground]:n.Color.darkGray1,[n.Palette.inputColor]:n.Color.white,[n.Palette.inputPlaceholder]:n.Color.lightGray5,[n.Palette.inputDisabled]:n.Color.neutralGray,[n.Palette.inputFocused]:n.Color.lightGray5,[n.Palette.inputBorder]:n.Color.neutralGray,[n.Palette.textDefault]:n.Color.white,[n.Palette.textHelp]:n.Color.lightGray5,[n.Palette.textInactive]:n.Color.neutralGray},y=[{label:"OpenFin Default Light and Dark Theme",palettes:{light:{...m,backgroundPrimary:n.Color.darkGray5},dark:{...w,backgroundPrimary:n.Color.darkGray5}}}],k=e=>{const{background:t,foreground:a}=e;return{background:t,foreground:a??"#FFFFFF"}},v=(e,t)=>({icons:{symbol:e.brand?.icons?.[t]?.symbol||p[t].symbol}}),b=e=>{const{light:t,dark:a}="palettes"in e?e.palettes:{light:e.palette,dark:e.palette},o=(0,r.KD)(w,a),i=(0,r.KD)(m,t),s=((e,t)=>{const a={...e},n={...t};let o=t.backgroundPrimary?(0,r.pu)(t.backgroundPrimary,!0):{},i=e.backgroundPrimary?(0,r.pu)(e.backgroundPrimary):{};return o={...o,...n},i={...i,...a},{light:{...t,...o},dark:{...e,...i}}})(a,t),c={...(0,n.createTheme)({...o,...s?.dark}),brand:v(e,"dark")},d={...(0,n.createTheme)({...i,...s?.light}),brand:v(e,"light")},{light:l,dark:u}=(e=>{const t=Object.keys(e.notificationIndicatorColors??{});if(t?.length){const a={},n={};return t.forEach((t=>{const r=e.notificationIndicatorColors[t];"background"in r?(a[t]=k(r),n[t]=k(r)):(a[t]=k(r.dark??r.light),n[t]=k(r.light??r.dark))})),{light:n,dark:a}}return{light:null,dark:null}})(e);return c.notificationIndicatorColors=u,d.notificationIndicatorColors=l,{dark:c,light:d}},S=async e=>{const{themes:t,selectedScheme:a}=await(async e=>{const t=fin?.__internal_?.initialOptions?.workspacePlatform?._themeData;if(!t||e.uuid!==o.$p.uuid)return{themes:await(0,i.Ag)(e).Theme.getThemes(),selectedScheme:await(0,i.Ag)(e).Theme.getSelectedScheme()};return t})(e);var n,r;return(n=t?.length?t:y,r=a,n.map((e=>{const t="palettes"in e?e.default:f,{light:a,dark:n}=b(e);return{label:e.label,logoUrl:e.logoUrl,theme:{dark:n,light:a},defaultScheme:r??t}})))[0]},P=async e=>{const t=await(0,h.N)(e||fin.me.identity),a=await t.dispatch(h.OF.GetSelectedScheme,void 0);return a===s.qT.System?window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light":a}},438:(e,t,a)=>{"use strict";a.d(t,{BY:()=>l,MW:()=>n,v1:()=>d});var n,r,o=a(723);!function(e){e.Workspace="openfin-workspace",e.OldWorkspace="openfin-browser"}(n||(n={})),function(e){e.FinProtocol="fin-protocol"}(r||(r={}));const i={uuid:o.$h},s={uuid:n.Workspace},c=e=>{if(!o.cI)throw new Error("getApplication cannot be used in a non OpenFin env. Avoid using this during pre-rendering.");return fin.Application.wrapSync(e)},d=()=>c(i),l=()=>c(s)},102:(e,t,a)=>{"use strict";a.d(t,{A:()=>o});var n=a(723);const r=n.YY&&"complete"!==document.readyState&&new Promise((e=>document.addEventListener("readystatechange",(()=>{"complete"===document.readyState&&e()}))));function o(e){let t;const a=new Set;return()=>{if(!n.cI)throw new Error("getChannelClient cannot be used outside an OpenFin env. Avoid using this method during pre-rendering.");return t||(t=(async()=>{await r;const o={clientAPIVersion:n.et},i=await fin.InterApplicationBus.Channel.connect(e,{payload:o});return i.onDisconnection((async()=>{a.forEach((e=>e())),a.clear(),console.warn(`disconnected from channel provider ${e}`),t=void 0})),i})().then((e=>(e.addDisconnectionListener=e=>{a.add(e)},e))).catch((a=>{throw t=void 0,new Error(`failed to connect to channel provider ${e}: ${a}`)}))),t}}},723:(e,t,a)=>{"use strict";var n;a.d(t,{$h:()=>c,AT:()=>i,Hd:()=>p,YY:()=>o,bD:()=>m,cI:()=>r,et:()=>w,fT:()=>l,jw:()=>u,m7:()=>f,t8:()=>h,vL:()=>d}),function(e){e.Local="local",e.Dev="dev",e.Staging="staging",e.Prod="prod"}(n||(n={}));const r="undefined"!=typeof window&&"undefined"!=typeof fin,o=("undefined"==typeof process||process.env,"undefined"!=typeof window),i=o&&"undefined"!=typeof indexedDB,s=o?window.origin:n.Local,c=r&&fin.me.uuid,d=r&&fin.me.name,l=r&&fin.me.entityType,u="prod"===n.Local,p=(n.Dev,n.Staging,"prod"===n.Prod),h="fins://system-apps/workspace",f="https://workspace.openfin.co/workspace/22.3.18/app.json",g=e=>e.startsWith("http://")||e.startsWith("https://")?e:s+e,m=(g("https://workspace.openfin.co/workspace/22.3.18"),g("https://workspace.openfin.co/workspace/22.3.18")),w=("undefined"!=typeof WORKSPACE_DOCS_PLATFORM_URL&&g(WORKSPACE_DOCS_PLATFORM_URL),"undefined"!=typeof WORKSPACE_DOCS_CLIENT_URL&&g(WORKSPACE_DOCS_CLIENT_URL),"22.3.18");"undefined"!=typeof WORKSPACE_BUILD_SHA&&WORKSPACE_BUILD_SHA},786:(e,t,a)=>{"use strict";a.d(t,{A:()=>r});const n="of-workspace-";const r=new class{mark(e){performance.mark(`${n}${e}`)}markStart(e){performance.mark(`${n}${e}-start`)}markEnd(e){performance.mark(`${n}${e}-end`)}markEndAndMeasure(e){performance.mark(`${n}${e}-end`);try{return performance.measure(`${n}${e}`,`${n}${e}-start`,`${n}${e}-end`)}catch(e){0}}markAndMeasure(e,t){performance.mark(`${n}${e}`);try{return performance.measure(`${n}${e}-measure`,`${n}${t}-start`,`${n}${e}`)}catch(e){0}}reportWorkspacePerformanceEntries(){return performance.getEntriesByType("measure").filter((e=>e.name.startsWith(n)))}reportWorkspacePerformance(){return this.reportWorkspacePerformanceEntries().map((e=>({name:e.name.replace(`${n}`,"").replace("-measure",""),duration:e.duration})))}}},181:(e,t,a)=>{"use strict";var n,r;a.d(t,{Ay:()=>d,sP:()=>s}),function(e){e.Home="/home/",e.HomeSearch="/home/?deeplink=search",e.HomePagesRename="/home/pages/rename/",e.Dock="/dock/",e.Docs="/provider/docs/",e.Storefront="/storefront/",e.DeprecatedAlert="/provider/deprecated-alert/",e.Analytics="/provider/analytics/",e.Provider="/provider/"}(n||(n={})),function(e){e.Browser="/browser/",e.BrowserPopupMenu="/popup-menu/",e.BrowserPopupMenuSaveModal="/popup-menu/save-modal/",e.BrowserPopupMenuLayouts="/popup-menu/layouts/layouts/",e.BrowserPopupMenuColorLinking="/popup-menu/color-linking/color-linking/",e.BrowserIndicator="/indicator/",e.BrowserPopupMenuAddressSearchResultsView="/popup-menu/address-search-results-view/",e.ResponseModal="/popup-menu/response-modal/",e.CloseConfirmationModal="/popup-menu/close-confirmation-modal/",e.EnterpriseBrowser="/enterprise/",e.EnterpriseLandingPage="/enterprise/landing/",e.EnterpriseContextMenu="/context-menu/",e.EnterpriseBookmarkDialog="/bookmark-dialog/",e.EnterpriseAboutPage="/popup-menu/about/",e.DropdownMenu="/dropdown-menu/",e.EnterpriseDock="/dock/",e.ZoomControlsDialog="/zoom-controls-dialog/",e.DesktopSignalsModal="/popup-menu/desktop-signals-modal/"}(r||(r={}));const o={...n,...r},i="/microsoft-365-integration-assets/",s={IconOpenFinLogo:"/icons/openfinlogo.svg",IconFilter:"/icons/filter.svg",LightStorefront:"/icons/store-icon-light.png",DarkStorefront:"/icons/store-icon-dark.png",CallIconLight:"/icons/call-icon-light.svg",CallIconDark:"/icons/call-icon-dark.svg",ChatIconLight:"/icons/chat-icon-light.svg",ChatIconDark:"/icons/chat-icon-dark.svg",MessageIconLight:"/icons/message-icon-light.svg",MessageIconDark:"/icons/message-icon-dark.svg",Microsoft365Assets:{Microsoft365DocumentIcon:`${i}microsoft-365-document-icon.svg`,Microsoft365ExcelIcon:`${i}microsoft-365-excel-icon.svg`,Microsoft365PowerpointIcon:`${i}microsoft-365-powerpoint-icon.svg`,Microsoft365OutlookIcon:`${i}microsoft-365-outlook-icon.svg`,Microsoft365TeamsIcon:`${i}microsoft-365-teams-icon.svg`,Microsoft365Icon:`${i}microsoft-365-icon.svg`,PDFFileIcon:`${i}pdf-file-icon.svg`},DockIconLight:"/icons/dock-icon-light.png",DockIconDark:"/icons/dock-icon-dark.png"};var c;!function(e){e.Search="search"}(c||(c={}));const d=o},523:(e,t,a)=>{"use strict";a.d(t,{OX:()=>i,Tt:()=>s});var n,r=a(723);!function(e){e.Home="/home",e.Browser="/browser",e.Enterprise="/enterprise",e.Provider="/provider",e.Storefront="/storefront",e.Dock="/dock"}(n||(n={}));const o="/workspace/22.3.18";function i(e){return o+e}function s(e,t){if(!r.YY)throw new Error("resolveAbsolutePath can only be used in a window");const a=t??window.location;if(/^(?:[a-z]+:)?\/\//i.test(e))return e;const n=`${a.protocol}//${a.hostname}`;return new URL(e,n).href}},898:(e,t,a)=>{"use strict";a.d(t,{KD:()=>c,b4:()=>i,pu:()=>s});const n=e=>e.replace(/[^\d,]/g,"").split(","),r=e=>{if(e.length<2)throw new Error("Invalid color object, cannot convert to HSL.");const t=e[0]/255,a=e[1]/255,n=e[2]/255,r=Math.min(t,a,n),o=Math.max(t,a,n),i=o-r;let s=0,c=0,d=0;return s=0===i?0:o===t?(a-n)/i%6:o===a?(n-t)/i+2:(t-a)/i+4,s=Math.round(60*s),s<0&&(s+=360),d=(o+r)/2,c=0==i?0:i/(1-Math.abs(2*d-1)),c=+(100*c).toFixed(1),d=+(100*d).toFixed(1),{hsl:`hsl(${s}, ${c}%, ${d}%)`,hsla:`hsl(${s}, ${c}%, ${d}%, 1)`,hue:s,lightness:d,saturation:c}},o=e=>{if(!e.includes("#"))throw new Error("Invalid hex value, cannot convert to RGB. Hex value begins with a hashtag.");let t=0,a=0,n=0;if(4===e.length)t=`0x${e[1]}${e[1]}`,a=`0x${e[2]}${e[2]}`,n=`0x${e[3]}${e[3]}`;else{if(7!==e.length)throw new Error("Invalid hex string length, cannot convert to RGB.");t=`0x${e[1]}${e[2]}`,a=`0x${e[3]}${e[4]}`,n=`0x${e[5]}${e[6]}`}return[+t,+a,+n]},i=e=>{const t=e;if(t.startsWith("#")){return{rgb:o(t).join(", "),alpha:1}}const a=t.match(/\d{1,3}(\.\d+)?/g);if(a){const[e,t,n,r]=a;return{rgb:`${e}, ${t}, ${n}`,alpha:void 0!==r?parseFloat(r):1}}return{rgb:o(e).join(", "),alpha:1}},s=(e,t=!1)=>{const a=(e=>{if(!e)throw new Error("Color is not defined");const t=e.toLowerCase();let a;if(t.includes("rgb")){const e=n(t);e.length>3&&e.pop(),a=r(e).hue}if(t.includes("#")){const e=o(t);a=r(e).hue}t.includes("hsl")&&(a=n(t)[0]);const i=a?.toString();if(!i)throw new Error(`Hue was unable to be extracted from "${t}", check color format. Accepted formats are: rgb(), rgba(), hex, hsl(), and hsla()`);return i})(e);return t?{background1:`hsla(${a}, 0%, 100%, 1)`,background2:`hsla(${a}, 67%, 99%, 1)`,background3:`hsla(${a}, 26%, 96%, 1)`,background4:`hsla(${a}, 15%, 94%, 1)`,background5:`hsla(${a}, 10%, 88%, 1)`,background6:`hsla(${a}, 80%, 80%, 1)`}:{background1:`hsla(${a}, 8%, 7%, 1)`,background2:`hsla(${a}, 8%, 13%, 1)`,background3:`hsla(${a}, 9%, 15%, 1)`,background4:`hsla(${a}, 6%, 23%, 1)`,background5:`hsla(${a}, 21%, 28%, 1)`,background6:`hsla(${a}, 5%, 51%, 1)`}},c=(e,t)=>{const a={};return Object.keys(e).forEach((n=>{a[n]=t[n]?t[n]:e[n]})),a}},277:(e,t,a)=>{"use strict";a.d(t,{GR:()=>s,ki:()=>d,xt:()=>c});var n,r=a(723),o=a(70);a(861);!function(e){e.Browser="Browser",e.Dock="Dock",e.EnterpriseDock="EnterpriseDock",e.Home="Home",e.Notification="Notification",e.Storefront="Storefront",e.Platform="Platform",e.Theming="Theming",e.Microflow="Microflow"}(n||(n={}));const i=async(e,t,a="workspace-licensing")=>{const n={apiVersion:t.apiVersion||r.et,componentName:e,componentVersion:t.componentVersion||r.et,allowed:t.allowed,rejectionCode:t.rejectionCode};fin.System.registerUsage({type:a,data:n})};const s=e=>{o.F2.uuid===o.$p.uuid&&o.F2.name===o.$p.name||i(n.Home,e)},c=e=>{i(n.Storefront,e)},d=e=>{i(n.Dock,e)};new Map},333:(e,t,a)=>{"use strict";function n(){return void 0!==typeof crypto&&"randomUUID"in crypto&&"function"==typeof crypto.randomUUID?crypto.randomUUID():"10000000-1000-4000-8000-100000000000".replace(/[018]/g,(e=>(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)))}a.d(t,{N:()=>n})},70:(e,t,a)=>{"use strict";a.d(t,{$p:()=>d,C:()=>m,F2:()=>l,Io:()=>g,Iq:()=>c,Q:()=>n,T7:()=>u,VE:()=>i,Xq:()=>s,gQ:()=>p,hb:()=>f,jz:()=>w,xt:()=>h});var n,r=a(438),o=a(723);!function(e){e.Home="openfin-home",e.Dock="openfin-dock",e.Storefront="openfin-storefront",e.HomeInternal="openfin-home-internal",e.BrowserMenu="openfin-browser-menu",e.BrowserSaveMenu="openfin-browser-save-menu",e.DockSaveWorkspaceMenu="openfin-dock3-save-workspace-menu",e.BrowserIndicator="openfin-browser-indicator",e.BrowserWindow="internal-generated-window",e.ClassicWindow="internal-generated-classic-window",e.EnterpriseContextMenu="openfin-enterprise-context-menu",e.BrowserAddressSearchPrefix="openfin-browser-menu-address-search-",e.EnterpriseBookmarkDialogWindow="openfin-enterprise-bookmark-dialog",e.DropdownMenu="openfin-enterprise-dropdown-menu",e.DockCompanion="openfin-dock-companion",e.AICompanionPrefix="openfin-ai-companion-",e.UpdateVersionModal="here-update-version-modal",e.ZoomControlsDialog="here-zoom-controls-dialog",e.AboutPageWindow="here-about-page",e.DesktopSignalsModal="here-desktop-signals-modal"}(n||(n={}));const i=e=>({left:(e.left+e.right)/2,top:(e.top+e.bottom)/2}),s=(e,t)=>{const a=t.width/2,n=t.height/2;return{left:Math.round(e.left-a),top:Math.round(e.top-n),width:t.width,height:t.height}};function c(e){if(!o.cI)throw new Error("getOFWindow can only be used in an OpenFin env. Avoid calling this method during pre-rendering.");return fin.Window.wrapSync(e)}const d={name:o.vL,uuid:o.$h};const l={name:n.Home,uuid:r.MW.Workspace},u={name:n.Dock,uuid:r.MW.Workspace},p={name:n.Storefront,uuid:r.MW.Workspace},h={name:r.MW.Workspace,uuid:r.MW.Workspace};const f=async e=>{try{const t=await fin.Window.wrapSync({name:e.name,uuid:e.uuid??fin.me.uuid}).getOptions();return("browser"===t.workspacePlatform?.windowType||"enterprise"===t.workspacePlatform?.windowType)&&t.workspacePlatform?.pages}catch(e){return console.warn("isBrowserWindow error: ",e),!1}};async function g(){const e=await fin.Application.getCurrentSync().getChildWindows(),t=await Promise.all(e.map((async e=>f(e.identity))));return e.filter(((e,a)=>t[a]))}const m=e=>c(e).getInfo().then((()=>!0)).catch((()=>!1));async function w(e){const t=await fin.System.getMonitorInfo();return[t.primaryMonitor,...t.nonPrimaryMonitors].reduce(((t,a)=>{const n=function(e,t){const a=e.top,n=e.left,r=e.top+e.height,o=e.left+e.width,i=t.monitorRect.top,s=t.monitorRect.left,c=t.monitorRect.bottom,d=t.monitorRect.right;if(a>c||r<i||n>d||o<s)return 0;const l=Math.max(a,i),u=Math.max(n,s);return(Math.min(r,c)-l)*(Math.min(o,d)-u)/(e.height*e.width)}(e,a);return n>t.percentage?{percentage:n,monitor:a}:t}),{percentage:0,monitor:t.primaryMonitor}).monitor}},995:e=>{"use strict";e.exports=__webpack_require__(/*! title-case */ "../../node_modules/title-case/dist.es2015/index.js")}},t={};function a(n){var r=t[n];if(void 0!==r)return r.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,a),o.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{"use strict";a.r(n),a.d(n,{ActionTrigger:()=>Be.P,AppManifestType:()=>$e.v,ButtonStyle:()=>Re.in,CLIAction:()=>N.PK,CLIFilterOptionType:()=>N.oo,CLITemplate:()=>N.fC,ContainerTemplateFragmentNames:()=>Re.ce,Dock:()=>e,DockButtonNames:()=>u.a,Home:()=>S,Integrations:()=>t,PresentationTemplateFragmentNames:()=>Re.np,SearchTagBackground:()=>Be.R,Storefront:()=>_e,StorefrontTemplate:()=>$e.z,TemplateFragmentTypes:()=>Re.SM});var e={};a.r(e),a.d(e,{DockButtonNames:()=>u.a,deregister:()=>m,minimize:()=>w,register:()=>g,show:()=>y});var t={};a.r(t),a.d(t,{Microsoft365WorkflowIntegration:()=>Ee});var r=a(723),o=a(786),i=a(277),s=a(70),c=a(695),d=a(79);var l=a(248),u=a(600);let p,h;const f=(e=[])=>{const t=e.filter((e=>!!e.id)).map((e=>e.id));if(new Set(t).size!==t.length)throw new Error("Dock provider buttons must have unique identifiers if specified.")},g=async e=>{(0,l.H)("dock",s.T7);const t=await(async e=>{await(0,d.KZ)(fin.me.identity);const t=await(0,c.N7)();if(h)throw new Error("Error using `Dock.register`. A Dock provider for this Workspace Platform is already registered. Call `Dock.deregister` before calling `Dock.register` again.");return h=e,e.clientAPIVersion=r.et,t.dispatch("register-provider",{providerType:"dock",info:e})})(e);return p=new Promise(((a,n)=>{try{(e=>{e.workspaceComponents&&!Array.isArray(e.workspaceComponents)&&console.warn("Using the `WorkspaceComponentButtonOptions` type to configure the Workspace Components Buttons is deprecated. Please use `WorkspaceButtonsConfig` instead.")})(e),f(e.buttons),(0,i.ki)({allowed:!0,componentVersion:t?.workspaceVersion}),r.et,a({clientAPIVersion:r.et,workspaceVersion:t?.workspaceVersion??"",updateDockProviderConfig:async t=>{if(!h)throw new Error("Error using `Dock.updateDockProviderConfig`. Dock provider is not registered. Make sure to call `Dock.register` first.");f(t.buttons);const a=await(0,c.N7)();await a.dispatch("update-provider",{providerType:"dock",provider:{...e,workspaceComponents:t.workspaceComponents,buttons:t.buttons,title:t.title,icon:t.icon,disableUserRearrangement:t.disableUserRearrangement,id:e.id}})}})}catch(e){(0,i.ki)({allowed:!1,rejectionCode:e instanceof Error?e.message:"unknown"}),n(e),p=void 0}finally{o.A.markEndAndMeasure("dock-registration")}})),p},m=async()=>{if(await p,!h)throw new Error("Error using `Dock.deregister`. Dock provider is not registered. Call `Dock.register` before calling `Dock.deregister`.");const e=await(0,c.N7)();await e.dispatch("deregister-provider",{providerType:"dock",id:h.id}),h=void 0,p=void 0},w=async()=>{await p,await(0,c.nA)(),await(async e=>(await(0,c.p4)()).dispatch("hide-provider-window",{providerType:e}))("dock")},y=async()=>{o.A.markStart("dock-show"),await p,await(0,c.nA)(),await(async e=>(await(0,c.p4)()).dispatch("show-provider-window",{providerType:e}))("dock")};var k,v,b,S=a(834),P=function(e,t,a,n,r){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?r.call(e,a):r?r.value=a:t.set(e,a),a},C=function(e,t,a,n){if("a"===a&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===a?n:"a"===a?n.call(e):n?n.value:t.get(e)};k=new WeakMap,v=new WeakMap,b=new WeakMap;const A=class{constructor(e){k.set(this,void 0),v.set(this,void 0),b.set(this,void 0),P(this,k,e,"f"),P(this,v,new Map,"f"),P(this,b,[],"f")}get(e){if(C(this,v,"f").has(e))return this.updateQueue(e),C(this,v,"f").get(e)}has(e){return C(this,v,"f").has(e)}put(e,t){if(C(this,v,"f").has(e))C(this,v,"f").set(e,t),this.updateQueue(e);else{if(C(this,b,"f").length===C(this,k,"f")){const e=C(this,b,"f").shift();e&&C(this,v,"f").delete(e)}C(this,v,"f").set(e,t),C(this,b,"f").push(e)}}updateQueue(e){const t=C(this,b,"f").indexOf(e);-1!==t&&(C(this,b,"f").splice(t,1),C(this,b,"f").push(e))}};function x(e){return e&&"object"==typeof e&&!Array.isArray(e)}function M(e,...t){if(!t.length)return e;const a=t.shift();return x(e)&&x(a)&&Object.entries(a).forEach((([t,a])=>{if(x(a))return e[t]||(e[t]={}),M(e[t],a);e[t]=a})),M(e,...t)}var I,F,W,T,D,O=a(181),E=a(523),_=function(e,t,a,n,r){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?r.call(e,a):r?r.value=a:t.set(e,a),a},B=function(e,t,a,n){if("a"===a&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===a?n:"a"===a?n.call(e):n?n.value:t.get(e)};F=new WeakMap,W=new WeakMap,T=new WeakMap,I=new WeakSet,D=function(){const e=Array.from(B(this,F,"f").entries()).reduce(((e,t)=>!e||t[1].timestamp<e[1].timestamp?t:e),null);return e?e[0]:null};const R=class{constructor(e=3e5,t=100){I.add(this),F.set(this,void 0),W.set(this,void 0),T.set(this,void 0),_(this,F,new Map,"f"),_(this,W,e,"f"),_(this,T,t,"f")}get(e){const t=B(this,F,"f").get(e);if(!t)return null;return Date.now()-t.timestamp<B(this,W,"f")?t.value:(B(this,F,"f").delete(e),null)}put(e,t){if(B(this,F,"f").size>=B(this,T,"f")){const e=B(this,I,"m",D).call(this);null!=e&&B(this,F,"f").delete(e)}B(this,F,"f").set(e,{value:t,timestamp:Date.now()})}remove(e){B(this,F,"f").delete(e)}clear(){B(this,F,"f").clear()}};var $,L=a(333),N=a(872),G=function(e,t,a,n){if("a"===a&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===a?n:"a"===a?n.call(e):n?n.value:t.get(e)};const U={};class V{constructor(e){$.set(this,new Set),this._initializeWorkflows=async(e=this.config)=>{const{workflows:t}=e;for(const e in t){if(!t[e].disableAutoInitialize)try{G(this,$,"f").has(e)?console.warn(`Workflow ${e} already initialized.`):(G(this,$,"f").add(e),await this.initializeWorkflow(e))}catch(t){G(this,$,"f").delete(e),console.error(`Error registering ${e}:`,t)}}};const t=M({},U,e);this.config=t}async initializeWorkflow(e){G(this,$,"f").add(e)}}$=new WeakMap;const H=__webpack_require__(/*! @openfin/microsoft365 */ "../../node_modules/@openfin/microsoft365/openfin.ms365.js");let z=0;const q={chatMessage:"Chat Message",event:"Event",message:"Email",drive:"Document",contact:"Contact",user:"User",list:"List"},j={pdf:"PDF",docx:"Word",pptx:"PowerPoint",xlsx:"Excel",onenote:"OneNote"},K={chatMessage:["Chat.Read","ChannelMessage.Read.All"],list:["Sites.Read.All"],event:["Calendars.Read"],message:["Mail.ReadWrite.Shared"],contact:["Contacts.Read.Shared","Mail.ReadWrite.Shared"],user:["User.Read.All","Presence.Read.All"]},X="MICROSOFT_365_SEARCH_TYPE_FILTER",Q="MICROSOFT_365_SEARCH_FILE_TYPE_FILTER",Y="MICROSOFT_365_SEARCH_DEPARTMENT_FILTER",Z="MICROSOFT_365_SEARCH_JOB_TITLE_FILTER",J="Teams Call",ee="Teams Chat",te="Email",ae=(e,t)=>{const a=[],n={item:e.context.selectedFilters?.find((e=>e.id===X)),documentType:e.context.selectedFilters?.find((e=>e.id===Q))},r=[{value:"Document",isSelected:!!n.item?.options?.find((({value:e})=>"File"===e))?.isSelected},{value:"Contact",isSelected:!!n.item?.options?.find((({value:e})=>"Contact"===e))?.isSelected},{value:"Chat Message",isSelected:!!n.item?.options?.find((({value:e})=>"Chat Message"===e))?.isSelected},{value:"Email",isSelected:!!n.item?.options?.find((({value:e})=>"Email"===e))?.isSelected},{value:"Event",isSelected:!!n.item?.options?.find((({value:e})=>"Event"===e))?.isSelected},{value:"List",isSelected:!!n.item?.options?.find((({value:e})=>"List"===e))?.isSelected}];return a.push({id:X,title:"Type",type:N.oo.MultiSelect,options:r.filter((e=>t.has(e.value)))}),"Document"===n.item?.options?.filter((e=>e.isSelected))?.[0].value&&a.push({id:Q,title:"File Type",type:N.oo.MultiSelect,options:Object.entries(j).map((([,e])=>({value:e,isSelected:!!n.documentType?.options?.filter((e=>e.isSelected))?.find((({value:e})=>"File"===e))?.isSelected})))}),a},ne=(e,t)=>{const a=t.context.selectedFilters?.find((e=>e.id===X))?.options;if(!Array.isArray(a)||!a.find((e=>"Contact"===e.value||"User"===e.value))?.isSelected)return[];const{department:n,jobTitle:r}=e.reduce(((e,t)=>(t.department&&e.department.add(t.department),t.jobTitle&&e.jobTitle.add(t.jobTitle),e)),{department:new Set,jobTitle:new Set}),o=t.context.selectedFilters?.find((e=>e.id===Y)),i=Array.from(n).map((e=>({value:e,isSelected:!!o?.options?.find((({value:t})=>t===e))?.isSelected}))),s=t.context.selectedFilters?.find((e=>e.id===Y)),c=Array.from(r).map((e=>({value:e,isSelected:!!s?.options?.find((({value:t})=>t===e))?.isSelected})));return[{id:Y,title:"Department",type:N.oo.MultiSelect,options:i},{id:Z,title:"Job Title",type:N.oo.MultiSelect,options:c}]},re=e=>{const t=e.context.selectedFilters?.find((e=>e.id===Y)),a=Array.isArray(t?.options)?t.options.filter((e=>e.isSelected)).map((e=>e.value)):[],n=e.context.selectedFilters?.find((e=>e.id===Z));return{department:a,jobTitle:Array.isArray(n?.options)?n.options.filter((e=>e.isSelected)).map((e=>e.value)):[]}},oe=(e,t)=>{const{department:a,jobTitle:n}=t;return e.filter((e=>(!a.length||a.includes(e.department))&&(!n.length||n.includes(e.jobTitle))))},ie=e=>{const t=Array.isArray(e.context.selectedFilters?.find((e=>e.id===Q))?.options)?e.context.selectedFilters.find((e=>e.id===Q))?.options:[];return{filterFiles:t&&t.some((({isSelected:e})=>e)),showWord:t.find((({value:e})=>"Word"===e))?.isSelected,showExcel:t.find((({value:e})=>"Excel"===e))?.isSelected,showPowerPoint:t.find((({value:e})=>"PowerPoint"===e))?.isSelected,showPDF:t.find((({value:e})=>"PDF"===e))?.isSelected,showOneNote:t.find((({value:e})=>"OneNote"===e))?.isSelected}},se=(e,t)=>{const a=[];return t.showWord&&a.push(".docx"),t.showExcel&&a.push(".xlsx"),t.showPowerPoint&&a.push(".pptx"),t.showPDF&&a.push(".pdf"),t.showOneNote&&a.push(".one"),e.filter((e=>{if(e.file){const t=e.name.substring(e.name.lastIndexOf("."));return a.includes(t)}return!1}))},ce=(e="")=>{switch(e.split(".").pop()?.toLowerCase()??""){case"docx":case"doc":return"Microsoft Word";case"xlsx":case"xls":return"Microsoft Excel";case"pptx":case"ppt":return"Microsoft PowerPoint";case"pdf":return"PDF";case"png":case"jpg":case"jpeg":case"gif":return"Image";case"txt":return"Text";default:return"File"}},de=(e="")=>{switch(e.split(".").pop()?.toLowerCase()??""){case"docx":case"doc":return(0,E.OX)(O.sP.Microsoft365Assets.Microsoft365DocumentIcon);case"xlsx":case"xls":return(0,E.OX)(O.sP.Microsoft365Assets.Microsoft365ExcelIcon);case"pptx":case"ppt":return(0,E.OX)(O.sP.Microsoft365Assets.Microsoft365PowerpointIcon);case"pdf":return(0,E.OX)(O.sP.Microsoft365Assets.PDFFileIcon);default:return}},le=e=>e.replace(/\+/g,"_").replace(/\//g,"-");var ue,pe,he,fe,ge,me,we,ye,ke,ve,be,Se,Pe,Ce,Ae,xe,Me,Ie,Fe,We,Te,De=function(e,t,a,n){if("a"===a&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===a?n:"a"===a?n.call(e):n?n.value:t.get(e)},Oe=function(e,t,a,n,r){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?r.call(e,a):r?r.value=a:t.set(e,a),a};class Ee extends V{constructor(e){const t=M({},{workflows:{search:(z+=1,{homeProvider:{description:"Microsoft 365 search results provider",id:`MS365-${fin.me.identity.uuid}-${z}`,logoUrl:(0,E.OX)(O.sP.Microsoft365Assets.Microsoft365Icon),icon:(0,E.OX)(O.sP.Microsoft365Assets.Microsoft365Icon),title:"Microsoft 365 Search",inputPlaceholder:"What would you like to search in Microsoft 365 today?",dispatchFocusEvents:!0},microsoftEntityTypeConfig:{message:!0,chatMessage:!0,drive:!0,event:!0,user:!0,contact:!0,list:!0},useTeamsDeepLink:!0})}},e);super(t),ue.add(this),pe.set(this,void 0),this.workflowIntegrationName="Microsoft 365",he.set(this,void 0),fe.set(this,void 0),ge.set(this,1),me.set(this,new Set),we.set(this,new A(100)),ye.set(this,new R(6e4)),this.connect=async(e=this.config.connect)=>{const{clientId:t,tenantId:a,redirectUri:n}=e,r=this.config.workflows?.search?Object.entries(this.config.workflows?.search?.microsoftEntityTypeConfig??{}).filter((([e,t])=>t)).map((([e])=>K[e])).filter((e=>void 0!==e)).flat():[];this.config.connect=e,Oe(this,pe,await(0,H.connect)(t,a,n,[...new Set(r)]),"f")},ke.set(this,(()=>{if(!De(this,pe,"f"))throw new Error("Microsoft365WorkflowIntegration not connected");return De(this,pe,"f")})),Ce.set(this,(async e=>{if(Oe(this,fe,e,"f"),e.data?.item?.id){const t=De(this,ye,"f").get(e.data.item.id);if(t)return void De(this,he,"f").respond([t])}if("user"===e.data?.type)De(this,Fe,"f").call(this,e)})),Ae.set(this,(async e=>{await fin.Platform.getCurrentSync().createWindow({layout:{content:[{type:"stack",content:[{type:"component",componentName:"view",componentState:{url:e}}]}]},workspacePlatform:void 0})})),xe.set(this,(async e=>{if(e.data.item.channelIdentity.teamId){const t=new URL(`msteams:/l/channel/${e.data.item.channelIdentity.channelId}/${e.data.item.id}`);return!1===this.config.workflows?.search?.useTeamsDeepLink&&(t.protocol="https:"),t.searchParams.append("context",JSON.stringify({contextType:"channel"})),void await fin.System.openUrlWithBrowser(t.toString())}const t=new URL(`msteams:/l/message/${e.data.item.chatId}/${e.data.item.id}`);!1===this.config.workflows?.search?.useTeamsDeepLink&&(t.protocol="https:"),t.searchParams.append("context",JSON.stringify({contextType:"chat"})),await fin.System.openUrlWithBrowser(t.toString())})),Me.set(this,(async e=>{switch(e.action.name){case J:{const t=new H.TeamsConnection(De(this,ke,"f").call(this),this.config.workflows?.search?.useTeamsDeepLink);De(this,ue,"m",ve).call(this,(()=>t.startCall([e.data.item.mail])));break}case te:{const t=await this.executeApiRequest("/v1.0/me/messages","POST",{toRecipients:[{emailAddress:{address:e.data.item.mail}}]});let a=t.data.webLink;const n=new URL(t.data.webLink);if("/owa/"===n.pathname){const e=n.search.slice(1).split("&").reduce(((e,t)=>{const[a,n]=t.split("=");return e[a]=n,e}),{});if(e.ItemID){const t=e.ItemID;a=`${n.origin}/mail/deeplink/compose/${t}?ItemID=${t}&exvsurl=1`}}await fin.Platform.getCurrentSync().createView({url:a});break}case ee:{const t=De(this,ke,"f").call(this),a=new H.TeamsConnection(t,this.config.workflows?.search?.useTeamsDeepLink);De(this,ue,"m",ve).call(this,(()=>a.startChat({emailAddresses:[t.currentUser.mail,e.data.item.mail]})));break}default:console.warn("Unhandled user action for result:",e,`Unknown action "${e.action.name}"`)}})),Ie.set(this,(async e=>{switch(e.data.type){case"driveItem":De(this,Ae,"f").call(this,e.data.item.webUrl);break;case"event":{const t=e.data.item,a=await this.executeApiRequest(`/v1.0/me/events/${t.id}`);De(this,Ae,"f").call(this,a.data.webLink);break}case"chatMessage":De(this,xe,"f").call(this,e);break;case"message":De(this,Ae,"f").call(this,e.data.item.webLink);break;case"list":{const t=e.data.item,a=await this.executeApiRequest(`/v1.0/sites/${t.parentReference?.siteId}/lists/${t.id}`);De(this,Ae,"f").call(this,a.data.webUrl);break}case"user":De(this,Me,"f").call(this,e);break;default:console.warn("Unhandled user action for result:",e,`Unknown result type "${e.data.type}"`)}})),Fe.set(this,(async e=>{let t,a;const n=[],r=e.data.item;De(this,we,"f").has(r.id)?t=De(this,we,"f").get(r.id):n.push({id:"contactPhoto",method:"GET",url:`/users/${e.data.item.id}/photo/$value`,headers:{ConsistencyLevel:"eventual"}}),n.push({id:"presence",method:"GET",url:`/users/${e.data.item.id}/presence`});try{const e=await De(this,ue,"m",be).call(this,n),i=e.data?.responses.find((e=>"contactPhoto"===e.id));i&&200!==i.status&&console.warn("Error fetching user photo",i),i?.body&&200===i?.status&&(t=`data:image/jpeg;base64,${i.body}`,De(this,we,"f").put(r.id,t));const s=e.data?.responses.find((e=>"presence"===e.id));200!==s.status&&console.warn("Error fetching user presence",s),s?.body&&200===s.status&&(o=s.body,a={available:"available",availableidle:"available",away:"away",berightback:"away",busy:"busy",busyidle:"busy",donotdisturb:"do-not-disturb",offline:"offline",presenceunknown:"offline"}[o.availability?.toLowerCase()])}catch(e){console.error("Error fetching user data",e)}var o;const i=[["Department",r.department||"N/A"],["Email",r.mail||"N/A"],["Work Phone",r.businessPhones?.[0]||"N/A"],["Mobile",r.mobilePhone||"N/A"],["Location",r.officeLocation||"N/A"]],s={...e,template:N.fC.Contact,templateContent:{name:e.data.item.displayName,title:e.data.item.jobTitle,details:[i],photoUrl:t,onlineStatus:a,buttons:[{type:"button",icon:{light:(0,E.OX)(O.sP.CallIconLight),dark:(0,E.OX)(O.sP.CallIconDark)},tooltip:"Teams Call",action:J},{type:"button",icon:{light:(0,E.OX)(O.sP.ChatIconLight),dark:(0,E.OX)(O.sP.ChatIconDark)},tooltip:"Chat",action:ee},{type:"button",icon:{light:(0,E.OX)(O.sP.MessageIconLight),dark:(0,E.OX)(O.sP.MessageIconDark)},tooltip:"E-mail",action:te}]}};De(this,ye,"f").put(e.data.item.id,s),De(this,he,"f").respond([s])})),We.set(this,(async(e,t)=>{if(De(this,he,"f")&&De(this,he,"f").close(),Oe(this,he,t,"f"),De(this,he,"f").open(),e.query.length<De(this,ge,"f"))return{results:[]};const a=encodeURIComponent(e.query),n=[],r=((e,t)=>{const a=Array.isArray(e.context.selectedFilters?.find((e=>e.id===X))?.options)?e.context.selectedFilters.find((e=>e.id===X))?.options:[],n=a.every((({isSelected:e})=>!e));return{showDocuments:t.has("Document")&&(n||!!a.find((({value:e})=>"Document"===e))?.isSelected),showContacts:t.has("Contact")&&(n||!!a.find((({value:e})=>"Contact"===e))?.isSelected),showChatMessages:t.has("Chat Message")&&(n||!!a.find((({value:e})=>"Chat Message"===e))?.isSelected),showMessages:t.has("Email")&&(n||!!a.find((({value:e})=>"Email"===e))?.isSelected),showEvents:t.has("Event")&&(n||!!a.find((({value:e})=>"Event"===e))?.isSelected),showLists:t.has("List")&&(n||!!a.find((({value:e})=>"List"===e))?.isSelected)}})(e,De(this,me,"f"));if(r.showDocuments){const e=`'${a}'`;n.push({id:"driveItem",method:"GET",url:`/me/drive/root/search(q=${encodeURIComponent(e)})`,headers:{ConsistencyLevel:"eventual"}})}if(r.showEvents&&n.push({id:"event",url:"/search/query",method:"POST",body:{requests:[{entityTypes:["event"],query:{queryString:e.query},from:0,size:10}]},headers:{"Content-Type":"application/json"}}),r.showContacts){const t=`"${e.query}"`;n.push({id:"contact",method:"GET",url:`/me/contacts?$search=${encodeURIComponent(t)}&$top=10`});const a=["displayName","givenName","surname"].map((t=>`"${t}:${e.query}"`)).join(" OR ");n.push({id:"user",method:"GET",url:`/users?$search=${encodeURIComponent(a)}&$top=10&$select=id,displayName,department,mail,businessPhones,mobilePhone,officeLocation,jobTitle`,headers:{ConsistencyLevel:"eventual"}})}if(r.showMessages&&n.push({id:"message",method:"GET",url:`/me/messages?$select=sender,subject,bodyPreview,receivedDateTime,webLink&$search=${encodeURIComponent(`"${e.query}"`)}&$top=10`}),r.showChatMessages&&n.push({id:"chatMessage",url:"/search/query",method:"POST",body:{requests:[{entityTypes:["chatMessage"],query:{queryString:e.query},from:0,size:10}]},headers:{"Content-Type":"application/json"}}),r.showLists&&n.push({id:"list",url:"/search/query",method:"POST",body:{requests:[{entityTypes:["list"],query:{queryString:e.query},from:0,size:10}]},headers:{"Content-Type":"application/json"}}),0===n.length)return{results:[]};const{results:o,filters:i}=await De(this,ue,"m",Se).call(this,n,e);return o.find((e=>e.key===De(this,fe,"f")?.key))?.template===N.fC.Loading&&De(this,Ce,"f").call(this,De(this,fe,"f")),{results:o,context:{filters:i}}})),Te.set(this,(async e=>{switch(e.action.trigger){case Be.P.FocusChange:De(this,Ce,"f").call(this,e);break;case Be.P.UserAction:De(this,Ie,"f").call(this,e);break;case Be.P.Reload:break;default:console.warn(`Unknown action trigger: ${e.action.trigger}`)}})),this.initializeWorkflow=async e=>{if("search"!==e)throw new Error(`Attempted to initialize unknown workflow: ${e}`);await S.register({...this.config.workflows.search.homeProvider,onUserInput:De(this,We,"f"),onResultDispatch:De(this,Te,"f")}),(0,H.enableLogging)(),await this.connect(),super.initializeWorkflow(e)},Object.entries(t.workflows?.search?.microsoftEntityTypeConfig||{}).filter((([e,t])=>t)).forEach((([e])=>{De(this,me,"f").add(q[e])}))}async executeApiRequest(...e){return De(this,ue,"m",ve).call(this,(()=>De(this,ke,"f").call(this).executeApiRequest(...e)))}}pe=new WeakMap,he=new WeakMap,fe=new WeakMap,ge=new WeakMap,me=new WeakMap,we=new WeakMap,ye=new WeakMap,ke=new WeakMap,Ce=new WeakMap,Ae=new WeakMap,xe=new WeakMap,Me=new WeakMap,Ie=new WeakMap,Fe=new WeakMap,We=new WeakMap,Te=new WeakMap,ue=new WeakSet,ve=async function(e){try{return await e()}catch(t){if(t instanceof H.AuthTokenExpiredError)return await this.connect(),e();throw t}},be=async function(e){return this.executeApiRequest("/v1.0/$batch","POST",{requests:e})},Se=async function(e,t){try{const a=await De(this,ue,"m",be).call(this,e);return{filters:[...ae(t,De(this,me,"f")),...ne(a.data.responses.find((e=>"user"===e.id))?.body?.value||[],t)],results:De(this,ue,"m",Pe).call(this,a,t)}}catch(e){return console.warn("Failed to execute Batch API request: ",e),{filters:[],results:[{key:(0,L.N)(),title:"Error Fetching Search Results",description:"",actions:[],template:N.fC.Error,templateContent:`Failed to execute Batch API request: ${JSON.stringify(e)}`}]}}},Pe=function(e,t){let a=[];for(const n of e.data.responses)if(200===n.status)switch(n.id){case"driveItem":{const e=ie(t),r=e.filterFiles?se(n.body.value,e):n.body.value;a.push(...(r||[]).map((e=>({key:e.id??(0,L.N)(),title:e.name??"",description:e.file?.mimeType??"",label:ce(e.name),icon:de(e.name),data:{type:"driveItem",item:e},actions:[{name:"Launch"}],template:N.fC.Plain,templateContent:void 0}))));break}case"event":a.push(...n.body?.value?.[0]?.hitsContainers?.[0]?.hits?.filter((e=>e.resource.subject)).map((e=>{const t=e.resource,a=le(e.hitId);return{key:a,title:t.subject??"",label:"Calendar Event",icon:(0,E.OX)(O.sP.Microsoft365Assets.Microsoft365OutlookIcon),actions:[{name:"Launch"}],data:{type:"event",item:{...t,id:a}},template:N.fC.Plain,templateContent:void 0}}))||[]);break;case"contact":{const e=re(t),r=oe(n.body.value||[],e);a.push(...(r||[]).map((e=>({key:e.id??(0,L.N)(),title:e.displayName??"",label:"Outlook contact",icon:(0,E.OX)(O.sP.Microsoft365Assets.Microsoft365OutlookIcon),actions:[],data:{type:"contact",item:e},template:N.fC.Plain,templateContent:void 0}))));break}case"user":{const e=re(t),r=oe(n.body.value||[],e);a.push(...(r||[]).map((e=>({key:e.id??(0,L.N)(),title:e.displayName??"",label:"Teams contact",icon:(0,E.OX)(O.sP.Microsoft365Assets.Microsoft365TeamsIcon),actions:[],data:{type:"user",item:e},template:N.fC.Loading,templateContent:void 0}))));break}case"message":a.push(...(n.body.value||[]).map((e=>({key:e.id??(0,L.N)(),title:`${e.subject??"Untitled Message"}${e.isDraft?" (Draft)":""}`,label:"Email",icon:(0,E.OX)(O.sP.Microsoft365Assets.Microsoft365OutlookIcon),actions:[],data:{type:"message",item:e},template:N.fC.Plain,templateContent:void 0}))));break;case"chatMessage":a.push(...n.body?.value?.[0]?.hitsContainers?.[0]?.hits?.map((e=>{const t=e.resource;return{key:t.id??(0,L.N)(),title:e.summary??"Untitled Message",label:"Chat",icon:(0,E.OX)(O.sP.Microsoft365Assets.Microsoft365TeamsIcon),actions:[],data:{type:"chatMessage",item:t},template:N.fC.Plain,templateContent:void 0}}))||[]);break;case"list":a.push(...n.body?.value?.[0]?.hitsContainers?.[0]?.hits?.map((e=>{const t=e.resource,a=le(e.hitId);return{key:a,title:t.displayName??"Untitled List",label:"List",actions:[{name:"Launch"}],data:{type:"list",item:{...t,id:a}},template:N.fC.Plain,templateContent:void 0}}))||[]);break;default:console.warn(`Unknown batch response id: ${n.id}`,n.body)}else console.warn("Batch API request failed: ",n);return a=a.map((e=>{if(!e.data?.item?.id)return e;const t=De(this,ye,"f").get(e.data.item.id);return t?{...e,template:t.template,templateContent:t.templateContent}:e})),a.sort(((e,t)=>e.title>t.title?1:-1))};var _e=a(598),Be=a(129),Re=a(184),$e=a(710)})(),module.exports=n})();
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../node_modules/dexie/dist/dexie.js":
/*!**********************************************!*\
  !*** ../../node_modules/dexie/dist/dexie.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/*
 * Dexie.js - a minimalistic wrapper for IndexedDB
 * ===============================================
 *
 * By David Fahlander, david.fahlander@gmail.com
 *
 * Version 4.2.0, Wed Aug 13 2025
 *
 * https://dexie.org
 *
 * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/
 */
 
(function (global, factory) {
     true ? module.exports = factory() :
    0;
})(this, (function () { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.
    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.
    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    var _global = typeof globalThis !== 'undefined' ? globalThis :
        typeof self !== 'undefined' ? self :
            typeof window !== 'undefined' ? window :
                __webpack_require__.g;

    var keys = Object.keys;
    var isArray = Array.isArray;
    if (typeof Promise !== 'undefined' && !_global.Promise) {
        _global.Promise = Promise;
    }
    function extend(obj, extension) {
        if (typeof extension !== 'object')
            return obj;
        keys(extension).forEach(function (key) {
            obj[key] = extension[key];
        });
        return obj;
    }
    var getProto = Object.getPrototypeOf;
    var _hasOwn = {}.hasOwnProperty;
    function hasOwn(obj, prop) {
        return _hasOwn.call(obj, prop);
    }
    function props(proto, extension) {
        if (typeof extension === 'function')
            extension = extension(getProto(proto));
        (typeof Reflect === "undefined" ? keys : Reflect.ownKeys)(extension).forEach(function (key) {
            setProp(proto, key, extension[key]);
        });
    }
    var defineProperty = Object.defineProperty;
    function setProp(obj, prop, functionOrGetSet, options) {
        defineProperty(obj, prop, extend(functionOrGetSet && hasOwn(functionOrGetSet, "get") && typeof functionOrGetSet.get === 'function' ?
            { get: functionOrGetSet.get, set: functionOrGetSet.set, configurable: true } :
            { value: functionOrGetSet, configurable: true, writable: true }, options));
    }
    function derive(Child) {
        return {
            from: function (Parent) {
                Child.prototype = Object.create(Parent.prototype);
                setProp(Child.prototype, "constructor", Child);
                return {
                    extend: props.bind(null, Child.prototype)
                };
            }
        };
    }
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    function getPropertyDescriptor(obj, prop) {
        var pd = getOwnPropertyDescriptor(obj, prop);
        var proto;
        return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);
    }
    var _slice = [].slice;
    function slice(args, start, end) {
        return _slice.call(args, start, end);
    }
    function override(origFunc, overridedFactory) {
        return overridedFactory(origFunc);
    }
    function assert(b) {
        if (!b)
            throw new Error("Assertion Failed");
    }
    function asap$1(fn) {
        if (_global.setImmediate)
            setImmediate(fn);
        else
            setTimeout(fn, 0);
    }
    function arrayToObject(array, extractor) {
        return array.reduce(function (result, item, i) {
            var nameAndValue = extractor(item, i);
            if (nameAndValue)
                result[nameAndValue[0]] = nameAndValue[1];
            return result;
        }, {});
    }
    function getByKeyPath(obj, keyPath) {
        if (typeof keyPath === 'string' && hasOwn(obj, keyPath))
            return obj[keyPath];
        if (!keyPath)
            return obj;
        if (typeof keyPath !== 'string') {
            var rv = [];
            for (var i = 0, l = keyPath.length; i < l; ++i) {
                var val = getByKeyPath(obj, keyPath[i]);
                rv.push(val);
            }
            return rv;
        }
        var period = keyPath.indexOf('.');
        if (period !== -1) {
            var innerObj = obj[keyPath.substr(0, period)];
            return innerObj == null ? undefined : getByKeyPath(innerObj, keyPath.substr(period + 1));
        }
        return undefined;
    }
    function setByKeyPath(obj, keyPath, value) {
        if (!obj || keyPath === undefined)
            return;
        if ('isFrozen' in Object && Object.isFrozen(obj))
            return;
        if (typeof keyPath !== 'string' && 'length' in keyPath) {
            assert(typeof value !== 'string' && 'length' in value);
            for (var i = 0, l = keyPath.length; i < l; ++i) {
                setByKeyPath(obj, keyPath[i], value[i]);
            }
        }
        else {
            var period = keyPath.indexOf('.');
            if (period !== -1) {
                var currentKeyPath = keyPath.substr(0, period);
                var remainingKeyPath = keyPath.substr(period + 1);
                if (remainingKeyPath === "")
                    if (value === undefined) {
                        if (isArray(obj) && !isNaN(parseInt(currentKeyPath)))
                            obj.splice(currentKeyPath, 1);
                        else
                            delete obj[currentKeyPath];
                    }
                    else
                        obj[currentKeyPath] = value;
                else {
                    var innerObj = obj[currentKeyPath];
                    if (!innerObj || !hasOwn(obj, currentKeyPath))
                        innerObj = (obj[currentKeyPath] = {});
                    setByKeyPath(innerObj, remainingKeyPath, value);
                }
            }
            else {
                if (value === undefined) {
                    if (isArray(obj) && !isNaN(parseInt(keyPath)))
                        obj.splice(keyPath, 1);
                    else
                        delete obj[keyPath];
                }
                else
                    obj[keyPath] = value;
            }
        }
    }
    function delByKeyPath(obj, keyPath) {
        if (typeof keyPath === 'string')
            setByKeyPath(obj, keyPath, undefined);
        else if ('length' in keyPath)
            [].map.call(keyPath, function (kp) {
                setByKeyPath(obj, kp, undefined);
            });
    }
    function shallowClone(obj) {
        var rv = {};
        for (var m in obj) {
            if (hasOwn(obj, m))
                rv[m] = obj[m];
        }
        return rv;
    }
    var concat = [].concat;
    function flatten(a) {
        return concat.apply([], a);
    }
    var intrinsicTypeNames = "BigUint64Array,BigInt64Array,Array,Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,FileSystemDirectoryHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey"
        .split(',').concat(flatten([8, 16, 32, 64].map(function (num) { return ["Int", "Uint", "Float"].map(function (t) { return t + num + "Array"; }); }))).filter(function (t) { return _global[t]; });
    var intrinsicTypes = new Set(intrinsicTypeNames.map(function (t) { return _global[t]; }));
    function cloneSimpleObjectTree(o) {
        var rv = {};
        for (var k in o)
            if (hasOwn(o, k)) {
                var v = o[k];
                rv[k] = !v || typeof v !== 'object' || intrinsicTypes.has(v.constructor) ? v : cloneSimpleObjectTree(v);
            }
        return rv;
    }
    function objectIsEmpty(o) {
        for (var k in o)
            if (hasOwn(o, k))
                return false;
        return true;
    }
    var circularRefs = null;
    function deepClone(any) {
        circularRefs = new WeakMap();
        var rv = innerDeepClone(any);
        circularRefs = null;
        return rv;
    }
    function innerDeepClone(x) {
        if (!x || typeof x !== 'object')
            return x;
        var rv = circularRefs.get(x);
        if (rv)
            return rv;
        if (isArray(x)) {
            rv = [];
            circularRefs.set(x, rv);
            for (var i = 0, l = x.length; i < l; ++i) {
                rv.push(innerDeepClone(x[i]));
            }
        }
        else if (intrinsicTypes.has(x.constructor)) {
            rv = x;
        }
        else {
            var proto = getProto(x);
            rv = proto === Object.prototype ? {} : Object.create(proto);
            circularRefs.set(x, rv);
            for (var prop in x) {
                if (hasOwn(x, prop)) {
                    rv[prop] = innerDeepClone(x[prop]);
                }
            }
        }
        return rv;
    }
    var toString = {}.toString;
    function toStringTag(o) {
        return toString.call(o).slice(8, -1);
    }
    var iteratorSymbol = typeof Symbol !== 'undefined' ?
        Symbol.iterator :
        '@@iterator';
    var getIteratorOf = typeof iteratorSymbol === "symbol" ? function (x) {
        var i;
        return x != null && (i = x[iteratorSymbol]) && i.apply(x);
    } : function () { return null; };
    function delArrayItem(a, x) {
        var i = a.indexOf(x);
        if (i >= 0)
            a.splice(i, 1);
        return i >= 0;
    }
    var NO_CHAR_ARRAY = {};
    function getArrayOf(arrayLike) {
        var i, a, x, it;
        if (arguments.length === 1) {
            if (isArray(arrayLike))
                return arrayLike.slice();
            if (this === NO_CHAR_ARRAY && typeof arrayLike === 'string')
                return [arrayLike];
            if ((it = getIteratorOf(arrayLike))) {
                a = [];
                while ((x = it.next()), !x.done)
                    a.push(x.value);
                return a;
            }
            if (arrayLike == null)
                return [arrayLike];
            i = arrayLike.length;
            if (typeof i === 'number') {
                a = new Array(i);
                while (i--)
                    a[i] = arrayLike[i];
                return a;
            }
            return [arrayLike];
        }
        i = arguments.length;
        a = new Array(i);
        while (i--)
            a[i] = arguments[i];
        return a;
    }
    var isAsyncFunction = typeof Symbol !== 'undefined'
        ? function (fn) { return fn[Symbol.toStringTag] === 'AsyncFunction'; }
        : function () { return false; };

    var dexieErrorNames = [
        'Modify',
        'Bulk',
        'OpenFailed',
        'VersionChange',
        'Schema',
        'Upgrade',
        'InvalidTable',
        'MissingAPI',
        'NoSuchDatabase',
        'InvalidArgument',
        'SubTransaction',
        'Unsupported',
        'Internal',
        'DatabaseClosed',
        'PrematureCommit',
        'ForeignAwait'
    ];
    var idbDomErrorNames = [
        'Unknown',
        'Constraint',
        'Data',
        'TransactionInactive',
        'ReadOnly',
        'Version',
        'NotFound',
        'InvalidState',
        'InvalidAccess',
        'Abort',
        'Timeout',
        'QuotaExceeded',
        'Syntax',
        'DataClone'
    ];
    var errorList = dexieErrorNames.concat(idbDomErrorNames);
    var defaultTexts = {
        VersionChanged: "Database version changed by other database connection",
        DatabaseClosed: "Database has been closed",
        Abort: "Transaction aborted",
        TransactionInactive: "Transaction has already completed or failed",
        MissingAPI: "IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"
    };
    function DexieError(name, msg) {
        this.name = name;
        this.message = msg;
    }
    derive(DexieError).from(Error).extend({
        toString: function () { return this.name + ": " + this.message; }
    });
    function getMultiErrorMessage(msg, failures) {
        return msg + ". Errors: " + Object.keys(failures)
            .map(function (key) { return failures[key].toString(); })
            .filter(function (v, i, s) { return s.indexOf(v) === i; })
            .join('\n');
    }
    function ModifyError(msg, failures, successCount, failedKeys) {
        this.failures = failures;
        this.failedKeys = failedKeys;
        this.successCount = successCount;
        this.message = getMultiErrorMessage(msg, failures);
    }
    derive(ModifyError).from(DexieError);
    function BulkError(msg, failures) {
        this.name = "BulkError";
        this.failures = Object.keys(failures).map(function (pos) { return failures[pos]; });
        this.failuresByPos = failures;
        this.message = getMultiErrorMessage(msg, this.failures);
    }
    derive(BulkError).from(DexieError);
    var errnames = errorList.reduce(function (obj, name) { return (obj[name] = name + "Error", obj); }, {});
    var BaseException = DexieError;
    var exceptions = errorList.reduce(function (obj, name) {
        var fullName = name + "Error";
        function DexieError(msgOrInner, inner) {
            this.name = fullName;
            if (!msgOrInner) {
                this.message = defaultTexts[name] || fullName;
                this.inner = null;
            }
            else if (typeof msgOrInner === 'string') {
                this.message = "".concat(msgOrInner).concat(!inner ? '' : '\n ' + inner);
                this.inner = inner || null;
            }
            else if (typeof msgOrInner === 'object') {
                this.message = "".concat(msgOrInner.name, " ").concat(msgOrInner.message);
                this.inner = msgOrInner;
            }
        }
        derive(DexieError).from(BaseException);
        obj[name] = DexieError;
        return obj;
    }, {});
    exceptions.Syntax = SyntaxError;
    exceptions.Type = TypeError;
    exceptions.Range = RangeError;
    var exceptionMap = idbDomErrorNames.reduce(function (obj, name) {
        obj[name + "Error"] = exceptions[name];
        return obj;
    }, {});
    function mapError(domError, message) {
        if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name])
            return domError;
        var rv = new exceptionMap[domError.name](message || domError.message, domError);
        if ("stack" in domError) {
            setProp(rv, "stack", { get: function () {
                    return this.inner.stack;
                } });
        }
        return rv;
    }
    var fullNameExceptions = errorList.reduce(function (obj, name) {
        if (["Syntax", "Type", "Range"].indexOf(name) === -1)
            obj[name + "Error"] = exceptions[name];
        return obj;
    }, {});
    fullNameExceptions.ModifyError = ModifyError;
    fullNameExceptions.DexieError = DexieError;
    fullNameExceptions.BulkError = BulkError;

    function nop() { }
    function mirror(val) { return val; }
    function pureFunctionChain(f1, f2) {
        if (f1 == null || f1 === mirror)
            return f2;
        return function (val) {
            return f2(f1(val));
        };
    }
    function callBoth(on1, on2) {
        return function () {
            on1.apply(this, arguments);
            on2.apply(this, arguments);
        };
    }
    function hookCreatingChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function () {
            var res = f1.apply(this, arguments);
            if (res !== undefined)
                arguments[0] = res;
            var onsuccess = this.onsuccess,
            onerror = this.onerror;
            this.onsuccess = null;
            this.onerror = null;
            var res2 = f2.apply(this, arguments);
            if (onsuccess)
                this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror)
                this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
            return res2 !== undefined ? res2 : res;
        };
    }
    function hookDeletingChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function () {
            f1.apply(this, arguments);
            var onsuccess = this.onsuccess,
            onerror = this.onerror;
            this.onsuccess = this.onerror = null;
            f2.apply(this, arguments);
            if (onsuccess)
                this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror)
                this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
        };
    }
    function hookUpdatingChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function (modifications) {
            var res = f1.apply(this, arguments);
            extend(modifications, res);
            var onsuccess = this.onsuccess,
            onerror = this.onerror;
            this.onsuccess = null;
            this.onerror = null;
            var res2 = f2.apply(this, arguments);
            if (onsuccess)
                this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror)
                this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
            return res === undefined ?
                (res2 === undefined ? undefined : res2) :
                (extend(res, res2));
        };
    }
    function reverseStoppableEventChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function () {
            if (f2.apply(this, arguments) === false)
                return false;
            return f1.apply(this, arguments);
        };
    }
    function promisableChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function () {
            var res = f1.apply(this, arguments);
            if (res && typeof res.then === 'function') {
                var thiz = this, i = arguments.length, args = new Array(i);
                while (i--)
                    args[i] = arguments[i];
                return res.then(function () {
                    return f2.apply(thiz, args);
                });
            }
            return f2.apply(this, arguments);
        };
    }

    var debug = typeof location !== 'undefined' &&
        /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);
    function setDebug(value, filter) {
        debug = value;
    }

    var INTERNAL = {};
    var ZONE_ECHO_LIMIT = 100, _a$1 = typeof Promise === 'undefined' ?
        [] :
        (function () {
            var globalP = Promise.resolve();
            if (typeof crypto === 'undefined' || !crypto.subtle)
                return [globalP, getProto(globalP), globalP];
            var nativeP = crypto.subtle.digest("SHA-512", new Uint8Array([0]));
            return [
                nativeP,
                getProto(nativeP),
                globalP
            ];
        })(), resolvedNativePromise = _a$1[0], nativePromiseProto = _a$1[1], resolvedGlobalPromise = _a$1[2], nativePromiseThen = nativePromiseProto && nativePromiseProto.then;
    var NativePromise = resolvedNativePromise && resolvedNativePromise.constructor;
    var patchGlobalPromise = !!resolvedGlobalPromise;
    function schedulePhysicalTick() {
        queueMicrotask(physicalTick);
    }
    var asap = function (callback, args) {
        microtickQueue.push([callback, args]);
        if (needsNewPhysicalTick) {
            schedulePhysicalTick();
            needsNewPhysicalTick = false;
        }
    };
    var isOutsideMicroTick = true,
    needsNewPhysicalTick = true,
    unhandledErrors = [],
    rejectingErrors = [],
    rejectionMapper = mirror;
    var globalPSD = {
        id: 'global',
        global: true,
        ref: 0,
        unhandleds: [],
        onunhandled: nop,
        pgp: false,
        env: {},
        finalize: nop
    };
    var PSD = globalPSD;
    var microtickQueue = [];
    var numScheduledCalls = 0;
    var tickFinalizers = [];
    function DexiePromise(fn) {
        if (typeof this !== 'object')
            throw new TypeError('Promises must be constructed via new');
        this._listeners = [];
        this._lib = false;
        var psd = (this._PSD = PSD);
        if (typeof fn !== 'function') {
            if (fn !== INTERNAL)
                throw new TypeError('Not a function');
            this._state = arguments[1];
            this._value = arguments[2];
            if (this._state === false)
                handleRejection(this, this._value);
            return;
        }
        this._state = null;
        this._value = null;
        ++psd.ref;
        executePromiseTask(this, fn);
    }
    var thenProp = {
        get: function () {
            var psd = PSD, microTaskId = totalEchoes;
            function then(onFulfilled, onRejected) {
                var _this = this;
                var possibleAwait = !psd.global && (psd !== PSD || microTaskId !== totalEchoes);
                var cleanup = possibleAwait && !decrementExpectedAwaits();
                var rv = new DexiePromise(function (resolve, reject) {
                    propagateToListener(_this, new Listener(nativeAwaitCompatibleWrap(onFulfilled, psd, possibleAwait, cleanup), nativeAwaitCompatibleWrap(onRejected, psd, possibleAwait, cleanup), resolve, reject, psd));
                });
                if (this._consoleTask)
                    rv._consoleTask = this._consoleTask;
                return rv;
            }
            then.prototype = INTERNAL;
            return then;
        },
        set: function (value) {
            setProp(this, 'then', value && value.prototype === INTERNAL ?
                thenProp :
                {
                    get: function () {
                        return value;
                    },
                    set: thenProp.set
                });
        }
    };
    props(DexiePromise.prototype, {
        then: thenProp,
        _then: function (onFulfilled, onRejected) {
            propagateToListener(this, new Listener(null, null, onFulfilled, onRejected, PSD));
        },
        catch: function (onRejected) {
            if (arguments.length === 1)
                return this.then(null, onRejected);
            var type = arguments[0], handler = arguments[1];
            return typeof type === 'function' ? this.then(null, function (err) {
                return err instanceof type ? handler(err) : PromiseReject(err);
            })
                : this.then(null, function (err) {
                    return err && err.name === type ? handler(err) : PromiseReject(err);
                });
        },
        finally: function (onFinally) {
            return this.then(function (value) {
                return DexiePromise.resolve(onFinally()).then(function () { return value; });
            }, function (err) {
                return DexiePromise.resolve(onFinally()).then(function () { return PromiseReject(err); });
            });
        },
        timeout: function (ms, msg) {
            var _this = this;
            return ms < Infinity ?
                new DexiePromise(function (resolve, reject) {
                    var handle = setTimeout(function () { return reject(new exceptions.Timeout(msg)); }, ms);
                    _this.then(resolve, reject).finally(clearTimeout.bind(null, handle));
                }) : this;
        }
    });
    if (typeof Symbol !== 'undefined' && Symbol.toStringTag)
        setProp(DexiePromise.prototype, Symbol.toStringTag, 'Dexie.Promise');
    globalPSD.env = snapShot();
    function Listener(onFulfilled, onRejected, resolve, reject, zone) {
        this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
        this.onRejected = typeof onRejected === 'function' ? onRejected : null;
        this.resolve = resolve;
        this.reject = reject;
        this.psd = zone;
    }
    props(DexiePromise, {
        all: function () {
            var values = getArrayOf.apply(null, arguments)
                .map(onPossibleParallellAsync);
            return new DexiePromise(function (resolve, reject) {
                if (values.length === 0)
                    resolve([]);
                var remaining = values.length;
                values.forEach(function (a, i) { return DexiePromise.resolve(a).then(function (x) {
                    values[i] = x;
                    if (!--remaining)
                        resolve(values);
                }, reject); });
            });
        },
        resolve: function (value) {
            if (value instanceof DexiePromise)
                return value;
            if (value && typeof value.then === 'function')
                return new DexiePromise(function (resolve, reject) {
                    value.then(resolve, reject);
                });
            var rv = new DexiePromise(INTERNAL, true, value);
            return rv;
        },
        reject: PromiseReject,
        race: function () {
            var values = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
            return new DexiePromise(function (resolve, reject) {
                values.map(function (value) { return DexiePromise.resolve(value).then(resolve, reject); });
            });
        },
        PSD: {
            get: function () { return PSD; },
            set: function (value) { return PSD = value; }
        },
        totalEchoes: { get: function () { return totalEchoes; } },
        newPSD: newScope,
        usePSD: usePSD,
        scheduler: {
            get: function () { return asap; },
            set: function (value) { asap = value; }
        },
        rejectionMapper: {
            get: function () { return rejectionMapper; },
            set: function (value) { rejectionMapper = value; }
        },
        follow: function (fn, zoneProps) {
            return new DexiePromise(function (resolve, reject) {
                return newScope(function (resolve, reject) {
                    var psd = PSD;
                    psd.unhandleds = [];
                    psd.onunhandled = reject;
                    psd.finalize = callBoth(function () {
                        var _this = this;
                        run_at_end_of_this_or_next_physical_tick(function () {
                            _this.unhandleds.length === 0 ? resolve() : reject(_this.unhandleds[0]);
                        });
                    }, psd.finalize);
                    fn();
                }, zoneProps, resolve, reject);
            });
        }
    });
    if (NativePromise) {
        if (NativePromise.allSettled)
            setProp(DexiePromise, "allSettled", function () {
                var possiblePromises = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
                return new DexiePromise(function (resolve) {
                    if (possiblePromises.length === 0)
                        resolve([]);
                    var remaining = possiblePromises.length;
                    var results = new Array(remaining);
                    possiblePromises.forEach(function (p, i) { return DexiePromise.resolve(p).then(function (value) { return results[i] = { status: "fulfilled", value: value }; }, function (reason) { return results[i] = { status: "rejected", reason: reason }; })
                        .then(function () { return --remaining || resolve(results); }); });
                });
            });
        if (NativePromise.any && typeof AggregateError !== 'undefined')
            setProp(DexiePromise, "any", function () {
                var possiblePromises = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
                return new DexiePromise(function (resolve, reject) {
                    if (possiblePromises.length === 0)
                        reject(new AggregateError([]));
                    var remaining = possiblePromises.length;
                    var failures = new Array(remaining);
                    possiblePromises.forEach(function (p, i) { return DexiePromise.resolve(p).then(function (value) { return resolve(value); }, function (failure) {
                        failures[i] = failure;
                        if (!--remaining)
                            reject(new AggregateError(failures));
                    }); });
                });
            });
        if (NativePromise.withResolvers)
            DexiePromise.withResolvers = NativePromise.withResolvers;
    }
    function executePromiseTask(promise, fn) {
        try {
            fn(function (value) {
                if (promise._state !== null)
                    return;
                if (value === promise)
                    throw new TypeError('A promise cannot be resolved with itself.');
                var shouldExecuteTick = promise._lib && beginMicroTickScope();
                if (value && typeof value.then === 'function') {
                    executePromiseTask(promise, function (resolve, reject) {
                        value instanceof DexiePromise ?
                            value._then(resolve, reject) :
                            value.then(resolve, reject);
                    });
                }
                else {
                    promise._state = true;
                    promise._value = value;
                    propagateAllListeners(promise);
                }
                if (shouldExecuteTick)
                    endMicroTickScope();
            }, handleRejection.bind(null, promise));
        }
        catch (ex) {
            handleRejection(promise, ex);
        }
    }
    function handleRejection(promise, reason) {
        rejectingErrors.push(reason);
        if (promise._state !== null)
            return;
        var shouldExecuteTick = promise._lib && beginMicroTickScope();
        reason = rejectionMapper(reason);
        promise._state = false;
        promise._value = reason;
        addPossiblyUnhandledError(promise);
        propagateAllListeners(promise);
        if (shouldExecuteTick)
            endMicroTickScope();
    }
    function propagateAllListeners(promise) {
        var listeners = promise._listeners;
        promise._listeners = [];
        for (var i = 0, len = listeners.length; i < len; ++i) {
            propagateToListener(promise, listeners[i]);
        }
        var psd = promise._PSD;
        --psd.ref || psd.finalize();
        if (numScheduledCalls === 0) {
            ++numScheduledCalls;
            asap(function () {
                if (--numScheduledCalls === 0)
                    finalizePhysicalTick();
            }, []);
        }
    }
    function propagateToListener(promise, listener) {
        if (promise._state === null) {
            promise._listeners.push(listener);
            return;
        }
        var cb = promise._state ? listener.onFulfilled : listener.onRejected;
        if (cb === null) {
            return (promise._state ? listener.resolve : listener.reject)(promise._value);
        }
        ++listener.psd.ref;
        ++numScheduledCalls;
        asap(callListener, [cb, promise, listener]);
    }
    function callListener(cb, promise, listener) {
        try {
            var ret, value = promise._value;
            if (!promise._state && rejectingErrors.length)
                rejectingErrors = [];
            ret = debug && promise._consoleTask ? promise._consoleTask.run(function () { return cb(value); }) : cb(value);
            if (!promise._state && rejectingErrors.indexOf(value) === -1) {
                markErrorAsHandled(promise);
            }
            listener.resolve(ret);
        }
        catch (e) {
            listener.reject(e);
        }
        finally {
            if (--numScheduledCalls === 0)
                finalizePhysicalTick();
            --listener.psd.ref || listener.psd.finalize();
        }
    }
    function physicalTick() {
        usePSD(globalPSD, function () {
            beginMicroTickScope() && endMicroTickScope();
        });
    }
    function beginMicroTickScope() {
        var wasRootExec = isOutsideMicroTick;
        isOutsideMicroTick = false;
        needsNewPhysicalTick = false;
        return wasRootExec;
    }
    function endMicroTickScope() {
        var callbacks, i, l;
        do {
            while (microtickQueue.length > 0) {
                callbacks = microtickQueue;
                microtickQueue = [];
                l = callbacks.length;
                for (i = 0; i < l; ++i) {
                    var item = callbacks[i];
                    item[0].apply(null, item[1]);
                }
            }
        } while (microtickQueue.length > 0);
        isOutsideMicroTick = true;
        needsNewPhysicalTick = true;
    }
    function finalizePhysicalTick() {
        var unhandledErrs = unhandledErrors;
        unhandledErrors = [];
        unhandledErrs.forEach(function (p) {
            p._PSD.onunhandled.call(null, p._value, p);
        });
        var finalizers = tickFinalizers.slice(0);
        var i = finalizers.length;
        while (i)
            finalizers[--i]();
    }
    function run_at_end_of_this_or_next_physical_tick(fn) {
        function finalizer() {
            fn();
            tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);
        }
        tickFinalizers.push(finalizer);
        ++numScheduledCalls;
        asap(function () {
            if (--numScheduledCalls === 0)
                finalizePhysicalTick();
        }, []);
    }
    function addPossiblyUnhandledError(promise) {
        if (!unhandledErrors.some(function (p) { return p._value === promise._value; }))
            unhandledErrors.push(promise);
    }
    function markErrorAsHandled(promise) {
        var i = unhandledErrors.length;
        while (i)
            if (unhandledErrors[--i]._value === promise._value) {
                unhandledErrors.splice(i, 1);
                return;
            }
    }
    function PromiseReject(reason) {
        return new DexiePromise(INTERNAL, false, reason);
    }
    function wrap(fn, errorCatcher) {
        var psd = PSD;
        return function () {
            var wasRootExec = beginMicroTickScope(), outerScope = PSD;
            try {
                switchToZone(psd, true);
                return fn.apply(this, arguments);
            }
            catch (e) {
                errorCatcher && errorCatcher(e);
            }
            finally {
                switchToZone(outerScope, false);
                if (wasRootExec)
                    endMicroTickScope();
            }
        };
    }
    var task = { awaits: 0, echoes: 0, id: 0 };
    var taskCounter = 0;
    var zoneStack = [];
    var zoneEchoes = 0;
    var totalEchoes = 0;
    var zone_id_counter = 0;
    function newScope(fn, props, a1, a2) {
        var parent = PSD, psd = Object.create(parent);
        psd.parent = parent;
        psd.ref = 0;
        psd.global = false;
        psd.id = ++zone_id_counter;
        globalPSD.env;
        psd.env = patchGlobalPromise ? {
            Promise: DexiePromise,
            PromiseProp: { value: DexiePromise, configurable: true, writable: true },
            all: DexiePromise.all,
            race: DexiePromise.race,
            allSettled: DexiePromise.allSettled,
            any: DexiePromise.any,
            resolve: DexiePromise.resolve,
            reject: DexiePromise.reject,
        } : {};
        if (props)
            extend(psd, props);
        ++parent.ref;
        psd.finalize = function () {
            --this.parent.ref || this.parent.finalize();
        };
        var rv = usePSD(psd, fn, a1, a2);
        if (psd.ref === 0)
            psd.finalize();
        return rv;
    }
    function incrementExpectedAwaits() {
        if (!task.id)
            task.id = ++taskCounter;
        ++task.awaits;
        task.echoes += ZONE_ECHO_LIMIT;
        return task.id;
    }
    function decrementExpectedAwaits() {
        if (!task.awaits)
            return false;
        if (--task.awaits === 0)
            task.id = 0;
        task.echoes = task.awaits * ZONE_ECHO_LIMIT;
        return true;
    }
    if (('' + nativePromiseThen).indexOf('[native code]') === -1) {
        incrementExpectedAwaits = decrementExpectedAwaits = nop;
    }
    function onPossibleParallellAsync(possiblePromise) {
        if (task.echoes && possiblePromise && possiblePromise.constructor === NativePromise) {
            incrementExpectedAwaits();
            return possiblePromise.then(function (x) {
                decrementExpectedAwaits();
                return x;
            }, function (e) {
                decrementExpectedAwaits();
                return rejection(e);
            });
        }
        return possiblePromise;
    }
    function zoneEnterEcho(targetZone) {
        ++totalEchoes;
        if (!task.echoes || --task.echoes === 0) {
            task.echoes = task.awaits = task.id = 0;
        }
        zoneStack.push(PSD);
        switchToZone(targetZone, true);
    }
    function zoneLeaveEcho() {
        var zone = zoneStack[zoneStack.length - 1];
        zoneStack.pop();
        switchToZone(zone, false);
    }
    function switchToZone(targetZone, bEnteringZone) {
        var currentZone = PSD;
        if (bEnteringZone ? task.echoes && (!zoneEchoes++ || targetZone !== PSD) : zoneEchoes && (!--zoneEchoes || targetZone !== PSD)) {
            queueMicrotask(bEnteringZone ? zoneEnterEcho.bind(null, targetZone) : zoneLeaveEcho);
        }
        if (targetZone === PSD)
            return;
        PSD = targetZone;
        if (currentZone === globalPSD)
            globalPSD.env = snapShot();
        if (patchGlobalPromise) {
            var GlobalPromise = globalPSD.env.Promise;
            var targetEnv = targetZone.env;
            if (currentZone.global || targetZone.global) {
                Object.defineProperty(_global, 'Promise', targetEnv.PromiseProp);
                GlobalPromise.all = targetEnv.all;
                GlobalPromise.race = targetEnv.race;
                GlobalPromise.resolve = targetEnv.resolve;
                GlobalPromise.reject = targetEnv.reject;
                if (targetEnv.allSettled)
                    GlobalPromise.allSettled = targetEnv.allSettled;
                if (targetEnv.any)
                    GlobalPromise.any = targetEnv.any;
            }
        }
    }
    function snapShot() {
        var GlobalPromise = _global.Promise;
        return patchGlobalPromise ? {
            Promise: GlobalPromise,
            PromiseProp: Object.getOwnPropertyDescriptor(_global, "Promise"),
            all: GlobalPromise.all,
            race: GlobalPromise.race,
            allSettled: GlobalPromise.allSettled,
            any: GlobalPromise.any,
            resolve: GlobalPromise.resolve,
            reject: GlobalPromise.reject,
        } : {};
    }
    function usePSD(psd, fn, a1, a2, a3) {
        var outerScope = PSD;
        try {
            switchToZone(psd, true);
            return fn(a1, a2, a3);
        }
        finally {
            switchToZone(outerScope, false);
        }
    }
    function nativeAwaitCompatibleWrap(fn, zone, possibleAwait, cleanup) {
        return typeof fn !== 'function' ? fn : function () {
            var outerZone = PSD;
            if (possibleAwait)
                incrementExpectedAwaits();
            switchToZone(zone, true);
            try {
                return fn.apply(this, arguments);
            }
            finally {
                switchToZone(outerZone, false);
                if (cleanup)
                    queueMicrotask(decrementExpectedAwaits);
            }
        };
    }
    function execInGlobalContext(cb) {
        if (Promise === NativePromise && task.echoes === 0) {
            if (zoneEchoes === 0) {
                cb();
            }
            else {
                enqueueNativeMicroTask(cb);
            }
        }
        else {
            setTimeout(cb, 0);
        }
    }
    var rejection = DexiePromise.reject;

    function tempTransaction(db, mode, storeNames, fn) {
        if (!db.idbdb || (!db._state.openComplete && (!PSD.letThrough && !db._vip))) {
            if (db._state.openComplete) {
                return rejection(new exceptions.DatabaseClosed(db._state.dbOpenError));
            }
            if (!db._state.isBeingOpened) {
                if (!db._state.autoOpen)
                    return rejection(new exceptions.DatabaseClosed());
                db.open().catch(nop);
            }
            return db._state.dbReadyPromise.then(function () { return tempTransaction(db, mode, storeNames, fn); });
        }
        else {
            var trans = db._createTransaction(mode, storeNames, db._dbSchema);
            try {
                trans.create();
                db._state.PR1398_maxLoop = 3;
            }
            catch (ex) {
                if (ex.name === errnames.InvalidState && db.isOpen() && --db._state.PR1398_maxLoop > 0) {
                    console.warn('Dexie: Need to reopen db');
                    db.close({ disableAutoOpen: false });
                    return db.open().then(function () { return tempTransaction(db, mode, storeNames, fn); });
                }
                return rejection(ex);
            }
            return trans._promise(mode, function (resolve, reject) {
                return newScope(function () {
                    PSD.trans = trans;
                    return fn(resolve, reject, trans);
                });
            }).then(function (result) {
                if (mode === 'readwrite')
                    try {
                        trans.idbtrans.commit();
                    }
                    catch (_a) { }
                return mode === 'readonly' ? result : trans._completion.then(function () { return result; });
            });
        }
    }

    var DEXIE_VERSION = '4.2.0';
    var maxString = String.fromCharCode(65535);
    var minKey = -Infinity;
    var INVALID_KEY_ARGUMENT = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.";
    var STRING_EXPECTED = "String expected.";
    var connections = [];
    var DBNAMES_DB = '__dbnames';
    var READONLY = 'readonly';
    var READWRITE = 'readwrite';

    function combine(filter1, filter2) {
        return filter1 ?
            filter2 ?
                function () { return filter1.apply(this, arguments) && filter2.apply(this, arguments); } :
                filter1 :
            filter2;
    }

    var AnyRange = {
        type: 3 ,
        lower: -Infinity,
        lowerOpen: false,
        upper: [[]],
        upperOpen: false
    };

    function workaroundForUndefinedPrimKey(keyPath) {
        return typeof keyPath === "string" && !/\./.test(keyPath)
            ? function (obj) {
                if (obj[keyPath] === undefined && (keyPath in obj)) {
                    obj = deepClone(obj);
                    delete obj[keyPath];
                }
                return obj;
            }
            : function (obj) { return obj; };
    }

    function Entity() {
        throw exceptions.Type("Entity instances must never be new:ed. Instances are generated by the framework bypassing the constructor.");
    }

    function cmp(a, b) {
        try {
            var ta = type(a);
            var tb = type(b);
            if (ta !== tb) {
                if (ta === 'Array')
                    return 1;
                if (tb === 'Array')
                    return -1;
                if (ta === 'binary')
                    return 1;
                if (tb === 'binary')
                    return -1;
                if (ta === 'string')
                    return 1;
                if (tb === 'string')
                    return -1;
                if (ta === 'Date')
                    return 1;
                if (tb !== 'Date')
                    return NaN;
                return -1;
            }
            switch (ta) {
                case 'number':
                case 'Date':
                case 'string':
                    return a > b ? 1 : a < b ? -1 : 0;
                case 'binary': {
                    return compareUint8Arrays(getUint8Array(a), getUint8Array(b));
                }
                case 'Array':
                    return compareArrays(a, b);
            }
        }
        catch (_a) { }
        return NaN;
    }
    function compareArrays(a, b) {
        var al = a.length;
        var bl = b.length;
        var l = al < bl ? al : bl;
        for (var i = 0; i < l; ++i) {
            var res = cmp(a[i], b[i]);
            if (res !== 0)
                return res;
        }
        return al === bl ? 0 : al < bl ? -1 : 1;
    }
    function compareUint8Arrays(a, b) {
        var al = a.length;
        var bl = b.length;
        var l = al < bl ? al : bl;
        for (var i = 0; i < l; ++i) {
            if (a[i] !== b[i])
                return a[i] < b[i] ? -1 : 1;
        }
        return al === bl ? 0 : al < bl ? -1 : 1;
    }
    function type(x) {
        var t = typeof x;
        if (t !== 'object')
            return t;
        if (ArrayBuffer.isView(x))
            return 'binary';
        var tsTag = toStringTag(x);
        return tsTag === 'ArrayBuffer' ? 'binary' : tsTag;
    }
    function getUint8Array(a) {
        if (a instanceof Uint8Array)
            return a;
        if (ArrayBuffer.isView(a))
            return new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
        return new Uint8Array(a);
    }

    function builtInDeletionTrigger(table, keys, res) {
        var yProps = table.schema.yProps;
        if (!yProps)
            return res;
        if (keys && res.numFailures > 0)
            keys = keys.filter(function (_, i) { return !res.failures[i]; });
        return Promise.all(yProps.map(function (_a) {
            var updatesTable = _a.updatesTable;
            return keys
                ? table.db.table(updatesTable).where('k').anyOf(keys).delete()
                : table.db.table(updatesTable).clear();
        })).then(function () { return res; });
    }

    var Table =  (function () {
        function Table() {
        }
        Table.prototype._trans = function (mode, fn, writeLocked) {
            var trans = this._tx || PSD.trans;
            var tableName = this.name;
            var task = debug && typeof console !== 'undefined' && console.createTask && console.createTask("Dexie: ".concat(mode === 'readonly' ? 'read' : 'write', " ").concat(this.name));
            function checkTableInTransaction(resolve, reject, trans) {
                if (!trans.schema[tableName])
                    throw new exceptions.NotFound("Table " + tableName + " not part of transaction");
                return fn(trans.idbtrans, trans);
            }
            var wasRootExec = beginMicroTickScope();
            try {
                var p = trans && trans.db._novip === this.db._novip ?
                    trans === PSD.trans ?
                        trans._promise(mode, checkTableInTransaction, writeLocked) :
                        newScope(function () { return trans._promise(mode, checkTableInTransaction, writeLocked); }, { trans: trans, transless: PSD.transless || PSD }) :
                    tempTransaction(this.db, mode, [this.name], checkTableInTransaction);
                if (task) {
                    p._consoleTask = task;
                    p = p.catch(function (err) {
                        console.trace(err);
                        return rejection(err);
                    });
                }
                return p;
            }
            finally {
                if (wasRootExec)
                    endMicroTickScope();
            }
        };
        Table.prototype.get = function (keyOrCrit, cb) {
            var _this = this;
            if (keyOrCrit && keyOrCrit.constructor === Object)
                return this.where(keyOrCrit).first(cb);
            if (keyOrCrit == null)
                return rejection(new exceptions.Type("Invalid argument to Table.get()"));
            return this._trans('readonly', function (trans) {
                return _this.core.get({ trans: trans, key: keyOrCrit })
                    .then(function (res) { return _this.hook.reading.fire(res); });
            }).then(cb);
        };
        Table.prototype.where = function (indexOrCrit) {
            if (typeof indexOrCrit === 'string')
                return new this.db.WhereClause(this, indexOrCrit);
            if (isArray(indexOrCrit))
                return new this.db.WhereClause(this, "[".concat(indexOrCrit.join('+'), "]"));
            var keyPaths = keys(indexOrCrit);
            if (keyPaths.length === 1)
                return this
                    .where(keyPaths[0])
                    .equals(indexOrCrit[keyPaths[0]]);
            var compoundIndex = this.schema.indexes.concat(this.schema.primKey).filter(function (ix) {
                if (ix.compound &&
                    keyPaths.every(function (keyPath) { return ix.keyPath.indexOf(keyPath) >= 0; })) {
                    for (var i = 0; i < keyPaths.length; ++i) {
                        if (keyPaths.indexOf(ix.keyPath[i]) === -1)
                            return false;
                    }
                    return true;
                }
                return false;
            }).sort(function (a, b) { return a.keyPath.length - b.keyPath.length; })[0];
            if (compoundIndex && this.db._maxKey !== maxString) {
                var keyPathsInValidOrder = compoundIndex.keyPath.slice(0, keyPaths.length);
                return this
                    .where(keyPathsInValidOrder)
                    .equals(keyPathsInValidOrder.map(function (kp) { return indexOrCrit[kp]; }));
            }
            if (!compoundIndex && debug)
                console.warn("The query ".concat(JSON.stringify(indexOrCrit), " on ").concat(this.name, " would benefit from a ") +
                    "compound index [".concat(keyPaths.join('+'), "]"));
            var idxByName = this.schema.idxByName;
            function equals(a, b) {
                return cmp(a, b) === 0;
            }
            var _a = keyPaths.reduce(function (_a, keyPath) {
                var prevIndex = _a[0], prevFilterFn = _a[1];
                var index = idxByName[keyPath];
                var value = indexOrCrit[keyPath];
                return [
                    prevIndex || index,
                    prevIndex || !index ?
                        combine(prevFilterFn, index && index.multi ?
                            function (x) {
                                var prop = getByKeyPath(x, keyPath);
                                return isArray(prop) && prop.some(function (item) { return equals(value, item); });
                            } : function (x) { return equals(value, getByKeyPath(x, keyPath)); })
                        : prevFilterFn
                ];
            }, [null, null]), idx = _a[0], filterFunction = _a[1];
            return idx ?
                this.where(idx.name).equals(indexOrCrit[idx.keyPath])
                    .filter(filterFunction) :
                compoundIndex ?
                    this.filter(filterFunction) :
                    this.where(keyPaths).equals('');
        };
        Table.prototype.filter = function (filterFunction) {
            return this.toCollection().and(filterFunction);
        };
        Table.prototype.count = function (thenShortcut) {
            return this.toCollection().count(thenShortcut);
        };
        Table.prototype.offset = function (offset) {
            return this.toCollection().offset(offset);
        };
        Table.prototype.limit = function (numRows) {
            return this.toCollection().limit(numRows);
        };
        Table.prototype.each = function (callback) {
            return this.toCollection().each(callback);
        };
        Table.prototype.toArray = function (thenShortcut) {
            return this.toCollection().toArray(thenShortcut);
        };
        Table.prototype.toCollection = function () {
            return new this.db.Collection(new this.db.WhereClause(this));
        };
        Table.prototype.orderBy = function (index) {
            return new this.db.Collection(new this.db.WhereClause(this, isArray(index) ?
                "[".concat(index.join('+'), "]") :
                index));
        };
        Table.prototype.reverse = function () {
            return this.toCollection().reverse();
        };
        Table.prototype.mapToClass = function (constructor) {
            var _a = this, db = _a.db, tableName = _a.name;
            this.schema.mappedClass = constructor;
            if (constructor.prototype instanceof Entity) {
                constructor =  (function (_super) {
                    __extends(class_1, _super);
                    function class_1() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    Object.defineProperty(class_1.prototype, "db", {
                        get: function () { return db; },
                        enumerable: false,
                        configurable: true
                    });
                    class_1.prototype.table = function () { return tableName; };
                    return class_1;
                }(constructor));
            }
            var inheritedProps = new Set();
            for (var proto = constructor.prototype; proto; proto = getProto(proto)) {
                Object.getOwnPropertyNames(proto).forEach(function (propName) { return inheritedProps.add(propName); });
            }
            var readHook = function (obj) {
                if (!obj)
                    return obj;
                var res = Object.create(constructor.prototype);
                for (var m in obj)
                    if (!inheritedProps.has(m))
                        try {
                            res[m] = obj[m];
                        }
                        catch (_) { }
                return res;
            };
            if (this.schema.readHook) {
                this.hook.reading.unsubscribe(this.schema.readHook);
            }
            this.schema.readHook = readHook;
            this.hook("reading", readHook);
            return constructor;
        };
        Table.prototype.defineClass = function () {
            function Class(content) {
                extend(this, content);
            }
            return this.mapToClass(Class);
        };
        Table.prototype.add = function (obj, key) {
            var _this = this;
            var _a = this.schema.primKey, auto = _a.auto, keyPath = _a.keyPath;
            var objToAdd = obj;
            if (keyPath && auto) {
                objToAdd = workaroundForUndefinedPrimKey(keyPath)(obj);
            }
            return this._trans('readwrite', function (trans) {
                return _this.core.mutate({ trans: trans, type: 'add', keys: key != null ? [key] : null, values: [objToAdd] });
            }).then(function (res) { return res.numFailures ? DexiePromise.reject(res.failures[0]) : res.lastResult; })
                .then(function (lastResult) {
                if (keyPath) {
                    try {
                        setByKeyPath(obj, keyPath, lastResult);
                    }
                    catch (_) { }
                }
                return lastResult;
            });
        };
        Table.prototype.update = function (keyOrObject, modifications) {
            if (typeof keyOrObject === 'object' && !isArray(keyOrObject)) {
                var key = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);
                if (key === undefined)
                    return rejection(new exceptions.InvalidArgument("Given object does not contain its primary key"));
                return this.where(":id").equals(key).modify(modifications);
            }
            else {
                return this.where(":id").equals(keyOrObject).modify(modifications);
            }
        };
        Table.prototype.put = function (obj, key) {
            var _this = this;
            var _a = this.schema.primKey, auto = _a.auto, keyPath = _a.keyPath;
            var objToAdd = obj;
            if (keyPath && auto) {
                objToAdd = workaroundForUndefinedPrimKey(keyPath)(obj);
            }
            return this._trans('readwrite', function (trans) { return _this.core.mutate({ trans: trans, type: 'put', values: [objToAdd], keys: key != null ? [key] : null }); })
                .then(function (res) { return res.numFailures ? DexiePromise.reject(res.failures[0]) : res.lastResult; })
                .then(function (lastResult) {
                if (keyPath) {
                    try {
                        setByKeyPath(obj, keyPath, lastResult);
                    }
                    catch (_) { }
                }
                return lastResult;
            });
        };
        Table.prototype.delete = function (key) {
            var _this = this;
            return this._trans('readwrite', function (trans) { return _this.core.mutate({ trans: trans, type: 'delete', keys: [key] })
                .then(function (res) { return builtInDeletionTrigger(_this, [key], res); })
                .then(function (res) { return res.numFailures ? DexiePromise.reject(res.failures[0]) : undefined; }); });
        };
        Table.prototype.clear = function () {
            var _this = this;
            return this._trans('readwrite', function (trans) { return _this.core.mutate({ trans: trans, type: 'deleteRange', range: AnyRange })
                .then(function (res) { return builtInDeletionTrigger(_this, null, res); }); })
                .then(function (res) { return res.numFailures ? DexiePromise.reject(res.failures[0]) : undefined; });
        };
        Table.prototype.bulkGet = function (keys) {
            var _this = this;
            return this._trans('readonly', function (trans) {
                return _this.core.getMany({
                    keys: keys,
                    trans: trans
                }).then(function (result) { return result.map(function (res) { return _this.hook.reading.fire(res); }); });
            });
        };
        Table.prototype.bulkAdd = function (objects, keysOrOptions, options) {
            var _this = this;
            var keys = Array.isArray(keysOrOptions) ? keysOrOptions : undefined;
            options = options || (keys ? undefined : keysOrOptions);
            var wantResults = options ? options.allKeys : undefined;
            return this._trans('readwrite', function (trans) {
                var _a = _this.schema.primKey, auto = _a.auto, keyPath = _a.keyPath;
                if (keyPath && keys)
                    throw new exceptions.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
                if (keys && keys.length !== objects.length)
                    throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
                var numObjects = objects.length;
                var objectsToAdd = keyPath && auto ?
                    objects.map(workaroundForUndefinedPrimKey(keyPath)) :
                    objects;
                return _this.core.mutate({ trans: trans, type: 'add', keys: keys, values: objectsToAdd, wantResults: wantResults })
                    .then(function (_a) {
                    var numFailures = _a.numFailures, results = _a.results, lastResult = _a.lastResult, failures = _a.failures;
                    var result = wantResults ? results : lastResult;
                    if (numFailures === 0)
                        return result;
                    throw new BulkError("".concat(_this.name, ".bulkAdd(): ").concat(numFailures, " of ").concat(numObjects, " operations failed"), failures);
                });
            });
        };
        Table.prototype.bulkPut = function (objects, keysOrOptions, options) {
            var _this = this;
            var keys = Array.isArray(keysOrOptions) ? keysOrOptions : undefined;
            options = options || (keys ? undefined : keysOrOptions);
            var wantResults = options ? options.allKeys : undefined;
            return this._trans('readwrite', function (trans) {
                var _a = _this.schema.primKey, auto = _a.auto, keyPath = _a.keyPath;
                if (keyPath && keys)
                    throw new exceptions.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
                if (keys && keys.length !== objects.length)
                    throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
                var numObjects = objects.length;
                var objectsToPut = keyPath && auto ?
                    objects.map(workaroundForUndefinedPrimKey(keyPath)) :
                    objects;
                return _this.core.mutate({ trans: trans, type: 'put', keys: keys, values: objectsToPut, wantResults: wantResults })
                    .then(function (_a) {
                    var numFailures = _a.numFailures, results = _a.results, lastResult = _a.lastResult, failures = _a.failures;
                    var result = wantResults ? results : lastResult;
                    if (numFailures === 0)
                        return result;
                    throw new BulkError("".concat(_this.name, ".bulkPut(): ").concat(numFailures, " of ").concat(numObjects, " operations failed"), failures);
                });
            });
        };
        Table.prototype.bulkUpdate = function (keysAndChanges) {
            var _this = this;
            var coreTable = this.core;
            var keys = keysAndChanges.map(function (entry) { return entry.key; });
            var changeSpecs = keysAndChanges.map(function (entry) { return entry.changes; });
            var offsetMap = [];
            return this._trans('readwrite', function (trans) {
                return coreTable.getMany({ trans: trans, keys: keys, cache: 'clone' }).then(function (objs) {
                    var resultKeys = [];
                    var resultObjs = [];
                    keysAndChanges.forEach(function (_a, idx) {
                        var key = _a.key, changes = _a.changes;
                        var obj = objs[idx];
                        if (obj) {
                            for (var _i = 0, _b = Object.keys(changes); _i < _b.length; _i++) {
                                var keyPath = _b[_i];
                                var value = changes[keyPath];
                                if (keyPath === _this.schema.primKey.keyPath) {
                                    if (cmp(value, key) !== 0) {
                                        throw new exceptions.Constraint("Cannot update primary key in bulkUpdate()");
                                    }
                                }
                                else {
                                    setByKeyPath(obj, keyPath, value);
                                }
                            }
                            offsetMap.push(idx);
                            resultKeys.push(key);
                            resultObjs.push(obj);
                        }
                    });
                    var numEntries = resultKeys.length;
                    return coreTable
                        .mutate({
                        trans: trans,
                        type: 'put',
                        keys: resultKeys,
                        values: resultObjs,
                        updates: {
                            keys: keys,
                            changeSpecs: changeSpecs
                        }
                    })
                        .then(function (_a) {
                        var numFailures = _a.numFailures, failures = _a.failures;
                        if (numFailures === 0)
                            return numEntries;
                        for (var _i = 0, _b = Object.keys(failures); _i < _b.length; _i++) {
                            var offset = _b[_i];
                            var mappedOffset = offsetMap[Number(offset)];
                            if (mappedOffset != null) {
                                var failure = failures[offset];
                                delete failures[offset];
                                failures[mappedOffset] = failure;
                            }
                        }
                        throw new BulkError("".concat(_this.name, ".bulkUpdate(): ").concat(numFailures, " of ").concat(numEntries, " operations failed"), failures);
                    });
                });
            });
        };
        Table.prototype.bulkDelete = function (keys) {
            var _this = this;
            var numKeys = keys.length;
            return this._trans('readwrite', function (trans) {
                return _this.core.mutate({ trans: trans, type: 'delete', keys: keys })
                    .then(function (res) { return builtInDeletionTrigger(_this, keys, res); });
            }).then(function (_a) {
                var numFailures = _a.numFailures, lastResult = _a.lastResult, failures = _a.failures;
                if (numFailures === 0)
                    return lastResult;
                throw new BulkError("".concat(_this.name, ".bulkDelete(): ").concat(numFailures, " of ").concat(numKeys, " operations failed"), failures);
            });
        };
        return Table;
    }());

    function Events(ctx) {
        var evs = {};
        var rv = function (eventName, subscriber) {
            if (subscriber) {
                var i = arguments.length, args = new Array(i - 1);
                while (--i)
                    args[i - 1] = arguments[i];
                evs[eventName].subscribe.apply(null, args);
                return ctx;
            }
            else if (typeof (eventName) === 'string') {
                return evs[eventName];
            }
        };
        rv.addEventType = add;
        for (var i = 1, l = arguments.length; i < l; ++i) {
            add(arguments[i]);
        }
        return rv;
        function add(eventName, chainFunction, defaultFunction) {
            if (typeof eventName === 'object')
                return addConfiguredEvents(eventName);
            if (!chainFunction)
                chainFunction = reverseStoppableEventChain;
            if (!defaultFunction)
                defaultFunction = nop;
            var context = {
                subscribers: [],
                fire: defaultFunction,
                subscribe: function (cb) {
                    if (context.subscribers.indexOf(cb) === -1) {
                        context.subscribers.push(cb);
                        context.fire = chainFunction(context.fire, cb);
                    }
                },
                unsubscribe: function (cb) {
                    context.subscribers = context.subscribers.filter(function (fn) { return fn !== cb; });
                    context.fire = context.subscribers.reduce(chainFunction, defaultFunction);
                }
            };
            evs[eventName] = rv[eventName] = context;
            return context;
        }
        function addConfiguredEvents(cfg) {
            keys(cfg).forEach(function (eventName) {
                var args = cfg[eventName];
                if (isArray(args)) {
                    add(eventName, cfg[eventName][0], cfg[eventName][1]);
                }
                else if (args === 'asap') {
                    var context = add(eventName, mirror, function fire() {
                        var i = arguments.length, args = new Array(i);
                        while (i--)
                            args[i] = arguments[i];
                        context.subscribers.forEach(function (fn) {
                            asap$1(function fireEvent() {
                                fn.apply(null, args);
                            });
                        });
                    });
                }
                else
                    throw new exceptions.InvalidArgument("Invalid event config");
            });
        }
    }

    function makeClassConstructor(prototype, constructor) {
        derive(constructor).from({ prototype: prototype });
        return constructor;
    }

    function createTableConstructor(db) {
        return makeClassConstructor(Table.prototype, function Table(name, tableSchema, trans) {
            this.db = db;
            this._tx = trans;
            this.name = name;
            this.schema = tableSchema;
            this.hook = db._allTables[name] ? db._allTables[name].hook : Events(null, {
                "creating": [hookCreatingChain, nop],
                "reading": [pureFunctionChain, mirror],
                "updating": [hookUpdatingChain, nop],
                "deleting": [hookDeletingChain, nop]
            });
        });
    }

    function isPlainKeyRange(ctx, ignoreLimitFilter) {
        return !(ctx.filter || ctx.algorithm || ctx.or) &&
            (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);
    }
    function addFilter(ctx, fn) {
        ctx.filter = combine(ctx.filter, fn);
    }
    function addReplayFilter(ctx, factory, isLimitFilter) {
        var curr = ctx.replayFilter;
        ctx.replayFilter = curr ? function () { return combine(curr(), factory()); } : factory;
        ctx.justLimit = isLimitFilter && !curr;
    }
    function addMatchFilter(ctx, fn) {
        ctx.isMatch = combine(ctx.isMatch, fn);
    }
    function getIndexOrStore(ctx, coreSchema) {
        if (ctx.isPrimKey)
            return coreSchema.primaryKey;
        var index = coreSchema.getIndexByKeyPath(ctx.index);
        if (!index)
            throw new exceptions.Schema("KeyPath " + ctx.index + " on object store " + coreSchema.name + " is not indexed");
        return index;
    }
    function openCursor(ctx, coreTable, trans) {
        var index = getIndexOrStore(ctx, coreTable.schema);
        return coreTable.openCursor({
            trans: trans,
            values: !ctx.keysOnly,
            reverse: ctx.dir === 'prev',
            unique: !!ctx.unique,
            query: {
                index: index,
                range: ctx.range
            }
        });
    }
    function iter(ctx, fn, coreTrans, coreTable) {
        var filter = ctx.replayFilter ? combine(ctx.filter, ctx.replayFilter()) : ctx.filter;
        if (!ctx.or) {
            return iterate(openCursor(ctx, coreTable, coreTrans), combine(ctx.algorithm, filter), fn, !ctx.keysOnly && ctx.valueMapper);
        }
        else {
            var set_1 = {};
            var union = function (item, cursor, advance) {
                if (!filter || filter(cursor, advance, function (result) { return cursor.stop(result); }, function (err) { return cursor.fail(err); })) {
                    var primaryKey = cursor.primaryKey;
                    var key = '' + primaryKey;
                    if (key === '[object ArrayBuffer]')
                        key = '' + new Uint8Array(primaryKey);
                    if (!hasOwn(set_1, key)) {
                        set_1[key] = true;
                        fn(item, cursor, advance);
                    }
                }
            };
            return Promise.all([
                ctx.or._iterate(union, coreTrans),
                iterate(openCursor(ctx, coreTable, coreTrans), ctx.algorithm, union, !ctx.keysOnly && ctx.valueMapper)
            ]);
        }
    }
    function iterate(cursorPromise, filter, fn, valueMapper) {
        var mappedFn = valueMapper ? function (x, c, a) { return fn(valueMapper(x), c, a); } : fn;
        var wrappedFn = wrap(mappedFn);
        return cursorPromise.then(function (cursor) {
            if (cursor) {
                return cursor.start(function () {
                    var c = function () { return cursor.continue(); };
                    if (!filter || filter(cursor, function (advancer) { return c = advancer; }, function (val) { cursor.stop(val); c = nop; }, function (e) { cursor.fail(e); c = nop; }))
                        wrappedFn(cursor.value, cursor, function (advancer) { return c = advancer; });
                    c();
                });
            }
        });
    }

    var PropModification =  (function () {
        function PropModification(spec) {
            this["@@propmod"] = spec;
        }
        PropModification.prototype.execute = function (value) {
            var _a;
            var spec = this["@@propmod"];
            if (spec.add !== undefined) {
                var term = spec.add;
                if (isArray(term)) {
                    return __spreadArray(__spreadArray([], (isArray(value) ? value : []), true), term, true).sort();
                }
                if (typeof term === 'number')
                    return (Number(value) || 0) + term;
                if (typeof term === 'bigint') {
                    try {
                        return BigInt(value) + term;
                    }
                    catch (_b) {
                        return BigInt(0) + term;
                    }
                }
                throw new TypeError("Invalid term ".concat(term));
            }
            if (spec.remove !== undefined) {
                var subtrahend_1 = spec.remove;
                if (isArray(subtrahend_1)) {
                    return isArray(value) ? value.filter(function (item) { return !subtrahend_1.includes(item); }).sort() : [];
                }
                if (typeof subtrahend_1 === 'number')
                    return Number(value) - subtrahend_1;
                if (typeof subtrahend_1 === 'bigint') {
                    try {
                        return BigInt(value) - subtrahend_1;
                    }
                    catch (_c) {
                        return BigInt(0) - subtrahend_1;
                    }
                }
                throw new TypeError("Invalid subtrahend ".concat(subtrahend_1));
            }
            var prefixToReplace = (_a = spec.replacePrefix) === null || _a === void 0 ? void 0 : _a[0];
            if (prefixToReplace && typeof value === 'string' && value.startsWith(prefixToReplace)) {
                return spec.replacePrefix[1] + value.substring(prefixToReplace.length);
            }
            return value;
        };
        return PropModification;
    }());

    var Collection =  (function () {
        function Collection() {
        }
        Collection.prototype._read = function (fn, cb) {
            var ctx = this._ctx;
            return ctx.error ?
                ctx.table._trans(null, rejection.bind(null, ctx.error)) :
                ctx.table._trans('readonly', fn).then(cb);
        };
        Collection.prototype._write = function (fn) {
            var ctx = this._ctx;
            return ctx.error ?
                ctx.table._trans(null, rejection.bind(null, ctx.error)) :
                ctx.table._trans('readwrite', fn, "locked");
        };
        Collection.prototype._addAlgorithm = function (fn) {
            var ctx = this._ctx;
            ctx.algorithm = combine(ctx.algorithm, fn);
        };
        Collection.prototype._iterate = function (fn, coreTrans) {
            return iter(this._ctx, fn, coreTrans, this._ctx.table.core);
        };
        Collection.prototype.clone = function (props) {
            var rv = Object.create(this.constructor.prototype), ctx = Object.create(this._ctx);
            if (props)
                extend(ctx, props);
            rv._ctx = ctx;
            return rv;
        };
        Collection.prototype.raw = function () {
            this._ctx.valueMapper = null;
            return this;
        };
        Collection.prototype.each = function (fn) {
            var ctx = this._ctx;
            return this._read(function (trans) { return iter(ctx, fn, trans, ctx.table.core); });
        };
        Collection.prototype.count = function (cb) {
            var _this = this;
            return this._read(function (trans) {
                var ctx = _this._ctx;
                var coreTable = ctx.table.core;
                if (isPlainKeyRange(ctx, true)) {
                    return coreTable.count({
                        trans: trans,
                        query: {
                            index: getIndexOrStore(ctx, coreTable.schema),
                            range: ctx.range
                        }
                    }).then(function (count) { return Math.min(count, ctx.limit); });
                }
                else {
                    var count = 0;
                    return iter(ctx, function () { ++count; return false; }, trans, coreTable)
                        .then(function () { return count; });
                }
            }).then(cb);
        };
        Collection.prototype.sortBy = function (keyPath, cb) {
            var parts = keyPath.split('.').reverse(), lastPart = parts[0], lastIndex = parts.length - 1;
            function getval(obj, i) {
                if (i)
                    return getval(obj[parts[i]], i - 1);
                return obj[lastPart];
            }
            var order = this._ctx.dir === "next" ? 1 : -1;
            function sorter(a, b) {
                var aVal = getval(a, lastIndex), bVal = getval(b, lastIndex);
                return cmp(aVal, bVal) * order;
            }
            return this.toArray(function (a) {
                return a.sort(sorter);
            }).then(cb);
        };
        Collection.prototype.toArray = function (cb) {
            var _this = this;
            return this._read(function (trans) {
                var ctx = _this._ctx;
                if (ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                    var valueMapper_1 = ctx.valueMapper;
                    var index = getIndexOrStore(ctx, ctx.table.core.schema);
                    return ctx.table.core.query({
                        trans: trans,
                        limit: ctx.limit,
                        values: true,
                        query: {
                            index: index,
                            range: ctx.range
                        }
                    }).then(function (_a) {
                        var result = _a.result;
                        return valueMapper_1 ? result.map(valueMapper_1) : result;
                    });
                }
                else {
                    var a_1 = [];
                    return iter(ctx, function (item) { return a_1.push(item); }, trans, ctx.table.core).then(function () { return a_1; });
                }
            }, cb);
        };
        Collection.prototype.offset = function (offset) {
            var ctx = this._ctx;
            if (offset <= 0)
                return this;
            ctx.offset += offset;
            if (isPlainKeyRange(ctx)) {
                addReplayFilter(ctx, function () {
                    var offsetLeft = offset;
                    return function (cursor, advance) {
                        if (offsetLeft === 0)
                            return true;
                        if (offsetLeft === 1) {
                            --offsetLeft;
                            return false;
                        }
                        advance(function () {
                            cursor.advance(offsetLeft);
                            offsetLeft = 0;
                        });
                        return false;
                    };
                });
            }
            else {
                addReplayFilter(ctx, function () {
                    var offsetLeft = offset;
                    return function () { return (--offsetLeft < 0); };
                });
            }
            return this;
        };
        Collection.prototype.limit = function (numRows) {
            this._ctx.limit = Math.min(this._ctx.limit, numRows);
            addReplayFilter(this._ctx, function () {
                var rowsLeft = numRows;
                return function (cursor, advance, resolve) {
                    if (--rowsLeft <= 0)
                        advance(resolve);
                    return rowsLeft >= 0;
                };
            }, true);
            return this;
        };
        Collection.prototype.until = function (filterFunction, bIncludeStopEntry) {
            addFilter(this._ctx, function (cursor, advance, resolve) {
                if (filterFunction(cursor.value)) {
                    advance(resolve);
                    return bIncludeStopEntry;
                }
                else {
                    return true;
                }
            });
            return this;
        };
        Collection.prototype.first = function (cb) {
            return this.limit(1).toArray(function (a) { return a[0]; }).then(cb);
        };
        Collection.prototype.last = function (cb) {
            return this.reverse().first(cb);
        };
        Collection.prototype.filter = function (filterFunction) {
            addFilter(this._ctx, function (cursor) {
                return filterFunction(cursor.value);
            });
            addMatchFilter(this._ctx, filterFunction);
            return this;
        };
        Collection.prototype.and = function (filter) {
            return this.filter(filter);
        };
        Collection.prototype.or = function (indexName) {
            return new this.db.WhereClause(this._ctx.table, indexName, this);
        };
        Collection.prototype.reverse = function () {
            this._ctx.dir = (this._ctx.dir === "prev" ? "next" : "prev");
            if (this._ondirectionchange)
                this._ondirectionchange(this._ctx.dir);
            return this;
        };
        Collection.prototype.desc = function () {
            return this.reverse();
        };
        Collection.prototype.eachKey = function (cb) {
            var ctx = this._ctx;
            ctx.keysOnly = !ctx.isMatch;
            return this.each(function (val, cursor) { cb(cursor.key, cursor); });
        };
        Collection.prototype.eachUniqueKey = function (cb) {
            this._ctx.unique = "unique";
            return this.eachKey(cb);
        };
        Collection.prototype.eachPrimaryKey = function (cb) {
            var ctx = this._ctx;
            ctx.keysOnly = !ctx.isMatch;
            return this.each(function (val, cursor) { cb(cursor.primaryKey, cursor); });
        };
        Collection.prototype.keys = function (cb) {
            var ctx = this._ctx;
            ctx.keysOnly = !ctx.isMatch;
            var a = [];
            return this.each(function (item, cursor) {
                a.push(cursor.key);
            }).then(function () {
                return a;
            }).then(cb);
        };
        Collection.prototype.primaryKeys = function (cb) {
            var ctx = this._ctx;
            if (ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                return this._read(function (trans) {
                    var index = getIndexOrStore(ctx, ctx.table.core.schema);
                    return ctx.table.core.query({
                        trans: trans,
                        values: false,
                        limit: ctx.limit,
                        query: {
                            index: index,
                            range: ctx.range
                        }
                    });
                }).then(function (_a) {
                    var result = _a.result;
                    return result;
                }).then(cb);
            }
            ctx.keysOnly = !ctx.isMatch;
            var a = [];
            return this.each(function (item, cursor) {
                a.push(cursor.primaryKey);
            }).then(function () {
                return a;
            }).then(cb);
        };
        Collection.prototype.uniqueKeys = function (cb) {
            this._ctx.unique = "unique";
            return this.keys(cb);
        };
        Collection.prototype.firstKey = function (cb) {
            return this.limit(1).keys(function (a) { return a[0]; }).then(cb);
        };
        Collection.prototype.lastKey = function (cb) {
            return this.reverse().firstKey(cb);
        };
        Collection.prototype.distinct = function () {
            var ctx = this._ctx, idx = ctx.index && ctx.table.schema.idxByName[ctx.index];
            if (!idx || !idx.multi)
                return this;
            var set = {};
            addFilter(this._ctx, function (cursor) {
                var strKey = cursor.primaryKey.toString();
                var found = hasOwn(set, strKey);
                set[strKey] = true;
                return !found;
            });
            return this;
        };
        Collection.prototype.modify = function (changes) {
            var _this = this;
            var ctx = this._ctx;
            return this._write(function (trans) {
                var modifyer;
                if (typeof changes === 'function') {
                    modifyer = changes;
                }
                else {
                    var keyPaths = keys(changes);
                    var numKeys = keyPaths.length;
                    modifyer = function (item) {
                        var anythingModified = false;
                        for (var i = 0; i < numKeys; ++i) {
                            var keyPath = keyPaths[i];
                            var val = changes[keyPath];
                            var origVal = getByKeyPath(item, keyPath);
                            if (val instanceof PropModification) {
                                setByKeyPath(item, keyPath, val.execute(origVal));
                                anythingModified = true;
                            }
                            else if (origVal !== val) {
                                setByKeyPath(item, keyPath, val);
                                anythingModified = true;
                            }
                        }
                        return anythingModified;
                    };
                }
                var coreTable = ctx.table.core;
                var _a = coreTable.schema.primaryKey, outbound = _a.outbound, extractKey = _a.extractKey;
                var limit = 200;
                var modifyChunkSize = _this.db._options.modifyChunkSize;
                if (modifyChunkSize) {
                    if (typeof modifyChunkSize == 'object') {
                        limit = modifyChunkSize[coreTable.name] || modifyChunkSize['*'] || 200;
                    }
                    else {
                        limit = modifyChunkSize;
                    }
                }
                var totalFailures = [];
                var successCount = 0;
                var failedKeys = [];
                var applyMutateResult = function (expectedCount, res) {
                    var failures = res.failures, numFailures = res.numFailures;
                    successCount += expectedCount - numFailures;
                    for (var _i = 0, _a = keys(failures); _i < _a.length; _i++) {
                        var pos = _a[_i];
                        totalFailures.push(failures[pos]);
                    }
                };
                var isUnconditionalDelete = changes === deleteCallback;
                return _this.clone().primaryKeys().then(function (keys) {
                    var criteria = isPlainKeyRange(ctx) &&
                        ctx.limit === Infinity &&
                        (typeof changes !== 'function' || isUnconditionalDelete) && {
                        index: ctx.index,
                        range: ctx.range
                    };
                    var nextChunk = function (offset) {
                        var count = Math.min(limit, keys.length - offset);
                        var keysInChunk = keys.slice(offset, offset + count);
                        return (isUnconditionalDelete ? Promise.resolve([]) : coreTable.getMany({
                            trans: trans,
                            keys: keysInChunk,
                            cache: "immutable"
                        })).then(function (values) {
                            var addValues = [];
                            var putValues = [];
                            var putKeys = outbound ? [] : null;
                            var deleteKeys = isUnconditionalDelete ? keysInChunk : [];
                            if (!isUnconditionalDelete)
                                for (var i = 0; i < count; ++i) {
                                    var origValue = values[i];
                                    var ctx_1 = {
                                        value: deepClone(origValue),
                                        primKey: keys[offset + i]
                                    };
                                    if (modifyer.call(ctx_1, ctx_1.value, ctx_1) !== false) {
                                        if (ctx_1.value == null) {
                                            deleteKeys.push(keys[offset + i]);
                                        }
                                        else if (!outbound && cmp(extractKey(origValue), extractKey(ctx_1.value)) !== 0) {
                                            deleteKeys.push(keys[offset + i]);
                                            addValues.push(ctx_1.value);
                                        }
                                        else {
                                            putValues.push(ctx_1.value);
                                            if (outbound)
                                                putKeys.push(keys[offset + i]);
                                        }
                                    }
                                }
                            return Promise.resolve(addValues.length > 0 &&
                                coreTable.mutate({ trans: trans, type: 'add', values: addValues })
                                    .then(function (res) {
                                    for (var pos in res.failures) {
                                        deleteKeys.splice(parseInt(pos), 1);
                                    }
                                    applyMutateResult(addValues.length, res);
                                })).then(function () { return (putValues.length > 0 || (criteria && typeof changes === 'object')) &&
                                coreTable.mutate({
                                    trans: trans,
                                    type: 'put',
                                    keys: putKeys,
                                    values: putValues,
                                    criteria: criteria,
                                    changeSpec: typeof changes !== 'function'
                                        && changes,
                                    isAdditionalChunk: offset > 0
                                }).then(function (res) { return applyMutateResult(putValues.length, res); }); }).then(function () { return (deleteKeys.length > 0 || (criteria && isUnconditionalDelete)) &&
                                coreTable.mutate({
                                    trans: trans,
                                    type: 'delete',
                                    keys: deleteKeys,
                                    criteria: criteria,
                                    isAdditionalChunk: offset > 0
                                }).then(function (res) { return builtInDeletionTrigger(ctx.table, deleteKeys, res); })
                                    .then(function (res) { return applyMutateResult(deleteKeys.length, res); }); }).then(function () {
                                return keys.length > offset + count && nextChunk(offset + limit);
                            });
                        });
                    };
                    return nextChunk(0).then(function () {
                        if (totalFailures.length > 0)
                            throw new ModifyError("Error modifying one or more objects", totalFailures, successCount, failedKeys);
                        return keys.length;
                    });
                });
            });
        };
        Collection.prototype.delete = function () {
            var ctx = this._ctx, range = ctx.range;
            if (isPlainKeyRange(ctx) &&
                !ctx.table.schema.yProps &&
                (ctx.isPrimKey || range.type === 3 ))
             {
                return this._write(function (trans) {
                    var primaryKey = ctx.table.core.schema.primaryKey;
                    var coreRange = range;
                    return ctx.table.core.count({ trans: trans, query: { index: primaryKey, range: coreRange } }).then(function (count) {
                        return ctx.table.core.mutate({ trans: trans, type: 'deleteRange', range: coreRange })
                            .then(function (_a) {
                            var failures = _a.failures, numFailures = _a.numFailures;
                            if (numFailures)
                                throw new ModifyError("Could not delete some values", Object.keys(failures).map(function (pos) { return failures[pos]; }), count - numFailures);
                            return count - numFailures;
                        });
                    });
                });
            }
            return this.modify(deleteCallback);
        };
        return Collection;
    }());
    var deleteCallback = function (value, ctx) { return ctx.value = null; };

    function createCollectionConstructor(db) {
        return makeClassConstructor(Collection.prototype, function Collection(whereClause, keyRangeGenerator) {
            this.db = db;
            var keyRange = AnyRange, error = null;
            if (keyRangeGenerator)
                try {
                    keyRange = keyRangeGenerator();
                }
                catch (ex) {
                    error = ex;
                }
            var whereCtx = whereClause._ctx;
            var table = whereCtx.table;
            var readingHook = table.hook.reading.fire;
            this._ctx = {
                table: table,
                index: whereCtx.index,
                isPrimKey: (!whereCtx.index || (table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name)),
                range: keyRange,
                keysOnly: false,
                dir: "next",
                unique: "",
                algorithm: null,
                filter: null,
                replayFilter: null,
                justLimit: true,
                isMatch: null,
                offset: 0,
                limit: Infinity,
                error: error,
                or: whereCtx.or,
                valueMapper: readingHook !== mirror ? readingHook : null
            };
        });
    }

    function simpleCompare(a, b) {
        return a < b ? -1 : a === b ? 0 : 1;
    }
    function simpleCompareReverse(a, b) {
        return a > b ? -1 : a === b ? 0 : 1;
    }

    function fail(collectionOrWhereClause, err, T) {
        var collection = collectionOrWhereClause instanceof WhereClause ?
            new collectionOrWhereClause.Collection(collectionOrWhereClause) :
            collectionOrWhereClause;
        collection._ctx.error = T ? new T(err) : new TypeError(err);
        return collection;
    }
    function emptyCollection(whereClause) {
        return new whereClause.Collection(whereClause, function () { return rangeEqual(""); }).limit(0);
    }
    function upperFactory(dir) {
        return dir === "next" ?
            function (s) { return s.toUpperCase(); } :
            function (s) { return s.toLowerCase(); };
    }
    function lowerFactory(dir) {
        return dir === "next" ?
            function (s) { return s.toLowerCase(); } :
            function (s) { return s.toUpperCase(); };
    }
    function nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp, dir) {
        var length = Math.min(key.length, lowerNeedle.length);
        var llp = -1;
        for (var i = 0; i < length; ++i) {
            var lwrKeyChar = lowerKey[i];
            if (lwrKeyChar !== lowerNeedle[i]) {
                if (cmp(key[i], upperNeedle[i]) < 0)
                    return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);
                if (cmp(key[i], lowerNeedle[i]) < 0)
                    return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);
                if (llp >= 0)
                    return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);
                return null;
            }
            if (cmp(key[i], lwrKeyChar) < 0)
                llp = i;
        }
        if (length < lowerNeedle.length && dir === "next")
            return key + upperNeedle.substr(key.length);
        if (length < key.length && dir === "prev")
            return key.substr(0, upperNeedle.length);
        return (llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1));
    }
    function addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {
        var upper, lower, compare, upperNeedles, lowerNeedles, direction, nextKeySuffix, needlesLen = needles.length;
        if (!needles.every(function (s) { return typeof s === 'string'; })) {
            return fail(whereClause, STRING_EXPECTED);
        }
        function initDirection(dir) {
            upper = upperFactory(dir);
            lower = lowerFactory(dir);
            compare = (dir === "next" ? simpleCompare : simpleCompareReverse);
            var needleBounds = needles.map(function (needle) {
                return { lower: lower(needle), upper: upper(needle) };
            }).sort(function (a, b) {
                return compare(a.lower, b.lower);
            });
            upperNeedles = needleBounds.map(function (nb) { return nb.upper; });
            lowerNeedles = needleBounds.map(function (nb) { return nb.lower; });
            direction = dir;
            nextKeySuffix = (dir === "next" ? "" : suffix);
        }
        initDirection("next");
        var c = new whereClause.Collection(whereClause, function () { return createRange(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix); });
        c._ondirectionchange = function (direction) {
            initDirection(direction);
        };
        var firstPossibleNeedle = 0;
        c._addAlgorithm(function (cursor, advance, resolve) {
            var key = cursor.key;
            if (typeof key !== 'string')
                return false;
            var lowerKey = lower(key);
            if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) {
                return true;
            }
            else {
                var lowestPossibleCasing = null;
                for (var i = firstPossibleNeedle; i < needlesLen; ++i) {
                    var casing = nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);
                    if (casing === null && lowestPossibleCasing === null)
                        firstPossibleNeedle = i + 1;
                    else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) {
                        lowestPossibleCasing = casing;
                    }
                }
                if (lowestPossibleCasing !== null) {
                    advance(function () { cursor.continue(lowestPossibleCasing + nextKeySuffix); });
                }
                else {
                    advance(resolve);
                }
                return false;
            }
        });
        return c;
    }
    function createRange(lower, upper, lowerOpen, upperOpen) {
        return {
            type: 2 ,
            lower: lower,
            upper: upper,
            lowerOpen: lowerOpen,
            upperOpen: upperOpen
        };
    }
    function rangeEqual(value) {
        return {
            type: 1 ,
            lower: value,
            upper: value
        };
    }

    var WhereClause =  (function () {
        function WhereClause() {
        }
        Object.defineProperty(WhereClause.prototype, "Collection", {
            get: function () {
                return this._ctx.table.db.Collection;
            },
            enumerable: false,
            configurable: true
        });
        WhereClause.prototype.between = function (lower, upper, includeLower, includeUpper) {
            includeLower = includeLower !== false;
            includeUpper = includeUpper === true;
            try {
                if ((this._cmp(lower, upper) > 0) ||
                    (this._cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper)))
                    return emptyCollection(this);
                return new this.Collection(this, function () { return createRange(lower, upper, !includeLower, !includeUpper); });
            }
            catch (e) {
                return fail(this, INVALID_KEY_ARGUMENT);
            }
        };
        WhereClause.prototype.equals = function (value) {
            if (value == null)
                return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, function () { return rangeEqual(value); });
        };
        WhereClause.prototype.above = function (value) {
            if (value == null)
                return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, function () { return createRange(value, undefined, true); });
        };
        WhereClause.prototype.aboveOrEqual = function (value) {
            if (value == null)
                return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, function () { return createRange(value, undefined, false); });
        };
        WhereClause.prototype.below = function (value) {
            if (value == null)
                return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, function () { return createRange(undefined, value, false, true); });
        };
        WhereClause.prototype.belowOrEqual = function (value) {
            if (value == null)
                return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, function () { return createRange(undefined, value); });
        };
        WhereClause.prototype.startsWith = function (str) {
            if (typeof str !== 'string')
                return fail(this, STRING_EXPECTED);
            return this.between(str, str + maxString, true, true);
        };
        WhereClause.prototype.startsWithIgnoreCase = function (str) {
            if (str === "")
                return this.startsWith(str);
            return addIgnoreCaseAlgorithm(this, function (x, a) { return x.indexOf(a[0]) === 0; }, [str], maxString);
        };
        WhereClause.prototype.equalsIgnoreCase = function (str) {
            return addIgnoreCaseAlgorithm(this, function (x, a) { return x === a[0]; }, [str], "");
        };
        WhereClause.prototype.anyOfIgnoreCase = function () {
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            if (set.length === 0)
                return emptyCollection(this);
            return addIgnoreCaseAlgorithm(this, function (x, a) { return a.indexOf(x) !== -1; }, set, "");
        };
        WhereClause.prototype.startsWithAnyOfIgnoreCase = function () {
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            if (set.length === 0)
                return emptyCollection(this);
            return addIgnoreCaseAlgorithm(this, function (x, a) { return a.some(function (n) { return x.indexOf(n) === 0; }); }, set, maxString);
        };
        WhereClause.prototype.anyOf = function () {
            var _this = this;
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            var compare = this._cmp;
            try {
                set.sort(compare);
            }
            catch (e) {
                return fail(this, INVALID_KEY_ARGUMENT);
            }
            if (set.length === 0)
                return emptyCollection(this);
            var c = new this.Collection(this, function () { return createRange(set[0], set[set.length - 1]); });
            c._ondirectionchange = function (direction) {
                compare = (direction === "next" ?
                    _this._ascending :
                    _this._descending);
                set.sort(compare);
            };
            var i = 0;
            c._addAlgorithm(function (cursor, advance, resolve) {
                var key = cursor.key;
                while (compare(key, set[i]) > 0) {
                    ++i;
                    if (i === set.length) {
                        advance(resolve);
                        return false;
                    }
                }
                if (compare(key, set[i]) === 0) {
                    return true;
                }
                else {
                    advance(function () { cursor.continue(set[i]); });
                    return false;
                }
            });
            return c;
        };
        WhereClause.prototype.notEqual = function (value) {
            return this.inAnyRange([[minKey, value], [value, this.db._maxKey]], { includeLowers: false, includeUppers: false });
        };
        WhereClause.prototype.noneOf = function () {
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            if (set.length === 0)
                return new this.Collection(this);
            try {
                set.sort(this._ascending);
            }
            catch (e) {
                return fail(this, INVALID_KEY_ARGUMENT);
            }
            var ranges = set.reduce(function (res, val) { return res ?
                res.concat([[res[res.length - 1][1], val]]) :
                [[minKey, val]]; }, null);
            ranges.push([set[set.length - 1], this.db._maxKey]);
            return this.inAnyRange(ranges, { includeLowers: false, includeUppers: false });
        };
        WhereClause.prototype.inAnyRange = function (ranges, options) {
            var _this = this;
            var cmp = this._cmp, ascending = this._ascending, descending = this._descending, min = this._min, max = this._max;
            if (ranges.length === 0)
                return emptyCollection(this);
            if (!ranges.every(function (range) {
                return range[0] !== undefined &&
                    range[1] !== undefined &&
                    ascending(range[0], range[1]) <= 0;
            })) {
                return fail(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", exceptions.InvalidArgument);
            }
            var includeLowers = !options || options.includeLowers !== false;
            var includeUppers = options && options.includeUppers === true;
            function addRange(ranges, newRange) {
                var i = 0, l = ranges.length;
                for (; i < l; ++i) {
                    var range = ranges[i];
                    if (cmp(newRange[0], range[1]) < 0 && cmp(newRange[1], range[0]) > 0) {
                        range[0] = min(range[0], newRange[0]);
                        range[1] = max(range[1], newRange[1]);
                        break;
                    }
                }
                if (i === l)
                    ranges.push(newRange);
                return ranges;
            }
            var sortDirection = ascending;
            function rangeSorter(a, b) { return sortDirection(a[0], b[0]); }
            var set;
            try {
                set = ranges.reduce(addRange, []);
                set.sort(rangeSorter);
            }
            catch (ex) {
                return fail(this, INVALID_KEY_ARGUMENT);
            }
            var rangePos = 0;
            var keyIsBeyondCurrentEntry = includeUppers ?
                function (key) { return ascending(key, set[rangePos][1]) > 0; } :
                function (key) { return ascending(key, set[rangePos][1]) >= 0; };
            var keyIsBeforeCurrentEntry = includeLowers ?
                function (key) { return descending(key, set[rangePos][0]) > 0; } :
                function (key) { return descending(key, set[rangePos][0]) >= 0; };
            function keyWithinCurrentRange(key) {
                return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);
            }
            var checkKey = keyIsBeyondCurrentEntry;
            var c = new this.Collection(this, function () { return createRange(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers); });
            c._ondirectionchange = function (direction) {
                if (direction === "next") {
                    checkKey = keyIsBeyondCurrentEntry;
                    sortDirection = ascending;
                }
                else {
                    checkKey = keyIsBeforeCurrentEntry;
                    sortDirection = descending;
                }
                set.sort(rangeSorter);
            };
            c._addAlgorithm(function (cursor, advance, resolve) {
                var key = cursor.key;
                while (checkKey(key)) {
                    ++rangePos;
                    if (rangePos === set.length) {
                        advance(resolve);
                        return false;
                    }
                }
                if (keyWithinCurrentRange(key)) {
                    return true;
                }
                else if (_this._cmp(key, set[rangePos][1]) === 0 || _this._cmp(key, set[rangePos][0]) === 0) {
                    return false;
                }
                else {
                    advance(function () {
                        if (sortDirection === ascending)
                            cursor.continue(set[rangePos][0]);
                        else
                            cursor.continue(set[rangePos][1]);
                    });
                    return false;
                }
            });
            return c;
        };
        WhereClause.prototype.startsWithAnyOf = function () {
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            if (!set.every(function (s) { return typeof s === 'string'; })) {
                return fail(this, "startsWithAnyOf() only works with strings");
            }
            if (set.length === 0)
                return emptyCollection(this);
            return this.inAnyRange(set.map(function (str) { return [str, str + maxString]; }));
        };
        return WhereClause;
    }());

    function createWhereClauseConstructor(db) {
        return makeClassConstructor(WhereClause.prototype, function WhereClause(table, index, orCollection) {
            this.db = db;
            this._ctx = {
                table: table,
                index: index === ":id" ? null : index,
                or: orCollection
            };
            this._cmp = this._ascending = cmp;
            this._descending = function (a, b) { return cmp(b, a); };
            this._max = function (a, b) { return cmp(a, b) > 0 ? a : b; };
            this._min = function (a, b) { return cmp(a, b) < 0 ? a : b; };
            this._IDBKeyRange = db._deps.IDBKeyRange;
            if (!this._IDBKeyRange)
                throw new exceptions.MissingAPI();
        });
    }

    function eventRejectHandler(reject) {
        return wrap(function (event) {
            preventDefault(event);
            reject(event.target.error);
            return false;
        });
    }
    function preventDefault(event) {
        if (event.stopPropagation)
            event.stopPropagation();
        if (event.preventDefault)
            event.preventDefault();
    }

    var DEXIE_STORAGE_MUTATED_EVENT_NAME = 'storagemutated';
    var STORAGE_MUTATED_DOM_EVENT_NAME = 'x-storagemutated-1';
    var globalEvents = Events(null, DEXIE_STORAGE_MUTATED_EVENT_NAME);

    var Transaction =  (function () {
        function Transaction() {
        }
        Transaction.prototype._lock = function () {
            assert(!PSD.global);
            ++this._reculock;
            if (this._reculock === 1 && !PSD.global)
                PSD.lockOwnerFor = this;
            return this;
        };
        Transaction.prototype._unlock = function () {
            assert(!PSD.global);
            if (--this._reculock === 0) {
                if (!PSD.global)
                    PSD.lockOwnerFor = null;
                while (this._blockedFuncs.length > 0 && !this._locked()) {
                    var fnAndPSD = this._blockedFuncs.shift();
                    try {
                        usePSD(fnAndPSD[1], fnAndPSD[0]);
                    }
                    catch (e) { }
                }
            }
            return this;
        };
        Transaction.prototype._locked = function () {
            return this._reculock && PSD.lockOwnerFor !== this;
        };
        Transaction.prototype.create = function (idbtrans) {
            var _this = this;
            if (!this.mode)
                return this;
            var idbdb = this.db.idbdb;
            var dbOpenError = this.db._state.dbOpenError;
            assert(!this.idbtrans);
            if (!idbtrans && !idbdb) {
                switch (dbOpenError && dbOpenError.name) {
                    case "DatabaseClosedError":
                        throw new exceptions.DatabaseClosed(dbOpenError);
                    case "MissingAPIError":
                        throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);
                    default:
                        throw new exceptions.OpenFailed(dbOpenError);
                }
            }
            if (!this.active)
                throw new exceptions.TransactionInactive();
            assert(this._completion._state === null);
            idbtrans = this.idbtrans = idbtrans ||
                (this.db.core
                    ? this.db.core.transaction(this.storeNames, this.mode, { durability: this.chromeTransactionDurability })
                    : idbdb.transaction(this.storeNames, this.mode, { durability: this.chromeTransactionDurability }));
            idbtrans.onerror = wrap(function (ev) {
                preventDefault(ev);
                _this._reject(idbtrans.error);
            });
            idbtrans.onabort = wrap(function (ev) {
                preventDefault(ev);
                _this.active && _this._reject(new exceptions.Abort(idbtrans.error));
                _this.active = false;
                _this.on("abort").fire(ev);
            });
            idbtrans.oncomplete = wrap(function () {
                _this.active = false;
                _this._resolve();
                if ('mutatedParts' in idbtrans) {
                    globalEvents.storagemutated.fire(idbtrans["mutatedParts"]);
                }
            });
            return this;
        };
        Transaction.prototype._promise = function (mode, fn, bWriteLock) {
            var _this = this;
            if (mode === 'readwrite' && this.mode !== 'readwrite')
                return rejection(new exceptions.ReadOnly("Transaction is readonly"));
            if (!this.active)
                return rejection(new exceptions.TransactionInactive());
            if (this._locked()) {
                return new DexiePromise(function (resolve, reject) {
                    _this._blockedFuncs.push([function () {
                            _this._promise(mode, fn, bWriteLock).then(resolve, reject);
                        }, PSD]);
                });
            }
            else if (bWriteLock) {
                return newScope(function () {
                    var p = new DexiePromise(function (resolve, reject) {
                        _this._lock();
                        var rv = fn(resolve, reject, _this);
                        if (rv && rv.then)
                            rv.then(resolve, reject);
                    });
                    p.finally(function () { return _this._unlock(); });
                    p._lib = true;
                    return p;
                });
            }
            else {
                var p = new DexiePromise(function (resolve, reject) {
                    var rv = fn(resolve, reject, _this);
                    if (rv && rv.then)
                        rv.then(resolve, reject);
                });
                p._lib = true;
                return p;
            }
        };
        Transaction.prototype._root = function () {
            return this.parent ? this.parent._root() : this;
        };
        Transaction.prototype.waitFor = function (promiseLike) {
            var root = this._root();
            var promise = DexiePromise.resolve(promiseLike);
            if (root._waitingFor) {
                root._waitingFor = root._waitingFor.then(function () { return promise; });
            }
            else {
                root._waitingFor = promise;
                root._waitingQueue = [];
                var store = root.idbtrans.objectStore(root.storeNames[0]);
                (function spin() {
                    ++root._spinCount;
                    while (root._waitingQueue.length)
                        (root._waitingQueue.shift())();
                    if (root._waitingFor)
                        store.get(-Infinity).onsuccess = spin;
                }());
            }
            var currentWaitPromise = root._waitingFor;
            return new DexiePromise(function (resolve, reject) {
                promise.then(function (res) { return root._waitingQueue.push(wrap(resolve.bind(null, res))); }, function (err) { return root._waitingQueue.push(wrap(reject.bind(null, err))); }).finally(function () {
                    if (root._waitingFor === currentWaitPromise) {
                        root._waitingFor = null;
                    }
                });
            });
        };
        Transaction.prototype.abort = function () {
            if (this.active) {
                this.active = false;
                if (this.idbtrans)
                    this.idbtrans.abort();
                this._reject(new exceptions.Abort());
            }
        };
        Transaction.prototype.table = function (tableName) {
            var memoizedTables = (this._memoizedTables || (this._memoizedTables = {}));
            if (hasOwn(memoizedTables, tableName))
                return memoizedTables[tableName];
            var tableSchema = this.schema[tableName];
            if (!tableSchema) {
                throw new exceptions.NotFound("Table " + tableName + " not part of transaction");
            }
            var transactionBoundTable = new this.db.Table(tableName, tableSchema, this);
            transactionBoundTable.core = this.db.core.table(tableName);
            memoizedTables[tableName] = transactionBoundTable;
            return transactionBoundTable;
        };
        return Transaction;
    }());

    function createTransactionConstructor(db) {
        return makeClassConstructor(Transaction.prototype, function Transaction(mode, storeNames, dbschema, chromeTransactionDurability, parent) {
            var _this = this;
            if (mode !== 'readonly')
                storeNames.forEach(function (storeName) {
                    var _a;
                    var yProps = (_a = dbschema[storeName]) === null || _a === void 0 ? void 0 : _a.yProps;
                    if (yProps)
                        storeNames = storeNames.concat(yProps.map(function (p) { return p.updatesTable; }));
                });
            this.db = db;
            this.mode = mode;
            this.storeNames = storeNames;
            this.schema = dbschema;
            this.chromeTransactionDurability = chromeTransactionDurability;
            this.idbtrans = null;
            this.on = Events(this, "complete", "error", "abort");
            this.parent = parent || null;
            this.active = true;
            this._reculock = 0;
            this._blockedFuncs = [];
            this._resolve = null;
            this._reject = null;
            this._waitingFor = null;
            this._waitingQueue = null;
            this._spinCount = 0;
            this._completion = new DexiePromise(function (resolve, reject) {
                _this._resolve = resolve;
                _this._reject = reject;
            });
            this._completion.then(function () {
                _this.active = false;
                _this.on.complete.fire();
            }, function (e) {
                var wasActive = _this.active;
                _this.active = false;
                _this.on.error.fire(e);
                _this.parent ?
                    _this.parent._reject(e) :
                    wasActive && _this.idbtrans && _this.idbtrans.abort();
                return rejection(e);
            });
        });
    }

    function createIndexSpec(name, keyPath, unique, multi, auto, compound, isPrimKey, type) {
        return {
            name: name,
            keyPath: keyPath,
            unique: unique,
            multi: multi,
            auto: auto,
            compound: compound,
            src: (unique && !isPrimKey ? '&' : '') + (multi ? '*' : '') + (auto ? "++" : "") + nameFromKeyPath(keyPath),
            type: type
        };
    }
    function nameFromKeyPath(keyPath) {
        return typeof keyPath === 'string' ?
            keyPath :
            keyPath ? ('[' + [].join.call(keyPath, '+') + ']') : "";
    }

    function createTableSchema(name, primKey, indexes) {
        return {
            name: name,
            primKey: primKey,
            indexes: indexes,
            mappedClass: null,
            idxByName: arrayToObject(indexes, function (index) { return [index.name, index]; }),
        };
    }

    function safariMultiStoreFix(storeNames) {
        return storeNames.length === 1 ? storeNames[0] : storeNames;
    }
    var getMaxKey = function (IdbKeyRange) {
        try {
            IdbKeyRange.only([[]]);
            getMaxKey = function () { return [[]]; };
            return [[]];
        }
        catch (e) {
            getMaxKey = function () { return maxString; };
            return maxString;
        }
    };

    function getKeyExtractor(keyPath) {
        if (keyPath == null) {
            return function () { return undefined; };
        }
        else if (typeof keyPath === 'string') {
            return getSinglePathKeyExtractor(keyPath);
        }
        else {
            return function (obj) { return getByKeyPath(obj, keyPath); };
        }
    }
    function getSinglePathKeyExtractor(keyPath) {
        var split = keyPath.split('.');
        if (split.length === 1) {
            return function (obj) { return obj[keyPath]; };
        }
        else {
            return function (obj) { return getByKeyPath(obj, keyPath); };
        }
    }

    function arrayify(arrayLike) {
        return [].slice.call(arrayLike);
    }
    var _id_counter = 0;
    function getKeyPathAlias(keyPath) {
        return keyPath == null ?
            ":id" :
            typeof keyPath === 'string' ?
                keyPath :
                "[".concat(keyPath.join('+'), "]");
    }
    function createDBCore(db, IdbKeyRange, tmpTrans) {
        function extractSchema(db, trans) {
            var tables = arrayify(db.objectStoreNames);
            return {
                schema: {
                    name: db.name,
                    tables: tables.map(function (table) { return trans.objectStore(table); }).map(function (store) {
                        var keyPath = store.keyPath, autoIncrement = store.autoIncrement;
                        var compound = isArray(keyPath);
                        var outbound = keyPath == null;
                        var indexByKeyPath = {};
                        var result = {
                            name: store.name,
                            primaryKey: {
                                name: null,
                                isPrimaryKey: true,
                                outbound: outbound,
                                compound: compound,
                                keyPath: keyPath,
                                autoIncrement: autoIncrement,
                                unique: true,
                                extractKey: getKeyExtractor(keyPath)
                            },
                            indexes: arrayify(store.indexNames).map(function (indexName) { return store.index(indexName); })
                                .map(function (index) {
                                var name = index.name, unique = index.unique, multiEntry = index.multiEntry, keyPath = index.keyPath;
                                var compound = isArray(keyPath);
                                var result = {
                                    name: name,
                                    compound: compound,
                                    keyPath: keyPath,
                                    unique: unique,
                                    multiEntry: multiEntry,
                                    extractKey: getKeyExtractor(keyPath)
                                };
                                indexByKeyPath[getKeyPathAlias(keyPath)] = result;
                                return result;
                            }),
                            getIndexByKeyPath: function (keyPath) { return indexByKeyPath[getKeyPathAlias(keyPath)]; }
                        };
                        indexByKeyPath[":id"] = result.primaryKey;
                        if (keyPath != null) {
                            indexByKeyPath[getKeyPathAlias(keyPath)] = result.primaryKey;
                        }
                        return result;
                    })
                },
                hasGetAll: tables.length > 0 && ('getAll' in trans.objectStore(tables[0])) &&
                    !(typeof navigator !== 'undefined' && /Safari/.test(navigator.userAgent) &&
                        !/(Chrome\/|Edge\/)/.test(navigator.userAgent) &&
                        [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604)
            };
        }
        function makeIDBKeyRange(range) {
            if (range.type === 3 )
                return null;
            if (range.type === 4 )
                throw new Error("Cannot convert never type to IDBKeyRange");
            var lower = range.lower, upper = range.upper, lowerOpen = range.lowerOpen, upperOpen = range.upperOpen;
            var idbRange = lower === undefined ?
                upper === undefined ?
                    null :
                    IdbKeyRange.upperBound(upper, !!upperOpen) :
                upper === undefined ?
                    IdbKeyRange.lowerBound(lower, !!lowerOpen) :
                    IdbKeyRange.bound(lower, upper, !!lowerOpen, !!upperOpen);
            return idbRange;
        }
        function createDbCoreTable(tableSchema) {
            var tableName = tableSchema.name;
            function mutate(_a) {
                var trans = _a.trans, type = _a.type, keys = _a.keys, values = _a.values, range = _a.range;
                return new Promise(function (resolve, reject) {
                    resolve = wrap(resolve);
                    var store = trans.objectStore(tableName);
                    var outbound = store.keyPath == null;
                    var isAddOrPut = type === "put" || type === "add";
                    if (!isAddOrPut && type !== 'delete' && type !== 'deleteRange')
                        throw new Error("Invalid operation type: " + type);
                    var length = (keys || values || { length: 1 }).length;
                    if (keys && values && keys.length !== values.length) {
                        throw new Error("Given keys array must have same length as given values array.");
                    }
                    if (length === 0)
                        return resolve({ numFailures: 0, failures: {}, results: [], lastResult: undefined });
                    var req;
                    var reqs = [];
                    var failures = [];
                    var numFailures = 0;
                    var errorHandler = function (event) {
                        ++numFailures;
                        preventDefault(event);
                    };
                    if (type === 'deleteRange') {
                        if (range.type === 4 )
                            return resolve({ numFailures: numFailures, failures: failures, results: [], lastResult: undefined });
                        if (range.type === 3 )
                            reqs.push(req = store.clear());
                        else
                            reqs.push(req = store.delete(makeIDBKeyRange(range)));
                    }
                    else {
                        var _a = isAddOrPut ?
                            outbound ?
                                [values, keys] :
                                [values, null] :
                            [keys, null], args1 = _a[0], args2 = _a[1];
                        if (isAddOrPut) {
                            for (var i = 0; i < length; ++i) {
                                reqs.push(req = (args2 && args2[i] !== undefined ?
                                    store[type](args1[i], args2[i]) :
                                    store[type](args1[i])));
                                req.onerror = errorHandler;
                            }
                        }
                        else {
                            for (var i = 0; i < length; ++i) {
                                reqs.push(req = store[type](args1[i]));
                                req.onerror = errorHandler;
                            }
                        }
                    }
                    var done = function (event) {
                        var lastResult = event.target.result;
                        reqs.forEach(function (req, i) { return req.error != null && (failures[i] = req.error); });
                        resolve({
                            numFailures: numFailures,
                            failures: failures,
                            results: type === "delete" ? keys : reqs.map(function (req) { return req.result; }),
                            lastResult: lastResult
                        });
                    };
                    req.onerror = function (event) {
                        errorHandler(event);
                        done(event);
                    };
                    req.onsuccess = done;
                });
            }
            function openCursor(_a) {
                var trans = _a.trans, values = _a.values, query = _a.query, reverse = _a.reverse, unique = _a.unique;
                return new Promise(function (resolve, reject) {
                    resolve = wrap(resolve);
                    var index = query.index, range = query.range;
                    var store = trans.objectStore(tableName);
                    var source = index.isPrimaryKey ?
                        store :
                        store.index(index.name);
                    var direction = reverse ?
                        unique ?
                            "prevunique" :
                            "prev" :
                        unique ?
                            "nextunique" :
                            "next";
                    var req = values || !('openKeyCursor' in source) ?
                        source.openCursor(makeIDBKeyRange(range), direction) :
                        source.openKeyCursor(makeIDBKeyRange(range), direction);
                    req.onerror = eventRejectHandler(reject);
                    req.onsuccess = wrap(function (ev) {
                        var cursor = req.result;
                        if (!cursor) {
                            resolve(null);
                            return;
                        }
                        cursor.___id = ++_id_counter;
                        cursor.done = false;
                        var _cursorContinue = cursor.continue.bind(cursor);
                        var _cursorContinuePrimaryKey = cursor.continuePrimaryKey;
                        if (_cursorContinuePrimaryKey)
                            _cursorContinuePrimaryKey = _cursorContinuePrimaryKey.bind(cursor);
                        var _cursorAdvance = cursor.advance.bind(cursor);
                        var doThrowCursorIsNotStarted = function () { throw new Error("Cursor not started"); };
                        var doThrowCursorIsStopped = function () { throw new Error("Cursor not stopped"); };
                        cursor.trans = trans;
                        cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsNotStarted;
                        cursor.fail = wrap(reject);
                        cursor.next = function () {
                            var _this = this;
                            var gotOne = 1;
                            return this.start(function () { return gotOne-- ? _this.continue() : _this.stop(); }).then(function () { return _this; });
                        };
                        cursor.start = function (callback) {
                            var iterationPromise = new Promise(function (resolveIteration, rejectIteration) {
                                resolveIteration = wrap(resolveIteration);
                                req.onerror = eventRejectHandler(rejectIteration);
                                cursor.fail = rejectIteration;
                                cursor.stop = function (value) {
                                    cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsStopped;
                                    resolveIteration(value);
                                };
                            });
                            var guardedCallback = function () {
                                if (req.result) {
                                    try {
                                        callback();
                                    }
                                    catch (err) {
                                        cursor.fail(err);
                                    }
                                }
                                else {
                                    cursor.done = true;
                                    cursor.start = function () { throw new Error("Cursor behind last entry"); };
                                    cursor.stop();
                                }
                            };
                            req.onsuccess = wrap(function (ev) {
                                req.onsuccess = guardedCallback;
                                guardedCallback();
                            });
                            cursor.continue = _cursorContinue;
                            cursor.continuePrimaryKey = _cursorContinuePrimaryKey;
                            cursor.advance = _cursorAdvance;
                            guardedCallback();
                            return iterationPromise;
                        };
                        resolve(cursor);
                    }, reject);
                });
            }
            function query(hasGetAll) {
                return function (request) {
                    return new Promise(function (resolve, reject) {
                        resolve = wrap(resolve);
                        var trans = request.trans, values = request.values, limit = request.limit, query = request.query;
                        var nonInfinitLimit = limit === Infinity ? undefined : limit;
                        var index = query.index, range = query.range;
                        var store = trans.objectStore(tableName);
                        var source = index.isPrimaryKey ? store : store.index(index.name);
                        var idbKeyRange = makeIDBKeyRange(range);
                        if (limit === 0)
                            return resolve({ result: [] });
                        if (hasGetAll) {
                            var req = values ?
                                source.getAll(idbKeyRange, nonInfinitLimit) :
                                source.getAllKeys(idbKeyRange, nonInfinitLimit);
                            req.onsuccess = function (event) { return resolve({ result: event.target.result }); };
                            req.onerror = eventRejectHandler(reject);
                        }
                        else {
                            var count_1 = 0;
                            var req_1 = values || !('openKeyCursor' in source) ?
                                source.openCursor(idbKeyRange) :
                                source.openKeyCursor(idbKeyRange);
                            var result_1 = [];
                            req_1.onsuccess = function (event) {
                                var cursor = req_1.result;
                                if (!cursor)
                                    return resolve({ result: result_1 });
                                result_1.push(values ? cursor.value : cursor.primaryKey);
                                if (++count_1 === limit)
                                    return resolve({ result: result_1 });
                                cursor.continue();
                            };
                            req_1.onerror = eventRejectHandler(reject);
                        }
                    });
                };
            }
            return {
                name: tableName,
                schema: tableSchema,
                mutate: mutate,
                getMany: function (_a) {
                    var trans = _a.trans, keys = _a.keys;
                    return new Promise(function (resolve, reject) {
                        resolve = wrap(resolve);
                        var store = trans.objectStore(tableName);
                        var length = keys.length;
                        var result = new Array(length);
                        var keyCount = 0;
                        var callbackCount = 0;
                        var req;
                        var successHandler = function (event) {
                            var req = event.target;
                            if ((result[req._pos] = req.result) != null)
                                ;
                            if (++callbackCount === keyCount)
                                resolve(result);
                        };
                        var errorHandler = eventRejectHandler(reject);
                        for (var i = 0; i < length; ++i) {
                            var key = keys[i];
                            if (key != null) {
                                req = store.get(keys[i]);
                                req._pos = i;
                                req.onsuccess = successHandler;
                                req.onerror = errorHandler;
                                ++keyCount;
                            }
                        }
                        if (keyCount === 0)
                            resolve(result);
                    });
                },
                get: function (_a) {
                    var trans = _a.trans, key = _a.key;
                    return new Promise(function (resolve, reject) {
                        resolve = wrap(resolve);
                        var store = trans.objectStore(tableName);
                        var req = store.get(key);
                        req.onsuccess = function (event) { return resolve(event.target.result); };
                        req.onerror = eventRejectHandler(reject);
                    });
                },
                query: query(hasGetAll),
                openCursor: openCursor,
                count: function (_a) {
                    var query = _a.query, trans = _a.trans;
                    var index = query.index, range = query.range;
                    return new Promise(function (resolve, reject) {
                        var store = trans.objectStore(tableName);
                        var source = index.isPrimaryKey ? store : store.index(index.name);
                        var idbKeyRange = makeIDBKeyRange(range);
                        var req = idbKeyRange ? source.count(idbKeyRange) : source.count();
                        req.onsuccess = wrap(function (ev) { return resolve(ev.target.result); });
                        req.onerror = eventRejectHandler(reject);
                    });
                }
            };
        }
        var _a = extractSchema(db, tmpTrans), schema = _a.schema, hasGetAll = _a.hasGetAll;
        var tables = schema.tables.map(function (tableSchema) { return createDbCoreTable(tableSchema); });
        var tableMap = {};
        tables.forEach(function (table) { return tableMap[table.name] = table; });
        return {
            stack: "dbcore",
            transaction: db.transaction.bind(db),
            table: function (name) {
                var result = tableMap[name];
                if (!result)
                    throw new Error("Table '".concat(name, "' not found"));
                return tableMap[name];
            },
            MIN_KEY: -Infinity,
            MAX_KEY: getMaxKey(IdbKeyRange),
            schema: schema
        };
    }

    function createMiddlewareStack(stackImpl, middlewares) {
        return middlewares.reduce(function (down, _a) {
            var create = _a.create;
            return (__assign(__assign({}, down), create(down)));
        }, stackImpl);
    }
    function createMiddlewareStacks(middlewares, idbdb, _a, tmpTrans) {
        var IDBKeyRange = _a.IDBKeyRange; _a.indexedDB;
        var dbcore = createMiddlewareStack(createDBCore(idbdb, IDBKeyRange, tmpTrans), middlewares.dbcore);
        return {
            dbcore: dbcore
        };
    }
    function generateMiddlewareStacks(db, tmpTrans) {
        var idbdb = tmpTrans.db;
        var stacks = createMiddlewareStacks(db._middlewares, idbdb, db._deps, tmpTrans);
        db.core = stacks.dbcore;
        db.tables.forEach(function (table) {
            var tableName = table.name;
            if (db.core.schema.tables.some(function (tbl) { return tbl.name === tableName; })) {
                table.core = db.core.table(tableName);
                if (db[tableName] instanceof db.Table) {
                    db[tableName].core = table.core;
                }
            }
        });
    }

    function setApiOnPlace(db, objs, tableNames, dbschema) {
        tableNames.forEach(function (tableName) {
            var schema = dbschema[tableName];
            objs.forEach(function (obj) {
                var propDesc = getPropertyDescriptor(obj, tableName);
                if (!propDesc || ("value" in propDesc && propDesc.value === undefined)) {
                    if (obj === db.Transaction.prototype || obj instanceof db.Transaction) {
                        setProp(obj, tableName, {
                            get: function () { return this.table(tableName); },
                            set: function (value) {
                                defineProperty(this, tableName, { value: value, writable: true, configurable: true, enumerable: true });
                            }
                        });
                    }
                    else {
                        obj[tableName] = new db.Table(tableName, schema);
                    }
                }
            });
        });
    }
    function removeTablesApi(db, objs) {
        objs.forEach(function (obj) {
            for (var key in obj) {
                if (obj[key] instanceof db.Table)
                    delete obj[key];
            }
        });
    }
    function lowerVersionFirst(a, b) {
        return a._cfg.version - b._cfg.version;
    }
    function runUpgraders(db, oldVersion, idbUpgradeTrans, reject) {
        var globalSchema = db._dbSchema;
        if (idbUpgradeTrans.objectStoreNames.contains('$meta') && !globalSchema.$meta) {
            globalSchema.$meta = createTableSchema("$meta", parseIndexSyntax("")[0], []);
            db._storeNames.push('$meta');
        }
        var trans = db._createTransaction('readwrite', db._storeNames, globalSchema);
        trans.create(idbUpgradeTrans);
        trans._completion.catch(reject);
        var rejectTransaction = trans._reject.bind(trans);
        var transless = PSD.transless || PSD;
        newScope(function () {
            PSD.trans = trans;
            PSD.transless = transless;
            if (oldVersion === 0) {
                keys(globalSchema).forEach(function (tableName) {
                    createTable(idbUpgradeTrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);
                });
                generateMiddlewareStacks(db, idbUpgradeTrans);
                DexiePromise.follow(function () { return db.on.populate.fire(trans); }).catch(rejectTransaction);
            }
            else {
                generateMiddlewareStacks(db, idbUpgradeTrans);
                return getExistingVersion(db, trans, oldVersion)
                    .then(function (oldVersion) { return updateTablesAndIndexes(db, oldVersion, trans, idbUpgradeTrans); })
                    .catch(rejectTransaction);
            }
        });
    }
    function patchCurrentVersion(db, idbUpgradeTrans) {
        createMissingTables(db._dbSchema, idbUpgradeTrans);
        if (idbUpgradeTrans.db.version % 10 === 0 && !idbUpgradeTrans.objectStoreNames.contains('$meta')) {
            idbUpgradeTrans.db.createObjectStore('$meta').add(Math.ceil((idbUpgradeTrans.db.version / 10) - 1), 'version');
        }
        var globalSchema = buildGlobalSchema(db, db.idbdb, idbUpgradeTrans);
        adjustToExistingIndexNames(db, db._dbSchema, idbUpgradeTrans);
        var diff = getSchemaDiff(globalSchema, db._dbSchema);
        var _loop_1 = function (tableChange) {
            if (tableChange.change.length || tableChange.recreate) {
                console.warn("Unable to patch indexes of table ".concat(tableChange.name, " because it has changes on the type of index or primary key."));
                return { value: void 0 };
            }
            var store = idbUpgradeTrans.objectStore(tableChange.name);
            tableChange.add.forEach(function (idx) {
                if (debug)
                    console.debug("Dexie upgrade patch: Creating missing index ".concat(tableChange.name, ".").concat(idx.src));
                addIndex(store, idx);
            });
        };
        for (var _i = 0, _a = diff.change; _i < _a.length; _i++) {
            var tableChange = _a[_i];
            var state_1 = _loop_1(tableChange);
            if (typeof state_1 === "object")
                return state_1.value;
        }
    }
    function getExistingVersion(db, trans, oldVersion) {
        if (trans.storeNames.includes('$meta')) {
            return trans.table('$meta').get('version').then(function (metaVersion) {
                return metaVersion != null ? metaVersion : oldVersion;
            });
        }
        else {
            return DexiePromise.resolve(oldVersion);
        }
    }
    function updateTablesAndIndexes(db, oldVersion, trans, idbUpgradeTrans) {
        var queue = [];
        var versions = db._versions;
        var globalSchema = db._dbSchema = buildGlobalSchema(db, db.idbdb, idbUpgradeTrans);
        var versToRun = versions.filter(function (v) { return v._cfg.version >= oldVersion; });
        if (versToRun.length === 0) {
            return DexiePromise.resolve();
        }
        versToRun.forEach(function (version) {
            queue.push(function () {
                var oldSchema = globalSchema;
                var newSchema = version._cfg.dbschema;
                adjustToExistingIndexNames(db, oldSchema, idbUpgradeTrans);
                adjustToExistingIndexNames(db, newSchema, idbUpgradeTrans);
                globalSchema = db._dbSchema = newSchema;
                var diff = getSchemaDiff(oldSchema, newSchema);
                diff.add.forEach(function (tuple) {
                    createTable(idbUpgradeTrans, tuple[0], tuple[1].primKey, tuple[1].indexes);
                });
                diff.change.forEach(function (change) {
                    if (change.recreate) {
                        throw new exceptions.Upgrade("Not yet support for changing primary key");
                    }
                    else {
                        var store_1 = idbUpgradeTrans.objectStore(change.name);
                        change.add.forEach(function (idx) { return addIndex(store_1, idx); });
                        change.change.forEach(function (idx) {
                            store_1.deleteIndex(idx.name);
                            addIndex(store_1, idx);
                        });
                        change.del.forEach(function (idxName) { return store_1.deleteIndex(idxName); });
                    }
                });
                var contentUpgrade = version._cfg.contentUpgrade;
                if (contentUpgrade && version._cfg.version > oldVersion) {
                    generateMiddlewareStacks(db, idbUpgradeTrans);
                    trans._memoizedTables = {};
                    var upgradeSchema_1 = shallowClone(newSchema);
                    diff.del.forEach(function (table) {
                        upgradeSchema_1[table] = oldSchema[table];
                    });
                    removeTablesApi(db, [db.Transaction.prototype]);
                    setApiOnPlace(db, [db.Transaction.prototype], keys(upgradeSchema_1), upgradeSchema_1);
                    trans.schema = upgradeSchema_1;
                    var contentUpgradeIsAsync_1 = isAsyncFunction(contentUpgrade);
                    if (contentUpgradeIsAsync_1) {
                        incrementExpectedAwaits();
                    }
                    var returnValue_1;
                    var promiseFollowed = DexiePromise.follow(function () {
                        returnValue_1 = contentUpgrade(trans);
                        if (returnValue_1) {
                            if (contentUpgradeIsAsync_1) {
                                var decrementor = decrementExpectedAwaits.bind(null, null);
                                returnValue_1.then(decrementor, decrementor);
                            }
                        }
                    });
                    return (returnValue_1 && typeof returnValue_1.then === 'function' ?
                        DexiePromise.resolve(returnValue_1) : promiseFollowed.then(function () { return returnValue_1; }));
                }
            });
            queue.push(function (idbtrans) {
                var newSchema = version._cfg.dbschema;
                deleteRemovedTables(newSchema, idbtrans);
                removeTablesApi(db, [db.Transaction.prototype]);
                setApiOnPlace(db, [db.Transaction.prototype], db._storeNames, db._dbSchema);
                trans.schema = db._dbSchema;
            });
            queue.push(function (idbtrans) {
                if (db.idbdb.objectStoreNames.contains('$meta')) {
                    if (Math.ceil(db.idbdb.version / 10) === version._cfg.version) {
                        db.idbdb.deleteObjectStore('$meta');
                        delete db._dbSchema.$meta;
                        db._storeNames = db._storeNames.filter(function (name) { return name !== '$meta'; });
                    }
                    else {
                        idbtrans.objectStore('$meta').put(version._cfg.version, 'version');
                    }
                }
            });
        });
        function runQueue() {
            return queue.length ? DexiePromise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) :
                DexiePromise.resolve();
        }
        return runQueue().then(function () {
            createMissingTables(globalSchema, idbUpgradeTrans);
        });
    }
    function getSchemaDiff(oldSchema, newSchema) {
        var diff = {
            del: [],
            add: [],
            change: []
        };
        var table;
        for (table in oldSchema) {
            if (!newSchema[table])
                diff.del.push(table);
        }
        for (table in newSchema) {
            var oldDef = oldSchema[table], newDef = newSchema[table];
            if (!oldDef) {
                diff.add.push([table, newDef]);
            }
            else {
                var change = {
                    name: table,
                    def: newDef,
                    recreate: false,
                    del: [],
                    add: [],
                    change: []
                };
                if ((
                '' + (oldDef.primKey.keyPath || '')) !== ('' + (newDef.primKey.keyPath || '')) ||
                    (oldDef.primKey.auto !== newDef.primKey.auto)) {
                    change.recreate = true;
                    diff.change.push(change);
                }
                else {
                    var oldIndexes = oldDef.idxByName;
                    var newIndexes = newDef.idxByName;
                    var idxName = void 0;
                    for (idxName in oldIndexes) {
                        if (!newIndexes[idxName])
                            change.del.push(idxName);
                    }
                    for (idxName in newIndexes) {
                        var oldIdx = oldIndexes[idxName], newIdx = newIndexes[idxName];
                        if (!oldIdx)
                            change.add.push(newIdx);
                        else if (oldIdx.src !== newIdx.src)
                            change.change.push(newIdx);
                    }
                    if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {
                        diff.change.push(change);
                    }
                }
            }
        }
        return diff;
    }
    function createTable(idbtrans, tableName, primKey, indexes) {
        var store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ?
            { keyPath: primKey.keyPath, autoIncrement: primKey.auto } :
            { autoIncrement: primKey.auto });
        indexes.forEach(function (idx) { return addIndex(store, idx); });
        return store;
    }
    function createMissingTables(newSchema, idbtrans) {
        keys(newSchema).forEach(function (tableName) {
            if (!idbtrans.db.objectStoreNames.contains(tableName)) {
                if (debug)
                    console.debug('Dexie: Creating missing table', tableName);
                createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);
            }
        });
    }
    function deleteRemovedTables(newSchema, idbtrans) {
        [].slice.call(idbtrans.db.objectStoreNames).forEach(function (storeName) {
            return newSchema[storeName] == null && idbtrans.db.deleteObjectStore(storeName);
        });
    }
    function addIndex(store, idx) {
        store.createIndex(idx.name, idx.keyPath, { unique: idx.unique, multiEntry: idx.multi });
    }
    function buildGlobalSchema(db, idbdb, tmpTrans) {
        var globalSchema = {};
        var dbStoreNames = slice(idbdb.objectStoreNames, 0);
        dbStoreNames.forEach(function (storeName) {
            var store = tmpTrans.objectStore(storeName);
            var keyPath = store.keyPath;
            var primKey = createIndexSpec(nameFromKeyPath(keyPath), keyPath || "", true, false, !!store.autoIncrement, keyPath && typeof keyPath !== "string", true);
            var indexes = [];
            for (var j = 0; j < store.indexNames.length; ++j) {
                var idbindex = store.index(store.indexNames[j]);
                keyPath = idbindex.keyPath;
                var index = createIndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== "string", false);
                indexes.push(index);
            }
            globalSchema[storeName] = createTableSchema(storeName, primKey, indexes);
        });
        return globalSchema;
    }
    function readGlobalSchema(db, idbdb, tmpTrans) {
        db.verno = idbdb.version / 10;
        var globalSchema = db._dbSchema = buildGlobalSchema(db, idbdb, tmpTrans);
        db._storeNames = slice(idbdb.objectStoreNames, 0);
        setApiOnPlace(db, [db._allTables], keys(globalSchema), globalSchema);
    }
    function verifyInstalledSchema(db, tmpTrans) {
        var installedSchema = buildGlobalSchema(db, db.idbdb, tmpTrans);
        var diff = getSchemaDiff(installedSchema, db._dbSchema);
        return !(diff.add.length || diff.change.some(function (ch) { return ch.add.length || ch.change.length; }));
    }
    function adjustToExistingIndexNames(db, schema, idbtrans) {
        var storeNames = idbtrans.db.objectStoreNames;
        for (var i = 0; i < storeNames.length; ++i) {
            var storeName = storeNames[i];
            var store = idbtrans.objectStore(storeName);
            db._hasGetAll = 'getAll' in store;
            for (var j = 0; j < store.indexNames.length; ++j) {
                var indexName = store.indexNames[j];
                var keyPath = store.index(indexName).keyPath;
                var dexieName = typeof keyPath === 'string' ? keyPath : "[" + slice(keyPath).join('+') + "]";
                if (schema[storeName]) {
                    var indexSpec = schema[storeName].idxByName[dexieName];
                    if (indexSpec) {
                        indexSpec.name = indexName;
                        delete schema[storeName].idxByName[dexieName];
                        schema[storeName].idxByName[indexName] = indexSpec;
                    }
                }
            }
        }
        if (typeof navigator !== 'undefined' && /Safari/.test(navigator.userAgent) &&
            !/(Chrome\/|Edge\/)/.test(navigator.userAgent) &&
            _global.WorkerGlobalScope && _global instanceof _global.WorkerGlobalScope &&
            [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604) {
            db._hasGetAll = false;
        }
    }
    function parseIndexSyntax(primKeyAndIndexes) {
        return primKeyAndIndexes.split(',').map(function (index, indexNum) {
            var _a;
            var typeSplit = index.split(':');
            var type = (_a = typeSplit[1]) === null || _a === void 0 ? void 0 : _a.trim();
            index = typeSplit[0].trim();
            var name = index.replace(/([&*]|\+\+)/g, "");
            var keyPath = /^\[/.test(name) ? name.match(/^\[(.*)\]$/)[1].split('+') : name;
            return createIndexSpec(name, keyPath || null, /\&/.test(index), /\*/.test(index), /\+\+/.test(index), isArray(keyPath), indexNum === 0, type);
        });
    }

    var Version =  (function () {
        function Version() {
        }
        Version.prototype._createTableSchema = function (name, primKey, indexes) {
            return createTableSchema(name, primKey, indexes);
        };
        Version.prototype._parseIndexSyntax = function (primKeyAndIndexes) {
            return parseIndexSyntax(primKeyAndIndexes);
        };
        Version.prototype._parseStoresSpec = function (stores, outSchema) {
            var _this = this;
            keys(stores).forEach(function (tableName) {
                if (stores[tableName] !== null) {
                    var indexes = _this._parseIndexSyntax(stores[tableName]);
                    var primKey = indexes.shift();
                    if (!primKey) {
                        throw new exceptions.Schema('Invalid schema for table ' + tableName + ': ' + stores[tableName]);
                    }
                    primKey.unique = true;
                    if (primKey.multi)
                        throw new exceptions.Schema('Primary key cannot be multiEntry*');
                    indexes.forEach(function (idx) {
                        if (idx.auto)
                            throw new exceptions.Schema('Only primary key can be marked as autoIncrement (++)');
                        if (!idx.keyPath)
                            throw new exceptions.Schema('Index must have a name and cannot be an empty string');
                    });
                    var tblSchema = _this._createTableSchema(tableName, primKey, indexes);
                    outSchema[tableName] = tblSchema;
                }
            });
        };
        Version.prototype.stores = function (stores) {
            var db = this.db;
            this._cfg.storesSource = this._cfg.storesSource
                ? extend(this._cfg.storesSource, stores)
                : stores;
            var versions = db._versions;
            var storesSpec = {};
            var dbschema = {};
            versions.forEach(function (version) {
                extend(storesSpec, version._cfg.storesSource);
                dbschema = version._cfg.dbschema = {};
                version._parseStoresSpec(storesSpec, dbschema);
            });
            db._dbSchema = dbschema;
            removeTablesApi(db, [db._allTables, db, db.Transaction.prototype]);
            setApiOnPlace(db, [db._allTables, db, db.Transaction.prototype, this._cfg.tables], keys(dbschema), dbschema);
            db._storeNames = keys(dbschema);
            return this;
        };
        Version.prototype.upgrade = function (upgradeFunction) {
            this._cfg.contentUpgrade = promisableChain(this._cfg.contentUpgrade || nop, upgradeFunction);
            return this;
        };
        return Version;
    }());

    function createVersionConstructor(db) {
        return makeClassConstructor(Version.prototype, function Version(versionNumber) {
            this.db = db;
            this._cfg = {
                version: versionNumber,
                storesSource: null,
                dbschema: {},
                tables: {},
                contentUpgrade: null
            };
        });
    }

    function getDbNamesTable(indexedDB, IDBKeyRange) {
        var dbNamesDB = indexedDB["_dbNamesDB"];
        if (!dbNamesDB) {
            dbNamesDB = indexedDB["_dbNamesDB"] = new Dexie$1(DBNAMES_DB, {
                addons: [],
                indexedDB: indexedDB,
                IDBKeyRange: IDBKeyRange,
            });
            dbNamesDB.version(1).stores({ dbnames: "name" });
        }
        return dbNamesDB.table("dbnames");
    }
    function hasDatabasesNative(indexedDB) {
        return indexedDB && typeof indexedDB.databases === "function";
    }
    function getDatabaseNames(_a) {
        var indexedDB = _a.indexedDB, IDBKeyRange = _a.IDBKeyRange;
        return hasDatabasesNative(indexedDB)
            ? Promise.resolve(indexedDB.databases()).then(function (infos) {
                return infos
                    .map(function (info) { return info.name; })
                    .filter(function (name) { return name !== DBNAMES_DB; });
            })
            : getDbNamesTable(indexedDB, IDBKeyRange).toCollection().primaryKeys();
    }
    function _onDatabaseCreated(_a, name) {
        var indexedDB = _a.indexedDB, IDBKeyRange = _a.IDBKeyRange;
        !hasDatabasesNative(indexedDB) &&
            name !== DBNAMES_DB &&
            getDbNamesTable(indexedDB, IDBKeyRange).put({ name: name }).catch(nop);
    }
    function _onDatabaseDeleted(_a, name) {
        var indexedDB = _a.indexedDB, IDBKeyRange = _a.IDBKeyRange;
        !hasDatabasesNative(indexedDB) &&
            name !== DBNAMES_DB &&
            getDbNamesTable(indexedDB, IDBKeyRange).delete(name).catch(nop);
    }

    function vip(fn) {
        return newScope(function () {
            PSD.letThrough = true;
            return fn();
        });
    }

    function idbReady() {
        var isSafari = !navigator.userAgentData &&
            /Safari\//.test(navigator.userAgent) &&
            !/Chrom(e|ium)\//.test(navigator.userAgent);
        if (!isSafari || !indexedDB.databases)
            return Promise.resolve();
        var intervalId;
        return new Promise(function (resolve) {
            var tryIdb = function () { return indexedDB.databases().finally(resolve); };
            intervalId = setInterval(tryIdb, 100);
            tryIdb();
        }).finally(function () { return clearInterval(intervalId); });
    }

    var _a;
    function isEmptyRange(node) {
        return !("from" in node);
    }
    var RangeSet = function (fromOrTree, to) {
        if (this) {
            extend(this, arguments.length ? { d: 1, from: fromOrTree, to: arguments.length > 1 ? to : fromOrTree } : { d: 0 });
        }
        else {
            var rv = new RangeSet();
            if (fromOrTree && ("d" in fromOrTree)) {
                extend(rv, fromOrTree);
            }
            return rv;
        }
    };
    props(RangeSet.prototype, (_a = {
            add: function (rangeSet) {
                mergeRanges(this, rangeSet);
                return this;
            },
            addKey: function (key) {
                addRange(this, key, key);
                return this;
            },
            addKeys: function (keys) {
                var _this = this;
                keys.forEach(function (key) { return addRange(_this, key, key); });
                return this;
            },
            hasKey: function (key) {
                var node = getRangeSetIterator(this).next(key).value;
                return node && cmp(node.from, key) <= 0 && cmp(node.to, key) >= 0;
            }
        },
        _a[iteratorSymbol] = function () {
            return getRangeSetIterator(this);
        },
        _a));
    function addRange(target, from, to) {
        var diff = cmp(from, to);
        if (isNaN(diff))
            return;
        if (diff > 0)
            throw RangeError();
        if (isEmptyRange(target))
            return extend(target, { from: from, to: to, d: 1 });
        var left = target.l;
        var right = target.r;
        if (cmp(to, target.from) < 0) {
            left
                ? addRange(left, from, to)
                : (target.l = { from: from, to: to, d: 1, l: null, r: null });
            return rebalance(target);
        }
        if (cmp(from, target.to) > 0) {
            right
                ? addRange(right, from, to)
                : (target.r = { from: from, to: to, d: 1, l: null, r: null });
            return rebalance(target);
        }
        if (cmp(from, target.from) < 0) {
            target.from = from;
            target.l = null;
            target.d = right ? right.d + 1 : 1;
        }
        if (cmp(to, target.to) > 0) {
            target.to = to;
            target.r = null;
            target.d = target.l ? target.l.d + 1 : 1;
        }
        var rightWasCutOff = !target.r;
        if (left && !target.l) {
            mergeRanges(target, left);
        }
        if (right && rightWasCutOff) {
            mergeRanges(target, right);
        }
    }
    function mergeRanges(target, newSet) {
        function _addRangeSet(target, _a) {
            var from = _a.from, to = _a.to, l = _a.l, r = _a.r;
            addRange(target, from, to);
            if (l)
                _addRangeSet(target, l);
            if (r)
                _addRangeSet(target, r);
        }
        if (!isEmptyRange(newSet))
            _addRangeSet(target, newSet);
    }
    function rangesOverlap(rangeSet1, rangeSet2) {
        var i1 = getRangeSetIterator(rangeSet2);
        var nextResult1 = i1.next();
        if (nextResult1.done)
            return false;
        var a = nextResult1.value;
        var i2 = getRangeSetIterator(rangeSet1);
        var nextResult2 = i2.next(a.from);
        var b = nextResult2.value;
        while (!nextResult1.done && !nextResult2.done) {
            if (cmp(b.from, a.to) <= 0 && cmp(b.to, a.from) >= 0)
                return true;
            cmp(a.from, b.from) < 0
                ? (a = (nextResult1 = i1.next(b.from)).value)
                : (b = (nextResult2 = i2.next(a.from)).value);
        }
        return false;
    }
    function getRangeSetIterator(node) {
        var state = isEmptyRange(node) ? null : { s: 0, n: node };
        return {
            next: function (key) {
                var keyProvided = arguments.length > 0;
                while (state) {
                    switch (state.s) {
                        case 0:
                            state.s = 1;
                            if (keyProvided) {
                                while (state.n.l && cmp(key, state.n.from) < 0)
                                    state = { up: state, n: state.n.l, s: 1 };
                            }
                            else {
                                while (state.n.l)
                                    state = { up: state, n: state.n.l, s: 1 };
                            }
                        case 1:
                            state.s = 2;
                            if (!keyProvided || cmp(key, state.n.to) <= 0)
                                return { value: state.n, done: false };
                        case 2:
                            if (state.n.r) {
                                state.s = 3;
                                state = { up: state, n: state.n.r, s: 0 };
                                continue;
                            }
                        case 3:
                            state = state.up;
                    }
                }
                return { done: true };
            },
        };
    }
    function rebalance(target) {
        var _a, _b;
        var diff = (((_a = target.r) === null || _a === void 0 ? void 0 : _a.d) || 0) - (((_b = target.l) === null || _b === void 0 ? void 0 : _b.d) || 0);
        var r = diff > 1 ? "r" : diff < -1 ? "l" : "";
        if (r) {
            var l = r === "r" ? "l" : "r";
            var rootClone = __assign({}, target);
            var oldRootRight = target[r];
            target.from = oldRootRight.from;
            target.to = oldRootRight.to;
            target[r] = oldRootRight[r];
            rootClone[r] = oldRootRight[l];
            target[l] = rootClone;
            rootClone.d = computeDepth(rootClone);
        }
        target.d = computeDepth(target);
    }
    function computeDepth(_a) {
        var r = _a.r, l = _a.l;
        return (r ? (l ? Math.max(r.d, l.d) : r.d) : l ? l.d : 0) + 1;
    }

    function extendObservabilitySet(target, newSet) {
        keys(newSet).forEach(function (part) {
            if (target[part])
                mergeRanges(target[part], newSet[part]);
            else
                target[part] = cloneSimpleObjectTree(newSet[part]);
        });
        return target;
    }

    function obsSetsOverlap(os1, os2) {
        return os1.all || os2.all || Object.keys(os1).some(function (key) { return os2[key] && rangesOverlap(os2[key], os1[key]); });
    }

    var cache = {};

    var unsignaledParts = {};
    var isTaskEnqueued = false;
    function signalSubscribersLazily(part, optimistic) {
        extendObservabilitySet(unsignaledParts, part);
        if (!isTaskEnqueued) {
            isTaskEnqueued = true;
            setTimeout(function () {
                isTaskEnqueued = false;
                var parts = unsignaledParts;
                unsignaledParts = {};
                signalSubscribersNow(parts, false);
            }, 0);
        }
    }
    function signalSubscribersNow(updatedParts, deleteAffectedCacheEntries) {
        if (deleteAffectedCacheEntries === void 0) { deleteAffectedCacheEntries = false; }
        var queriesToSignal = new Set();
        if (updatedParts.all) {
            for (var _i = 0, _a = Object.values(cache); _i < _a.length; _i++) {
                var tblCache = _a[_i];
                collectTableSubscribers(tblCache, updatedParts, queriesToSignal, deleteAffectedCacheEntries);
            }
        }
        else {
            for (var key in updatedParts) {
                var parts = /^idb\:\/\/(.*)\/(.*)\//.exec(key);
                if (parts) {
                    var dbName = parts[1], tableName = parts[2];
                    var tblCache = cache["idb://".concat(dbName, "/").concat(tableName)];
                    if (tblCache)
                        collectTableSubscribers(tblCache, updatedParts, queriesToSignal, deleteAffectedCacheEntries);
                }
            }
        }
        queriesToSignal.forEach(function (requery) { return requery(); });
    }
    function collectTableSubscribers(tblCache, updatedParts, outQueriesToSignal, deleteAffectedCacheEntries) {
        var updatedEntryLists = [];
        for (var _i = 0, _a = Object.entries(tblCache.queries.query); _i < _a.length; _i++) {
            var _b = _a[_i], indexName = _b[0], entries = _b[1];
            var filteredEntries = [];
            for (var _c = 0, entries_1 = entries; _c < entries_1.length; _c++) {
                var entry = entries_1[_c];
                if (obsSetsOverlap(updatedParts, entry.obsSet)) {
                    entry.subscribers.forEach(function (requery) { return outQueriesToSignal.add(requery); });
                }
                else if (deleteAffectedCacheEntries) {
                    filteredEntries.push(entry);
                }
            }
            if (deleteAffectedCacheEntries)
                updatedEntryLists.push([indexName, filteredEntries]);
        }
        if (deleteAffectedCacheEntries) {
            for (var _d = 0, updatedEntryLists_1 = updatedEntryLists; _d < updatedEntryLists_1.length; _d++) {
                var _e = updatedEntryLists_1[_d], indexName = _e[0], filteredEntries = _e[1];
                tblCache.queries.query[indexName] = filteredEntries;
            }
        }
    }

    function dexieOpen(db) {
        var state = db._state;
        var indexedDB = db._deps.indexedDB;
        if (state.isBeingOpened || db.idbdb)
            return state.dbReadyPromise.then(function () { return state.dbOpenError ?
                rejection(state.dbOpenError) :
                db; });
        state.isBeingOpened = true;
        state.dbOpenError = null;
        state.openComplete = false;
        var openCanceller = state.openCanceller;
        var nativeVerToOpen = Math.round(db.verno * 10);
        var schemaPatchMode = false;
        function throwIfCancelled() {
            if (state.openCanceller !== openCanceller)
                throw new exceptions.DatabaseClosed('db.open() was cancelled');
        }
        var resolveDbReady = state.dbReadyResolve,
        upgradeTransaction = null, wasCreated = false;
        var tryOpenDB = function () { return new DexiePromise(function (resolve, reject) {
            throwIfCancelled();
            if (!indexedDB)
                throw new exceptions.MissingAPI();
            var dbName = db.name;
            var req = state.autoSchema || !nativeVerToOpen ?
                indexedDB.open(dbName) :
                indexedDB.open(dbName, nativeVerToOpen);
            if (!req)
                throw new exceptions.MissingAPI();
            req.onerror = eventRejectHandler(reject);
            req.onblocked = wrap(db._fireOnBlocked);
            req.onupgradeneeded = wrap(function (e) {
                upgradeTransaction = req.transaction;
                if (state.autoSchema && !db._options.allowEmptyDB) {
                    req.onerror = preventDefault;
                    upgradeTransaction.abort();
                    req.result.close();
                    var delreq = indexedDB.deleteDatabase(dbName);
                    delreq.onsuccess = delreq.onerror = wrap(function () {
                        reject(new exceptions.NoSuchDatabase("Database ".concat(dbName, " doesnt exist")));
                    });
                }
                else {
                    upgradeTransaction.onerror = eventRejectHandler(reject);
                    var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion;
                    wasCreated = oldVer < 1;
                    db.idbdb = req.result;
                    if (schemaPatchMode) {
                        patchCurrentVersion(db, upgradeTransaction);
                    }
                    runUpgraders(db, oldVer / 10, upgradeTransaction, reject);
                }
            }, reject);
            req.onsuccess = wrap(function () {
                upgradeTransaction = null;
                var idbdb = db.idbdb = req.result;
                var objectStoreNames = slice(idbdb.objectStoreNames);
                if (objectStoreNames.length > 0)
                    try {
                        var tmpTrans = idbdb.transaction(safariMultiStoreFix(objectStoreNames), 'readonly');
                        if (state.autoSchema)
                            readGlobalSchema(db, idbdb, tmpTrans);
                        else {
                            adjustToExistingIndexNames(db, db._dbSchema, tmpTrans);
                            if (!verifyInstalledSchema(db, tmpTrans) && !schemaPatchMode) {
                                console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Dexie will add missing parts and increment native version number to workaround this.");
                                idbdb.close();
                                nativeVerToOpen = idbdb.version + 1;
                                schemaPatchMode = true;
                                return resolve(tryOpenDB());
                            }
                        }
                        generateMiddlewareStacks(db, tmpTrans);
                    }
                    catch (e) {
                    }
                connections.push(db);
                idbdb.onversionchange = wrap(function (ev) {
                    state.vcFired = true;
                    db.on("versionchange").fire(ev);
                });
                idbdb.onclose = wrap(function (ev) {
                    db.on("close").fire(ev);
                });
                if (wasCreated)
                    _onDatabaseCreated(db._deps, dbName);
                resolve();
            }, reject);
        }).catch(function (err) {
            switch (err === null || err === void 0 ? void 0 : err.name) {
                case "UnknownError":
                    if (state.PR1398_maxLoop > 0) {
                        state.PR1398_maxLoop--;
                        console.warn('Dexie: Workaround for Chrome UnknownError on open()');
                        return tryOpenDB();
                    }
                    break;
                case "VersionError":
                    if (nativeVerToOpen > 0) {
                        nativeVerToOpen = 0;
                        return tryOpenDB();
                    }
                    break;
            }
            return DexiePromise.reject(err);
        }); };
        return DexiePromise.race([
            openCanceller,
            (typeof navigator === 'undefined' ? DexiePromise.resolve() : idbReady()).then(tryOpenDB)
        ]).then(function () {
            throwIfCancelled();
            state.onReadyBeingFired = [];
            return DexiePromise.resolve(vip(function () { return db.on.ready.fire(db.vip); })).then(function fireRemainders() {
                if (state.onReadyBeingFired.length > 0) {
                    var remainders_1 = state.onReadyBeingFired.reduce(promisableChain, nop);
                    state.onReadyBeingFired = [];
                    return DexiePromise.resolve(vip(function () { return remainders_1(db.vip); })).then(fireRemainders);
                }
            });
        }).finally(function () {
            if (state.openCanceller === openCanceller) {
                state.onReadyBeingFired = null;
                state.isBeingOpened = false;
            }
        }).catch(function (err) {
            state.dbOpenError = err;
            try {
                upgradeTransaction && upgradeTransaction.abort();
            }
            catch (_a) { }
            if (openCanceller === state.openCanceller) {
                db._close();
            }
            return rejection(err);
        }).finally(function () {
            state.openComplete = true;
            resolveDbReady();
        }).then(function () {
            if (wasCreated) {
                var everything_1 = {};
                db.tables.forEach(function (table) {
                    table.schema.indexes.forEach(function (idx) {
                        if (idx.name)
                            everything_1["idb://".concat(db.name, "/").concat(table.name, "/").concat(idx.name)] = new RangeSet(-Infinity, [[[]]]);
                    });
                    everything_1["idb://".concat(db.name, "/").concat(table.name, "/")] = everything_1["idb://".concat(db.name, "/").concat(table.name, "/:dels")] = new RangeSet(-Infinity, [[[]]]);
                });
                globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME).fire(everything_1);
                signalSubscribersNow(everything_1, true);
            }
            return db;
        });
    }

    function awaitIterator(iterator) {
        var callNext = function (result) { return iterator.next(result); }, doThrow = function (error) { return iterator.throw(error); }, onSuccess = step(callNext), onError = step(doThrow);
        function step(getNext) {
            return function (val) {
                var next = getNext(val), value = next.value;
                return next.done ? value :
                    (!value || typeof value.then !== 'function' ?
                        isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) :
                        value.then(onSuccess, onError));
            };
        }
        return step(callNext)();
    }

    function extractTransactionArgs(mode, _tableArgs_, scopeFunc) {
        var i = arguments.length;
        if (i < 2)
            throw new exceptions.InvalidArgument("Too few arguments");
        var args = new Array(i - 1);
        while (--i)
            args[i - 1] = arguments[i];
        scopeFunc = args.pop();
        var tables = flatten(args);
        return [mode, tables, scopeFunc];
    }
    function enterTransactionScope(db, mode, storeNames, parentTransaction, scopeFunc) {
        return DexiePromise.resolve().then(function () {
            var transless = PSD.transless || PSD;
            var trans = db._createTransaction(mode, storeNames, db._dbSchema, parentTransaction);
            trans.explicit = true;
            var zoneProps = {
                trans: trans,
                transless: transless
            };
            if (parentTransaction) {
                trans.idbtrans = parentTransaction.idbtrans;
            }
            else {
                try {
                    trans.create();
                    trans.idbtrans._explicit = true;
                    db._state.PR1398_maxLoop = 3;
                }
                catch (ex) {
                    if (ex.name === errnames.InvalidState && db.isOpen() && --db._state.PR1398_maxLoop > 0) {
                        console.warn('Dexie: Need to reopen db');
                        db.close({ disableAutoOpen: false });
                        return db.open().then(function () { return enterTransactionScope(db, mode, storeNames, null, scopeFunc); });
                    }
                    return rejection(ex);
                }
            }
            var scopeFuncIsAsync = isAsyncFunction(scopeFunc);
            if (scopeFuncIsAsync) {
                incrementExpectedAwaits();
            }
            var returnValue;
            var promiseFollowed = DexiePromise.follow(function () {
                returnValue = scopeFunc.call(trans, trans);
                if (returnValue) {
                    if (scopeFuncIsAsync) {
                        var decrementor = decrementExpectedAwaits.bind(null, null);
                        returnValue.then(decrementor, decrementor);
                    }
                    else if (typeof returnValue.next === 'function' && typeof returnValue.throw === 'function') {
                        returnValue = awaitIterator(returnValue);
                    }
                }
            }, zoneProps);
            return (returnValue && typeof returnValue.then === 'function' ?
                DexiePromise.resolve(returnValue).then(function (x) { return trans.active ?
                    x
                    : rejection(new exceptions.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn")); })
                : promiseFollowed.then(function () { return returnValue; })).then(function (x) {
                if (parentTransaction)
                    trans._resolve();
                return trans._completion.then(function () { return x; });
            }).catch(function (e) {
                trans._reject(e);
                return rejection(e);
            });
        });
    }

    function pad(a, value, count) {
        var result = isArray(a) ? a.slice() : [a];
        for (var i = 0; i < count; ++i)
            result.push(value);
        return result;
    }
    function createVirtualIndexMiddleware(down) {
        return __assign(__assign({}, down), { table: function (tableName) {
                var table = down.table(tableName);
                var schema = table.schema;
                var indexLookup = {};
                var allVirtualIndexes = [];
                function addVirtualIndexes(keyPath, keyTail, lowLevelIndex) {
                    var keyPathAlias = getKeyPathAlias(keyPath);
                    var indexList = (indexLookup[keyPathAlias] = indexLookup[keyPathAlias] || []);
                    var keyLength = keyPath == null ? 0 : typeof keyPath === 'string' ? 1 : keyPath.length;
                    var isVirtual = keyTail > 0;
                    var virtualIndex = __assign(__assign({}, lowLevelIndex), { name: isVirtual
                            ? "".concat(keyPathAlias, "(virtual-from:").concat(lowLevelIndex.name, ")")
                            : lowLevelIndex.name, lowLevelIndex: lowLevelIndex, isVirtual: isVirtual, keyTail: keyTail, keyLength: keyLength, extractKey: getKeyExtractor(keyPath), unique: !isVirtual && lowLevelIndex.unique });
                    indexList.push(virtualIndex);
                    if (!virtualIndex.isPrimaryKey) {
                        allVirtualIndexes.push(virtualIndex);
                    }
                    if (keyLength > 1) {
                        var virtualKeyPath = keyLength === 2 ?
                            keyPath[0] :
                            keyPath.slice(0, keyLength - 1);
                        addVirtualIndexes(virtualKeyPath, keyTail + 1, lowLevelIndex);
                    }
                    indexList.sort(function (a, b) { return a.keyTail - b.keyTail; });
                    return virtualIndex;
                }
                var primaryKey = addVirtualIndexes(schema.primaryKey.keyPath, 0, schema.primaryKey);
                indexLookup[":id"] = [primaryKey];
                for (var _i = 0, _a = schema.indexes; _i < _a.length; _i++) {
                    var index = _a[_i];
                    addVirtualIndexes(index.keyPath, 0, index);
                }
                function findBestIndex(keyPath) {
                    var result = indexLookup[getKeyPathAlias(keyPath)];
                    return result && result[0];
                }
                function translateRange(range, keyTail) {
                    return {
                        type: range.type === 1  ?
                            2  :
                            range.type,
                        lower: pad(range.lower, range.lowerOpen ? down.MAX_KEY : down.MIN_KEY, keyTail),
                        lowerOpen: true,
                        upper: pad(range.upper, range.upperOpen ? down.MIN_KEY : down.MAX_KEY, keyTail),
                        upperOpen: true
                    };
                }
                function translateRequest(req) {
                    var index = req.query.index;
                    return index.isVirtual ? __assign(__assign({}, req), { query: {
                            index: index.lowLevelIndex,
                            range: translateRange(req.query.range, index.keyTail)
                        } }) : req;
                }
                var result = __assign(__assign({}, table), { schema: __assign(__assign({}, schema), { primaryKey: primaryKey, indexes: allVirtualIndexes, getIndexByKeyPath: findBestIndex }), count: function (req) {
                        return table.count(translateRequest(req));
                    }, query: function (req) {
                        return table.query(translateRequest(req));
                    }, openCursor: function (req) {
                        var _a = req.query.index, keyTail = _a.keyTail, isVirtual = _a.isVirtual, keyLength = _a.keyLength;
                        if (!isVirtual)
                            return table.openCursor(req);
                        function createVirtualCursor(cursor) {
                            function _continue(key) {
                                key != null ?
                                    cursor.continue(pad(key, req.reverse ? down.MAX_KEY : down.MIN_KEY, keyTail)) :
                                    req.unique ?
                                        cursor.continue(cursor.key.slice(0, keyLength)
                                            .concat(req.reverse
                                            ? down.MIN_KEY
                                            : down.MAX_KEY, keyTail)) :
                                        cursor.continue();
                            }
                            var virtualCursor = Object.create(cursor, {
                                continue: { value: _continue },
                                continuePrimaryKey: {
                                    value: function (key, primaryKey) {
                                        cursor.continuePrimaryKey(pad(key, down.MAX_KEY, keyTail), primaryKey);
                                    }
                                },
                                primaryKey: {
                                    get: function () {
                                        return cursor.primaryKey;
                                    }
                                },
                                key: {
                                    get: function () {
                                        var key = cursor.key;
                                        return keyLength === 1 ?
                                            key[0] :
                                            key.slice(0, keyLength);
                                    }
                                },
                                value: {
                                    get: function () {
                                        return cursor.value;
                                    }
                                }
                            });
                            return virtualCursor;
                        }
                        return table.openCursor(translateRequest(req))
                            .then(function (cursor) { return cursor && createVirtualCursor(cursor); });
                    } });
                return result;
            } });
    }
    var virtualIndexMiddleware = {
        stack: "dbcore",
        name: "VirtualIndexMiddleware",
        level: 1,
        create: createVirtualIndexMiddleware
    };

    function getObjectDiff(a, b, rv, prfx) {
        rv = rv || {};
        prfx = prfx || '';
        keys(a).forEach(function (prop) {
            if (!hasOwn(b, prop)) {
                rv[prfx + prop] = undefined;
            }
            else {
                var ap = a[prop], bp = b[prop];
                if (typeof ap === 'object' && typeof bp === 'object' && ap && bp) {
                    var apTypeName = toStringTag(ap);
                    var bpTypeName = toStringTag(bp);
                    if (apTypeName !== bpTypeName) {
                        rv[prfx + prop] = b[prop];
                    }
                    else if (apTypeName === 'Object') {
                        getObjectDiff(ap, bp, rv, prfx + prop + '.');
                    }
                    else if (ap !== bp) {
                        rv[prfx + prop] = b[prop];
                    }
                }
                else if (ap !== bp)
                    rv[prfx + prop] = b[prop];
            }
        });
        keys(b).forEach(function (prop) {
            if (!hasOwn(a, prop)) {
                rv[prfx + prop] = b[prop];
            }
        });
        return rv;
    }

    function getEffectiveKeys(primaryKey, req) {
        if (req.type === 'delete')
            return req.keys;
        return req.keys || req.values.map(primaryKey.extractKey);
    }

    var hooksMiddleware = {
        stack: "dbcore",
        name: "HooksMiddleware",
        level: 2,
        create: function (downCore) { return (__assign(__assign({}, downCore), { table: function (tableName) {
                var downTable = downCore.table(tableName);
                var primaryKey = downTable.schema.primaryKey;
                var tableMiddleware = __assign(__assign({}, downTable), { mutate: function (req) {
                        var dxTrans = PSD.trans;
                        var _a = dxTrans.table(tableName).hook, deleting = _a.deleting, creating = _a.creating, updating = _a.updating;
                        switch (req.type) {
                            case 'add':
                                if (creating.fire === nop)
                                    break;
                                return dxTrans._promise('readwrite', function () { return addPutOrDelete(req); }, true);
                            case 'put':
                                if (creating.fire === nop && updating.fire === nop)
                                    break;
                                return dxTrans._promise('readwrite', function () { return addPutOrDelete(req); }, true);
                            case 'delete':
                                if (deleting.fire === nop)
                                    break;
                                return dxTrans._promise('readwrite', function () { return addPutOrDelete(req); }, true);
                            case 'deleteRange':
                                if (deleting.fire === nop)
                                    break;
                                return dxTrans._promise('readwrite', function () { return deleteRange(req); }, true);
                        }
                        return downTable.mutate(req);
                        function addPutOrDelete(req) {
                            var dxTrans = PSD.trans;
                            var keys = req.keys || getEffectiveKeys(primaryKey, req);
                            if (!keys)
                                throw new Error("Keys missing");
                            req = req.type === 'add' || req.type === 'put' ? __assign(__assign({}, req), { keys: keys }) : __assign({}, req);
                            if (req.type !== 'delete')
                                req.values = __spreadArray([], req.values, true);
                            if (req.keys)
                                req.keys = __spreadArray([], req.keys, true);
                            return getExistingValues(downTable, req, keys).then(function (existingValues) {
                                var contexts = keys.map(function (key, i) {
                                    var existingValue = existingValues[i];
                                    var ctx = { onerror: null, onsuccess: null };
                                    if (req.type === 'delete') {
                                        deleting.fire.call(ctx, key, existingValue, dxTrans);
                                    }
                                    else if (req.type === 'add' || existingValue === undefined) {
                                        var generatedPrimaryKey = creating.fire.call(ctx, key, req.values[i], dxTrans);
                                        if (key == null && generatedPrimaryKey != null) {
                                            key = generatedPrimaryKey;
                                            req.keys[i] = key;
                                            if (!primaryKey.outbound) {
                                                setByKeyPath(req.values[i], primaryKey.keyPath, key);
                                            }
                                        }
                                    }
                                    else {
                                        var objectDiff = getObjectDiff(existingValue, req.values[i]);
                                        var additionalChanges_1 = updating.fire.call(ctx, objectDiff, key, existingValue, dxTrans);
                                        if (additionalChanges_1) {
                                            var requestedValue_1 = req.values[i];
                                            Object.keys(additionalChanges_1).forEach(function (keyPath) {
                                                if (hasOwn(requestedValue_1, keyPath)) {
                                                    requestedValue_1[keyPath] = additionalChanges_1[keyPath];
                                                }
                                                else {
                                                    setByKeyPath(requestedValue_1, keyPath, additionalChanges_1[keyPath]);
                                                }
                                            });
                                        }
                                    }
                                    return ctx;
                                });
                                return downTable.mutate(req).then(function (_a) {
                                    var failures = _a.failures, results = _a.results, numFailures = _a.numFailures, lastResult = _a.lastResult;
                                    for (var i = 0; i < keys.length; ++i) {
                                        var primKey = results ? results[i] : keys[i];
                                        var ctx = contexts[i];
                                        if (primKey == null) {
                                            ctx.onerror && ctx.onerror(failures[i]);
                                        }
                                        else {
                                            ctx.onsuccess && ctx.onsuccess(req.type === 'put' && existingValues[i] ?
                                                req.values[i] :
                                                primKey
                                            );
                                        }
                                    }
                                    return { failures: failures, results: results, numFailures: numFailures, lastResult: lastResult };
                                }).catch(function (error) {
                                    contexts.forEach(function (ctx) { return ctx.onerror && ctx.onerror(error); });
                                    return Promise.reject(error);
                                });
                            });
                        }
                        function deleteRange(req) {
                            return deleteNextChunk(req.trans, req.range, 10000);
                        }
                        function deleteNextChunk(trans, range, limit) {
                            return downTable.query({ trans: trans, values: false, query: { index: primaryKey, range: range }, limit: limit })
                                .then(function (_a) {
                                var result = _a.result;
                                return addPutOrDelete({ type: 'delete', keys: result, trans: trans }).then(function (res) {
                                    if (res.numFailures > 0)
                                        return Promise.reject(res.failures[0]);
                                    if (result.length < limit) {
                                        return { failures: [], numFailures: 0, lastResult: undefined };
                                    }
                                    else {
                                        return deleteNextChunk(trans, __assign(__assign({}, range), { lower: result[result.length - 1], lowerOpen: true }), limit);
                                    }
                                });
                            });
                        }
                    } });
                return tableMiddleware;
            } })); }
    };
    function getExistingValues(table, req, effectiveKeys) {
        return req.type === "add"
            ? Promise.resolve([])
            : table.getMany({ trans: req.trans, keys: effectiveKeys, cache: "immutable" });
    }

    function getFromTransactionCache(keys, cache, clone) {
        try {
            if (!cache)
                return null;
            if (cache.keys.length < keys.length)
                return null;
            var result = [];
            for (var i = 0, j = 0; i < cache.keys.length && j < keys.length; ++i) {
                if (cmp(cache.keys[i], keys[j]) !== 0)
                    continue;
                result.push(clone ? deepClone(cache.values[i]) : cache.values[i]);
                ++j;
            }
            return result.length === keys.length ? result : null;
        }
        catch (_a) {
            return null;
        }
    }
    var cacheExistingValuesMiddleware = {
        stack: "dbcore",
        level: -1,
        create: function (core) {
            return {
                table: function (tableName) {
                    var table = core.table(tableName);
                    return __assign(__assign({}, table), { getMany: function (req) {
                            if (!req.cache) {
                                return table.getMany(req);
                            }
                            var cachedResult = getFromTransactionCache(req.keys, req.trans["_cache"], req.cache === "clone");
                            if (cachedResult) {
                                return DexiePromise.resolve(cachedResult);
                            }
                            return table.getMany(req).then(function (res) {
                                req.trans["_cache"] = {
                                    keys: req.keys,
                                    values: req.cache === "clone" ? deepClone(res) : res,
                                };
                                return res;
                            });
                        }, mutate: function (req) {
                            if (req.type !== "add")
                                req.trans["_cache"] = null;
                            return table.mutate(req);
                        } });
                },
            };
        },
    };

    function isCachableContext(ctx, table) {
        return (ctx.trans.mode === 'readonly' &&
            !!ctx.subscr &&
            !ctx.trans.explicit &&
            ctx.trans.db._options.cache !== 'disabled' &&
            !table.schema.primaryKey.outbound);
    }

    function isCachableRequest(type, req) {
        switch (type) {
            case 'query':
                return req.values && !req.unique;
            case 'get':
                return false;
            case 'getMany':
                return false;
            case 'count':
                return false;
            case 'openCursor':
                return false;
        }
    }

    var observabilityMiddleware = {
        stack: "dbcore",
        level: 0,
        name: "Observability",
        create: function (core) {
            var dbName = core.schema.name;
            var FULL_RANGE = new RangeSet(core.MIN_KEY, core.MAX_KEY);
            return __assign(__assign({}, core), { transaction: function (stores, mode, options) {
                    if (PSD.subscr && mode !== 'readonly') {
                        throw new exceptions.ReadOnly("Readwrite transaction in liveQuery context. Querier source: ".concat(PSD.querier));
                    }
                    return core.transaction(stores, mode, options);
                }, table: function (tableName) {
                    var table = core.table(tableName);
                    var schema = table.schema;
                    var primaryKey = schema.primaryKey, indexes = schema.indexes;
                    var extractKey = primaryKey.extractKey, outbound = primaryKey.outbound;
                    var indexesWithAutoIncPK = primaryKey.autoIncrement && indexes.filter(function (index) { return index.compound && index.keyPath.includes(primaryKey.keyPath); });
                    var tableClone = __assign(__assign({}, table), { mutate: function (req) {
                            var _a, _b;
                            var trans = req.trans;
                            var mutatedParts = req.mutatedParts || (req.mutatedParts = {});
                            var getRangeSet = function (indexName) {
                                var part = "idb://".concat(dbName, "/").concat(tableName, "/").concat(indexName);
                                return (mutatedParts[part] ||
                                    (mutatedParts[part] = new RangeSet()));
                            };
                            var pkRangeSet = getRangeSet("");
                            var delsRangeSet = getRangeSet(":dels");
                            var type = req.type;
                            var _c = req.type === "deleteRange"
                                ? [req.range]
                                : req.type === "delete"
                                    ? [req.keys]
                                    : req.values.length < 50
                                        ? [getEffectiveKeys(primaryKey, req).filter(function (id) { return id; }), req.values]
                                        : [], keys = _c[0], newObjs = _c[1];
                            var oldCache = req.trans["_cache"];
                            if (isArray(keys)) {
                                pkRangeSet.addKeys(keys);
                                var oldObjs = type === 'delete' || keys.length === newObjs.length ? getFromTransactionCache(keys, oldCache) : null;
                                if (!oldObjs) {
                                    delsRangeSet.addKeys(keys);
                                }
                                if (oldObjs || newObjs) {
                                    trackAffectedIndexes(getRangeSet, schema, oldObjs, newObjs);
                                }
                            }
                            else if (keys) {
                                var range = {
                                    from: (_a = keys.lower) !== null && _a !== void 0 ? _a : core.MIN_KEY,
                                    to: (_b = keys.upper) !== null && _b !== void 0 ? _b : core.MAX_KEY
                                };
                                delsRangeSet.add(range);
                                pkRangeSet.add(range);
                            }
                            else {
                                pkRangeSet.add(FULL_RANGE);
                                delsRangeSet.add(FULL_RANGE);
                                schema.indexes.forEach(function (idx) { return getRangeSet(idx.name).add(FULL_RANGE); });
                            }
                            return table.mutate(req).then(function (res) {
                                if (keys && (req.type === 'add' || req.type === 'put')) {
                                    pkRangeSet.addKeys(res.results);
                                    if (indexesWithAutoIncPK) {
                                        indexesWithAutoIncPK.forEach(function (idx) {
                                            var idxVals = req.values.map(function (v) { return idx.extractKey(v); });
                                            var pkPos = idx.keyPath.findIndex(function (prop) { return prop === primaryKey.keyPath; });
                                            for (var i = 0, len = res.results.length; i < len; ++i) {
                                                idxVals[i][pkPos] = res.results[i];
                                            }
                                            getRangeSet(idx.name).addKeys(idxVals);
                                        });
                                    }
                                }
                                trans.mutatedParts = extendObservabilitySet(trans.mutatedParts || {}, mutatedParts);
                                return res;
                            });
                        } });
                    var getRange = function (_a) {
                        var _b, _c;
                        var _d = _a.query, index = _d.index, range = _d.range;
                        return [
                            index,
                            new RangeSet((_b = range.lower) !== null && _b !== void 0 ? _b : core.MIN_KEY, (_c = range.upper) !== null && _c !== void 0 ? _c : core.MAX_KEY),
                        ];
                    };
                    var readSubscribers = {
                        get: function (req) { return [primaryKey, new RangeSet(req.key)]; },
                        getMany: function (req) { return [primaryKey, new RangeSet().addKeys(req.keys)]; },
                        count: getRange,
                        query: getRange,
                        openCursor: getRange,
                    };
                    keys(readSubscribers).forEach(function (method) {
                        tableClone[method] = function (req) {
                            var subscr = PSD.subscr;
                            var isLiveQuery = !!subscr;
                            var cachable = isCachableContext(PSD, table) && isCachableRequest(method, req);
                            var obsSet = cachable
                                ? req.obsSet = {}
                                : subscr;
                            if (isLiveQuery) {
                                var getRangeSet = function (indexName) {
                                    var part = "idb://".concat(dbName, "/").concat(tableName, "/").concat(indexName);
                                    return (obsSet[part] ||
                                        (obsSet[part] = new RangeSet()));
                                };
                                var pkRangeSet_1 = getRangeSet("");
                                var delsRangeSet_1 = getRangeSet(":dels");
                                var _a = readSubscribers[method](req), queriedIndex = _a[0], queriedRanges = _a[1];
                                if (method === 'query' && queriedIndex.isPrimaryKey && !req.values) {
                                    delsRangeSet_1.add(queriedRanges);
                                }
                                else {
                                    getRangeSet(queriedIndex.name || "").add(queriedRanges);
                                }
                                if (!queriedIndex.isPrimaryKey) {
                                    if (method === "count") {
                                        delsRangeSet_1.add(FULL_RANGE);
                                    }
                                    else {
                                        var keysPromise_1 = method === "query" &&
                                            outbound &&
                                            req.values &&
                                            table.query(__assign(__assign({}, req), { values: false }));
                                        return table[method].apply(this, arguments).then(function (res) {
                                            if (method === "query") {
                                                if (outbound && req.values) {
                                                    return keysPromise_1.then(function (_a) {
                                                        var resultingKeys = _a.result;
                                                        pkRangeSet_1.addKeys(resultingKeys);
                                                        return res;
                                                    });
                                                }
                                                var pKeys = req.values
                                                    ? res.result.map(extractKey)
                                                    : res.result;
                                                if (req.values) {
                                                    pkRangeSet_1.addKeys(pKeys);
                                                }
                                                else {
                                                    delsRangeSet_1.addKeys(pKeys);
                                                }
                                            }
                                            else if (method === "openCursor") {
                                                var cursor_1 = res;
                                                var wantValues_1 = req.values;
                                                return (cursor_1 &&
                                                    Object.create(cursor_1, {
                                                        key: {
                                                            get: function () {
                                                                delsRangeSet_1.addKey(cursor_1.primaryKey);
                                                                return cursor_1.key;
                                                            },
                                                        },
                                                        primaryKey: {
                                                            get: function () {
                                                                var pkey = cursor_1.primaryKey;
                                                                delsRangeSet_1.addKey(pkey);
                                                                return pkey;
                                                            },
                                                        },
                                                        value: {
                                                            get: function () {
                                                                wantValues_1 && pkRangeSet_1.addKey(cursor_1.primaryKey);
                                                                return cursor_1.value;
                                                            },
                                                        },
                                                    }));
                                            }
                                            return res;
                                        });
                                    }
                                }
                            }
                            return table[method].apply(this, arguments);
                        };
                    });
                    return tableClone;
                } });
        },
    };
    function trackAffectedIndexes(getRangeSet, schema, oldObjs, newObjs) {
        function addAffectedIndex(ix) {
            var rangeSet = getRangeSet(ix.name || "");
            function extractKey(obj) {
                return obj != null ? ix.extractKey(obj) : null;
            }
            var addKeyOrKeys = function (key) { return ix.multiEntry && isArray(key)
                ? key.forEach(function (key) { return rangeSet.addKey(key); })
                : rangeSet.addKey(key); };
            (oldObjs || newObjs).forEach(function (_, i) {
                var oldKey = oldObjs && extractKey(oldObjs[i]);
                var newKey = newObjs && extractKey(newObjs[i]);
                if (cmp(oldKey, newKey) !== 0) {
                    if (oldKey != null)
                        addKeyOrKeys(oldKey);
                    if (newKey != null)
                        addKeyOrKeys(newKey);
                }
            });
        }
        schema.indexes.forEach(addAffectedIndex);
    }

    function adjustOptimisticFromFailures(tblCache, req, res) {
        if (res.numFailures === 0)
            return req;
        if (req.type === 'deleteRange') {
            return null;
        }
        var numBulkOps = req.keys
            ? req.keys.length
            : 'values' in req && req.values
                ? req.values.length
                : 1;
        if (res.numFailures === numBulkOps) {
            return null;
        }
        var clone = __assign({}, req);
        if (isArray(clone.keys)) {
            clone.keys = clone.keys.filter(function (_, i) { return !(i in res.failures); });
        }
        if ('values' in clone && isArray(clone.values)) {
            clone.values = clone.values.filter(function (_, i) { return !(i in res.failures); });
        }
        return clone;
    }

    function isAboveLower(key, range) {
        return range.lower === undefined
            ? true
            : range.lowerOpen
                ? cmp(key, range.lower) > 0
                : cmp(key, range.lower) >= 0;
    }
    function isBelowUpper(key, range) {
        return range.upper === undefined
            ? true
            : range.upperOpen
                ? cmp(key, range.upper) < 0
                : cmp(key, range.upper) <= 0;
    }
    function isWithinRange(key, range) {
        return isAboveLower(key, range) && isBelowUpper(key, range);
    }

    function applyOptimisticOps(result, req, ops, table, cacheEntry, immutable) {
        if (!ops || ops.length === 0)
            return result;
        var index = req.query.index;
        var multiEntry = index.multiEntry;
        var queryRange = req.query.range;
        var primaryKey = table.schema.primaryKey;
        var extractPrimKey = primaryKey.extractKey;
        var extractIndex = index.extractKey;
        var extractLowLevelIndex = (index.lowLevelIndex || index).extractKey;
        var finalResult = ops.reduce(function (result, op) {
            var modifedResult = result;
            var includedValues = [];
            if (op.type === 'add' || op.type === 'put') {
                var includedPKs = new RangeSet();
                for (var i = op.values.length - 1; i >= 0; --i) {
                    var value = op.values[i];
                    var pk = extractPrimKey(value);
                    if (includedPKs.hasKey(pk))
                        continue;
                    var key = extractIndex(value);
                    if (multiEntry && isArray(key)
                        ? key.some(function (k) { return isWithinRange(k, queryRange); })
                        : isWithinRange(key, queryRange)) {
                        includedPKs.addKey(pk);
                        includedValues.push(value);
                    }
                }
            }
            switch (op.type) {
                case 'add': {
                    var existingKeys_1 = new RangeSet().addKeys(req.values ? result.map(function (v) { return extractPrimKey(v); }) : result);
                    modifedResult = result.concat(req.values
                        ? includedValues.filter(function (v) {
                            var key = extractPrimKey(v);
                            if (existingKeys_1.hasKey(key))
                                return false;
                            existingKeys_1.addKey(key);
                            return true;
                        })
                        : includedValues
                            .map(function (v) { return extractPrimKey(v); })
                            .filter(function (k) {
                            if (existingKeys_1.hasKey(k))
                                return false;
                            existingKeys_1.addKey(k);
                            return true;
                        }));
                    break;
                }
                case 'put': {
                    var keySet_1 = new RangeSet().addKeys(op.values.map(function (v) { return extractPrimKey(v); }));
                    modifedResult = result
                        .filter(
                    function (item) { return !keySet_1.hasKey(req.values ? extractPrimKey(item) : item); })
                        .concat(
                    req.values
                        ? includedValues
                        : includedValues.map(function (v) { return extractPrimKey(v); }));
                    break;
                }
                case 'delete':
                    var keysToDelete_1 = new RangeSet().addKeys(op.keys);
                    modifedResult = result.filter(function (item) {
                        return !keysToDelete_1.hasKey(req.values ? extractPrimKey(item) : item);
                    });
                    break;
                case 'deleteRange':
                    var range_1 = op.range;
                    modifedResult = result.filter(function (item) { return !isWithinRange(extractPrimKey(item), range_1); });
                    break;
            }
            return modifedResult;
        }, result);
        if (finalResult === result)
            return result;
        finalResult.sort(function (a, b) {
            return cmp(extractLowLevelIndex(a), extractLowLevelIndex(b)) ||
                cmp(extractPrimKey(a), extractPrimKey(b));
        });
        if (req.limit && req.limit < Infinity) {
            if (finalResult.length > req.limit) {
                finalResult.length = req.limit;
            }
            else if (result.length === req.limit && finalResult.length < req.limit) {
                cacheEntry.dirty = true;
            }
        }
        return immutable ? Object.freeze(finalResult) : finalResult;
    }

    function areRangesEqual(r1, r2) {
        return (cmp(r1.lower, r2.lower) === 0 &&
            cmp(r1.upper, r2.upper) === 0 &&
            !!r1.lowerOpen === !!r2.lowerOpen &&
            !!r1.upperOpen === !!r2.upperOpen);
    }

    function compareLowers(lower1, lower2, lowerOpen1, lowerOpen2) {
        if (lower1 === undefined)
            return lower2 !== undefined ? -1 : 0;
        if (lower2 === undefined)
            return 1;
        var c = cmp(lower1, lower2);
        if (c === 0) {
            if (lowerOpen1 && lowerOpen2)
                return 0;
            if (lowerOpen1)
                return 1;
            if (lowerOpen2)
                return -1;
        }
        return c;
    }
    function compareUppers(upper1, upper2, upperOpen1, upperOpen2) {
        if (upper1 === undefined)
            return upper2 !== undefined ? 1 : 0;
        if (upper2 === undefined)
            return -1;
        var c = cmp(upper1, upper2);
        if (c === 0) {
            if (upperOpen1 && upperOpen2)
                return 0;
            if (upperOpen1)
                return -1;
            if (upperOpen2)
                return 1;
        }
        return c;
    }
    function isSuperRange(r1, r2) {
        return (compareLowers(r1.lower, r2.lower, r1.lowerOpen, r2.lowerOpen) <= 0 &&
            compareUppers(r1.upper, r2.upper, r1.upperOpen, r2.upperOpen) >= 0);
    }

    function findCompatibleQuery(dbName, tableName, type, req) {
        var tblCache = cache["idb://".concat(dbName, "/").concat(tableName)];
        if (!tblCache)
            return [];
        var queries = tblCache.queries[type];
        if (!queries)
            return [null, false, tblCache, null];
        var indexName = req.query ? req.query.index.name : null;
        var entries = queries[indexName || ''];
        if (!entries)
            return [null, false, tblCache, null];
        switch (type) {
            case 'query':
                var equalEntry = entries.find(function (entry) {
                    return entry.req.limit === req.limit &&
                        entry.req.values === req.values &&
                        areRangesEqual(entry.req.query.range, req.query.range);
                });
                if (equalEntry)
                    return [
                        equalEntry,
                        true,
                        tblCache,
                        entries,
                    ];
                var superEntry = entries.find(function (entry) {
                    var limit = 'limit' in entry.req ? entry.req.limit : Infinity;
                    return (limit >= req.limit &&
                        (req.values ? entry.req.values : true) &&
                        isSuperRange(entry.req.query.range, req.query.range));
                });
                return [superEntry, false, tblCache, entries];
            case 'count':
                var countQuery = entries.find(function (entry) {
                    return areRangesEqual(entry.req.query.range, req.query.range);
                });
                return [countQuery, !!countQuery, tblCache, entries];
        }
    }

    function subscribeToCacheEntry(cacheEntry, container, requery, signal) {
        cacheEntry.subscribers.add(requery);
        signal.addEventListener("abort", function () {
            cacheEntry.subscribers.delete(requery);
            if (cacheEntry.subscribers.size === 0) {
                enqueForDeletion(cacheEntry, container);
            }
        });
    }
    function enqueForDeletion(cacheEntry, container) {
        setTimeout(function () {
            if (cacheEntry.subscribers.size === 0) {
                delArrayItem(container, cacheEntry);
            }
        }, 3000);
    }

    var cacheMiddleware = {
        stack: 'dbcore',
        level: 0,
        name: 'Cache',
        create: function (core) {
            var dbName = core.schema.name;
            var coreMW = __assign(__assign({}, core), { transaction: function (stores, mode, options) {
                    var idbtrans = core.transaction(stores, mode, options);
                    if (mode === 'readwrite') {
                        var ac_1 = new AbortController();
                        var signal = ac_1.signal;
                        var endTransaction = function (wasCommitted) { return function () {
                            ac_1.abort();
                            if (mode === 'readwrite') {
                                var affectedSubscribers_1 = new Set();
                                for (var _i = 0, stores_1 = stores; _i < stores_1.length; _i++) {
                                    var storeName = stores_1[_i];
                                    var tblCache = cache["idb://".concat(dbName, "/").concat(storeName)];
                                    if (tblCache) {
                                        var table = core.table(storeName);
                                        var ops = tblCache.optimisticOps.filter(function (op) { return op.trans === idbtrans; });
                                        if (idbtrans._explicit && wasCommitted && idbtrans.mutatedParts) {
                                            for (var _a = 0, _b = Object.values(tblCache.queries.query); _a < _b.length; _a++) {
                                                var entries = _b[_a];
                                                for (var _c = 0, _d = entries.slice(); _c < _d.length; _c++) {
                                                    var entry = _d[_c];
                                                    if (obsSetsOverlap(entry.obsSet, idbtrans.mutatedParts)) {
                                                        delArrayItem(entries, entry);
                                                        entry.subscribers.forEach(function (requery) { return affectedSubscribers_1.add(requery); });
                                                    }
                                                }
                                            }
                                        }
                                        else if (ops.length > 0) {
                                            tblCache.optimisticOps = tblCache.optimisticOps.filter(function (op) { return op.trans !== idbtrans; });
                                            for (var _e = 0, _f = Object.values(tblCache.queries.query); _e < _f.length; _e++) {
                                                var entries = _f[_e];
                                                for (var _g = 0, _h = entries.slice(); _g < _h.length; _g++) {
                                                    var entry = _h[_g];
                                                    if (entry.res != null &&
                                                        idbtrans.mutatedParts
    ) {
                                                        if (wasCommitted && !entry.dirty) {
                                                            var freezeResults = Object.isFrozen(entry.res);
                                                            var modRes = applyOptimisticOps(entry.res, entry.req, ops, table, entry, freezeResults);
                                                            if (entry.dirty) {
                                                                delArrayItem(entries, entry);
                                                                entry.subscribers.forEach(function (requery) { return affectedSubscribers_1.add(requery); });
                                                            }
                                                            else if (modRes !== entry.res) {
                                                                entry.res = modRes;
                                                                entry.promise = DexiePromise.resolve({ result: modRes });
                                                            }
                                                        }
                                                        else {
                                                            if (entry.dirty) {
                                                                delArrayItem(entries, entry);
                                                            }
                                                            entry.subscribers.forEach(function (requery) { return affectedSubscribers_1.add(requery); });
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                affectedSubscribers_1.forEach(function (requery) { return requery(); });
                            }
                        }; };
                        idbtrans.addEventListener('abort', endTransaction(false), {
                            signal: signal,
                        });
                        idbtrans.addEventListener('error', endTransaction(false), {
                            signal: signal,
                        });
                        idbtrans.addEventListener('complete', endTransaction(true), {
                            signal: signal,
                        });
                    }
                    return idbtrans;
                }, table: function (tableName) {
                    var downTable = core.table(tableName);
                    var primKey = downTable.schema.primaryKey;
                    var tableMW = __assign(__assign({}, downTable), { mutate: function (req) {
                            var trans = PSD.trans;
                            if (primKey.outbound ||
                                trans.db._options.cache === 'disabled' ||
                                trans.explicit ||
                                trans.idbtrans.mode !== 'readwrite'
                            ) {
                                return downTable.mutate(req);
                            }
                            var tblCache = cache["idb://".concat(dbName, "/").concat(tableName)];
                            if (!tblCache)
                                return downTable.mutate(req);
                            var promise = downTable.mutate(req);
                            if ((req.type === 'add' || req.type === 'put') && (req.values.length >= 50 || getEffectiveKeys(primKey, req).some(function (key) { return key == null; }))) {
                                promise.then(function (res) {
                                    var reqWithResolvedKeys = __assign(__assign({}, req), { values: req.values.map(function (value, i) {
                                            var _a;
                                            if (res.failures[i])
                                                return value;
                                            var valueWithKey = ((_a = primKey.keyPath) === null || _a === void 0 ? void 0 : _a.includes('.'))
                                                ? deepClone(value)
                                                : __assign({}, value);
                                            setByKeyPath(valueWithKey, primKey.keyPath, res.results[i]);
                                            return valueWithKey;
                                        }) });
                                    var adjustedReq = adjustOptimisticFromFailures(tblCache, reqWithResolvedKeys, res);
                                    tblCache.optimisticOps.push(adjustedReq);
                                    queueMicrotask(function () { return req.mutatedParts && signalSubscribersLazily(req.mutatedParts); });
                                });
                            }
                            else {
                                tblCache.optimisticOps.push(req);
                                req.mutatedParts && signalSubscribersLazily(req.mutatedParts);
                                promise.then(function (res) {
                                    if (res.numFailures > 0) {
                                        delArrayItem(tblCache.optimisticOps, req);
                                        var adjustedReq = adjustOptimisticFromFailures(tblCache, req, res);
                                        if (adjustedReq) {
                                            tblCache.optimisticOps.push(adjustedReq);
                                        }
                                        req.mutatedParts && signalSubscribersLazily(req.mutatedParts);
                                    }
                                });
                                promise.catch(function () {
                                    delArrayItem(tblCache.optimisticOps, req);
                                    req.mutatedParts && signalSubscribersLazily(req.mutatedParts);
                                });
                            }
                            return promise;
                        }, query: function (req) {
                            var _a;
                            if (!isCachableContext(PSD, downTable) || !isCachableRequest("query", req))
                                return downTable.query(req);
                            var freezeResults = ((_a = PSD.trans) === null || _a === void 0 ? void 0 : _a.db._options.cache) === 'immutable';
                            var _b = PSD, requery = _b.requery, signal = _b.signal;
                            var _c = findCompatibleQuery(dbName, tableName, 'query', req), cacheEntry = _c[0], exactMatch = _c[1], tblCache = _c[2], container = _c[3];
                            if (cacheEntry && exactMatch) {
                                cacheEntry.obsSet = req.obsSet;
                            }
                            else {
                                var promise = downTable.query(req).then(function (res) {
                                    var result = res.result;
                                    if (cacheEntry)
                                        cacheEntry.res = result;
                                    if (freezeResults) {
                                        for (var i = 0, l = result.length; i < l; ++i) {
                                            Object.freeze(result[i]);
                                        }
                                        Object.freeze(result);
                                    }
                                    else {
                                        res.result = deepClone(result);
                                    }
                                    return res;
                                }).catch(function (error) {
                                    if (container && cacheEntry)
                                        delArrayItem(container, cacheEntry);
                                    return Promise.reject(error);
                                });
                                cacheEntry = {
                                    obsSet: req.obsSet,
                                    promise: promise,
                                    subscribers: new Set(),
                                    type: 'query',
                                    req: req,
                                    dirty: false,
                                };
                                if (container) {
                                    container.push(cacheEntry);
                                }
                                else {
                                    container = [cacheEntry];
                                    if (!tblCache) {
                                        tblCache = cache["idb://".concat(dbName, "/").concat(tableName)] = {
                                            queries: {
                                                query: {},
                                                count: {},
                                            },
                                            objs: new Map(),
                                            optimisticOps: [],
                                            unsignaledParts: {}
                                        };
                                    }
                                    tblCache.queries.query[req.query.index.name || ''] = container;
                                }
                            }
                            subscribeToCacheEntry(cacheEntry, container, requery, signal);
                            return cacheEntry.promise.then(function (res) {
                                return {
                                    result: applyOptimisticOps(res.result, req, tblCache === null || tblCache === void 0 ? void 0 : tblCache.optimisticOps, downTable, cacheEntry, freezeResults),
                                };
                            });
                        } });
                    return tableMW;
                } });
            return coreMW;
        },
    };

    function vipify(target, vipDb) {
        return new Proxy(target, {
            get: function (target, prop, receiver) {
                if (prop === 'db')
                    return vipDb;
                return Reflect.get(target, prop, receiver);
            }
        });
    }

    var Dexie$1 =  (function () {
        function Dexie(name, options) {
            var _this = this;
            this._middlewares = {};
            this.verno = 0;
            var deps = Dexie.dependencies;
            this._options = options = __assign({
                addons: Dexie.addons, autoOpen: true,
                indexedDB: deps.indexedDB, IDBKeyRange: deps.IDBKeyRange, cache: 'cloned' }, options);
            this._deps = {
                indexedDB: options.indexedDB,
                IDBKeyRange: options.IDBKeyRange
            };
            var addons = options.addons;
            this._dbSchema = {};
            this._versions = [];
            this._storeNames = [];
            this._allTables = {};
            this.idbdb = null;
            this._novip = this;
            var state = {
                dbOpenError: null,
                isBeingOpened: false,
                onReadyBeingFired: null,
                openComplete: false,
                dbReadyResolve: nop,
                dbReadyPromise: null,
                cancelOpen: nop,
                openCanceller: null,
                autoSchema: true,
                PR1398_maxLoop: 3,
                autoOpen: options.autoOpen,
            };
            state.dbReadyPromise = new DexiePromise(function (resolve) {
                state.dbReadyResolve = resolve;
            });
            state.openCanceller = new DexiePromise(function (_, reject) {
                state.cancelOpen = reject;
            });
            this._state = state;
            this.name = name;
            this.on = Events(this, "populate", "blocked", "versionchange", "close", { ready: [promisableChain, nop] });
            this.once = function (event, callback) {
                var fn = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.on(event).unsubscribe(fn);
                    callback.apply(_this, args);
                };
                return _this.on(event, fn);
            };
            this.on.ready.subscribe = override(this.on.ready.subscribe, function (subscribe) {
                return function (subscriber, bSticky) {
                    Dexie.vip(function () {
                        var state = _this._state;
                        if (state.openComplete) {
                            if (!state.dbOpenError)
                                DexiePromise.resolve().then(subscriber);
                            if (bSticky)
                                subscribe(subscriber);
                        }
                        else if (state.onReadyBeingFired) {
                            state.onReadyBeingFired.push(subscriber);
                            if (bSticky)
                                subscribe(subscriber);
                        }
                        else {
                            subscribe(subscriber);
                            var db_1 = _this;
                            if (!bSticky)
                                subscribe(function unsubscribe() {
                                    db_1.on.ready.unsubscribe(subscriber);
                                    db_1.on.ready.unsubscribe(unsubscribe);
                                });
                        }
                    });
                };
            });
            this.Collection = createCollectionConstructor(this);
            this.Table = createTableConstructor(this);
            this.Transaction = createTransactionConstructor(this);
            this.Version = createVersionConstructor(this);
            this.WhereClause = createWhereClauseConstructor(this);
            this.on("versionchange", function (ev) {
                if (ev.newVersion > 0)
                    console.warn("Another connection wants to upgrade database '".concat(_this.name, "'. Closing db now to resume the upgrade."));
                else
                    console.warn("Another connection wants to delete database '".concat(_this.name, "'. Closing db now to resume the delete request."));
                _this.close({ disableAutoOpen: false });
            });
            this.on("blocked", function (ev) {
                if (!ev.newVersion || ev.newVersion < ev.oldVersion)
                    console.warn("Dexie.delete('".concat(_this.name, "') was blocked"));
                else
                    console.warn("Upgrade '".concat(_this.name, "' blocked by other connection holding version ").concat(ev.oldVersion / 10));
            });
            this._maxKey = getMaxKey(options.IDBKeyRange);
            this._createTransaction = function (mode, storeNames, dbschema, parentTransaction) { return new _this.Transaction(mode, storeNames, dbschema, _this._options.chromeTransactionDurability, parentTransaction); };
            this._fireOnBlocked = function (ev) {
                _this.on("blocked").fire(ev);
                connections
                    .filter(function (c) { return c.name === _this.name && c !== _this && !c._state.vcFired; })
                    .map(function (c) { return c.on("versionchange").fire(ev); });
            };
            this.use(cacheExistingValuesMiddleware);
            this.use(cacheMiddleware);
            this.use(observabilityMiddleware);
            this.use(virtualIndexMiddleware);
            this.use(hooksMiddleware);
            var vipDB = new Proxy(this, {
                get: function (_, prop, receiver) {
                    if (prop === '_vip')
                        return true;
                    if (prop === 'table')
                        return function (tableName) { return vipify(_this.table(tableName), vipDB); };
                    var rv = Reflect.get(_, prop, receiver);
                    if (rv instanceof Table)
                        return vipify(rv, vipDB);
                    if (prop === 'tables')
                        return rv.map(function (t) { return vipify(t, vipDB); });
                    if (prop === '_createTransaction')
                        return function () {
                            var tx = rv.apply(this, arguments);
                            return vipify(tx, vipDB);
                        };
                    return rv;
                }
            });
            this.vip = vipDB;
            addons.forEach(function (addon) { return addon(_this); });
        }
        Dexie.prototype.version = function (versionNumber) {
            if (isNaN(versionNumber) || versionNumber < 0.1)
                throw new exceptions.Type("Given version is not a positive number");
            versionNumber = Math.round(versionNumber * 10) / 10;
            if (this.idbdb || this._state.isBeingOpened)
                throw new exceptions.Schema("Cannot add version when database is open");
            this.verno = Math.max(this.verno, versionNumber);
            var versions = this._versions;
            var versionInstance = versions.filter(function (v) { return v._cfg.version === versionNumber; })[0];
            if (versionInstance)
                return versionInstance;
            versionInstance = new this.Version(versionNumber);
            versions.push(versionInstance);
            versions.sort(lowerVersionFirst);
            versionInstance.stores({});
            this._state.autoSchema = false;
            return versionInstance;
        };
        Dexie.prototype._whenReady = function (fn) {
            var _this = this;
            return (this.idbdb && (this._state.openComplete || PSD.letThrough || this._vip)) ? fn() : new DexiePromise(function (resolve, reject) {
                if (_this._state.openComplete) {
                    return reject(new exceptions.DatabaseClosed(_this._state.dbOpenError));
                }
                if (!_this._state.isBeingOpened) {
                    if (!_this._state.autoOpen) {
                        reject(new exceptions.DatabaseClosed());
                        return;
                    }
                    _this.open().catch(nop);
                }
                _this._state.dbReadyPromise.then(resolve, reject);
            }).then(fn);
        };
        Dexie.prototype.use = function (_a) {
            var stack = _a.stack, create = _a.create, level = _a.level, name = _a.name;
            if (name)
                this.unuse({ stack: stack, name: name });
            var middlewares = this._middlewares[stack] || (this._middlewares[stack] = []);
            middlewares.push({ stack: stack, create: create, level: level == null ? 10 : level, name: name });
            middlewares.sort(function (a, b) { return a.level - b.level; });
            return this;
        };
        Dexie.prototype.unuse = function (_a) {
            var stack = _a.stack, name = _a.name, create = _a.create;
            if (stack && this._middlewares[stack]) {
                this._middlewares[stack] = this._middlewares[stack].filter(function (mw) {
                    return create ? mw.create !== create :
                        name ? mw.name !== name :
                            false;
                });
            }
            return this;
        };
        Dexie.prototype.open = function () {
            var _this = this;
            return usePSD(globalPSD,
            function () { return dexieOpen(_this); });
        };
        Dexie.prototype._close = function () {
            this.on.close.fire(new CustomEvent('close'));
            var state = this._state;
            var idx = connections.indexOf(this);
            if (idx >= 0)
                connections.splice(idx, 1);
            if (this.idbdb) {
                try {
                    this.idbdb.close();
                }
                catch (e) { }
                this.idbdb = null;
            }
            if (!state.isBeingOpened) {
                state.dbReadyPromise = new DexiePromise(function (resolve) {
                    state.dbReadyResolve = resolve;
                });
                state.openCanceller = new DexiePromise(function (_, reject) {
                    state.cancelOpen = reject;
                });
            }
        };
        Dexie.prototype.close = function (_a) {
            var _b = _a === void 0 ? { disableAutoOpen: true } : _a, disableAutoOpen = _b.disableAutoOpen;
            var state = this._state;
            if (disableAutoOpen) {
                if (state.isBeingOpened) {
                    state.cancelOpen(new exceptions.DatabaseClosed());
                }
                this._close();
                state.autoOpen = false;
                state.dbOpenError = new exceptions.DatabaseClosed();
            }
            else {
                this._close();
                state.autoOpen = this._options.autoOpen ||
                    state.isBeingOpened;
                state.openComplete = false;
                state.dbOpenError = null;
            }
        };
        Dexie.prototype.delete = function (closeOptions) {
            var _this = this;
            if (closeOptions === void 0) { closeOptions = { disableAutoOpen: true }; }
            var hasInvalidArguments = arguments.length > 0 && typeof arguments[0] !== 'object';
            var state = this._state;
            return new DexiePromise(function (resolve, reject) {
                var doDelete = function () {
                    _this.close(closeOptions);
                    var req = _this._deps.indexedDB.deleteDatabase(_this.name);
                    req.onsuccess = wrap(function () {
                        _onDatabaseDeleted(_this._deps, _this.name);
                        resolve();
                    });
                    req.onerror = eventRejectHandler(reject);
                    req.onblocked = _this._fireOnBlocked;
                };
                if (hasInvalidArguments)
                    throw new exceptions.InvalidArgument("Invalid closeOptions argument to db.delete()");
                if (state.isBeingOpened) {
                    state.dbReadyPromise.then(doDelete);
                }
                else {
                    doDelete();
                }
            });
        };
        Dexie.prototype.backendDB = function () {
            return this.idbdb;
        };
        Dexie.prototype.isOpen = function () {
            return this.idbdb !== null;
        };
        Dexie.prototype.hasBeenClosed = function () {
            var dbOpenError = this._state.dbOpenError;
            return dbOpenError && (dbOpenError.name === 'DatabaseClosed');
        };
        Dexie.prototype.hasFailed = function () {
            return this._state.dbOpenError !== null;
        };
        Dexie.prototype.dynamicallyOpened = function () {
            return this._state.autoSchema;
        };
        Object.defineProperty(Dexie.prototype, "tables", {
            get: function () {
                var _this = this;
                return keys(this._allTables).map(function (name) { return _this._allTables[name]; });
            },
            enumerable: false,
            configurable: true
        });
        Dexie.prototype.transaction = function () {
            var args = extractTransactionArgs.apply(this, arguments);
            return this._transaction.apply(this, args);
        };
        Dexie.prototype._transaction = function (mode, tables, scopeFunc) {
            var _this = this;
            var parentTransaction = PSD.trans;
            if (!parentTransaction || parentTransaction.db !== this || mode.indexOf('!') !== -1)
                parentTransaction = null;
            var onlyIfCompatible = mode.indexOf('?') !== -1;
            mode = mode.replace('!', '').replace('?', '');
            var idbMode, storeNames;
            try {
                storeNames = tables.map(function (table) {
                    var storeName = table instanceof _this.Table ? table.name : table;
                    if (typeof storeName !== 'string')
                        throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
                    return storeName;
                });
                if (mode == "r" || mode === READONLY)
                    idbMode = READONLY;
                else if (mode == "rw" || mode == READWRITE)
                    idbMode = READWRITE;
                else
                    throw new exceptions.InvalidArgument("Invalid transaction mode: " + mode);
                if (parentTransaction) {
                    if (parentTransaction.mode === READONLY && idbMode === READWRITE) {
                        if (onlyIfCompatible) {
                            parentTransaction = null;
                        }
                        else
                            throw new exceptions.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
                    }
                    if (parentTransaction) {
                        storeNames.forEach(function (storeName) {
                            if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {
                                if (onlyIfCompatible) {
                                    parentTransaction = null;
                                }
                                else
                                    throw new exceptions.SubTransaction("Table " + storeName +
                                        " not included in parent transaction.");
                            }
                        });
                    }
                    if (onlyIfCompatible && parentTransaction && !parentTransaction.active) {
                        parentTransaction = null;
                    }
                }
            }
            catch (e) {
                return parentTransaction ?
                    parentTransaction._promise(null, function (_, reject) { reject(e); }) :
                    rejection(e);
            }
            var enterTransaction = enterTransactionScope.bind(null, this, idbMode, storeNames, parentTransaction, scopeFunc);
            return (parentTransaction ?
                parentTransaction._promise(idbMode, enterTransaction, "lock") :
                PSD.trans ?
                    usePSD(PSD.transless, function () { return _this._whenReady(enterTransaction); }) :
                    this._whenReady(enterTransaction));
        };
        Dexie.prototype.table = function (tableName) {
            if (!hasOwn(this._allTables, tableName)) {
                throw new exceptions.InvalidTable("Table ".concat(tableName, " does not exist"));
            }
            return this._allTables[tableName];
        };
        return Dexie;
    }());

    var symbolObservable = typeof Symbol !== "undefined" && "observable" in Symbol
        ? Symbol.observable
        : "@@observable";
    var Observable =  (function () {
        function Observable(subscribe) {
            this._subscribe = subscribe;
        }
        Observable.prototype.subscribe = function (x, error, complete) {
            return this._subscribe(!x || typeof x === "function" ? { next: x, error: error, complete: complete } : x);
        };
        Observable.prototype[symbolObservable] = function () {
            return this;
        };
        return Observable;
    }());

    var domDeps;
    try {
        domDeps = {
            indexedDB: _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,
            IDBKeyRange: _global.IDBKeyRange || _global.webkitIDBKeyRange
        };
    }
    catch (e) {
        domDeps = { indexedDB: null, IDBKeyRange: null };
    }

    function liveQuery(querier) {
        var hasValue = false;
        var currentValue;
        var observable = new Observable(function (observer) {
            var scopeFuncIsAsync = isAsyncFunction(querier);
            function execute(ctx) {
                var wasRootExec = beginMicroTickScope();
                try {
                    if (scopeFuncIsAsync) {
                        incrementExpectedAwaits();
                    }
                    var rv = newScope(querier, ctx);
                    if (scopeFuncIsAsync) {
                        rv = rv.finally(decrementExpectedAwaits);
                    }
                    return rv;
                }
                finally {
                    wasRootExec && endMicroTickScope();
                }
            }
            var closed = false;
            var abortController;
            var accumMuts = {};
            var currentObs = {};
            var subscription = {
                get closed() {
                    return closed;
                },
                unsubscribe: function () {
                    if (closed)
                        return;
                    closed = true;
                    if (abortController)
                        abortController.abort();
                    if (startedListening)
                        globalEvents.storagemutated.unsubscribe(mutationListener);
                },
            };
            observer.start && observer.start(subscription);
            var startedListening = false;
            var doQuery = function () { return execInGlobalContext(_doQuery); };
            function shouldNotify() {
                return obsSetsOverlap(currentObs, accumMuts);
            }
            var mutationListener = function (parts) {
                extendObservabilitySet(accumMuts, parts);
                if (shouldNotify()) {
                    doQuery();
                }
            };
            var _doQuery = function () {
                if (closed ||
                    !domDeps.indexedDB)
                 {
                    return;
                }
                accumMuts = {};
                var subscr = {};
                if (abortController)
                    abortController.abort();
                abortController = new AbortController();
                var ctx = {
                    subscr: subscr,
                    signal: abortController.signal,
                    requery: doQuery,
                    querier: querier,
                    trans: null
                };
                var ret = execute(ctx);
                Promise.resolve(ret).then(function (result) {
                    hasValue = true;
                    currentValue = result;
                    if (closed || ctx.signal.aborted) {
                        return;
                    }
                    accumMuts = {};
                    currentObs = subscr;
                    if (!objectIsEmpty(currentObs) && !startedListening) {
                        globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, mutationListener);
                        startedListening = true;
                    }
                    execInGlobalContext(function () { return !closed && observer.next && observer.next(result); });
                }, function (err) {
                    hasValue = false;
                    if (!['DatabaseClosedError', 'AbortError'].includes(err === null || err === void 0 ? void 0 : err.name)) {
                        if (!closed)
                            execInGlobalContext(function () {
                                if (closed)
                                    return;
                                observer.error && observer.error(err);
                            });
                    }
                });
            };
            setTimeout(doQuery, 0);
            return subscription;
        });
        observable.hasValue = function () { return hasValue; };
        observable.getValue = function () { return currentValue; };
        return observable;
    }

    var Dexie = Dexie$1;
    props(Dexie, __assign(__assign({}, fullNameExceptions), {
        delete: function (databaseName) {
            var db = new Dexie(databaseName, { addons: [] });
            return db.delete();
        },
        exists: function (name) {
            return new Dexie(name, { addons: [] }).open().then(function (db) {
                db.close();
                return true;
            }).catch('NoSuchDatabaseError', function () { return false; });
        },
        getDatabaseNames: function (cb) {
            try {
                return getDatabaseNames(Dexie.dependencies).then(cb);
            }
            catch (_a) {
                return rejection(new exceptions.MissingAPI());
            }
        },
        defineClass: function () {
            function Class(content) {
                extend(this, content);
            }
            return Class;
        }, ignoreTransaction: function (scopeFunc) {
            return PSD.trans ?
                usePSD(PSD.transless, scopeFunc) :
                scopeFunc();
        }, vip: vip, async: function (generatorFn) {
            return function () {
                try {
                    var rv = awaitIterator(generatorFn.apply(this, arguments));
                    if (!rv || typeof rv.then !== 'function')
                        return DexiePromise.resolve(rv);
                    return rv;
                }
                catch (e) {
                    return rejection(e);
                }
            };
        }, spawn: function (generatorFn, args, thiz) {
            try {
                var rv = awaitIterator(generatorFn.apply(thiz, args || []));
                if (!rv || typeof rv.then !== 'function')
                    return DexiePromise.resolve(rv);
                return rv;
            }
            catch (e) {
                return rejection(e);
            }
        },
        currentTransaction: {
            get: function () { return PSD.trans || null; }
        }, waitFor: function (promiseOrFunction, optionalTimeout) {
            var promise = DexiePromise.resolve(typeof promiseOrFunction === 'function' ?
                Dexie.ignoreTransaction(promiseOrFunction) :
                promiseOrFunction)
                .timeout(optionalTimeout || 60000);
            return PSD.trans ?
                PSD.trans.waitFor(promise) :
                promise;
        },
        Promise: DexiePromise,
        debug: {
            get: function () { return debug; },
            set: function (value) {
                setDebug(value);
            }
        },
        derive: derive, extend: extend, props: props, override: override,
        Events: Events, on: globalEvents, liveQuery: liveQuery, extendObservabilitySet: extendObservabilitySet,
        getByKeyPath: getByKeyPath, setByKeyPath: setByKeyPath, delByKeyPath: delByKeyPath, shallowClone: shallowClone, deepClone: deepClone, getObjectDiff: getObjectDiff, cmp: cmp, asap: asap$1,
        minKey: minKey,
        addons: [],
        connections: connections,
        errnames: errnames,
        dependencies: domDeps, cache: cache,
        semVer: DEXIE_VERSION, version: DEXIE_VERSION.split('.')
            .map(function (n) { return parseInt(n); })
            .reduce(function (p, c, i) { return p + (c / Math.pow(10, i * 2)); }) }));
    Dexie.maxKey = getMaxKey(Dexie.dependencies.IDBKeyRange);

    if (typeof dispatchEvent !== 'undefined' && typeof addEventListener !== 'undefined') {
        globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, function (updatedParts) {
            if (!propagatingLocally) {
                var event_1;
                event_1 = new CustomEvent(STORAGE_MUTATED_DOM_EVENT_NAME, {
                    detail: updatedParts
                });
                propagatingLocally = true;
                dispatchEvent(event_1);
                propagatingLocally = false;
            }
        });
        addEventListener(STORAGE_MUTATED_DOM_EVENT_NAME, function (_a) {
            var detail = _a.detail;
            if (!propagatingLocally) {
                propagateLocally(detail);
            }
        });
    }
    function propagateLocally(updateParts) {
        var wasMe = propagatingLocally;
        try {
            propagatingLocally = true;
            globalEvents.storagemutated.fire(updateParts);
            signalSubscribersNow(updateParts, true);
        }
        finally {
            propagatingLocally = wasMe;
        }
    }
    var propagatingLocally = false;

    var bc;
    var createBC = function () { };
    if (typeof BroadcastChannel !== 'undefined') {
        createBC = function () {
            bc = new BroadcastChannel(STORAGE_MUTATED_DOM_EVENT_NAME);
            bc.onmessage = function (ev) { return ev.data && propagateLocally(ev.data); };
        };
        createBC();
        if (typeof bc.unref === 'function') {
            bc.unref();
        }
        globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, function (changedParts) {
            if (!propagatingLocally) {
                bc.postMessage(changedParts);
            }
        });
    }

    if (typeof addEventListener !== 'undefined') {
        addEventListener('pagehide', function (event) {
            if (!Dexie$1.disableBfCache && event.persisted) {
                if (debug)
                    console.debug('Dexie: handling persisted pagehide');
                bc === null || bc === void 0 ? void 0 : bc.close();
                for (var _i = 0, connections_1 = connections; _i < connections_1.length; _i++) {
                    var db = connections_1[_i];
                    db.close({ disableAutoOpen: false });
                }
            }
        });
        addEventListener('pageshow', function (event) {
            if (!Dexie$1.disableBfCache && event.persisted) {
                if (debug)
                    console.debug('Dexie: handling persisted pageshow');
                createBC();
                propagateLocally({ all: new RangeSet(-Infinity, [[]]) });
            }
        });
    }

    function add(value) {
        return new PropModification({ add: value });
    }

    function remove(value) {
        return new PropModification({ remove: value });
    }

    function replacePrefix(a, b) {
        return new PropModification({ replacePrefix: [a, b] });
    }

    DexiePromise.rejectionMapper = mapError;
    setDebug(debug);

    var namedExports = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Dexie: Dexie$1,
        liveQuery: liveQuery,
        Entity: Entity,
        cmp: cmp,
        PropModification: PropModification,
        replacePrefix: replacePrefix,
        add: add,
        remove: remove,
        'default': Dexie$1,
        RangeSet: RangeSet,
        mergeRanges: mergeRanges,
        rangesOverlap: rangesOverlap
    });

    __assign(Dexie$1, namedExports, { default: Dexie$1 });

    return Dexie$1;

}));
//# sourceMappingURL=dexie.js.map


/***/ }),

/***/ "../../node_modules/dexie/import-wrapper.mjs":
/*!***************************************************!*\
  !*** ../../node_modules/dexie/import-wrapper.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Dexie: () => (/* binding */ Dexie),
/* harmony export */   DexieYProvider: () => (/* binding */ DexieYProvider),
/* harmony export */   Entity: () => (/* binding */ Entity),
/* harmony export */   PropModification: () => (/* binding */ PropModification),
/* harmony export */   RangeSet: () => (/* binding */ RangeSet),
/* harmony export */   add: () => (/* binding */ add),
/* harmony export */   cmp: () => (/* binding */ cmp),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   liveQuery: () => (/* binding */ liveQuery),
/* harmony export */   mergeRanges: () => (/* binding */ mergeRanges),
/* harmony export */   rangesOverlap: () => (/* binding */ rangesOverlap),
/* harmony export */   remove: () => (/* binding */ remove),
/* harmony export */   replacePrefix: () => (/* binding */ replacePrefix)
/* harmony export */ });
/* harmony import */ var _dist_dexie_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/dexie.js */ "../../node_modules/dexie/dist/dexie.js");
// Making the module version consumable via require - to prohibit
// multiple occurrancies of the same module in the same app
// (dual package hazard, https://nodejs.org/api/packages.html#dual-package-hazard)

const DexieSymbol = Symbol.for("Dexie");
const Dexie = globalThis[DexieSymbol] || (globalThis[DexieSymbol] = _dist_dexie_js__WEBPACK_IMPORTED_MODULE_0__);
if (_dist_dexie_js__WEBPACK_IMPORTED_MODULE_0__.semVer !== Dexie.semVer) {
    throw new Error(`Two different versions of Dexie loaded in the same app: ${_dist_dexie_js__WEBPACK_IMPORTED_MODULE_0__.semVer} and ${Dexie.semVer}`);
}
const { liveQuery, mergeRanges, rangesOverlap, RangeSet, cmp, Entity,
    PropModification, replacePrefix, add, remove,
    DexieYProvider } = Dexie;

    
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Dexie);


/***/ }),

/***/ "../../node_modules/html-parse-stringify/dist/html-parse-stringify.module.js":
/*!***********************************************************************************!*\
  !*** ../../node_modules/html-parse-stringify/dist/html-parse-stringify.module.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var void_elements__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! void-elements */ "../../node_modules/void-elements/index.js");
/* harmony import */ var void_elements__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(void_elements__WEBPACK_IMPORTED_MODULE_0__);
var t=/\s([^'"/\s><]+?)[\s/>]|([^\s=]+)=\s?(".*?"|'.*?')/g;function n(n){var r={type:"tag",name:"",voidElement:!1,attrs:{},children:[]},i=n.match(/<\/?([^\s]+?)[/\s>]/);if(i&&(r.name=i[1],((void_elements__WEBPACK_IMPORTED_MODULE_0___default())[i[1]]||"/"===n.charAt(n.length-2))&&(r.voidElement=!0),r.name.startsWith("!--"))){var s=n.indexOf("--\x3e");return{type:"comment",comment:-1!==s?n.slice(4,s):""}}for(var a=new RegExp(t),c=null;null!==(c=a.exec(n));)if(c[0].trim())if(c[1]){var o=c[1].trim(),l=[o,""];o.indexOf("=")>-1&&(l=o.split("=")),r.attrs[l[0]]=l[1],a.lastIndex--}else c[2]&&(r.attrs[c[2]]=c[3].trim().substring(1,c[3].length-1));return r}var r=/<[a-zA-Z0-9\-\!\/](?:"[^"]*"|'[^']*'|[^'">])*>/g,i=/^\s*$/,s=Object.create(null);function a(e,t){switch(t.type){case"text":return e+t.content;case"tag":return e+="<"+t.name+(t.attrs?function(e){var t=[];for(var n in e)t.push(n+'="'+e[n]+'"');return t.length?" "+t.join(" "):""}(t.attrs):"")+(t.voidElement?"/>":">"),t.voidElement?e:e+t.children.reduce(a,"")+"</"+t.name+">";case"comment":return e+"\x3c!--"+t.comment+"--\x3e"}}var c={parse:function(e,t){t||(t={}),t.components||(t.components=s);var a,c=[],o=[],l=-1,m=!1;if(0!==e.indexOf("<")){var u=e.indexOf("<");c.push({type:"text",content:-1===u?e:e.substring(0,u)})}return e.replace(r,function(r,s){if(m){if(r!=="</"+a.name+">")return;m=!1}var u,f="/"!==r.charAt(1),h=r.startsWith("\x3c!--"),p=s+r.length,d=e.charAt(p);if(h){var v=n(r);return l<0?(c.push(v),c):((u=o[l]).children.push(v),c)}if(f&&(l++,"tag"===(a=n(r)).type&&t.components[a.name]&&(a.type="component",m=!0),a.voidElement||m||!d||"<"===d||a.children.push({type:"text",content:e.slice(p,e.indexOf("<",p))}),0===l&&c.push(a),(u=o[l-1])&&u.children.push(a),o[l]=a),(!f||a.voidElement)&&(l>-1&&(a.voidElement||a.name===r.slice(2,-1))&&(l--,a=-1===l?c:o[l]),!m&&"<"!==d&&d)){u=-1===l?c:o[l].children;var x=e.indexOf("<",p),g=e.slice(p,-1===x?void 0:x);i.test(g)&&(g=" "),(x>-1&&l+u.length>=0||" "!==g)&&u.push({type:"text",content:g})}}),c},stringify:function(e){return e.reduce(function(e,t){return e+a("",t)},"")}};/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (c);
//# sourceMappingURL=html-parse-stringify.module.js.map


/***/ }),

/***/ "../../node_modules/i18next/dist/cjs/i18next.js":
/*!******************************************************!*\
  !*** ../../node_modules/i18next/dist/cjs/i18next.js ***!
  \******************************************************/
/***/ ((module) => {



const isString = obj => typeof obj === 'string';
const defer = () => {
  let res;
  let rej;
  const promise = new Promise((resolve, reject) => {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
};
const makeString = object => {
  if (object == null) return '';
  return '' + object;
};
const copy = (a, s, t) => {
  a.forEach(m => {
    if (s[m]) t[m] = s[m];
  });
};
const lastOfPathSeparatorRegExp = /###/g;
const cleanKey = key => key && key.indexOf('###') > -1 ? key.replace(lastOfPathSeparatorRegExp, '.') : key;
const canNotTraverseDeeper = object => !object || isString(object);
const getLastOfPath = (object, path, Empty) => {
  const stack = !isString(path) ? path : path.split('.');
  let stackIndex = 0;
  while (stackIndex < stack.length - 1) {
    if (canNotTraverseDeeper(object)) return {};
    const key = cleanKey(stack[stackIndex]);
    if (!object[key] && Empty) object[key] = new Empty();
    if (Object.prototype.hasOwnProperty.call(object, key)) {
      object = object[key];
    } else {
      object = {};
    }
    ++stackIndex;
  }
  if (canNotTraverseDeeper(object)) return {};
  return {
    obj: object,
    k: cleanKey(stack[stackIndex])
  };
};
const setPath = (object, path, newValue) => {
  const {
    obj,
    k
  } = getLastOfPath(object, path, Object);
  if (obj !== undefined || path.length === 1) {
    obj[k] = newValue;
    return;
  }
  let e = path[path.length - 1];
  let p = path.slice(0, path.length - 1);
  let last = getLastOfPath(object, p, Object);
  while (last.obj === undefined && p.length) {
    e = `${p[p.length - 1]}.${e}`;
    p = p.slice(0, p.length - 1);
    last = getLastOfPath(object, p, Object);
    if (last && last.obj && typeof last.obj[`${last.k}.${e}`] !== 'undefined') {
      last.obj = undefined;
    }
  }
  last.obj[`${last.k}.${e}`] = newValue;
};
const pushPath = (object, path, newValue, concat) => {
  const {
    obj,
    k
  } = getLastOfPath(object, path, Object);
  obj[k] = obj[k] || [];
  obj[k].push(newValue);
};
const getPath = (object, path) => {
  const {
    obj,
    k
  } = getLastOfPath(object, path);
  if (!obj) return undefined;
  return obj[k];
};
const getPathWithDefaults = (data, defaultData, key) => {
  const value = getPath(data, key);
  if (value !== undefined) {
    return value;
  }
  return getPath(defaultData, key);
};
const deepExtend = (target, source, overwrite) => {
  for (const prop in source) {
    if (prop !== '__proto__' && prop !== 'constructor') {
      if (prop in target) {
        if (isString(target[prop]) || target[prop] instanceof String || isString(source[prop]) || source[prop] instanceof String) {
          if (overwrite) target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }
  return target;
};
const regexEscape = str => str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
var _entityMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;',
  '/': '&#x2F;'
};
const escape = data => {
  if (isString(data)) {
    return data.replace(/[&<>"'\/]/g, s => _entityMap[s]);
  }
  return data;
};
class RegExpCache {
  constructor(capacity) {
    this.capacity = capacity;
    this.regExpMap = new Map();
    this.regExpQueue = [];
  }
  getRegExp(pattern) {
    const regExpFromCache = this.regExpMap.get(pattern);
    if (regExpFromCache !== undefined) {
      return regExpFromCache;
    }
    const regExpNew = new RegExp(pattern);
    if (this.regExpQueue.length === this.capacity) {
      this.regExpMap.delete(this.regExpQueue.shift());
    }
    this.regExpMap.set(pattern, regExpNew);
    this.regExpQueue.push(pattern);
    return regExpNew;
  }
}
const chars = [' ', ',', '?', '!', ';'];
const looksLikeObjectPathRegExpCache = new RegExpCache(20);
const looksLikeObjectPath = (key, nsSeparator, keySeparator) => {
  nsSeparator = nsSeparator || '';
  keySeparator = keySeparator || '';
  const possibleChars = chars.filter(c => nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0);
  if (possibleChars.length === 0) return true;
  const r = looksLikeObjectPathRegExpCache.getRegExp(`(${possibleChars.map(c => c === '?' ? '\\?' : c).join('|')})`);
  let matched = !r.test(key);
  if (!matched) {
    const ki = key.indexOf(keySeparator);
    if (ki > 0 && !r.test(key.substring(0, ki))) {
      matched = true;
    }
  }
  return matched;
};
const deepFind = function (obj, path) {
  let keySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';
  if (!obj) return undefined;
  if (obj[path]) return obj[path];
  const tokens = path.split(keySeparator);
  let current = obj;
  for (let i = 0; i < tokens.length;) {
    if (!current || typeof current !== 'object') {
      return undefined;
    }
    let next;
    let nextPath = '';
    for (let j = i; j < tokens.length; ++j) {
      if (j !== i) {
        nextPath += keySeparator;
      }
      nextPath += tokens[j];
      next = current[nextPath];
      if (next !== undefined) {
        if (['string', 'number', 'boolean'].indexOf(typeof next) > -1 && j < tokens.length - 1) {
          continue;
        }
        i += j - i + 1;
        break;
      }
    }
    current = next;
  }
  return current;
};
const getCleanedCode = code => code && code.replace('_', '-');

const consoleLogger = {
  type: 'logger',
  log(args) {
    this.output('log', args);
  },
  warn(args) {
    this.output('warn', args);
  },
  error(args) {
    this.output('error', args);
  },
  output(type, args) {
    if (console && console[type]) console[type].apply(console, args);
  }
};
class Logger {
  constructor(concreteLogger) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.init(concreteLogger, options);
  }
  init(concreteLogger) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.prefix = options.prefix || 'i18next:';
    this.logger = concreteLogger || consoleLogger;
    this.options = options;
    this.debug = options.debug;
  }
  log() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return this.forward(args, 'log', '', true);
  }
  warn() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return this.forward(args, 'warn', '', true);
  }
  error() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return this.forward(args, 'error', '');
  }
  deprecate() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
  }
  forward(args, lvl, prefix, debugOnly) {
    if (debugOnly && !this.debug) return null;
    if (isString(args[0])) args[0] = `${prefix}${this.prefix} ${args[0]}`;
    return this.logger[lvl](args);
  }
  create(moduleName) {
    return new Logger(this.logger, {
      ...{
        prefix: `${this.prefix}:${moduleName}:`
      },
      ...this.options
    });
  }
  clone(options) {
    options = options || this.options;
    options.prefix = options.prefix || this.prefix;
    return new Logger(this.logger, options);
  }
}
var baseLogger = new Logger();

class EventEmitter {
  constructor() {
    this.observers = {};
  }
  on(events, listener) {
    events.split(' ').forEach(event => {
      if (!this.observers[event]) this.observers[event] = new Map();
      const numListeners = this.observers[event].get(listener) || 0;
      this.observers[event].set(listener, numListeners + 1);
    });
    return this;
  }
  off(event, listener) {
    if (!this.observers[event]) return;
    if (!listener) {
      delete this.observers[event];
      return;
    }
    this.observers[event].delete(listener);
  }
  emit(event) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (this.observers[event]) {
      const cloned = Array.from(this.observers[event].entries());
      cloned.forEach(_ref => {
        let [observer, numTimesAdded] = _ref;
        for (let i = 0; i < numTimesAdded; i++) {
          observer(...args);
        }
      });
    }
    if (this.observers['*']) {
      const cloned = Array.from(this.observers['*'].entries());
      cloned.forEach(_ref2 => {
        let [observer, numTimesAdded] = _ref2;
        for (let i = 0; i < numTimesAdded; i++) {
          observer.apply(observer, [event, ...args]);
        }
      });
    }
  }
}

class ResourceStore extends EventEmitter {
  constructor(data) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      ns: ['translation'],
      defaultNS: 'translation'
    };
    super();
    this.data = data || {};
    this.options = options;
    if (this.options.keySeparator === undefined) {
      this.options.keySeparator = '.';
    }
    if (this.options.ignoreJSONStructure === undefined) {
      this.options.ignoreJSONStructure = true;
    }
  }
  addNamespaces(ns) {
    if (this.options.ns.indexOf(ns) < 0) {
      this.options.ns.push(ns);
    }
  }
  removeNamespaces(ns) {
    const index = this.options.ns.indexOf(ns);
    if (index > -1) {
      this.options.ns.splice(index, 1);
    }
  }
  getResource(lng, ns, key) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
    const ignoreJSONStructure = options.ignoreJSONStructure !== undefined ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
    let path;
    if (lng.indexOf('.') > -1) {
      path = lng.split('.');
    } else {
      path = [lng, ns];
      if (key) {
        if (Array.isArray(key)) {
          path.push(...key);
        } else if (isString(key) && keySeparator) {
          path.push(...key.split(keySeparator));
        } else {
          path.push(key);
        }
      }
    }
    const result = getPath(this.data, path);
    if (!result && !ns && !key && lng.indexOf('.') > -1) {
      lng = path[0];
      ns = path[1];
      key = path.slice(2).join('.');
    }
    if (result || !ignoreJSONStructure || !isString(key)) return result;
    return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
  }
  addResource(lng, ns, key, value) {
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
      silent: false
    };
    const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
    let path = [lng, ns];
    if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);
    if (lng.indexOf('.') > -1) {
      path = lng.split('.');
      value = ns;
      ns = path[1];
    }
    this.addNamespaces(ns);
    setPath(this.data, path, value);
    if (!options.silent) this.emit('added', lng, ns, key, value);
  }
  addResources(lng, ns, resources) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
      silent: false
    };
    for (const m in resources) {
      if (isString(resources[m]) || Array.isArray(resources[m])) this.addResource(lng, ns, m, resources[m], {
        silent: true
      });
    }
    if (!options.silent) this.emit('added', lng, ns, resources);
  }
  addResourceBundle(lng, ns, resources, deep, overwrite) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
      silent: false,
      skipCopy: false
    };
    let path = [lng, ns];
    if (lng.indexOf('.') > -1) {
      path = lng.split('.');
      deep = resources;
      resources = ns;
      ns = path[1];
    }
    this.addNamespaces(ns);
    let pack = getPath(this.data, path) || {};
    if (!options.skipCopy) resources = JSON.parse(JSON.stringify(resources));
    if (deep) {
      deepExtend(pack, resources, overwrite);
    } else {
      pack = {
        ...pack,
        ...resources
      };
    }
    setPath(this.data, path, pack);
    if (!options.silent) this.emit('added', lng, ns, resources);
  }
  removeResourceBundle(lng, ns) {
    if (this.hasResourceBundle(lng, ns)) {
      delete this.data[lng][ns];
    }
    this.removeNamespaces(ns);
    this.emit('removed', lng, ns);
  }
  hasResourceBundle(lng, ns) {
    return this.getResource(lng, ns) !== undefined;
  }
  getResourceBundle(lng, ns) {
    if (!ns) ns = this.options.defaultNS;
    if (this.options.compatibilityAPI === 'v1') return {
      ...{},
      ...this.getResource(lng, ns)
    };
    return this.getResource(lng, ns);
  }
  getDataByLanguage(lng) {
    return this.data[lng];
  }
  hasLanguageSomeTranslations(lng) {
    const data = this.getDataByLanguage(lng);
    const n = data && Object.keys(data) || [];
    return !!n.find(v => data[v] && Object.keys(data[v]).length > 0);
  }
  toJSON() {
    return this.data;
  }
}

var postProcessor = {
  processors: {},
  addPostProcessor(module) {
    this.processors[module.name] = module;
  },
  handle(processors, value, key, options, translator) {
    processors.forEach(processor => {
      if (this.processors[processor]) value = this.processors[processor].process(value, key, options, translator);
    });
    return value;
  }
};

const checkedLoadedFor = {};
class Translator extends EventEmitter {
  constructor(services) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super();
    copy(['resourceStore', 'languageUtils', 'pluralResolver', 'interpolator', 'backendConnector', 'i18nFormat', 'utils'], services, this);
    this.options = options;
    if (this.options.keySeparator === undefined) {
      this.options.keySeparator = '.';
    }
    this.logger = baseLogger.create('translator');
  }
  changeLanguage(lng) {
    if (lng) this.language = lng;
  }
  exists(key) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      interpolation: {}
    };
    if (key === undefined || key === null) {
      return false;
    }
    const resolved = this.resolve(key, options);
    return resolved && resolved.res !== undefined;
  }
  extractFromKey(key, options) {
    let nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
    if (nsSeparator === undefined) nsSeparator = ':';
    const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
    let namespaces = options.ns || this.options.defaultNS || [];
    const wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
    const seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
    if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
      const m = key.match(this.interpolator.nestingRegexp);
      if (m && m.length > 0) {
        return {
          key,
          namespaces: isString(namespaces) ? [namespaces] : namespaces
        };
      }
      const parts = key.split(nsSeparator);
      if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
      key = parts.join(keySeparator);
    }
    return {
      key,
      namespaces: isString(namespaces) ? [namespaces] : namespaces
    };
  }
  translate(keys, options, lastKey) {
    if (typeof options !== 'object' && this.options.overloadTranslationOptionHandler) {
      options = this.options.overloadTranslationOptionHandler(arguments);
    }
    if (typeof options === 'object') options = {
      ...options
    };
    if (!options) options = {};
    if (keys === undefined || keys === null) return '';
    if (!Array.isArray(keys)) keys = [String(keys)];
    const returnDetails = options.returnDetails !== undefined ? options.returnDetails : this.options.returnDetails;
    const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
    const {
      key,
      namespaces
    } = this.extractFromKey(keys[keys.length - 1], options);
    const namespace = namespaces[namespaces.length - 1];
    const lng = options.lng || this.language;
    const appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
    if (lng && lng.toLowerCase() === 'cimode') {
      if (appendNamespaceToCIMode) {
        const nsSeparator = options.nsSeparator || this.options.nsSeparator;
        if (returnDetails) {
          return {
            res: `${namespace}${nsSeparator}${key}`,
            usedKey: key,
            exactUsedKey: key,
            usedLng: lng,
            usedNS: namespace,
            usedParams: this.getUsedParamsDetails(options)
          };
        }
        return `${namespace}${nsSeparator}${key}`;
      }
      if (returnDetails) {
        return {
          res: key,
          usedKey: key,
          exactUsedKey: key,
          usedLng: lng,
          usedNS: namespace,
          usedParams: this.getUsedParamsDetails(options)
        };
      }
      return key;
    }
    const resolved = this.resolve(keys, options);
    let res = resolved && resolved.res;
    const resUsedKey = resolved && resolved.usedKey || key;
    const resExactUsedKey = resolved && resolved.exactUsedKey || key;
    const resType = Object.prototype.toString.apply(res);
    const noObject = ['[object Number]', '[object Function]', '[object RegExp]'];
    const joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
    const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
    const handleAsObject = !isString(res) && typeof res !== 'boolean' && typeof res !== 'number';
    if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(isString(joinArrays) && Array.isArray(res))) {
      if (!options.returnObjects && !this.options.returnObjects) {
        if (!this.options.returnedObjectHandler) {
          this.logger.warn('accessing an object - but returnObjects options is not enabled!');
        }
        const r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, {
          ...options,
          ns: namespaces
        }) : `key '${key} (${this.language})' returned an object instead of string.`;
        if (returnDetails) {
          resolved.res = r;
          resolved.usedParams = this.getUsedParamsDetails(options);
          return resolved;
        }
        return r;
      }
      if (keySeparator) {
        const resTypeIsArray = Array.isArray(res);
        const copy = resTypeIsArray ? [] : {};
        const newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
        for (const m in res) {
          if (Object.prototype.hasOwnProperty.call(res, m)) {
            const deepKey = `${newKeyToUse}${keySeparator}${m}`;
            copy[m] = this.translate(deepKey, {
              ...options,
              ...{
                joinArrays: false,
                ns: namespaces
              }
            });
            if (copy[m] === deepKey) copy[m] = res[m];
          }
        }
        res = copy;
      }
    } else if (handleAsObjectInI18nFormat && isString(joinArrays) && Array.isArray(res)) {
      res = res.join(joinArrays);
      if (res) res = this.extendTranslation(res, keys, options, lastKey);
    } else {
      let usedDefault = false;
      let usedKey = false;
      const needsPluralHandling = options.count !== undefined && !isString(options.count);
      const hasDefaultValue = Translator.hasDefaultValue(options);
      const defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : '';
      const defaultValueSuffixOrdinalFallback = options.ordinal && needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, {
        ordinal: false
      }) : '';
      const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && this.pluralResolver.shouldUseIntlApi();
      const defaultValue = needsZeroSuffixLookup && options[`defaultValue${this.options.pluralSeparator}zero`] || options[`defaultValue${defaultValueSuffix}`] || options[`defaultValue${defaultValueSuffixOrdinalFallback}`] || options.defaultValue;
      if (!this.isValidLookup(res) && hasDefaultValue) {
        usedDefault = true;
        res = defaultValue;
      }
      if (!this.isValidLookup(res)) {
        usedKey = true;
        res = key;
      }
      const missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
      const resForMissing = missingKeyNoValueFallbackToKey && usedKey ? undefined : res;
      const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
      if (usedKey || usedDefault || updateMissing) {
        this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? defaultValue : res);
        if (keySeparator) {
          const fk = this.resolve(key, {
            ...options,
            keySeparator: false
          });
          if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
        }
        let lngs = [];
        const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
        if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
          for (let i = 0; i < fallbackLngs.length; i++) {
            lngs.push(fallbackLngs[i]);
          }
        } else if (this.options.saveMissingTo === 'all') {
          lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
        } else {
          lngs.push(options.lng || this.language);
        }
        const send = (l, k, specificDefaultValue) => {
          const defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
          if (this.options.missingKeyHandler) {
            this.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);
          } else if (this.backendConnector && this.backendConnector.saveMissing) {
            this.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);
          }
          this.emit('missingKey', l, namespace, k, res);
        };
        if (this.options.saveMissing) {
          if (this.options.saveMissingPlurals && needsPluralHandling) {
            lngs.forEach(language => {
              const suffixes = this.pluralResolver.getSuffixes(language, options);
              if (needsZeroSuffixLookup && options[`defaultValue${this.options.pluralSeparator}zero`] && suffixes.indexOf(`${this.options.pluralSeparator}zero`) < 0) {
                suffixes.push(`${this.options.pluralSeparator}zero`);
              }
              suffixes.forEach(suffix => {
                send([language], key + suffix, options[`defaultValue${suffix}`] || defaultValue);
              });
            });
          } else {
            send(lngs, key, defaultValue);
          }
        }
      }
      res = this.extendTranslation(res, keys, options, resolved, lastKey);
      if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = `${namespace}:${key}`;
      if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
        if (this.options.compatibilityAPI !== 'v1') {
          res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${namespace}:${key}` : key, usedDefault ? res : undefined);
        } else {
          res = this.options.parseMissingKeyHandler(res);
        }
      }
    }
    if (returnDetails) {
      resolved.res = res;
      resolved.usedParams = this.getUsedParamsDetails(options);
      return resolved;
    }
    return res;
  }
  extendTranslation(res, key, options, resolved, lastKey) {
    var _this = this;
    if (this.i18nFormat && this.i18nFormat.parse) {
      res = this.i18nFormat.parse(res, {
        ...this.options.interpolation.defaultVariables,
        ...options
      }, options.lng || this.language || resolved.usedLng, resolved.usedNS, resolved.usedKey, {
        resolved
      });
    } else if (!options.skipInterpolation) {
      if (options.interpolation) this.interpolator.init({
        ...options,
        ...{
          interpolation: {
            ...this.options.interpolation,
            ...options.interpolation
          }
        }
      });
      const skipOnVariables = isString(res) && (options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
      let nestBef;
      if (skipOnVariables) {
        const nb = res.match(this.interpolator.nestingRegexp);
        nestBef = nb && nb.length;
      }
      let data = options.replace && !isString(options.replace) ? options.replace : options;
      if (this.options.interpolation.defaultVariables) data = {
        ...this.options.interpolation.defaultVariables,
        ...data
      };
      res = this.interpolator.interpolate(res, data, options.lng || this.language || resolved.usedLng, options);
      if (skipOnVariables) {
        const na = res.match(this.interpolator.nestingRegexp);
        const nestAft = na && na.length;
        if (nestBef < nestAft) options.nest = false;
      }
      if (!options.lng && this.options.compatibilityAPI !== 'v1' && resolved && resolved.res) options.lng = this.language || resolved.usedLng;
      if (options.nest !== false) res = this.interpolator.nest(res, function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        if (lastKey && lastKey[0] === args[0] && !options.context) {
          _this.logger.warn(`It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`);
          return null;
        }
        return _this.translate(...args, key);
      }, options);
      if (options.interpolation) this.interpolator.reset();
    }
    const postProcess = options.postProcess || this.options.postProcess;
    const postProcessorNames = isString(postProcess) ? [postProcess] : postProcess;
    if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
      res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {
        i18nResolved: {
          ...resolved,
          usedParams: this.getUsedParamsDetails(options)
        },
        ...options
      } : options, this);
    }
    return res;
  }
  resolve(keys) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let found;
    let usedKey;
    let exactUsedKey;
    let usedLng;
    let usedNS;
    if (isString(keys)) keys = [keys];
    keys.forEach(k => {
      if (this.isValidLookup(found)) return;
      const extracted = this.extractFromKey(k, options);
      const key = extracted.key;
      usedKey = key;
      let namespaces = extracted.namespaces;
      if (this.options.fallbackNS) namespaces = namespaces.concat(this.options.fallbackNS);
      const needsPluralHandling = options.count !== undefined && !isString(options.count);
      const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && this.pluralResolver.shouldUseIntlApi();
      const needsContextHandling = options.context !== undefined && (isString(options.context) || typeof options.context === 'number') && options.context !== '';
      const codes = options.lngs ? options.lngs : this.languageUtils.toResolveHierarchy(options.lng || this.language, options.fallbackLng);
      namespaces.forEach(ns => {
        if (this.isValidLookup(found)) return;
        usedNS = ns;
        if (!checkedLoadedFor[`${codes[0]}-${ns}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(usedNS)) {
          checkedLoadedFor[`${codes[0]}-${ns}`] = true;
          this.logger.warn(`key "${usedKey}" for languages "${codes.join(', ')}" won't get resolved as namespace "${usedNS}" was not yet loaded`, 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
        }
        codes.forEach(code => {
          if (this.isValidLookup(found)) return;
          usedLng = code;
          const finalKeys = [key];
          if (this.i18nFormat && this.i18nFormat.addLookupKeys) {
            this.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
          } else {
            let pluralSuffix;
            if (needsPluralHandling) pluralSuffix = this.pluralResolver.getSuffix(code, options.count, options);
            const zeroSuffix = `${this.options.pluralSeparator}zero`;
            const ordinalPrefix = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
            if (needsPluralHandling) {
              finalKeys.push(key + pluralSuffix);
              if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                finalKeys.push(key + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
              }
              if (needsZeroSuffixLookup) {
                finalKeys.push(key + zeroSuffix);
              }
            }
            if (needsContextHandling) {
              const contextKey = `${key}${this.options.contextSeparator}${options.context}`;
              finalKeys.push(contextKey);
              if (needsPluralHandling) {
                finalKeys.push(contextKey + pluralSuffix);
                if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                  finalKeys.push(contextKey + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                }
                if (needsZeroSuffixLookup) {
                  finalKeys.push(contextKey + zeroSuffix);
                }
              }
            }
          }
          let possibleKey;
          while (possibleKey = finalKeys.pop()) {
            if (!this.isValidLookup(found)) {
              exactUsedKey = possibleKey;
              found = this.getResource(code, ns, possibleKey, options);
            }
          }
        });
      });
    });
    return {
      res: found,
      usedKey,
      exactUsedKey,
      usedLng,
      usedNS
    };
  }
  isValidLookup(res) {
    return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
  }
  getResource(code, ns, key) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
    return this.resourceStore.getResource(code, ns, key, options);
  }
  getUsedParamsDetails() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const optionsKeys = ['defaultValue', 'ordinal', 'context', 'replace', 'lng', 'lngs', 'fallbackLng', 'ns', 'keySeparator', 'nsSeparator', 'returnObjects', 'returnDetails', 'joinArrays', 'postProcess', 'interpolation'];
    const useOptionsReplaceForData = options.replace && !isString(options.replace);
    let data = useOptionsReplaceForData ? options.replace : options;
    if (useOptionsReplaceForData && typeof options.count !== 'undefined') {
      data.count = options.count;
    }
    if (this.options.interpolation.defaultVariables) {
      data = {
        ...this.options.interpolation.defaultVariables,
        ...data
      };
    }
    if (!useOptionsReplaceForData) {
      data = {
        ...data
      };
      for (const key of optionsKeys) {
        delete data[key];
      }
    }
    return data;
  }
  static hasDefaultValue(options) {
    const prefix = 'defaultValue';
    for (const option in options) {
      if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {
        return true;
      }
    }
    return false;
  }
}

const capitalize = string => string.charAt(0).toUpperCase() + string.slice(1);
class LanguageUtil {
  constructor(options) {
    this.options = options;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create('languageUtils');
  }
  getScriptPartFromCode(code) {
    code = getCleanedCode(code);
    if (!code || code.indexOf('-') < 0) return null;
    const p = code.split('-');
    if (p.length === 2) return null;
    p.pop();
    if (p[p.length - 1].toLowerCase() === 'x') return null;
    return this.formatLanguageCode(p.join('-'));
  }
  getLanguagePartFromCode(code) {
    code = getCleanedCode(code);
    if (!code || code.indexOf('-') < 0) return code;
    const p = code.split('-');
    return this.formatLanguageCode(p[0]);
  }
  formatLanguageCode(code) {
    if (isString(code) && code.indexOf('-') > -1) {
      if (typeof Intl !== 'undefined' && typeof Intl.getCanonicalLocales !== 'undefined') {
        try {
          let formattedCode = Intl.getCanonicalLocales(code)[0];
          if (formattedCode && this.options.lowerCaseLng) {
            formattedCode = formattedCode.toLowerCase();
          }
          if (formattedCode) return formattedCode;
        } catch (e) {}
      }
      const specialCases = ['hans', 'hant', 'latn', 'cyrl', 'cans', 'mong', 'arab'];
      let p = code.split('-');
      if (this.options.lowerCaseLng) {
        p = p.map(part => part.toLowerCase());
      } else if (p.length === 2) {
        p[0] = p[0].toLowerCase();
        p[1] = p[1].toUpperCase();
        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
      } else if (p.length === 3) {
        p[0] = p[0].toLowerCase();
        if (p[1].length === 2) p[1] = p[1].toUpperCase();
        if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
        if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
      }
      return p.join('-');
    }
    return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
  }
  isSupportedCode(code) {
    if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
      code = this.getLanguagePartFromCode(code);
    }
    return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
  }
  getBestMatchFromCodes(codes) {
    if (!codes) return null;
    let found;
    codes.forEach(code => {
      if (found) return;
      const cleanedLng = this.formatLanguageCode(code);
      if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng)) found = cleanedLng;
    });
    if (!found && this.options.supportedLngs) {
      codes.forEach(code => {
        if (found) return;
        const lngOnly = this.getLanguagePartFromCode(code);
        if (this.isSupportedCode(lngOnly)) return found = lngOnly;
        found = this.options.supportedLngs.find(supportedLng => {
          if (supportedLng === lngOnly) return supportedLng;
          if (supportedLng.indexOf('-') < 0 && lngOnly.indexOf('-') < 0) return;
          if (supportedLng.indexOf('-') > 0 && lngOnly.indexOf('-') < 0 && supportedLng.substring(0, supportedLng.indexOf('-')) === lngOnly) return supportedLng;
          if (supportedLng.indexOf(lngOnly) === 0 && lngOnly.length > 1) return supportedLng;
        });
      });
    }
    if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
    return found;
  }
  getFallbackCodes(fallbacks, code) {
    if (!fallbacks) return [];
    if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
    if (isString(fallbacks)) fallbacks = [fallbacks];
    if (Array.isArray(fallbacks)) return fallbacks;
    if (!code) return fallbacks.default || [];
    let found = fallbacks[code];
    if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
    if (!found) found = fallbacks[this.formatLanguageCode(code)];
    if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
    if (!found) found = fallbacks.default;
    return found || [];
  }
  toResolveHierarchy(code, fallbackCode) {
    const fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
    const codes = [];
    const addCode = c => {
      if (!c) return;
      if (this.isSupportedCode(c)) {
        codes.push(c);
      } else {
        this.logger.warn(`rejecting language code not found in supportedLngs: ${c}`);
      }
    };
    if (isString(code) && (code.indexOf('-') > -1 || code.indexOf('_') > -1)) {
      if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
      if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
      if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
    } else if (isString(code)) {
      addCode(this.formatLanguageCode(code));
    }
    fallbackCodes.forEach(fc => {
      if (codes.indexOf(fc) < 0) addCode(this.formatLanguageCode(fc));
    });
    return codes;
  }
}

let sets = [{
  lngs: ['ach', 'ak', 'am', 'arn', 'br', 'fil', 'gun', 'ln', 'mfe', 'mg', 'mi', 'oc', 'pt', 'pt-BR', 'tg', 'tl', 'ti', 'tr', 'uz', 'wa'],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ['af', 'an', 'ast', 'az', 'bg', 'bn', 'ca', 'da', 'de', 'dev', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fi', 'fo', 'fur', 'fy', 'gl', 'gu', 'ha', 'hi', 'hu', 'hy', 'ia', 'it', 'kk', 'kn', 'ku', 'lb', 'mai', 'ml', 'mn', 'mr', 'nah', 'nap', 'nb', 'ne', 'nl', 'nn', 'no', 'nso', 'pa', 'pap', 'pms', 'ps', 'pt-PT', 'rm', 'sco', 'se', 'si', 'so', 'son', 'sq', 'sv', 'sw', 'ta', 'te', 'tk', 'ur', 'yo'],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ['ay', 'bo', 'cgg', 'fa', 'ht', 'id', 'ja', 'jbo', 'ka', 'km', 'ko', 'ky', 'lo', 'ms', 'sah', 'su', 'th', 'tt', 'ug', 'vi', 'wo', 'zh'],
  nr: [1],
  fc: 3
}, {
  lngs: ['be', 'bs', 'cnr', 'dz', 'hr', 'ru', 'sr', 'uk'],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ['ar'],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ['cs', 'sk'],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ['csb', 'pl'],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ['cy'],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ['fr'],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ['ga'],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ['gd'],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ['is'],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ['jv'],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ['kw'],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ['lt'],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ['lv'],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ['mk'],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ['mnk'],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ['mt'],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ['or'],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ['ro'],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ['sl'],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ['he', 'iw'],
  nr: [1, 2, 20, 21],
  fc: 22
}];
let _rulesPluralsTypes = {
  1: n => Number(n > 1),
  2: n => Number(n != 1),
  3: n => 0,
  4: n => Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2),
  5: n => Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5),
  6: n => Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2),
  7: n => Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2),
  8: n => Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3),
  9: n => Number(n >= 2),
  10: n => Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4),
  11: n => Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3),
  12: n => Number(n % 10 != 1 || n % 100 == 11),
  13: n => Number(n !== 0),
  14: n => Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3),
  15: n => Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2),
  16: n => Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2),
  17: n => Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1),
  18: n => Number(n == 0 ? 0 : n == 1 ? 1 : 2),
  19: n => Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3),
  20: n => Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2),
  21: n => Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0),
  22: n => Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3)
};
const nonIntlVersions = ['v1', 'v2', 'v3'];
const intlVersions = ['v4'];
const suffixesOrder = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};
const createRules = () => {
  const rules = {};
  sets.forEach(set => {
    set.lngs.forEach(l => {
      rules[l] = {
        numbers: set.nr,
        plurals: _rulesPluralsTypes[set.fc]
      };
    });
  });
  return rules;
};
class PluralResolver {
  constructor(languageUtils) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.languageUtils = languageUtils;
    this.options = options;
    this.logger = baseLogger.create('pluralResolver');
    if ((!this.options.compatibilityJSON || intlVersions.includes(this.options.compatibilityJSON)) && (typeof Intl === 'undefined' || !Intl.PluralRules)) {
      this.options.compatibilityJSON = 'v3';
      this.logger.error('Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.');
    }
    this.rules = createRules();
    this.pluralRulesCache = {};
  }
  addRule(lng, obj) {
    this.rules[lng] = obj;
  }
  clearCache() {
    this.pluralRulesCache = {};
  }
  getRule(code) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (this.shouldUseIntlApi()) {
      const cleanedCode = getCleanedCode(code === 'dev' ? 'en' : code);
      const type = options.ordinal ? 'ordinal' : 'cardinal';
      const cacheKey = JSON.stringify({
        cleanedCode,
        type
      });
      if (cacheKey in this.pluralRulesCache) {
        return this.pluralRulesCache[cacheKey];
      }
      let rule;
      try {
        rule = new Intl.PluralRules(cleanedCode, {
          type
        });
      } catch (err) {
        if (!code.match(/-|_/)) return;
        const lngPart = this.languageUtils.getLanguagePartFromCode(code);
        rule = this.getRule(lngPart, options);
      }
      this.pluralRulesCache[cacheKey] = rule;
      return rule;
    }
    return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
  }
  needsPlural(code) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const rule = this.getRule(code, options);
    if (this.shouldUseIntlApi()) {
      return rule && rule.resolvedOptions().pluralCategories.length > 1;
    }
    return rule && rule.numbers.length > 1;
  }
  getPluralFormsOfKey(code, key) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return this.getSuffixes(code, options).map(suffix => `${key}${suffix}`);
  }
  getSuffixes(code) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const rule = this.getRule(code, options);
    if (!rule) {
      return [];
    }
    if (this.shouldUseIntlApi()) {
      return rule.resolvedOptions().pluralCategories.sort((pluralCategory1, pluralCategory2) => suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2]).map(pluralCategory => `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ''}${pluralCategory}`);
    }
    return rule.numbers.map(number => this.getSuffix(code, number, options));
  }
  getSuffix(code, count) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    const rule = this.getRule(code, options);
    if (rule) {
      if (this.shouldUseIntlApi()) {
        return `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ''}${rule.select(count)}`;
      }
      return this.getSuffixRetroCompatible(rule, count);
    }
    this.logger.warn(`no plural rule found for: ${code}`);
    return '';
  }
  getSuffixRetroCompatible(rule, count) {
    const idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
    let suffix = rule.numbers[idx];
    if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
      if (suffix === 2) {
        suffix = 'plural';
      } else if (suffix === 1) {
        suffix = '';
      }
    }
    const returnSuffix = () => this.options.prepend && suffix.toString() ? this.options.prepend + suffix.toString() : suffix.toString();
    if (this.options.compatibilityJSON === 'v1') {
      if (suffix === 1) return '';
      if (typeof suffix === 'number') return `_plural_${suffix.toString()}`;
      return returnSuffix();
    } else if (this.options.compatibilityJSON === 'v2') {
      return returnSuffix();
    } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
      return returnSuffix();
    }
    return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
  }
  shouldUseIntlApi() {
    return !nonIntlVersions.includes(this.options.compatibilityJSON);
  }
}

const deepFindWithDefaults = function (data, defaultData, key) {
  let keySeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '.';
  let ignoreJSONStructure = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
  let path = getPathWithDefaults(data, defaultData, key);
  if (!path && ignoreJSONStructure && isString(key)) {
    path = deepFind(data, key, keySeparator);
    if (path === undefined) path = deepFind(defaultData, key, keySeparator);
  }
  return path;
};
const regexSafe = val => val.replace(/\$/g, '$$$$');
class Interpolator {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.logger = baseLogger.create('interpolator');
    this.options = options;
    this.format = options.interpolation && options.interpolation.format || (value => value);
    this.init(options);
  }
  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (!options.interpolation) options.interpolation = {
      escapeValue: true
    };
    const {
      escape: escape$1,
      escapeValue,
      useRawValueToEscape,
      prefix,
      prefixEscaped,
      suffix,
      suffixEscaped,
      formatSeparator,
      unescapeSuffix,
      unescapePrefix,
      nestingPrefix,
      nestingPrefixEscaped,
      nestingSuffix,
      nestingSuffixEscaped,
      nestingOptionsSeparator,
      maxReplaces,
      alwaysFormat
    } = options.interpolation;
    this.escape = escape$1 !== undefined ? escape$1 : escape;
    this.escapeValue = escapeValue !== undefined ? escapeValue : true;
    this.useRawValueToEscape = useRawValueToEscape !== undefined ? useRawValueToEscape : false;
    this.prefix = prefix ? regexEscape(prefix) : prefixEscaped || '{{';
    this.suffix = suffix ? regexEscape(suffix) : suffixEscaped || '}}';
    this.formatSeparator = formatSeparator || ',';
    this.unescapePrefix = unescapeSuffix ? '' : unescapePrefix || '-';
    this.unescapeSuffix = this.unescapePrefix ? '' : unescapeSuffix || '';
    this.nestingPrefix = nestingPrefix ? regexEscape(nestingPrefix) : nestingPrefixEscaped || regexEscape('$t(');
    this.nestingSuffix = nestingSuffix ? regexEscape(nestingSuffix) : nestingSuffixEscaped || regexEscape(')');
    this.nestingOptionsSeparator = nestingOptionsSeparator || ',';
    this.maxReplaces = maxReplaces || 1000;
    this.alwaysFormat = alwaysFormat !== undefined ? alwaysFormat : false;
    this.resetRegExp();
  }
  reset() {
    if (this.options) this.init(this.options);
  }
  resetRegExp() {
    const getOrResetRegExp = (existingRegExp, pattern) => {
      if (existingRegExp && existingRegExp.source === pattern) {
        existingRegExp.lastIndex = 0;
        return existingRegExp;
      }
      return new RegExp(pattern, 'g');
    };
    this.regexp = getOrResetRegExp(this.regexp, `${this.prefix}(.+?)${this.suffix}`);
    this.regexpUnescape = getOrResetRegExp(this.regexpUnescape, `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`);
    this.nestingRegexp = getOrResetRegExp(this.nestingRegexp, `${this.nestingPrefix}(.+?)${this.nestingSuffix}`);
  }
  interpolate(str, data, lng, options) {
    let match;
    let value;
    let replaces;
    const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
    const handleFormat = key => {
      if (key.indexOf(this.formatSeparator) < 0) {
        const path = deepFindWithDefaults(data, defaultData, key, this.options.keySeparator, this.options.ignoreJSONStructure);
        return this.alwaysFormat ? this.format(path, undefined, lng, {
          ...options,
          ...data,
          interpolationkey: key
        }) : path;
      }
      const p = key.split(this.formatSeparator);
      const k = p.shift().trim();
      const f = p.join(this.formatSeparator).trim();
      return this.format(deepFindWithDefaults(data, defaultData, k, this.options.keySeparator, this.options.ignoreJSONStructure), f, lng, {
        ...options,
        ...data,
        interpolationkey: k
      });
    };
    this.resetRegExp();
    const missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
    const skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
    const todos = [{
      regex: this.regexpUnescape,
      safeValue: val => regexSafe(val)
    }, {
      regex: this.regexp,
      safeValue: val => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)
    }];
    todos.forEach(todo => {
      replaces = 0;
      while (match = todo.regex.exec(str)) {
        const matchedVar = match[1].trim();
        value = handleFormat(matchedVar);
        if (value === undefined) {
          if (typeof missingInterpolationHandler === 'function') {
            const temp = missingInterpolationHandler(str, match, options);
            value = isString(temp) ? temp : '';
          } else if (options && Object.prototype.hasOwnProperty.call(options, matchedVar)) {
            value = '';
          } else if (skipOnVariables) {
            value = match[0];
            continue;
          } else {
            this.logger.warn(`missed to pass in variable ${matchedVar} for interpolating ${str}`);
            value = '';
          }
        } else if (!isString(value) && !this.useRawValueToEscape) {
          value = makeString(value);
        }
        const safeValue = todo.safeValue(value);
        str = str.replace(match[0], safeValue);
        if (skipOnVariables) {
          todo.regex.lastIndex += value.length;
          todo.regex.lastIndex -= match[0].length;
        } else {
          todo.regex.lastIndex = 0;
        }
        replaces++;
        if (replaces >= this.maxReplaces) {
          break;
        }
      }
    });
    return str;
  }
  nest(str, fc) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let match;
    let value;
    let clonedOptions;
    const handleHasOptions = (key, inheritedOptions) => {
      const sep = this.nestingOptionsSeparator;
      if (key.indexOf(sep) < 0) return key;
      const c = key.split(new RegExp(`${sep}[ ]*{`));
      let optionsString = `{${c[1]}`;
      key = c[0];
      optionsString = this.interpolate(optionsString, clonedOptions);
      const matchedSingleQuotes = optionsString.match(/'/g);
      const matchedDoubleQuotes = optionsString.match(/"/g);
      if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
        optionsString = optionsString.replace(/'/g, '"');
      }
      try {
        clonedOptions = JSON.parse(optionsString);
        if (inheritedOptions) clonedOptions = {
          ...inheritedOptions,
          ...clonedOptions
        };
      } catch (e) {
        this.logger.warn(`failed parsing options string in nesting for key ${key}`, e);
        return `${key}${sep}${optionsString}`;
      }
      if (clonedOptions.defaultValue && clonedOptions.defaultValue.indexOf(this.prefix) > -1) delete clonedOptions.defaultValue;
      return key;
    };
    while (match = this.nestingRegexp.exec(str)) {
      let formatters = [];
      clonedOptions = {
        ...options
      };
      clonedOptions = clonedOptions.replace && !isString(clonedOptions.replace) ? clonedOptions.replace : clonedOptions;
      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;
      let doReduce = false;
      if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
        const r = match[1].split(this.formatSeparator).map(elem => elem.trim());
        match[1] = r.shift();
        formatters = r;
        doReduce = true;
      }
      value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
      if (value && match[0] === str && !isString(value)) return value;
      if (!isString(value)) value = makeString(value);
      if (!value) {
        this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);
        value = '';
      }
      if (doReduce) {
        value = formatters.reduce((v, f) => this.format(v, f, options.lng, {
          ...options,
          interpolationkey: match[1].trim()
        }), value.trim());
      }
      str = str.replace(match[0], value);
      this.regexp.lastIndex = 0;
    }
    return str;
  }
}

const parseFormatStr = formatStr => {
  let formatName = formatStr.toLowerCase().trim();
  const formatOptions = {};
  if (formatStr.indexOf('(') > -1) {
    const p = formatStr.split('(');
    formatName = p[0].toLowerCase().trim();
    const optStr = p[1].substring(0, p[1].length - 1);
    if (formatName === 'currency' && optStr.indexOf(':') < 0) {
      if (!formatOptions.currency) formatOptions.currency = optStr.trim();
    } else if (formatName === 'relativetime' && optStr.indexOf(':') < 0) {
      if (!formatOptions.range) formatOptions.range = optStr.trim();
    } else {
      const opts = optStr.split(';');
      opts.forEach(opt => {
        if (opt) {
          const [key, ...rest] = opt.split(':');
          const val = rest.join(':').trim().replace(/^'+|'+$/g, '');
          const trimmedKey = key.trim();
          if (!formatOptions[trimmedKey]) formatOptions[trimmedKey] = val;
          if (val === 'false') formatOptions[trimmedKey] = false;
          if (val === 'true') formatOptions[trimmedKey] = true;
          if (!isNaN(val)) formatOptions[trimmedKey] = parseInt(val, 10);
        }
      });
    }
  }
  return {
    formatName,
    formatOptions
  };
};
const createCachedFormatter = fn => {
  const cache = {};
  return (val, lng, options) => {
    let optForCache = options;
    if (options && options.interpolationkey && options.formatParams && options.formatParams[options.interpolationkey] && options[options.interpolationkey]) {
      optForCache = {
        ...optForCache,
        [options.interpolationkey]: undefined
      };
    }
    const key = lng + JSON.stringify(optForCache);
    let formatter = cache[key];
    if (!formatter) {
      formatter = fn(getCleanedCode(lng), options);
      cache[key] = formatter;
    }
    return formatter(val);
  };
};
class Formatter {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.logger = baseLogger.create('formatter');
    this.options = options;
    this.formats = {
      number: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt
        });
        return val => formatter.format(val);
      }),
      currency: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt,
          style: 'currency'
        });
        return val => formatter.format(val);
      }),
      datetime: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.DateTimeFormat(lng, {
          ...opt
        });
        return val => formatter.format(val);
      }),
      relativetime: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.RelativeTimeFormat(lng, {
          ...opt
        });
        return val => formatter.format(val, opt.range || 'day');
      }),
      list: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.ListFormat(lng, {
          ...opt
        });
        return val => formatter.format(val);
      })
    };
    this.init(options);
  }
  init(services) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      interpolation: {}
    };
    this.formatSeparator = options.interpolation.formatSeparator || ',';
  }
  add(name, fc) {
    this.formats[name.toLowerCase().trim()] = fc;
  }
  addCached(name, fc) {
    this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
  }
  format(value, format, lng) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    const formats = format.split(this.formatSeparator);
    if (formats.length > 1 && formats[0].indexOf('(') > 1 && formats[0].indexOf(')') < 0 && formats.find(f => f.indexOf(')') > -1)) {
      const lastIndex = formats.findIndex(f => f.indexOf(')') > -1);
      formats[0] = [formats[0], ...formats.splice(1, lastIndex)].join(this.formatSeparator);
    }
    const result = formats.reduce((mem, f) => {
      const {
        formatName,
        formatOptions
      } = parseFormatStr(f);
      if (this.formats[formatName]) {
        let formatted = mem;
        try {
          const valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
          const l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
          formatted = this.formats[formatName](mem, l, {
            ...formatOptions,
            ...options,
            ...valOptions
          });
        } catch (error) {
          this.logger.warn(error);
        }
        return formatted;
      } else {
        this.logger.warn(`there was no format function for ${formatName}`);
      }
      return mem;
    }, value);
    return result;
  }
}

const removePending = (q, name) => {
  if (q.pending[name] !== undefined) {
    delete q.pending[name];
    q.pendingCount--;
  }
};
class Connector extends EventEmitter {
  constructor(backend, store, services) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    super();
    this.backend = backend;
    this.store = store;
    this.services = services;
    this.languageUtils = services.languageUtils;
    this.options = options;
    this.logger = baseLogger.create('backendConnector');
    this.waitingReads = [];
    this.maxParallelReads = options.maxParallelReads || 10;
    this.readingCalls = 0;
    this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;
    this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;
    this.state = {};
    this.queue = [];
    if (this.backend && this.backend.init) {
      this.backend.init(services, options.backend, options);
    }
  }
  queueLoad(languages, namespaces, options, callback) {
    const toLoad = {};
    const pending = {};
    const toLoadLanguages = {};
    const toLoadNamespaces = {};
    languages.forEach(lng => {
      let hasAllNamespaces = true;
      namespaces.forEach(ns => {
        const name = `${lng}|${ns}`;
        if (!options.reload && this.store.hasResourceBundle(lng, ns)) {
          this.state[name] = 2;
        } else if (this.state[name] < 0) ; else if (this.state[name] === 1) {
          if (pending[name] === undefined) pending[name] = true;
        } else {
          this.state[name] = 1;
          hasAllNamespaces = false;
          if (pending[name] === undefined) pending[name] = true;
          if (toLoad[name] === undefined) toLoad[name] = true;
          if (toLoadNamespaces[ns] === undefined) toLoadNamespaces[ns] = true;
        }
      });
      if (!hasAllNamespaces) toLoadLanguages[lng] = true;
    });
    if (Object.keys(toLoad).length || Object.keys(pending).length) {
      this.queue.push({
        pending,
        pendingCount: Object.keys(pending).length,
        loaded: {},
        errors: [],
        callback
      });
    }
    return {
      toLoad: Object.keys(toLoad),
      pending: Object.keys(pending),
      toLoadLanguages: Object.keys(toLoadLanguages),
      toLoadNamespaces: Object.keys(toLoadNamespaces)
    };
  }
  loaded(name, err, data) {
    const s = name.split('|');
    const lng = s[0];
    const ns = s[1];
    if (err) this.emit('failedLoading', lng, ns, err);
    if (!err && data) {
      this.store.addResourceBundle(lng, ns, data, undefined, undefined, {
        skipCopy: true
      });
    }
    this.state[name] = err ? -1 : 2;
    if (err && data) this.state[name] = 0;
    const loaded = {};
    this.queue.forEach(q => {
      pushPath(q.loaded, [lng], ns);
      removePending(q, name);
      if (err) q.errors.push(err);
      if (q.pendingCount === 0 && !q.done) {
        Object.keys(q.loaded).forEach(l => {
          if (!loaded[l]) loaded[l] = {};
          const loadedKeys = q.loaded[l];
          if (loadedKeys.length) {
            loadedKeys.forEach(n => {
              if (loaded[l][n] === undefined) loaded[l][n] = true;
            });
          }
        });
        q.done = true;
        if (q.errors.length) {
          q.callback(q.errors);
        } else {
          q.callback();
        }
      }
    });
    this.emit('loaded', loaded);
    this.queue = this.queue.filter(q => !q.done);
  }
  read(lng, ns, fcName) {
    let tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    let wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.retryTimeout;
    let callback = arguments.length > 5 ? arguments[5] : undefined;
    if (!lng.length) return callback(null, {});
    if (this.readingCalls >= this.maxParallelReads) {
      this.waitingReads.push({
        lng,
        ns,
        fcName,
        tried,
        wait,
        callback
      });
      return;
    }
    this.readingCalls++;
    const resolver = (err, data) => {
      this.readingCalls--;
      if (this.waitingReads.length > 0) {
        const next = this.waitingReads.shift();
        this.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
      }
      if (err && data && tried < this.maxRetries) {
        setTimeout(() => {
          this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);
        }, wait);
        return;
      }
      callback(err, data);
    };
    const fc = this.backend[fcName].bind(this.backend);
    if (fc.length === 2) {
      try {
        const r = fc(lng, ns);
        if (r && typeof r.then === 'function') {
          r.then(data => resolver(null, data)).catch(resolver);
        } else {
          resolver(null, r);
        }
      } catch (err) {
        resolver(err);
      }
      return;
    }
    return fc(lng, ns, resolver);
  }
  prepareLoading(languages, namespaces) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let callback = arguments.length > 3 ? arguments[3] : undefined;
    if (!this.backend) {
      this.logger.warn('No backend was added via i18next.use. Will not load resources.');
      return callback && callback();
    }
    if (isString(languages)) languages = this.languageUtils.toResolveHierarchy(languages);
    if (isString(namespaces)) namespaces = [namespaces];
    const toLoad = this.queueLoad(languages, namespaces, options, callback);
    if (!toLoad.toLoad.length) {
      if (!toLoad.pending.length) callback();
      return null;
    }
    toLoad.toLoad.forEach(name => {
      this.loadOne(name);
    });
  }
  load(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {}, callback);
  }
  reload(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {
      reload: true
    }, callback);
  }
  loadOne(name) {
    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    const s = name.split('|');
    const lng = s[0];
    const ns = s[1];
    this.read(lng, ns, 'read', undefined, undefined, (err, data) => {
      if (err) this.logger.warn(`${prefix}loading namespace ${ns} for language ${lng} failed`, err);
      if (!err && data) this.logger.log(`${prefix}loaded namespace ${ns} for language ${lng}`, data);
      this.loaded(name, err, data);
    });
  }
  saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    let clb = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : () => {};
    if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
      this.logger.warn(`did not save key "${key}" as the namespace "${namespace}" was not yet loaded`, 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
      return;
    }
    if (key === undefined || key === null || key === '') return;
    if (this.backend && this.backend.create) {
      const opts = {
        ...options,
        isUpdate
      };
      const fc = this.backend.create.bind(this.backend);
      if (fc.length < 6) {
        try {
          let r;
          if (fc.length === 5) {
            r = fc(languages, namespace, key, fallbackValue, opts);
          } else {
            r = fc(languages, namespace, key, fallbackValue);
          }
          if (r && typeof r.then === 'function') {
            r.then(data => clb(null, data)).catch(clb);
          } else {
            clb(null, r);
          }
        } catch (err) {
          clb(err);
        }
      } else {
        fc(languages, namespace, key, fallbackValue, clb, opts);
      }
    }
    if (!languages || !languages[0]) return;
    this.store.addResource(languages[0], namespace, key, fallbackValue);
  }
}

const get = () => ({
  debug: false,
  initImmediate: true,
  ns: ['translation'],
  defaultNS: ['translation'],
  fallbackLng: ['dev'],
  fallbackNS: false,
  supportedLngs: false,
  nonExplicitSupportedLngs: false,
  load: 'all',
  preload: false,
  simplifyPluralSuffix: true,
  keySeparator: '.',
  nsSeparator: ':',
  pluralSeparator: '_',
  contextSeparator: '_',
  partialBundledLanguages: false,
  saveMissing: false,
  updateMissing: false,
  saveMissingTo: 'fallback',
  saveMissingPlurals: true,
  missingKeyHandler: false,
  missingInterpolationHandler: false,
  postProcess: false,
  postProcessPassResolved: false,
  returnNull: false,
  returnEmptyString: true,
  returnObjects: false,
  joinArrays: false,
  returnedObjectHandler: false,
  parseMissingKeyHandler: false,
  appendNamespaceToMissingKey: false,
  appendNamespaceToCIMode: false,
  overloadTranslationOptionHandler: args => {
    let ret = {};
    if (typeof args[1] === 'object') ret = args[1];
    if (isString(args[1])) ret.defaultValue = args[1];
    if (isString(args[2])) ret.tDescription = args[2];
    if (typeof args[2] === 'object' || typeof args[3] === 'object') {
      const options = args[3] || args[2];
      Object.keys(options).forEach(key => {
        ret[key] = options[key];
      });
    }
    return ret;
  },
  interpolation: {
    escapeValue: true,
    format: value => value,
    prefix: '{{',
    suffix: '}}',
    formatSeparator: ',',
    unescapePrefix: '-',
    nestingPrefix: '$t(',
    nestingSuffix: ')',
    nestingOptionsSeparator: ',',
    maxReplaces: 1000,
    skipOnVariables: true
  }
});
const transformOptions = options => {
  if (isString(options.ns)) options.ns = [options.ns];
  if (isString(options.fallbackLng)) options.fallbackLng = [options.fallbackLng];
  if (isString(options.fallbackNS)) options.fallbackNS = [options.fallbackNS];
  if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {
    options.supportedLngs = options.supportedLngs.concat(['cimode']);
  }
  return options;
};

const noop = () => {};
const bindMemberFunctions = inst => {
  const mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
  mems.forEach(mem => {
    if (typeof inst[mem] === 'function') {
      inst[mem] = inst[mem].bind(inst);
    }
  });
};
class I18n extends EventEmitter {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : undefined;
    super();
    this.options = transformOptions(options);
    this.services = {};
    this.logger = baseLogger;
    this.modules = {
      external: []
    };
    bindMemberFunctions(this);
    if (callback && !this.isInitialized && !options.isClone) {
      if (!this.options.initImmediate) {
        this.init(options, callback);
        return this;
      }
      setTimeout(() => {
        this.init(options, callback);
      }, 0);
    }
  }
  init() {
    var _this = this;
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : undefined;
    this.isInitializing = true;
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    if (!options.defaultNS && options.defaultNS !== false && options.ns) {
      if (isString(options.ns)) {
        options.defaultNS = options.ns;
      } else if (options.ns.indexOf('translation') < 0) {
        options.defaultNS = options.ns[0];
      }
    }
    const defOpts = get();
    this.options = {
      ...defOpts,
      ...this.options,
      ...transformOptions(options)
    };
    if (this.options.compatibilityAPI !== 'v1') {
      this.options.interpolation = {
        ...defOpts.interpolation,
        ...this.options.interpolation
      };
    }
    if (options.keySeparator !== undefined) {
      this.options.userDefinedKeySeparator = options.keySeparator;
    }
    if (options.nsSeparator !== undefined) {
      this.options.userDefinedNsSeparator = options.nsSeparator;
    }
    const createClassOnDemand = ClassOrObject => {
      if (!ClassOrObject) return null;
      if (typeof ClassOrObject === 'function') return new ClassOrObject();
      return ClassOrObject;
    };
    if (!this.options.isClone) {
      if (this.modules.logger) {
        baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
      } else {
        baseLogger.init(null, this.options);
      }
      let formatter;
      if (this.modules.formatter) {
        formatter = this.modules.formatter;
      } else if (typeof Intl !== 'undefined') {
        formatter = Formatter;
      }
      const lu = new LanguageUtil(this.options);
      this.store = new ResourceStore(this.options.resources, this.options);
      const s = this.services;
      s.logger = baseLogger;
      s.resourceStore = this.store;
      s.languageUtils = lu;
      s.pluralResolver = new PluralResolver(lu, {
        prepend: this.options.pluralSeparator,
        compatibilityJSON: this.options.compatibilityJSON,
        simplifyPluralSuffix: this.options.simplifyPluralSuffix
      });
      if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
        s.formatter = createClassOnDemand(formatter);
        s.formatter.init(s, this.options);
        this.options.interpolation.format = s.formatter.format.bind(s.formatter);
      }
      s.interpolator = new Interpolator(this.options);
      s.utils = {
        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
      };
      s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
      s.backendConnector.on('*', function (event) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        _this.emit(event, ...args);
      });
      if (this.modules.languageDetector) {
        s.languageDetector = createClassOnDemand(this.modules.languageDetector);
        if (s.languageDetector.init) s.languageDetector.init(s, this.options.detection, this.options);
      }
      if (this.modules.i18nFormat) {
        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
        if (s.i18nFormat.init) s.i18nFormat.init(this);
      }
      this.translator = new Translator(this.services, this.options);
      this.translator.on('*', function (event) {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        _this.emit(event, ...args);
      });
      this.modules.external.forEach(m => {
        if (m.init) m.init(this);
      });
    }
    this.format = this.options.interpolation.format;
    if (!callback) callback = noop;
    if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
      const codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
      if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0];
    }
    if (!this.services.languageDetector && !this.options.lng) {
      this.logger.warn('init: no languageDetector is used and no lng is defined');
    }
    const storeApi = ['getResource', 'hasResourceBundle', 'getResourceBundle', 'getDataByLanguage'];
    storeApi.forEach(fcName => {
      this[fcName] = function () {
        return _this.store[fcName](...arguments);
      };
    });
    const storeApiChained = ['addResource', 'addResources', 'addResourceBundle', 'removeResourceBundle'];
    storeApiChained.forEach(fcName => {
      this[fcName] = function () {
        _this.store[fcName](...arguments);
        return _this;
      };
    });
    const deferred = defer();
    const load = () => {
      const finish = (err, t) => {
        this.isInitializing = false;
        if (this.isInitialized && !this.initializedStoreOnce) this.logger.warn('init: i18next is already initialized. You should call init just once!');
        this.isInitialized = true;
        if (!this.options.isClone) this.logger.log('initialized', this.options);
        this.emit('initialized', this.options);
        deferred.resolve(t);
        callback(err, t);
      };
      if (this.languages && this.options.compatibilityAPI !== 'v1' && !this.isInitialized) return finish(null, this.t.bind(this));
      this.changeLanguage(this.options.lng, finish);
    };
    if (this.options.resources || !this.options.initImmediate) {
      load();
    } else {
      setTimeout(load, 0);
    }
    return deferred;
  }
  loadResources(language) {
    let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
    let usedCallback = callback;
    const usedLng = isString(language) ? language : this.language;
    if (typeof language === 'function') usedCallback = language;
    if (!this.options.resources || this.options.partialBundledLanguages) {
      if (usedLng && usedLng.toLowerCase() === 'cimode' && (!this.options.preload || this.options.preload.length === 0)) return usedCallback();
      const toLoad = [];
      const append = lng => {
        if (!lng) return;
        if (lng === 'cimode') return;
        const lngs = this.services.languageUtils.toResolveHierarchy(lng);
        lngs.forEach(l => {
          if (l === 'cimode') return;
          if (toLoad.indexOf(l) < 0) toLoad.push(l);
        });
      };
      if (!usedLng) {
        const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        fallbacks.forEach(l => append(l));
      } else {
        append(usedLng);
      }
      if (this.options.preload) {
        this.options.preload.forEach(l => append(l));
      }
      this.services.backendConnector.load(toLoad, this.options.ns, e => {
        if (!e && !this.resolvedLanguage && this.language) this.setResolvedLanguage(this.language);
        usedCallback(e);
      });
    } else {
      usedCallback(null);
    }
  }
  reloadResources(lngs, ns, callback) {
    const deferred = defer();
    if (typeof lngs === 'function') {
      callback = lngs;
      lngs = undefined;
    }
    if (typeof ns === 'function') {
      callback = ns;
      ns = undefined;
    }
    if (!lngs) lngs = this.languages;
    if (!ns) ns = this.options.ns;
    if (!callback) callback = noop;
    this.services.backendConnector.reload(lngs, ns, err => {
      deferred.resolve();
      callback(err);
    });
    return deferred;
  }
  use(module) {
    if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
    if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');
    if (module.type === 'backend') {
      this.modules.backend = module;
    }
    if (module.type === 'logger' || module.log && module.warn && module.error) {
      this.modules.logger = module;
    }
    if (module.type === 'languageDetector') {
      this.modules.languageDetector = module;
    }
    if (module.type === 'i18nFormat') {
      this.modules.i18nFormat = module;
    }
    if (module.type === 'postProcessor') {
      postProcessor.addPostProcessor(module);
    }
    if (module.type === 'formatter') {
      this.modules.formatter = module;
    }
    if (module.type === '3rdParty') {
      this.modules.external.push(module);
    }
    return this;
  }
  setResolvedLanguage(l) {
    if (!l || !this.languages) return;
    if (['cimode', 'dev'].indexOf(l) > -1) return;
    for (let li = 0; li < this.languages.length; li++) {
      const lngInLngs = this.languages[li];
      if (['cimode', 'dev'].indexOf(lngInLngs) > -1) continue;
      if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
        this.resolvedLanguage = lngInLngs;
        break;
      }
    }
  }
  changeLanguage(lng, callback) {
    var _this2 = this;
    this.isLanguageChangingTo = lng;
    const deferred = defer();
    this.emit('languageChanging', lng);
    const setLngProps = l => {
      this.language = l;
      this.languages = this.services.languageUtils.toResolveHierarchy(l);
      this.resolvedLanguage = undefined;
      this.setResolvedLanguage(l);
    };
    const done = (err, l) => {
      if (l) {
        setLngProps(l);
        this.translator.changeLanguage(l);
        this.isLanguageChangingTo = undefined;
        this.emit('languageChanged', l);
        this.logger.log('languageChanged', l);
      } else {
        this.isLanguageChangingTo = undefined;
      }
      deferred.resolve(function () {
        return _this2.t(...arguments);
      });
      if (callback) callback(err, function () {
        return _this2.t(...arguments);
      });
    };
    const setLng = lngs => {
      if (!lng && !lngs && this.services.languageDetector) lngs = [];
      const l = isString(lngs) ? lngs : this.services.languageUtils.getBestMatchFromCodes(lngs);
      if (l) {
        if (!this.language) {
          setLngProps(l);
        }
        if (!this.translator.language) this.translator.changeLanguage(l);
        if (this.services.languageDetector && this.services.languageDetector.cacheUserLanguage) this.services.languageDetector.cacheUserLanguage(l);
      }
      this.loadResources(l, err => {
        done(err, l);
      });
    };
    if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
      setLng(this.services.languageDetector.detect());
    } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
      if (this.services.languageDetector.detect.length === 0) {
        this.services.languageDetector.detect().then(setLng);
      } else {
        this.services.languageDetector.detect(setLng);
      }
    } else {
      setLng(lng);
    }
    return deferred;
  }
  getFixedT(lng, ns, keyPrefix) {
    var _this3 = this;
    const fixedT = function (key, opts) {
      let options;
      if (typeof opts !== 'object') {
        for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
          rest[_key3 - 2] = arguments[_key3];
        }
        options = _this3.options.overloadTranslationOptionHandler([key, opts].concat(rest));
      } else {
        options = {
          ...opts
        };
      }
      options.lng = options.lng || fixedT.lng;
      options.lngs = options.lngs || fixedT.lngs;
      options.ns = options.ns || fixedT.ns;
      if (options.keyPrefix !== '') options.keyPrefix = options.keyPrefix || keyPrefix || fixedT.keyPrefix;
      const keySeparator = _this3.options.keySeparator || '.';
      let resultKey;
      if (options.keyPrefix && Array.isArray(key)) {
        resultKey = key.map(k => `${options.keyPrefix}${keySeparator}${k}`);
      } else {
        resultKey = options.keyPrefix ? `${options.keyPrefix}${keySeparator}${key}` : key;
      }
      return _this3.t(resultKey, options);
    };
    if (isString(lng)) {
      fixedT.lng = lng;
    } else {
      fixedT.lngs = lng;
    }
    fixedT.ns = ns;
    fixedT.keyPrefix = keyPrefix;
    return fixedT;
  }
  t() {
    return this.translator && this.translator.translate(...arguments);
  }
  exists() {
    return this.translator && this.translator.exists(...arguments);
  }
  setDefaultNamespace(ns) {
    this.options.defaultNS = ns;
  }
  hasLoadedNamespace(ns) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!this.isInitialized) {
      this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
      return false;
    }
    if (!this.languages || !this.languages.length) {
      this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
      return false;
    }
    const lng = options.lng || this.resolvedLanguage || this.languages[0];
    const fallbackLng = this.options ? this.options.fallbackLng : false;
    const lastLng = this.languages[this.languages.length - 1];
    if (lng.toLowerCase() === 'cimode') return true;
    const loadNotPending = (l, n) => {
      const loadState = this.services.backendConnector.state[`${l}|${n}`];
      return loadState === -1 || loadState === 0 || loadState === 2;
    };
    if (options.precheck) {
      const preResult = options.precheck(this, loadNotPending);
      if (preResult !== undefined) return preResult;
    }
    if (this.hasResourceBundle(lng, ns)) return true;
    if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
    if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
    return false;
  }
  loadNamespaces(ns, callback) {
    const deferred = defer();
    if (!this.options.ns) {
      if (callback) callback();
      return Promise.resolve();
    }
    if (isString(ns)) ns = [ns];
    ns.forEach(n => {
      if (this.options.ns.indexOf(n) < 0) this.options.ns.push(n);
    });
    this.loadResources(err => {
      deferred.resolve();
      if (callback) callback(err);
    });
    return deferred;
  }
  loadLanguages(lngs, callback) {
    const deferred = defer();
    if (isString(lngs)) lngs = [lngs];
    const preloaded = this.options.preload || [];
    const newLngs = lngs.filter(lng => preloaded.indexOf(lng) < 0 && this.services.languageUtils.isSupportedCode(lng));
    if (!newLngs.length) {
      if (callback) callback();
      return Promise.resolve();
    }
    this.options.preload = preloaded.concat(newLngs);
    this.loadResources(err => {
      deferred.resolve();
      if (callback) callback(err);
    });
    return deferred;
  }
  dir(lng) {
    if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
    if (!lng) return 'rtl';
    const rtlLngs = ['ar', 'shu', 'sqr', 'ssh', 'xaa', 'yhd', 'yud', 'aao', 'abh', 'abv', 'acm', 'acq', 'acw', 'acx', 'acy', 'adf', 'ads', 'aeb', 'aec', 'afb', 'ajp', 'apc', 'apd', 'arb', 'arq', 'ars', 'ary', 'arz', 'auz', 'avl', 'ayh', 'ayl', 'ayn', 'ayp', 'bbz', 'pga', 'he', 'iw', 'ps', 'pbt', 'pbu', 'pst', 'prp', 'prd', 'ug', 'ur', 'ydd', 'yds', 'yih', 'ji', 'yi', 'hbo', 'men', 'xmn', 'fa', 'jpr', 'peo', 'pes', 'prs', 'dv', 'sam', 'ckb'];
    const languageUtils = this.services && this.services.languageUtils || new LanguageUtil(get());
    return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf('-arab') > 1 ? 'rtl' : 'ltr';
  }
  static createInstance() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : undefined;
    return new I18n(options, callback);
  }
  cloneInstance() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
    const forkResourceStore = options.forkResourceStore;
    if (forkResourceStore) delete options.forkResourceStore;
    const mergedOptions = {
      ...this.options,
      ...options,
      ...{
        isClone: true
      }
    };
    const clone = new I18n(mergedOptions);
    if (options.debug !== undefined || options.prefix !== undefined) {
      clone.logger = clone.logger.clone(options);
    }
    const membersToCopy = ['store', 'services', 'language'];
    membersToCopy.forEach(m => {
      clone[m] = this[m];
    });
    clone.services = {
      ...this.services
    };
    clone.services.utils = {
      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
    };
    if (forkResourceStore) {
      clone.store = new ResourceStore(this.store.data, mergedOptions);
      clone.services.resourceStore = clone.store;
    }
    clone.translator = new Translator(clone.services, mergedOptions);
    clone.translator.on('*', function (event) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      clone.emit(event, ...args);
    });
    clone.init(mergedOptions, callback);
    clone.translator.options = mergedOptions;
    clone.translator.backendConnector.services.utils = {
      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
    };
    return clone;
  }
  toJSON() {
    return {
      options: this.options,
      store: this.store,
      language: this.language,
      languages: this.languages,
      resolvedLanguage: this.resolvedLanguage
    };
  }
}
const instance = I18n.createInstance();
instance.createInstance = I18n.createInstance;

module.exports = instance;


/***/ }),

/***/ "../../node_modules/lodash.debounce/index.js":
/*!***************************************************!*\
  !*** ../../node_modules/lodash.debounce/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;

    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = debounce;


/***/ }),

/***/ "../../node_modules/react-i18next/dist/es/I18nextProvider.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/react-i18next/dist/es/I18nextProvider.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   I18nextProvider: () => (/* binding */ I18nextProvider)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./context.js */ "../../node_modules/react-i18next/dist/es/context.js");


function I18nextProvider(_ref) {
  let {
    i18n,
    defaultNS,
    children
  } = _ref;
  const value = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
    i18n,
    defaultNS
  }), [i18n, defaultNS]);
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_context_js__WEBPACK_IMPORTED_MODULE_1__.I18nContext.Provider, {
    value
  }, children);
}

/***/ }),

/***/ "../../node_modules/react-i18next/dist/es/Trans.js":
/*!*********************************************************!*\
  !*** ../../node_modules/react-i18next/dist/es/Trans.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Trans: () => (/* binding */ Trans),
/* harmony export */   nodesToString: () => (/* reexport safe */ _TransWithoutContext_js__WEBPACK_IMPORTED_MODULE_1__.nodesToString)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var _TransWithoutContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TransWithoutContext.js */ "../../node_modules/react-i18next/dist/es/TransWithoutContext.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./context.js */ "../../node_modules/react-i18next/dist/es/context.js");




function Trans(_ref) {
  let {
    children,
    count,
    parent,
    i18nKey,
    context,
    tOptions = {},
    values,
    defaults,
    components,
    ns,
    i18n: i18nFromProps,
    t: tFromProps,
    shouldUnescape,
    ...additionalProps
  } = _ref;
  const {
    i18n: i18nFromContext,
    defaultNS: defaultNSFromContext
  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_js__WEBPACK_IMPORTED_MODULE_2__.I18nContext) || {};
  const i18n = i18nFromProps || i18nFromContext || (0,_context_js__WEBPACK_IMPORTED_MODULE_2__.getI18n)();
  const t = tFromProps || i18n && i18n.t.bind(i18n);
  return (0,_TransWithoutContext_js__WEBPACK_IMPORTED_MODULE_1__.Trans)({
    children,
    count,
    parent,
    i18nKey,
    context,
    tOptions,
    values,
    defaults,
    components,
    ns: ns || t && t.ns || defaultNSFromContext || i18n && i18n.options && i18n.options.defaultNS,
    i18n,
    t: tFromProps,
    shouldUnescape,
    ...additionalProps
  });
}

/***/ }),

/***/ "../../node_modules/react-i18next/dist/es/TransWithoutContext.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/react-i18next/dist/es/TransWithoutContext.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Trans: () => (/* binding */ Trans),
/* harmony export */   nodesToString: () => (/* binding */ nodesToString)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var html_parse_stringify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! html-parse-stringify */ "../../node_modules/html-parse-stringify/dist/html-parse-stringify.module.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "../../node_modules/react-i18next/dist/es/utils.js");
/* harmony import */ var _defaults_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./defaults.js */ "../../node_modules/react-i18next/dist/es/defaults.js");
/* harmony import */ var _i18nInstance_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./i18nInstance.js */ "../../node_modules/react-i18next/dist/es/i18nInstance.js");





const hasChildren = (node, checkLength) => {
  if (!node) return false;
  const base = node.props ? node.props.children : node.children;
  if (checkLength) return base.length > 0;
  return !!base;
};
const getChildren = node => {
  if (!node) return [];
  const children = node.props ? node.props.children : node.children;
  return node.props && node.props.i18nIsDynamicList ? getAsArray(children) : children;
};
const hasValidReactChildren = children => Array.isArray(children) && children.every(react__WEBPACK_IMPORTED_MODULE_0__.isValidElement);
const getAsArray = data => Array.isArray(data) ? data : [data];
const mergeProps = (source, target) => {
  const newTarget = {
    ...target
  };
  newTarget.props = Object.assign(source.props, target.props);
  return newTarget;
};
const nodesToString = (children, i18nOptions) => {
  if (!children) return '';
  let stringNode = '';
  const childrenArray = getAsArray(children);
  const keepArray = i18nOptions.transSupportBasicHtmlNodes && i18nOptions.transKeepBasicHtmlNodesFor ? i18nOptions.transKeepBasicHtmlNodesFor : [];
  childrenArray.forEach((child, childIndex) => {
    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isString)(child)) {
      stringNode += `${child}`;
    } else if ((0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(child)) {
      const {
        props,
        type
      } = child;
      const childPropsCount = Object.keys(props).length;
      const shouldKeepChild = keepArray.indexOf(type) > -1;
      const childChildren = props.children;
      if (!childChildren && shouldKeepChild && !childPropsCount) {
        stringNode += `<${type}/>`;
      } else if (!childChildren && (!shouldKeepChild || childPropsCount) || props.i18nIsDynamicList) {
        stringNode += `<${childIndex}></${childIndex}>`;
      } else if (shouldKeepChild && childPropsCount === 1 && (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isString)(childChildren)) {
        stringNode += `<${type}>${childChildren}</${type}>`;
      } else {
        const content = nodesToString(childChildren, i18nOptions);
        stringNode += `<${childIndex}>${content}</${childIndex}>`;
      }
    } else if (child === null) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.warn)(`Trans: the passed in value is invalid - seems you passed in a null child.`);
    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(child)) {
      const {
        format,
        ...clone
      } = child;
      const keys = Object.keys(clone);
      if (keys.length === 1) {
        const value = format ? `${keys[0]}, ${format}` : keys[0];
        stringNode += `{{${value}}}`;
      } else {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.warn)(`react-i18next: the passed in object contained more than one variable - the object should look like {{ value, format }} where format is optional.`, child);
      }
    } else {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.warn)(`Trans: the passed in value is invalid - seems you passed in a variable like {number} - please pass in variables for interpolation as full objects like {{number}}.`, child);
    }
  });
  return stringNode;
};
const renderNodes = (children, targetString, i18n, i18nOptions, combinedTOpts, shouldUnescape) => {
  if (targetString === '') return [];
  const keepArray = i18nOptions.transKeepBasicHtmlNodesFor || [];
  const emptyChildrenButNeedsHandling = targetString && new RegExp(keepArray.map(keep => `<${keep}`).join('|')).test(targetString);
  if (!children && !emptyChildrenButNeedsHandling && !shouldUnescape) return [targetString];
  const data = {};
  const getData = childs => {
    const childrenArray = getAsArray(childs);
    childrenArray.forEach(child => {
      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isString)(child)) return;
      if (hasChildren(child)) getData(getChildren(child));else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(child) && !(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(child)) Object.assign(data, child);
    });
  };
  getData(children);
  const ast = html_parse_stringify__WEBPACK_IMPORTED_MODULE_1__["default"].parse(`<0>${targetString}</0>`);
  const opts = {
    ...data,
    ...combinedTOpts
  };
  const renderInner = (child, node, rootReactNode) => {
    const childs = getChildren(child);
    const mappedChildren = mapAST(childs, node.children, rootReactNode);
    return hasValidReactChildren(childs) && mappedChildren.length === 0 || child.props && child.props.i18nIsDynamicList ? childs : mappedChildren;
  };
  const pushTranslatedJSX = (child, inner, mem, i, isVoid) => {
    if (child.dummy) {
      child.children = inner;
      mem.push((0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(child, {
        key: i
      }, isVoid ? undefined : inner));
    } else {
      mem.push(...react__WEBPACK_IMPORTED_MODULE_0__.Children.map([child], c => {
        const props = {
          ...c.props
        };
        delete props.i18nIsDynamicList;
        return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(c.type, {
          ...props,
          key: i,
          ref: c.ref
        }, isVoid ? null : inner);
      }));
    }
  };
  const mapAST = (reactNode, astNode, rootReactNode) => {
    const reactNodes = getAsArray(reactNode);
    const astNodes = getAsArray(astNode);
    return astNodes.reduce((mem, node, i) => {
      const translationContent = node.children && node.children[0] && node.children[0].content && i18n.services.interpolator.interpolate(node.children[0].content, opts, i18n.language);
      if (node.type === 'tag') {
        let tmp = reactNodes[parseInt(node.name, 10)];
        if (rootReactNode.length === 1 && !tmp) tmp = rootReactNode[0][node.name];
        if (!tmp) tmp = {};
        const child = Object.keys(node.attrs).length !== 0 ? mergeProps({
          props: node.attrs
        }, tmp) : tmp;
        const isElement = (0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(child);
        const isValidTranslationWithChildren = isElement && hasChildren(node, true) && !node.voidElement;
        const isEmptyTransWithHTML = emptyChildrenButNeedsHandling && (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(child) && child.dummy && !isElement;
        const isKnownComponent = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(children) && Object.hasOwnProperty.call(children, node.name);
        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isString)(child)) {
          const value = i18n.services.interpolator.interpolate(child, opts, i18n.language);
          mem.push(value);
        } else if (hasChildren(child) || isValidTranslationWithChildren) {
          const inner = renderInner(child, node, rootReactNode);
          pushTranslatedJSX(child, inner, mem, i);
        } else if (isEmptyTransWithHTML) {
          const inner = mapAST(reactNodes, node.children, rootReactNode);
          pushTranslatedJSX(child, inner, mem, i);
        } else if (Number.isNaN(parseFloat(node.name))) {
          if (isKnownComponent) {
            const inner = renderInner(child, node, rootReactNode);
            pushTranslatedJSX(child, inner, mem, i, node.voidElement);
          } else if (i18nOptions.transSupportBasicHtmlNodes && keepArray.indexOf(node.name) > -1) {
            if (node.voidElement) {
              mem.push((0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(node.name, {
                key: `${node.name}-${i}`
              }));
            } else {
              const inner = mapAST(reactNodes, node.children, rootReactNode);
              mem.push((0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(node.name, {
                key: `${node.name}-${i}`
              }, inner));
            }
          } else if (node.voidElement) {
            mem.push(`<${node.name} />`);
          } else {
            const inner = mapAST(reactNodes, node.children, rootReactNode);
            mem.push(`<${node.name}>${inner}</${node.name}>`);
          }
        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(child) && !isElement) {
          const content = node.children[0] ? translationContent : null;
          if (content) mem.push(content);
        } else {
          pushTranslatedJSX(child, translationContent, mem, i, node.children.length !== 1 || !translationContent);
        }
      } else if (node.type === 'text') {
        const wrapTextNodes = i18nOptions.transWrapTextNodes;
        const content = shouldUnescape ? i18nOptions.unescape(i18n.services.interpolator.interpolate(node.content, opts, i18n.language)) : i18n.services.interpolator.interpolate(node.content, opts, i18n.language);
        if (wrapTextNodes) {
          mem.push((0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(wrapTextNodes, {
            key: `${node.name}-${i}`
          }, content));
        } else {
          mem.push(content);
        }
      }
      return mem;
    }, []);
  };
  const result = mapAST([{
    dummy: true,
    children: children || []
  }], ast, getAsArray(children || []));
  return getChildren(result[0]);
};
function Trans(_ref) {
  let {
    children,
    count,
    parent,
    i18nKey,
    context,
    tOptions = {},
    values,
    defaults,
    components,
    ns,
    i18n: i18nFromProps,
    t: tFromProps,
    shouldUnescape,
    ...additionalProps
  } = _ref;
  const i18n = i18nFromProps || (0,_i18nInstance_js__WEBPACK_IMPORTED_MODULE_4__.getI18n)();
  if (!i18n) {
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.warnOnce)('You will need to pass in an i18next instance by using i18nextReactModule');
    return children;
  }
  const t = tFromProps || i18n.t.bind(i18n) || (k => k);
  const reactI18nextOptions = {
    ...(0,_defaults_js__WEBPACK_IMPORTED_MODULE_3__.getDefaults)(),
    ...(i18n.options && i18n.options.react)
  };
  let namespaces = ns || t.ns || i18n.options && i18n.options.defaultNS;
  namespaces = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isString)(namespaces) ? [namespaces] : namespaces || ['translation'];
  const nodeAsString = nodesToString(children, reactI18nextOptions);
  const defaultValue = defaults || nodeAsString || reactI18nextOptions.transEmptyNodeValue || i18nKey;
  const {
    hashTransKey
  } = reactI18nextOptions;
  const key = i18nKey || (hashTransKey ? hashTransKey(nodeAsString || defaultValue) : nodeAsString || defaultValue);
  if (i18n.options && i18n.options.interpolation && i18n.options.interpolation.defaultVariables) {
    values = values && Object.keys(values).length > 0 ? {
      ...values,
      ...i18n.options.interpolation.defaultVariables
    } : {
      ...i18n.options.interpolation.defaultVariables
    };
  }
  const interpolationOverride = values || count !== undefined || !children ? tOptions.interpolation : {
    interpolation: {
      ...tOptions.interpolation,
      prefix: '#$?',
      suffix: '?$#'
    }
  };
  const combinedTOpts = {
    ...tOptions,
    context: context || tOptions.context,
    count,
    ...values,
    ...interpolationOverride,
    defaultValue,
    ns: namespaces
  };
  const translation = key ? t(key, combinedTOpts) : defaultValue;
  if (components) {
    Object.keys(components).forEach(c => {
      const comp = components[c];
      if (typeof comp.type === 'function' || !comp.props || !comp.props.children || translation.indexOf(`${c}/>`) < 0 && translation.indexOf(`${c} />`) < 0) return;
      function Componentized() {
        return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, comp);
      }
      components[c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Componentized);
    });
  }
  const content = renderNodes(components || children, translation, i18n, reactI18nextOptions, combinedTOpts, shouldUnescape);
  const useAsParent = parent !== undefined ? parent : reactI18nextOptions.defaultTransParent;
  return useAsParent ? (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(useAsParent, additionalProps, content) : content;
}

/***/ }),

/***/ "../../node_modules/react-i18next/dist/es/Translation.js":
/*!***************************************************************!*\
  !*** ../../node_modules/react-i18next/dist/es/Translation.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Translation: () => (/* binding */ Translation)
/* harmony export */ });
/* harmony import */ var _useTranslation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useTranslation.js */ "../../node_modules/react-i18next/dist/es/useTranslation.js");

function Translation(props) {
  const {
    ns,
    children,
    ...options
  } = props;
  const [t, i18n, ready] = (0,_useTranslation_js__WEBPACK_IMPORTED_MODULE_0__.useTranslation)(ns, options);
  return children(t, {
    i18n,
    lng: i18n.language
  }, ready);
}

/***/ }),

/***/ "../../node_modules/react-i18next/dist/es/context.js":
/*!***********************************************************!*\
  !*** ../../node_modules/react-i18next/dist/es/context.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   I18nContext: () => (/* binding */ I18nContext),
/* harmony export */   ReportNamespaces: () => (/* binding */ ReportNamespaces),
/* harmony export */   composeInitialProps: () => (/* binding */ composeInitialProps),
/* harmony export */   getDefaults: () => (/* reexport safe */ _defaults_js__WEBPACK_IMPORTED_MODULE_1__.getDefaults),
/* harmony export */   getI18n: () => (/* reexport safe */ _i18nInstance_js__WEBPACK_IMPORTED_MODULE_2__.getI18n),
/* harmony export */   getInitialProps: () => (/* binding */ getInitialProps),
/* harmony export */   initReactI18next: () => (/* reexport safe */ _initReactI18next_js__WEBPACK_IMPORTED_MODULE_3__.initReactI18next),
/* harmony export */   setDefaults: () => (/* reexport safe */ _defaults_js__WEBPACK_IMPORTED_MODULE_1__.setDefaults),
/* harmony export */   setI18n: () => (/* reexport safe */ _i18nInstance_js__WEBPACK_IMPORTED_MODULE_2__.setI18n)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var _defaults_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaults.js */ "../../node_modules/react-i18next/dist/es/defaults.js");
/* harmony import */ var _i18nInstance_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./i18nInstance.js */ "../../node_modules/react-i18next/dist/es/i18nInstance.js");
/* harmony import */ var _initReactI18next_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./initReactI18next.js */ "../../node_modules/react-i18next/dist/es/initReactI18next.js");





const I18nContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)();
class ReportNamespaces {
  constructor() {
    this.usedNamespaces = {};
  }
  addUsedNamespaces(namespaces) {
    namespaces.forEach(ns => {
      if (!this.usedNamespaces[ns]) this.usedNamespaces[ns] = true;
    });
  }
  getUsedNamespaces = () => Object.keys(this.usedNamespaces);
}
const composeInitialProps = ForComponent => async ctx => {
  const componentsInitialProps = ForComponent.getInitialProps ? await ForComponent.getInitialProps(ctx) : {};
  const i18nInitialProps = getInitialProps();
  return {
    ...componentsInitialProps,
    ...i18nInitialProps
  };
};
const getInitialProps = () => {
  const i18n = (0,_i18nInstance_js__WEBPACK_IMPORTED_MODULE_2__.getI18n)();
  const namespaces = i18n.reportNamespaces ? i18n.reportNamespaces.getUsedNamespaces() : [];
  const ret = {};
  const initialI18nStore = {};
  i18n.languages.forEach(l => {
    initialI18nStore[l] = {};
    namespaces.forEach(ns => {
      initialI18nStore[l][ns] = i18n.getResourceBundle(l, ns) || {};
    });
  });
  ret.initialI18nStore = initialI18nStore;
  ret.initialLanguage = i18n.language;
  return ret;
};

/***/ }),

/***/ "../../node_modules/react-i18next/dist/es/defaults.js":
/*!************************************************************!*\
  !*** ../../node_modules/react-i18next/dist/es/defaults.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDefaults: () => (/* binding */ getDefaults),
/* harmony export */   setDefaults: () => (/* binding */ setDefaults)
/* harmony export */ });
/* harmony import */ var _unescape_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unescape.js */ "../../node_modules/react-i18next/dist/es/unescape.js");

let defaultOptions = {
  bindI18n: 'languageChanged',
  bindI18nStore: '',
  transEmptyNodeValue: '',
  transSupportBasicHtmlNodes: true,
  transWrapTextNodes: '',
  transKeepBasicHtmlNodesFor: ['br', 'strong', 'i', 'p'],
  useSuspense: true,
  unescape: _unescape_js__WEBPACK_IMPORTED_MODULE_0__.unescape
};
const setDefaults = function () {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  defaultOptions = {
    ...defaultOptions,
    ...options
  };
};
const getDefaults = () => defaultOptions;

/***/ }),

/***/ "../../node_modules/react-i18next/dist/es/i18nInstance.js":
/*!****************************************************************!*\
  !*** ../../node_modules/react-i18next/dist/es/i18nInstance.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getI18n: () => (/* binding */ getI18n),
/* harmony export */   setI18n: () => (/* binding */ setI18n)
/* harmony export */ });
let i18nInstance;
const setI18n = instance => {
  i18nInstance = instance;
};
const getI18n = () => i18nInstance;

/***/ }),

/***/ "../../node_modules/react-i18next/dist/es/index.js":
/*!*********************************************************!*\
  !*** ../../node_modules/react-i18next/dist/es/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   I18nContext: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_11__.I18nContext),
/* harmony export */   I18nextProvider: () => (/* reexport safe */ _I18nextProvider_js__WEBPACK_IMPORTED_MODULE_5__.I18nextProvider),
/* harmony export */   Trans: () => (/* reexport safe */ _Trans_js__WEBPACK_IMPORTED_MODULE_0__.Trans),
/* harmony export */   TransWithoutContext: () => (/* reexport safe */ _TransWithoutContext_js__WEBPACK_IMPORTED_MODULE_1__.Trans),
/* harmony export */   Translation: () => (/* reexport safe */ _Translation_js__WEBPACK_IMPORTED_MODULE_4__.Translation),
/* harmony export */   composeInitialProps: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_11__.composeInitialProps),
/* harmony export */   date: () => (/* binding */ date),
/* harmony export */   getDefaults: () => (/* reexport safe */ _defaults_js__WEBPACK_IMPORTED_MODULE_9__.getDefaults),
/* harmony export */   getI18n: () => (/* reexport safe */ _i18nInstance_js__WEBPACK_IMPORTED_MODULE_10__.getI18n),
/* harmony export */   getInitialProps: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_11__.getInitialProps),
/* harmony export */   initReactI18next: () => (/* reexport safe */ _initReactI18next_js__WEBPACK_IMPORTED_MODULE_8__.initReactI18next),
/* harmony export */   number: () => (/* binding */ number),
/* harmony export */   plural: () => (/* binding */ plural),
/* harmony export */   select: () => (/* binding */ select),
/* harmony export */   selectOrdinal: () => (/* binding */ selectOrdinal),
/* harmony export */   setDefaults: () => (/* reexport safe */ _defaults_js__WEBPACK_IMPORTED_MODULE_9__.setDefaults),
/* harmony export */   setI18n: () => (/* reexport safe */ _i18nInstance_js__WEBPACK_IMPORTED_MODULE_10__.setI18n),
/* harmony export */   time: () => (/* binding */ time),
/* harmony export */   useSSR: () => (/* reexport safe */ _useSSR_js__WEBPACK_IMPORTED_MODULE_7__.useSSR),
/* harmony export */   useTranslation: () => (/* reexport safe */ _useTranslation_js__WEBPACK_IMPORTED_MODULE_2__.useTranslation),
/* harmony export */   withSSR: () => (/* reexport safe */ _withSSR_js__WEBPACK_IMPORTED_MODULE_6__.withSSR),
/* harmony export */   withTranslation: () => (/* reexport safe */ _withTranslation_js__WEBPACK_IMPORTED_MODULE_3__.withTranslation)
/* harmony export */ });
/* harmony import */ var _Trans_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Trans.js */ "../../node_modules/react-i18next/dist/es/Trans.js");
/* harmony import */ var _TransWithoutContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TransWithoutContext.js */ "../../node_modules/react-i18next/dist/es/TransWithoutContext.js");
/* harmony import */ var _useTranslation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useTranslation.js */ "../../node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _withTranslation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./withTranslation.js */ "../../node_modules/react-i18next/dist/es/withTranslation.js");
/* harmony import */ var _Translation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Translation.js */ "../../node_modules/react-i18next/dist/es/Translation.js");
/* harmony import */ var _I18nextProvider_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./I18nextProvider.js */ "../../node_modules/react-i18next/dist/es/I18nextProvider.js");
/* harmony import */ var _withSSR_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./withSSR.js */ "../../node_modules/react-i18next/dist/es/withSSR.js");
/* harmony import */ var _useSSR_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./useSSR.js */ "../../node_modules/react-i18next/dist/es/useSSR.js");
/* harmony import */ var _initReactI18next_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./initReactI18next.js */ "../../node_modules/react-i18next/dist/es/initReactI18next.js");
/* harmony import */ var _defaults_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./defaults.js */ "../../node_modules/react-i18next/dist/es/defaults.js");
/* harmony import */ var _i18nInstance_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./i18nInstance.js */ "../../node_modules/react-i18next/dist/es/i18nInstance.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./context.js */ "../../node_modules/react-i18next/dist/es/context.js");












const date = () => '';
const time = () => '';
const number = () => '';
const select = () => '';
const plural = () => '';
const selectOrdinal = () => '';

/***/ }),

/***/ "../../node_modules/react-i18next/dist/es/initReactI18next.js":
/*!********************************************************************!*\
  !*** ../../node_modules/react-i18next/dist/es/initReactI18next.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initReactI18next: () => (/* binding */ initReactI18next)
/* harmony export */ });
/* harmony import */ var _defaults_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defaults.js */ "../../node_modules/react-i18next/dist/es/defaults.js");
/* harmony import */ var _i18nInstance_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./i18nInstance.js */ "../../node_modules/react-i18next/dist/es/i18nInstance.js");


const initReactI18next = {
  type: '3rdParty',
  init(instance) {
    (0,_defaults_js__WEBPACK_IMPORTED_MODULE_0__.setDefaults)(instance.options.react);
    (0,_i18nInstance_js__WEBPACK_IMPORTED_MODULE_1__.setI18n)(instance);
  }
};

/***/ }),

/***/ "../../node_modules/react-i18next/dist/es/unescape.js":
/*!************************************************************!*\
  !*** ../../node_modules/react-i18next/dist/es/unescape.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   unescape: () => (/* binding */ unescape)
/* harmony export */ });
const matchHtmlEntity = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230|#x2F|#47);/g;
const htmlEntities = {
  '&amp;': '&',
  '&#38;': '&',
  '&lt;': '<',
  '&#60;': '<',
  '&gt;': '>',
  '&#62;': '>',
  '&apos;': "'",
  '&#39;': "'",
  '&quot;': '"',
  '&#34;': '"',
  '&nbsp;': ' ',
  '&#160;': ' ',
  '&copy;': '©',
  '&#169;': '©',
  '&reg;': '®',
  '&#174;': '®',
  '&hellip;': '…',
  '&#8230;': '…',
  '&#x2F;': '/',
  '&#47;': '/'
};
const unescapeHtmlEntity = m => htmlEntities[m];
const unescape = text => text.replace(matchHtmlEntity, unescapeHtmlEntity);

/***/ }),

/***/ "../../node_modules/react-i18next/dist/es/useSSR.js":
/*!**********************************************************!*\
  !*** ../../node_modules/react-i18next/dist/es/useSSR.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useSSR: () => (/* binding */ useSSR)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./context.js */ "../../node_modules/react-i18next/dist/es/context.js");


const useSSR = function (initialI18nStore, initialLanguage) {
  let props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const {
    i18n: i18nFromProps
  } = props;
  const {
    i18n: i18nFromContext
  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_js__WEBPACK_IMPORTED_MODULE_1__.I18nContext) || {};
  const i18n = i18nFromProps || i18nFromContext || (0,_context_js__WEBPACK_IMPORTED_MODULE_1__.getI18n)();
  if (i18n.options && i18n.options.isClone) return;
  if (initialI18nStore && !i18n.initializedStoreOnce) {
    i18n.services.resourceStore.data = initialI18nStore;
    i18n.options.ns = Object.values(initialI18nStore).reduce((mem, lngResources) => {
      Object.keys(lngResources).forEach(ns => {
        if (mem.indexOf(ns) < 0) mem.push(ns);
      });
      return mem;
    }, i18n.options.ns);
    i18n.initializedStoreOnce = true;
    i18n.isInitialized = true;
  }
  if (initialLanguage && !i18n.initializedLanguageOnce) {
    i18n.changeLanguage(initialLanguage);
    i18n.initializedLanguageOnce = true;
  }
};

/***/ }),

/***/ "../../node_modules/react-i18next/dist/es/useTranslation.js":
/*!******************************************************************!*\
  !*** ../../node_modules/react-i18next/dist/es/useTranslation.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useTranslation: () => (/* binding */ useTranslation)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./context.js */ "../../node_modules/react-i18next/dist/es/context.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "../../node_modules/react-i18next/dist/es/utils.js");



const usePrevious = (value, ignore) => {
  const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    ref.current = ignore ? ref.current : value;
  }, [value, ignore]);
  return ref.current;
};
const alwaysNewT = (i18n, language, namespace, keyPrefix) => i18n.getFixedT(language, namespace, keyPrefix);
const useMemoizedT = (i18n, language, namespace, keyPrefix) => (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(alwaysNewT(i18n, language, namespace, keyPrefix), [i18n, language, namespace, keyPrefix]);
const useTranslation = function (ns) {
  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const {
    i18n: i18nFromProps
  } = props;
  const {
    i18n: i18nFromContext,
    defaultNS: defaultNSFromContext
  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_js__WEBPACK_IMPORTED_MODULE_1__.I18nContext) || {};
  const i18n = i18nFromProps || i18nFromContext || (0,_context_js__WEBPACK_IMPORTED_MODULE_1__.getI18n)();
  if (i18n && !i18n.reportNamespaces) i18n.reportNamespaces = new _context_js__WEBPACK_IMPORTED_MODULE_1__.ReportNamespaces();
  if (!i18n) {
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.warnOnce)('You will need to pass in an i18next instance by using initReactI18next');
    const notReadyT = (k, optsOrDefaultValue) => {
      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isString)(optsOrDefaultValue)) return optsOrDefaultValue;
      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(optsOrDefaultValue) && (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isString)(optsOrDefaultValue.defaultValue)) return optsOrDefaultValue.defaultValue;
      return Array.isArray(k) ? k[k.length - 1] : k;
    };
    const retNotReady = [notReadyT, {}, false];
    retNotReady.t = notReadyT;
    retNotReady.i18n = {};
    retNotReady.ready = false;
    return retNotReady;
  }
  if (i18n.options.react && i18n.options.react.wait !== undefined) (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.warnOnce)('It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.');
  const i18nOptions = {
    ...(0,_context_js__WEBPACK_IMPORTED_MODULE_1__.getDefaults)(),
    ...i18n.options.react,
    ...props
  };
  const {
    useSuspense,
    keyPrefix
  } = i18nOptions;
  let namespaces = ns || defaultNSFromContext || i18n.options && i18n.options.defaultNS;
  namespaces = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isString)(namespaces) ? [namespaces] : namespaces || ['translation'];
  if (i18n.reportNamespaces.addUsedNamespaces) i18n.reportNamespaces.addUsedNamespaces(namespaces);
  const ready = (i18n.isInitialized || i18n.initializedStoreOnce) && namespaces.every(n => (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.hasLoadedNamespace)(n, i18n, i18nOptions));
  const memoGetT = useMemoizedT(i18n, props.lng || null, i18nOptions.nsMode === 'fallback' ? namespaces : namespaces[0], keyPrefix);
  const getT = () => memoGetT;
  const getNewT = () => alwaysNewT(i18n, props.lng || null, i18nOptions.nsMode === 'fallback' ? namespaces : namespaces[0], keyPrefix);
  const [t, setT] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(getT);
  let joinedNS = namespaces.join();
  if (props.lng) joinedNS = `${props.lng}${joinedNS}`;
  const previousJoinedNS = usePrevious(joinedNS);
  const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const {
      bindI18n,
      bindI18nStore
    } = i18nOptions;
    isMounted.current = true;
    if (!ready && !useSuspense) {
      if (props.lng) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.loadLanguages)(i18n, props.lng, namespaces, () => {
          if (isMounted.current) setT(getNewT);
        });
      } else {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.loadNamespaces)(i18n, namespaces, () => {
          if (isMounted.current) setT(getNewT);
        });
      }
    }
    if (ready && previousJoinedNS && previousJoinedNS !== joinedNS && isMounted.current) {
      setT(getNewT);
    }
    const boundReset = () => {
      if (isMounted.current) setT(getNewT);
    };
    if (bindI18n && i18n) i18n.on(bindI18n, boundReset);
    if (bindI18nStore && i18n) i18n.store.on(bindI18nStore, boundReset);
    return () => {
      isMounted.current = false;
      if (bindI18n && i18n) bindI18n.split(' ').forEach(e => i18n.off(e, boundReset));
      if (bindI18nStore && i18n) bindI18nStore.split(' ').forEach(e => i18n.store.off(e, boundReset));
    };
  }, [i18n, joinedNS]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isMounted.current && ready) {
      setT(getT);
    }
  }, [i18n, keyPrefix, ready]);
  const ret = [t, i18n, ready];
  ret.t = t;
  ret.i18n = i18n;
  ret.ready = ready;
  if (ready) return ret;
  if (!ready && !useSuspense) return ret;
  throw new Promise(resolve => {
    if (props.lng) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.loadLanguages)(i18n, props.lng, namespaces, () => resolve());
    } else {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.loadNamespaces)(i18n, namespaces, () => resolve());
    }
  });
};

/***/ }),

/***/ "../../node_modules/react-i18next/dist/es/utils.js":
/*!*********************************************************!*\
  !*** ../../node_modules/react-i18next/dist/es/utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDisplayName: () => (/* binding */ getDisplayName),
/* harmony export */   hasLoadedNamespace: () => (/* binding */ hasLoadedNamespace),
/* harmony export */   isObject: () => (/* binding */ isObject),
/* harmony export */   isString: () => (/* binding */ isString),
/* harmony export */   loadLanguages: () => (/* binding */ loadLanguages),
/* harmony export */   loadNamespaces: () => (/* binding */ loadNamespaces),
/* harmony export */   warn: () => (/* binding */ warn),
/* harmony export */   warnOnce: () => (/* binding */ warnOnce)
/* harmony export */ });
function warn() {
  if (console && console.warn) {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (isString(args[0])) args[0] = `react-i18next:: ${args[0]}`;
    console.warn(...args);
  }
}
const alreadyWarned = {};
function warnOnce() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  if (isString(args[0]) && alreadyWarned[args[0]]) return;
  if (isString(args[0])) alreadyWarned[args[0]] = new Date();
  warn(...args);
}
const loadedClb = (i18n, cb) => () => {
  if (i18n.isInitialized) {
    cb();
  } else {
    const initialized = () => {
      setTimeout(() => {
        i18n.off('initialized', initialized);
      }, 0);
      cb();
    };
    i18n.on('initialized', initialized);
  }
};
const loadNamespaces = (i18n, ns, cb) => {
  i18n.loadNamespaces(ns, loadedClb(i18n, cb));
};
const loadLanguages = (i18n, lng, ns, cb) => {
  if (isString(ns)) ns = [ns];
  ns.forEach(n => {
    if (i18n.options.ns.indexOf(n) < 0) i18n.options.ns.push(n);
  });
  i18n.loadLanguages(lng, loadedClb(i18n, cb));
};
const oldI18nextHasLoadedNamespace = function (ns, i18n) {
  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const lng = i18n.languages[0];
  const fallbackLng = i18n.options ? i18n.options.fallbackLng : false;
  const lastLng = i18n.languages[i18n.languages.length - 1];
  if (lng.toLowerCase() === 'cimode') return true;
  const loadNotPending = (l, n) => {
    const loadState = i18n.services.backendConnector.state[`${l}|${n}`];
    return loadState === -1 || loadState === 2;
  };
  if (options.bindI18n && options.bindI18n.indexOf('languageChanging') > -1 && i18n.services.backendConnector.backend && i18n.isLanguageChangingTo && !loadNotPending(i18n.isLanguageChangingTo, ns)) return false;
  if (i18n.hasResourceBundle(lng, ns)) return true;
  if (!i18n.services.backendConnector.backend || i18n.options.resources && !i18n.options.partialBundledLanguages) return true;
  if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
  return false;
};
const hasLoadedNamespace = function (ns, i18n) {
  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (!i18n.languages || !i18n.languages.length) {
    warnOnce('i18n.languages were undefined or empty', i18n.languages);
    return true;
  }
  const isNewerI18next = i18n.options.ignoreJSONStructure !== undefined;
  if (!isNewerI18next) {
    return oldI18nextHasLoadedNamespace(ns, i18n, options);
  }
  return i18n.hasLoadedNamespace(ns, {
    lng: options.lng,
    precheck: (i18nInstance, loadNotPending) => {
      if (options.bindI18n && options.bindI18n.indexOf('languageChanging') > -1 && i18nInstance.services.backendConnector.backend && i18nInstance.isLanguageChangingTo && !loadNotPending(i18nInstance.isLanguageChangingTo, ns)) return false;
    }
  });
};
const getDisplayName = Component => Component.displayName || Component.name || (isString(Component) && Component.length > 0 ? Component : 'Unknown');
const isString = obj => typeof obj === 'string';
const isObject = obj => typeof obj === 'object' && obj !== null;

/***/ }),

/***/ "../../node_modules/react-i18next/dist/es/withSSR.js":
/*!***********************************************************!*\
  !*** ../../node_modules/react-i18next/dist/es/withSSR.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   withSSR: () => (/* binding */ withSSR)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var _useSSR_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useSSR.js */ "../../node_modules/react-i18next/dist/es/useSSR.js");
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./context.js */ "../../node_modules/react-i18next/dist/es/context.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "../../node_modules/react-i18next/dist/es/utils.js");




const withSSR = () => function Extend(WrappedComponent) {
  function I18nextWithSSR(_ref) {
    let {
      initialI18nStore,
      initialLanguage,
      ...rest
    } = _ref;
    (0,_useSSR_js__WEBPACK_IMPORTED_MODULE_1__.useSSR)(initialI18nStore, initialLanguage);
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(WrappedComponent, {
      ...rest
    });
  }
  I18nextWithSSR.getInitialProps = (0,_context_js__WEBPACK_IMPORTED_MODULE_2__.composeInitialProps)(WrappedComponent);
  I18nextWithSSR.displayName = `withI18nextSSR(${(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.getDisplayName)(WrappedComponent)})`;
  I18nextWithSSR.WrappedComponent = WrappedComponent;
  return I18nextWithSSR;
};

/***/ }),

/***/ "../../node_modules/react-i18next/dist/es/withTranslation.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/react-i18next/dist/es/withTranslation.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   withTranslation: () => (/* binding */ withTranslation)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/react/index.js");
/* harmony import */ var _useTranslation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useTranslation.js */ "../../node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "../../node_modules/react-i18next/dist/es/utils.js");



const withTranslation = function (ns) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return function Extend(WrappedComponent) {
    function I18nextWithTranslation(_ref) {
      let {
        forwardedRef,
        ...rest
      } = _ref;
      const [t, i18n, ready] = (0,_useTranslation_js__WEBPACK_IMPORTED_MODULE_1__.useTranslation)(ns, {
        ...rest,
        keyPrefix: options.keyPrefix
      });
      const passDownProps = {
        ...rest,
        t,
        i18n,
        tReady: ready
      };
      if (options.withRef && forwardedRef) {
        passDownProps.ref = forwardedRef;
      } else if (!options.withRef && forwardedRef) {
        passDownProps.forwardedRef = forwardedRef;
      }
      return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(WrappedComponent, passDownProps);
    }
    I18nextWithTranslation.displayName = `withI18nextTranslation(${(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getDisplayName)(WrappedComponent)})`;
    I18nextWithTranslation.WrappedComponent = WrappedComponent;
    const forwardRef = (props, ref) => (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(I18nextWithTranslation, Object.assign({}, props, {
      forwardedRef: ref
    }));
    return options.withRef ? (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(forwardRef) : I18nextWithTranslation;
  };
};

/***/ }),

/***/ "../../node_modules/react/cjs/react.development.js":
/*!*********************************************************!*\
  !*** ../../node_modules/react/cjs/react.development.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


 true &&
  (function () {
    function defineDeprecationWarning(methodName, info) {
      Object.defineProperty(Component.prototype, methodName, {
        get: function () {
          console.warn(
            "%s(...) is deprecated in plain JavaScript React classes. %s",
            info[0],
            info[1]
          );
        }
      });
    }
    function getIteratorFn(maybeIterable) {
      if (null === maybeIterable || "object" !== typeof maybeIterable)
        return null;
      maybeIterable =
        (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
        maybeIterable["@@iterator"];
      return "function" === typeof maybeIterable ? maybeIterable : null;
    }
    function warnNoop(publicInstance, callerName) {
      publicInstance =
        ((publicInstance = publicInstance.constructor) &&
          (publicInstance.displayName || publicInstance.name)) ||
        "ReactClass";
      var warningKey = publicInstance + "." + callerName;
      didWarnStateUpdateForUnmountedComponent[warningKey] ||
        (console.error(
          "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
          callerName,
          publicInstance
        ),
        (didWarnStateUpdateForUnmountedComponent[warningKey] = !0));
    }
    function Component(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    function ComponentDummy() {}
    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkKeyStringCoercion(value) {
      try {
        testStringCoercion(value);
        var JSCompiler_inline_result = !1;
      } catch (e) {
        JSCompiler_inline_result = !0;
      }
      if (JSCompiler_inline_result) {
        JSCompiler_inline_result = console;
        var JSCompiler_temp_const = JSCompiler_inline_result.error;
        var JSCompiler_inline_result$jscomp$0 =
          ("function" === typeof Symbol &&
            Symbol.toStringTag &&
            value[Symbol.toStringTag]) ||
          value.constructor.name ||
          "Object";
        JSCompiler_temp_const.call(
          JSCompiler_inline_result,
          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
          JSCompiler_inline_result$jscomp$0
        );
        return testStringCoercion(value);
      }
    }
    function getComponentNameFromType(type) {
      if (null == type) return null;
      if ("function" === typeof type)
        return type.$$typeof === REACT_CLIENT_REFERENCE
          ? null
          : type.displayName || type.name || null;
      if ("string" === typeof type) return type;
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
        case REACT_ACTIVITY_TYPE:
          return "Activity";
      }
      if ("object" === typeof type)
        switch (
          ("number" === typeof type.tag &&
            console.error(
              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
            ),
          type.$$typeof)
        ) {
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Provider";
          case REACT_CONSUMER_TYPE:
            return (type._context.displayName || "Context") + ".Consumer";
          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type ||
              ((type = innerType.displayName || innerType.name || ""),
              (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
            return type;
          case REACT_MEMO_TYPE:
            return (
              (innerType = type.displayName || null),
              null !== innerType
                ? innerType
                : getComponentNameFromType(type.type) || "Memo"
            );
          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {}
        }
      return null;
    }
    function getTaskName(type) {
      if (type === REACT_FRAGMENT_TYPE) return "<>";
      if (
        "object" === typeof type &&
        null !== type &&
        type.$$typeof === REACT_LAZY_TYPE
      )
        return "<...>";
      try {
        var name = getComponentNameFromType(type);
        return name ? "<" + name + ">" : "<...>";
      } catch (x) {
        return "<...>";
      }
    }
    function getOwner() {
      var dispatcher = ReactSharedInternals.A;
      return null === dispatcher ? null : dispatcher.getOwner();
    }
    function UnknownOwner() {
      return Error("react-stack-top-frame");
    }
    function hasValidKey(config) {
      if (hasOwnProperty.call(config, "key")) {
        var getter = Object.getOwnPropertyDescriptor(config, "key").get;
        if (getter && getter.isReactWarning) return !1;
      }
      return void 0 !== config.key;
    }
    function defineKeyPropWarningGetter(props, displayName) {
      function warnAboutAccessingKey() {
        specialPropKeyWarningShown ||
          ((specialPropKeyWarningShown = !0),
          console.error(
            "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
            displayName
          ));
      }
      warnAboutAccessingKey.isReactWarning = !0;
      Object.defineProperty(props, "key", {
        get: warnAboutAccessingKey,
        configurable: !0
      });
    }
    function elementRefGetterWithDeprecationWarning() {
      var componentName = getComponentNameFromType(this.type);
      didWarnAboutElementRef[componentName] ||
        ((didWarnAboutElementRef[componentName] = !0),
        console.error(
          "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
        ));
      componentName = this.props.ref;
      return void 0 !== componentName ? componentName : null;
    }
    function ReactElement(
      type,
      key,
      self,
      source,
      owner,
      props,
      debugStack,
      debugTask
    ) {
      self = props.ref;
      type = {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key,
        props: props,
        _owner: owner
      };
      null !== (void 0 !== self ? self : null)
        ? Object.defineProperty(type, "ref", {
            enumerable: !1,
            get: elementRefGetterWithDeprecationWarning
          })
        : Object.defineProperty(type, "ref", { enumerable: !1, value: null });
      type._store = {};
      Object.defineProperty(type._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: 0
      });
      Object.defineProperty(type, "_debugInfo", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: null
      });
      Object.defineProperty(type, "_debugStack", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: debugStack
      });
      Object.defineProperty(type, "_debugTask", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: debugTask
      });
      Object.freeze && (Object.freeze(type.props), Object.freeze(type));
      return type;
    }
    function cloneAndReplaceKey(oldElement, newKey) {
      newKey = ReactElement(
        oldElement.type,
        newKey,
        void 0,
        void 0,
        oldElement._owner,
        oldElement.props,
        oldElement._debugStack,
        oldElement._debugTask
      );
      oldElement._store &&
        (newKey._store.validated = oldElement._store.validated);
      return newKey;
    }
    function isValidElement(object) {
      return (
        "object" === typeof object &&
        null !== object &&
        object.$$typeof === REACT_ELEMENT_TYPE
      );
    }
    function escape(key) {
      var escaperLookup = { "=": "=0", ":": "=2" };
      return (
        "$" +
        key.replace(/[=:]/g, function (match) {
          return escaperLookup[match];
        })
      );
    }
    function getElementKey(element, index) {
      return "object" === typeof element &&
        null !== element &&
        null != element.key
        ? (checkKeyStringCoercion(element.key), escape("" + element.key))
        : index.toString(36);
    }
    function noop$1() {}
    function resolveThenable(thenable) {
      switch (thenable.status) {
        case "fulfilled":
          return thenable.value;
        case "rejected":
          throw thenable.reason;
        default:
          switch (
            ("string" === typeof thenable.status
              ? thenable.then(noop$1, noop$1)
              : ((thenable.status = "pending"),
                thenable.then(
                  function (fulfilledValue) {
                    "pending" === thenable.status &&
                      ((thenable.status = "fulfilled"),
                      (thenable.value = fulfilledValue));
                  },
                  function (error) {
                    "pending" === thenable.status &&
                      ((thenable.status = "rejected"),
                      (thenable.reason = error));
                  }
                )),
            thenable.status)
          ) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw thenable.reason;
          }
      }
      throw thenable;
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
      var type = typeof children;
      if ("undefined" === type || "boolean" === type) children = null;
      var invokeCallback = !1;
      if (null === children) invokeCallback = !0;
      else
        switch (type) {
          case "bigint":
          case "string":
          case "number":
            invokeCallback = !0;
            break;
          case "object":
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = !0;
                break;
              case REACT_LAZY_TYPE:
                return (
                  (invokeCallback = children._init),
                  mapIntoArray(
                    invokeCallback(children._payload),
                    array,
                    escapedPrefix,
                    nameSoFar,
                    callback
                  )
                );
            }
        }
      if (invokeCallback) {
        invokeCallback = children;
        callback = callback(invokeCallback);
        var childKey =
          "" === nameSoFar ? "." + getElementKey(invokeCallback, 0) : nameSoFar;
        isArrayImpl(callback)
          ? ((escapedPrefix = ""),
            null != childKey &&
              (escapedPrefix =
                childKey.replace(userProvidedKeyEscapeRegex, "$&/") + "/"),
            mapIntoArray(callback, array, escapedPrefix, "", function (c) {
              return c;
            }))
          : null != callback &&
            (isValidElement(callback) &&
              (null != callback.key &&
                ((invokeCallback && invokeCallback.key === callback.key) ||
                  checkKeyStringCoercion(callback.key)),
              (escapedPrefix = cloneAndReplaceKey(
                callback,
                escapedPrefix +
                  (null == callback.key ||
                  (invokeCallback && invokeCallback.key === callback.key)
                    ? ""
                    : ("" + callback.key).replace(
                        userProvidedKeyEscapeRegex,
                        "$&/"
                      ) + "/") +
                  childKey
              )),
              "" !== nameSoFar &&
                null != invokeCallback &&
                isValidElement(invokeCallback) &&
                null == invokeCallback.key &&
                invokeCallback._store &&
                !invokeCallback._store.validated &&
                (escapedPrefix._store.validated = 2),
              (callback = escapedPrefix)),
            array.push(callback));
        return 1;
      }
      invokeCallback = 0;
      childKey = "" === nameSoFar ? "." : nameSoFar + ":";
      if (isArrayImpl(children))
        for (var i = 0; i < children.length; i++)
          (nameSoFar = children[i]),
            (type = childKey + getElementKey(nameSoFar, i)),
            (invokeCallback += mapIntoArray(
              nameSoFar,
              array,
              escapedPrefix,
              type,
              callback
            ));
      else if (((i = getIteratorFn(children)), "function" === typeof i))
        for (
          i === children.entries &&
            (didWarnAboutMaps ||
              console.warn(
                "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
              ),
            (didWarnAboutMaps = !0)),
            children = i.call(children),
            i = 0;
          !(nameSoFar = children.next()).done;

        )
          (nameSoFar = nameSoFar.value),
            (type = childKey + getElementKey(nameSoFar, i++)),
            (invokeCallback += mapIntoArray(
              nameSoFar,
              array,
              escapedPrefix,
              type,
              callback
            ));
      else if ("object" === type) {
        if ("function" === typeof children.then)
          return mapIntoArray(
            resolveThenable(children),
            array,
            escapedPrefix,
            nameSoFar,
            callback
          );
        array = String(children);
        throw Error(
          "Objects are not valid as a React child (found: " +
            ("[object Object]" === array
              ? "object with keys {" + Object.keys(children).join(", ") + "}"
              : array) +
            "). If you meant to render a collection of children, use an array instead."
        );
      }
      return invokeCallback;
    }
    function mapChildren(children, func, context) {
      if (null == children) return children;
      var result = [],
        count = 0;
      mapIntoArray(children, result, "", "", function (child) {
        return func.call(context, child, count++);
      });
      return result;
    }
    function lazyInitializer(payload) {
      if (-1 === payload._status) {
        var ctor = payload._result;
        ctor = ctor();
        ctor.then(
          function (moduleObject) {
            if (0 === payload._status || -1 === payload._status)
              (payload._status = 1), (payload._result = moduleObject);
          },
          function (error) {
            if (0 === payload._status || -1 === payload._status)
              (payload._status = 2), (payload._result = error);
          }
        );
        -1 === payload._status &&
          ((payload._status = 0), (payload._result = ctor));
      }
      if (1 === payload._status)
        return (
          (ctor = payload._result),
          void 0 === ctor &&
            console.error(
              "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",
              ctor
            ),
          "default" in ctor ||
            console.error(
              "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
              ctor
            ),
          ctor.default
        );
      throw payload._result;
    }
    function resolveDispatcher() {
      var dispatcher = ReactSharedInternals.H;
      null === dispatcher &&
        console.error(
          "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
        );
      return dispatcher;
    }
    function noop() {}
    function enqueueTask(task) {
      if (null === enqueueTaskImpl)
        try {
          var requireString = ("require" + Math.random()).slice(0, 7);
          enqueueTaskImpl = (module && module[requireString]).call(
            module,
            "timers"
          ).setImmediate;
        } catch (_err) {
          enqueueTaskImpl = function (callback) {
            !1 === didWarnAboutMessageChannel &&
              ((didWarnAboutMessageChannel = !0),
              "undefined" === typeof MessageChannel &&
                console.error(
                  "This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."
                ));
            var channel = new MessageChannel();
            channel.port1.onmessage = callback;
            channel.port2.postMessage(void 0);
          };
        }
      return enqueueTaskImpl(task);
    }
    function aggregateErrors(errors) {
      return 1 < errors.length && "function" === typeof AggregateError
        ? new AggregateError(errors)
        : errors[0];
    }
    function popActScope(prevActQueue, prevActScopeDepth) {
      prevActScopeDepth !== actScopeDepth - 1 &&
        console.error(
          "You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "
        );
      actScopeDepth = prevActScopeDepth;
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
      var queue = ReactSharedInternals.actQueue;
      if (null !== queue)
        if (0 !== queue.length)
          try {
            flushActQueue(queue);
            enqueueTask(function () {
              return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            });
            return;
          } catch (error) {
            ReactSharedInternals.thrownErrors.push(error);
          }
        else ReactSharedInternals.actQueue = null;
      0 < ReactSharedInternals.thrownErrors.length
        ? ((queue = aggregateErrors(ReactSharedInternals.thrownErrors)),
          (ReactSharedInternals.thrownErrors.length = 0),
          reject(queue))
        : resolve(returnValue);
    }
    function flushActQueue(queue) {
      if (!isFlushing) {
        isFlushing = !0;
        var i = 0;
        try {
          for (; i < queue.length; i++) {
            var callback = queue[i];
            do {
              ReactSharedInternals.didUsePromise = !1;
              var continuation = callback(!1);
              if (null !== continuation) {
                if (ReactSharedInternals.didUsePromise) {
                  queue[i] = callback;
                  queue.splice(0, i);
                  return;
                }
                callback = continuation;
              } else break;
            } while (1);
          }
          queue.length = 0;
        } catch (error) {
          queue.splice(0, i + 1), ReactSharedInternals.thrownErrors.push(error);
        } finally {
          isFlushing = !1;
        }
      }
    }
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
      "function" ===
        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
      REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
      REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
      REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
      REACT_CONTEXT_TYPE = Symbol.for("react.context"),
      REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
      REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
      REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
      REACT_MEMO_TYPE = Symbol.for("react.memo"),
      REACT_LAZY_TYPE = Symbol.for("react.lazy"),
      REACT_ACTIVITY_TYPE = Symbol.for("react.activity"),
      MAYBE_ITERATOR_SYMBOL = Symbol.iterator,
      didWarnStateUpdateForUnmountedComponent = {},
      ReactNoopUpdateQueue = {
        isMounted: function () {
          return !1;
        },
        enqueueForceUpdate: function (publicInstance) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function (publicInstance) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function (publicInstance) {
          warnNoop(publicInstance, "setState");
        }
      },
      assign = Object.assign,
      emptyObject = {};
    Object.freeze(emptyObject);
    Component.prototype.isReactComponent = {};
    Component.prototype.setState = function (partialState, callback) {
      if (
        "object" !== typeof partialState &&
        "function" !== typeof partialState &&
        null != partialState
      )
        throw Error(
          "takes an object of state variables to update or a function which returns an object of state variables."
        );
      this.updater.enqueueSetState(this, partialState, callback, "setState");
    };
    Component.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
    };
    var deprecatedAPIs = {
        isMounted: [
          "isMounted",
          "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
          "replaceState",
          "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
      },
      fnName;
    for (fnName in deprecatedAPIs)
      deprecatedAPIs.hasOwnProperty(fnName) &&
        defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    ComponentDummy.prototype = Component.prototype;
    deprecatedAPIs = PureComponent.prototype = new ComponentDummy();
    deprecatedAPIs.constructor = PureComponent;
    assign(deprecatedAPIs, Component.prototype);
    deprecatedAPIs.isPureReactComponent = !0;
    var isArrayImpl = Array.isArray,
      REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
      ReactSharedInternals = {
        H: null,
        A: null,
        T: null,
        S: null,
        V: null,
        actQueue: null,
        isBatchingLegacy: !1,
        didScheduleLegacyUpdate: !1,
        didUsePromise: !1,
        thrownErrors: [],
        getCurrentStack: null,
        recentlyCreatedOwnerStacks: 0
      },
      hasOwnProperty = Object.prototype.hasOwnProperty,
      createTask = console.createTask
        ? console.createTask
        : function () {
            return null;
          };
    deprecatedAPIs = {
      react_stack_bottom_frame: function (callStackForError) {
        return callStackForError();
      }
    };
    var specialPropKeyWarningShown, didWarnAboutOldJSXRuntime;
    var didWarnAboutElementRef = {};
    var unknownOwnerDebugStack = deprecatedAPIs.react_stack_bottom_frame.bind(
      deprecatedAPIs,
      UnknownOwner
    )();
    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
    var didWarnAboutMaps = !1,
      userProvidedKeyEscapeRegex = /\/+/g,
      reportGlobalError =
        "function" === typeof reportError
          ? reportError
          : function (error) {
              if (
                "object" === typeof window &&
                "function" === typeof window.ErrorEvent
              ) {
                var event = new window.ErrorEvent("error", {
                  bubbles: !0,
                  cancelable: !0,
                  message:
                    "object" === typeof error &&
                    null !== error &&
                    "string" === typeof error.message
                      ? String(error.message)
                      : String(error),
                  error: error
                });
                if (!window.dispatchEvent(event)) return;
              } else if (
                "object" === typeof process &&
                "function" === typeof process.emit
              ) {
                process.emit("uncaughtException", error);
                return;
              }
              console.error(error);
            },
      didWarnAboutMessageChannel = !1,
      enqueueTaskImpl = null,
      actScopeDepth = 0,
      didWarnNoAwaitAct = !1,
      isFlushing = !1,
      queueSeveralMicrotasks =
        "function" === typeof queueMicrotask
          ? function (callback) {
              queueMicrotask(function () {
                return queueMicrotask(callback);
              });
            }
          : enqueueTask;
    deprecatedAPIs = Object.freeze({
      __proto__: null,
      c: function (size) {
        return resolveDispatcher().useMemoCache(size);
      }
    });
    exports.Children = {
      map: mapChildren,
      forEach: function (children, forEachFunc, forEachContext) {
        mapChildren(
          children,
          function () {
            forEachFunc.apply(this, arguments);
          },
          forEachContext
        );
      },
      count: function (children) {
        var n = 0;
        mapChildren(children, function () {
          n++;
        });
        return n;
      },
      toArray: function (children) {
        return (
          mapChildren(children, function (child) {
            return child;
          }) || []
        );
      },
      only: function (children) {
        if (!isValidElement(children))
          throw Error(
            "React.Children.only expected to receive a single React element child."
          );
        return children;
      }
    };
    exports.Component = Component;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
      ReactSharedInternals;
    exports.__COMPILER_RUNTIME = deprecatedAPIs;
    exports.act = function (callback) {
      var prevActQueue = ReactSharedInternals.actQueue,
        prevActScopeDepth = actScopeDepth;
      actScopeDepth++;
      var queue = (ReactSharedInternals.actQueue =
          null !== prevActQueue ? prevActQueue : []),
        didAwaitActCall = !1;
      try {
        var result = callback();
      } catch (error) {
        ReactSharedInternals.thrownErrors.push(error);
      }
      if (0 < ReactSharedInternals.thrownErrors.length)
        throw (
          (popActScope(prevActQueue, prevActScopeDepth),
          (callback = aggregateErrors(ReactSharedInternals.thrownErrors)),
          (ReactSharedInternals.thrownErrors.length = 0),
          callback)
        );
      if (
        null !== result &&
        "object" === typeof result &&
        "function" === typeof result.then
      ) {
        var thenable = result;
        queueSeveralMicrotasks(function () {
          didAwaitActCall ||
            didWarnNoAwaitAct ||
            ((didWarnNoAwaitAct = !0),
            console.error(
              "You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"
            ));
        });
        return {
          then: function (resolve, reject) {
            didAwaitActCall = !0;
            thenable.then(
              function (returnValue) {
                popActScope(prevActQueue, prevActScopeDepth);
                if (0 === prevActScopeDepth) {
                  try {
                    flushActQueue(queue),
                      enqueueTask(function () {
                        return recursivelyFlushAsyncActWork(
                          returnValue,
                          resolve,
                          reject
                        );
                      });
                  } catch (error$0) {
                    ReactSharedInternals.thrownErrors.push(error$0);
                  }
                  if (0 < ReactSharedInternals.thrownErrors.length) {
                    var _thrownError = aggregateErrors(
                      ReactSharedInternals.thrownErrors
                    );
                    ReactSharedInternals.thrownErrors.length = 0;
                    reject(_thrownError);
                  }
                } else resolve(returnValue);
              },
              function (error) {
                popActScope(prevActQueue, prevActScopeDepth);
                0 < ReactSharedInternals.thrownErrors.length
                  ? ((error = aggregateErrors(
                      ReactSharedInternals.thrownErrors
                    )),
                    (ReactSharedInternals.thrownErrors.length = 0),
                    reject(error))
                  : reject(error);
              }
            );
          }
        };
      }
      var returnValue$jscomp$0 = result;
      popActScope(prevActQueue, prevActScopeDepth);
      0 === prevActScopeDepth &&
        (flushActQueue(queue),
        0 !== queue.length &&
          queueSeveralMicrotasks(function () {
            didAwaitActCall ||
              didWarnNoAwaitAct ||
              ((didWarnNoAwaitAct = !0),
              console.error(
                "A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"
              ));
          }),
        (ReactSharedInternals.actQueue = null));
      if (0 < ReactSharedInternals.thrownErrors.length)
        throw (
          ((callback = aggregateErrors(ReactSharedInternals.thrownErrors)),
          (ReactSharedInternals.thrownErrors.length = 0),
          callback)
        );
      return {
        then: function (resolve, reject) {
          didAwaitActCall = !0;
          0 === prevActScopeDepth
            ? ((ReactSharedInternals.actQueue = queue),
              enqueueTask(function () {
                return recursivelyFlushAsyncActWork(
                  returnValue$jscomp$0,
                  resolve,
                  reject
                );
              }))
            : resolve(returnValue$jscomp$0);
        }
      };
    };
    exports.cache = function (fn) {
      return function () {
        return fn.apply(null, arguments);
      };
    };
    exports.captureOwnerStack = function () {
      var getCurrentStack = ReactSharedInternals.getCurrentStack;
      return null === getCurrentStack ? null : getCurrentStack();
    };
    exports.cloneElement = function (element, config, children) {
      if (null === element || void 0 === element)
        throw Error(
          "The argument must be a React element, but you passed " +
            element +
            "."
        );
      var props = assign({}, element.props),
        key = element.key,
        owner = element._owner;
      if (null != config) {
        var JSCompiler_inline_result;
        a: {
          if (
            hasOwnProperty.call(config, "ref") &&
            (JSCompiler_inline_result = Object.getOwnPropertyDescriptor(
              config,
              "ref"
            ).get) &&
            JSCompiler_inline_result.isReactWarning
          ) {
            JSCompiler_inline_result = !1;
            break a;
          }
          JSCompiler_inline_result = void 0 !== config.ref;
        }
        JSCompiler_inline_result && (owner = getOwner());
        hasValidKey(config) &&
          (checkKeyStringCoercion(config.key), (key = "" + config.key));
        for (propName in config)
          !hasOwnProperty.call(config, propName) ||
            "key" === propName ||
            "__self" === propName ||
            "__source" === propName ||
            ("ref" === propName && void 0 === config.ref) ||
            (props[propName] = config[propName]);
      }
      var propName = arguments.length - 2;
      if (1 === propName) props.children = children;
      else if (1 < propName) {
        JSCompiler_inline_result = Array(propName);
        for (var i = 0; i < propName; i++)
          JSCompiler_inline_result[i] = arguments[i + 2];
        props.children = JSCompiler_inline_result;
      }
      props = ReactElement(
        element.type,
        key,
        void 0,
        void 0,
        owner,
        props,
        element._debugStack,
        element._debugTask
      );
      for (key = 2; key < arguments.length; key++)
        (owner = arguments[key]),
          isValidElement(owner) && owner._store && (owner._store.validated = 1);
      return props;
    };
    exports.createContext = function (defaultValue) {
      defaultValue = {
        $$typeof: REACT_CONTEXT_TYPE,
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        _threadCount: 0,
        Provider: null,
        Consumer: null
      };
      defaultValue.Provider = defaultValue;
      defaultValue.Consumer = {
        $$typeof: REACT_CONSUMER_TYPE,
        _context: defaultValue
      };
      defaultValue._currentRenderer = null;
      defaultValue._currentRenderer2 = null;
      return defaultValue;
    };
    exports.createElement = function (type, config, children) {
      for (var i = 2; i < arguments.length; i++) {
        var node = arguments[i];
        isValidElement(node) && node._store && (node._store.validated = 1);
      }
      i = {};
      node = null;
      if (null != config)
        for (propName in (didWarnAboutOldJSXRuntime ||
          !("__self" in config) ||
          "key" in config ||
          ((didWarnAboutOldJSXRuntime = !0),
          console.warn(
            "Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform"
          )),
        hasValidKey(config) &&
          (checkKeyStringCoercion(config.key), (node = "" + config.key)),
        config))
          hasOwnProperty.call(config, propName) &&
            "key" !== propName &&
            "__self" !== propName &&
            "__source" !== propName &&
            (i[propName] = config[propName]);
      var childrenLength = arguments.length - 2;
      if (1 === childrenLength) i.children = children;
      else if (1 < childrenLength) {
        for (
          var childArray = Array(childrenLength), _i = 0;
          _i < childrenLength;
          _i++
        )
          childArray[_i] = arguments[_i + 2];
        Object.freeze && Object.freeze(childArray);
        i.children = childArray;
      }
      if (type && type.defaultProps)
        for (propName in ((childrenLength = type.defaultProps), childrenLength))
          void 0 === i[propName] && (i[propName] = childrenLength[propName]);
      node &&
        defineKeyPropWarningGetter(
          i,
          "function" === typeof type
            ? type.displayName || type.name || "Unknown"
            : type
        );
      var propName = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
      return ReactElement(
        type,
        node,
        void 0,
        void 0,
        getOwner(),
        i,
        propName ? Error("react-stack-top-frame") : unknownOwnerDebugStack,
        propName ? createTask(getTaskName(type)) : unknownOwnerDebugTask
      );
    };
    exports.createRef = function () {
      var refObject = { current: null };
      Object.seal(refObject);
      return refObject;
    };
    exports.forwardRef = function (render) {
      null != render && render.$$typeof === REACT_MEMO_TYPE
        ? console.error(
            "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."
          )
        : "function" !== typeof render
          ? console.error(
              "forwardRef requires a render function but was given %s.",
              null === render ? "null" : typeof render
            )
          : 0 !== render.length &&
            2 !== render.length &&
            console.error(
              "forwardRef render functions accept exactly two parameters: props and ref. %s",
              1 === render.length
                ? "Did you forget to use the ref parameter?"
                : "Any additional parameter will be undefined."
            );
      null != render &&
        null != render.defaultProps &&
        console.error(
          "forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?"
        );
      var elementType = { $$typeof: REACT_FORWARD_REF_TYPE, render: render },
        ownName;
      Object.defineProperty(elementType, "displayName", {
        enumerable: !1,
        configurable: !0,
        get: function () {
          return ownName;
        },
        set: function (name) {
          ownName = name;
          render.name ||
            render.displayName ||
            (Object.defineProperty(render, "name", { value: name }),
            (render.displayName = name));
        }
      });
      return elementType;
    };
    exports.isValidElement = isValidElement;
    exports.lazy = function (ctor) {
      return {
        $$typeof: REACT_LAZY_TYPE,
        _payload: { _status: -1, _result: ctor },
        _init: lazyInitializer
      };
    };
    exports.memo = function (type, compare) {
      null == type &&
        console.error(
          "memo: The first argument must be a component. Instead received: %s",
          null === type ? "null" : typeof type
        );
      compare = {
        $$typeof: REACT_MEMO_TYPE,
        type: type,
        compare: void 0 === compare ? null : compare
      };
      var ownName;
      Object.defineProperty(compare, "displayName", {
        enumerable: !1,
        configurable: !0,
        get: function () {
          return ownName;
        },
        set: function (name) {
          ownName = name;
          type.name ||
            type.displayName ||
            (Object.defineProperty(type, "name", { value: name }),
            (type.displayName = name));
        }
      });
      return compare;
    };
    exports.startTransition = function (scope) {
      var prevTransition = ReactSharedInternals.T,
        currentTransition = {};
      ReactSharedInternals.T = currentTransition;
      currentTransition._updatedFibers = new Set();
      try {
        var returnValue = scope(),
          onStartTransitionFinish = ReactSharedInternals.S;
        null !== onStartTransitionFinish &&
          onStartTransitionFinish(currentTransition, returnValue);
        "object" === typeof returnValue &&
          null !== returnValue &&
          "function" === typeof returnValue.then &&
          returnValue.then(noop, reportGlobalError);
      } catch (error) {
        reportGlobalError(error);
      } finally {
        null === prevTransition &&
          currentTransition._updatedFibers &&
          ((scope = currentTransition._updatedFibers.size),
          currentTransition._updatedFibers.clear(),
          10 < scope &&
            console.warn(
              "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
            )),
          (ReactSharedInternals.T = prevTransition);
      }
    };
    exports.unstable_useCacheRefresh = function () {
      return resolveDispatcher().useCacheRefresh();
    };
    exports.use = function (usable) {
      return resolveDispatcher().use(usable);
    };
    exports.useActionState = function (action, initialState, permalink) {
      return resolveDispatcher().useActionState(
        action,
        initialState,
        permalink
      );
    };
    exports.useCallback = function (callback, deps) {
      return resolveDispatcher().useCallback(callback, deps);
    };
    exports.useContext = function (Context) {
      var dispatcher = resolveDispatcher();
      Context.$$typeof === REACT_CONSUMER_TYPE &&
        console.error(
          "Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?"
        );
      return dispatcher.useContext(Context);
    };
    exports.useDebugValue = function (value, formatterFn) {
      return resolveDispatcher().useDebugValue(value, formatterFn);
    };
    exports.useDeferredValue = function (value, initialValue) {
      return resolveDispatcher().useDeferredValue(value, initialValue);
    };
    exports.useEffect = function (create, createDeps, update) {
      null == create &&
        console.warn(
          "React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?"
        );
      var dispatcher = resolveDispatcher();
      if ("function" === typeof update)
        throw Error(
          "useEffect CRUD overload is not enabled in this build of React."
        );
      return dispatcher.useEffect(create, createDeps);
    };
    exports.useId = function () {
      return resolveDispatcher().useId();
    };
    exports.useImperativeHandle = function (ref, create, deps) {
      return resolveDispatcher().useImperativeHandle(ref, create, deps);
    };
    exports.useInsertionEffect = function (create, deps) {
      null == create &&
        console.warn(
          "React Hook useInsertionEffect requires an effect callback. Did you forget to pass a callback to the hook?"
        );
      return resolveDispatcher().useInsertionEffect(create, deps);
    };
    exports.useLayoutEffect = function (create, deps) {
      null == create &&
        console.warn(
          "React Hook useLayoutEffect requires an effect callback. Did you forget to pass a callback to the hook?"
        );
      return resolveDispatcher().useLayoutEffect(create, deps);
    };
    exports.useMemo = function (create, deps) {
      return resolveDispatcher().useMemo(create, deps);
    };
    exports.useOptimistic = function (passthrough, reducer) {
      return resolveDispatcher().useOptimistic(passthrough, reducer);
    };
    exports.useReducer = function (reducer, initialArg, init) {
      return resolveDispatcher().useReducer(reducer, initialArg, init);
    };
    exports.useRef = function (initialValue) {
      return resolveDispatcher().useRef(initialValue);
    };
    exports.useState = function (initialState) {
      return resolveDispatcher().useState(initialState);
    };
    exports.useSyncExternalStore = function (
      subscribe,
      getSnapshot,
      getServerSnapshot
    ) {
      return resolveDispatcher().useSyncExternalStore(
        subscribe,
        getSnapshot,
        getServerSnapshot
      );
    };
    exports.useTransition = function () {
      return resolveDispatcher().useTransition();
    };
    exports.version = "19.1.1";
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
      "function" ===
        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })();


/***/ }),

/***/ "../../node_modules/react/index.js":
/*!*****************************************!*\
  !*** ../../node_modules/react/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



if (false) // removed by dead control flow
{} else {
  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ "../../node_modules/react/cjs/react.development.js");
}


/***/ }),

/***/ "../../node_modules/title-case/dist.es2015/index.js":
/*!**********************************************************!*\
  !*** ../../node_modules/title-case/dist.es2015/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   titleCase: () => (/* binding */ titleCase)
/* harmony export */ });
var SMALL_WORDS = /\b(?:an?d?|a[st]|because|but|by|en|for|i[fn]|neither|nor|o[fnr]|only|over|per|so|some|tha[tn]|the|to|up|upon|vs?\.?|versus|via|when|with|without|yet)\b/i;
var TOKENS = /[^\s:–—-]+|./g;
var WHITESPACE = /\s/;
var IS_MANUAL_CASE = /.(?=[A-Z]|\..)/;
var ALPHANUMERIC_PATTERN = /[A-Za-z0-9\u00C0-\u00FF]/;
function titleCase(input) {
    var result = "";
    var m;
    // tslint:disable-next-line
    while ((m = TOKENS.exec(input)) !== null) {
        var token = m[0], index = m.index;
        if (
        // Ignore already capitalized words.
        !IS_MANUAL_CASE.test(token) &&
            // Ignore small words except at beginning or end.
            (!SMALL_WORDS.test(token) ||
                index === 0 ||
                index + token.length === input.length) &&
            // Ignore URLs.
            (input.charAt(index + token.length) !== ":" ||
                WHITESPACE.test(input.charAt(index + token.length + 1)))) {
            // Find and uppercase first word character, skips over *modifiers*.
            result += token.replace(ALPHANUMERIC_PATTERN, function (m) { return m.toUpperCase(); });
            continue;
        }
        result += token;
    }
    return result;
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../node_modules/void-elements/index.js":
/*!*************************************************!*\
  !*** ../../node_modules/void-elements/index.js ***!
  \*************************************************/
/***/ ((module) => {

/**
 * This file automatically generated from `pre-publish.js`.
 * Do not manually edit.
 */

module.exports = {
  "area": true,
  "base": true,
  "br": true,
  "col": true,
  "embed": true,
  "hr": true,
  "img": true,
  "input": true,
  "link": true,
  "meta": true,
  "param": true,
  "source": true,
  "track": true,
  "wbr": true
};


/***/ }),

/***/ "./client/src/ms365-integration.ts":
/*!*****************************************!*\
  !*** ./client/src/ms365-integration.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Microsoft365Integration: () => (/* binding */ Microsoft365Integration)
/* harmony export */ });
/* harmony import */ var _openfin_microsoft365__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openfin/microsoft365 */ "../../node_modules/@openfin/microsoft365/openfin.ms365.js");
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @openfin/workspace */ "../../node_modules/@openfin/workspace/index.js");
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_openfin_workspace__WEBPACK_IMPORTED_MODULE_1__);


/**
 * Implement the integration provider for microsoft 365 results.
 */
class Microsoft365Integration {
    /**
     * Create a new instance of Microsoft365Provider.
     */
    constructor() {
        this._profileImageCache = {};
        this._teamsAndChannelsCache = [];
        this._cacheCounter = 0;
    }
    /**
     * Initialize the module.
     * @param definition The definition of the module from configuration include custom options.
     * @param definition.id The id to use when the integration is used as a module.
     * @param definition.title The title to use when the integration is used as a module.
     * @param definition.data The settings for the module.
     * @param loggerCreator For logging entries.
     * @param helpers Helper methods for the module to interact with the application core.
     * @returns Nothing.
     */
    async initialize(definition, loggerCreator, helpers) {
        this._definition = definition;
        this._settings = definition.data;
        this._integrationHelpers = helpers;
        this._definition.title ??= "Microsoft 365";
        this._settings.graphExplorerPrefix ??= "ms";
        this._logger = loggerCreator(this._definition.title);
        this._logger.info(`Initializing ${this._definition.title}`);
        if (!this._settings.clientId) {
            this._logger.error("Configuration is missing clientId");
            return;
        }
        if (!this._settings.tenantId) {
            this._logger.error("Configuration is missing tenantId");
            return;
        }
        await this.connectToMS365();
        // For themed icons we fetch the svg content so that we can replace colors
        // when they are used, instead of linking directly to the source
        const themedIcons = [
            "calendar",
            "call",
            "channel",
            "chat",
            "contact",
            "email",
            "share",
            "team",
            "file",
            "folder"
        ];
        for (const themedIcon of themedIcons) {
            const response = await fetch(this._settings.images[themedIcon]);
            const svg = await response.text();
            this._settings.images[themedIcon] = this.svgToInline(svg);
        }
    }
    /**
     * The module is being deregistered.
     * @returns Nothing.
     */
    async closedown() {
        if (this._ms365Connection) {
            this._logger?.info("Disconnecting from MS Graph API");
            await this._ms365Connection.disconnect();
            this._ms365Connection = undefined;
        }
        if (this._cacheIntervalId) {
            window.clearInterval(this._cacheIntervalId);
            this._cacheIntervalId = undefined;
        }
    }
    /**
     * Get a list of the static help entries.
     * @returns The list of help entries.
     */
    async getHelpSearchEntries() {
        if (this._integrationHelpers) {
            const additionalDescription = [];
            const additionalHelp = [];
            if (!this._settings?.disableGraphExplorer) {
                additionalDescription.push(`You can also specify a query as a graph explorer path and parameters, by using the /${this._settings?.graphExplorerPrefix} prefix`);
                additionalHelp.push(`/${this._settings?.graphExplorerPrefix}/me`, `/${this._settings?.graphExplorerPrefix}/users?$filter=startsWith(displayName,'john')`);
            }
            return [
                {
                    key: `${this._definition?.id}-help1`,
                    score: this._definition?.baseScore ?? Microsoft365Integration._DEFAULT_BASE_SCORE,
                    title: this._definition?.title ?? "",
                    label: "Help",
                    icon: this._settings?.images.microsoft365,
                    actions: [],
                    data: {
                        providerId: this._definition?.id
                    },
                    template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Custom,
                    templateContent: await this._integrationHelpers?.templateHelpers.createHelp("Microsoft 365", [
                        "The Microsoft 365 integration can be used to search multiple data source in your platform.",
                        "Using a freeform query will search the content of Users, Contacts, E-mail, Events, Chat Messages, Teams and Channels"
                    ].concat(additionalDescription), additionalHelp)
                },
                {
                    key: `${this._definition?.id}-help2`,
                    score: this._definition?.baseScore ?? Microsoft365Integration._DEFAULT_BASE_SCORE,
                    title: `${this._definition?.title} Recent`,
                    label: "Help",
                    icon: this._settings?.images.microsoft365,
                    actions: [],
                    data: {
                        providerId: this._definition?.id,
                        populateQuery: "/recent"
                    },
                    template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Custom,
                    templateContent: await this._integrationHelpers?.templateHelpers.createHelp("Microsoft 365 Recent", ["Running this command will retrieve the most recent files from MS365"], ["/recent"])
                }
            ];
        }
        return [];
    }
    /**
     * Get entries to show while the integration is searching.
     * @param query The query to search for.
     * @param lastResponse The last search response used for updating existing results.
     * @param options Options for the search query.
     * @param options.queryMinLength The minimum length before a query is actioned.
     * @param options.queryAgainst The fields in the data to query against.
     * @param options.isSuggestion Is the query from a suggestion.
     * @returns The list of results and new filters.
     */
    async getSearchResultsProgress(query, lastResponse, options) {
        if (!this._ms365Connection && this._integrationHelpers) {
            const themeClient = await this._integrationHelpers.getThemeClient();
            this._connectLastResponse = lastResponse;
            const results = [];
            if (this._connectionError) {
                const connectResult = await this.createConnectResult(this._integrationHelpers.templateHelpers, await themeClient.getPalette());
                if (connectResult) {
                    results.push(connectResult);
                }
            }
            return results;
        }
        const minLength = options?.queryMinLength ?? 3;
        return query.length >= minLength ? [this.createSearchingResult()] : [];
    }
    /**
     * Get a list of search results based on the query and filters.
     * @param query The query to search for.
     * @param filters The filters to apply.
     * @param lastResponse The last search response used for updating existing results.
     * @param options Options for the search query.
     * @param options.queryMinLength The minimum length of the query before showing results.
     * @param options.queryAgainst The field to search against.
     * @returns The list of results and new filters.
     */
    async getSearchResults(query, filters, lastResponse, options) {
        const isRecent = query === "/recent";
        const defaultFilters = isRecent
            ? ["File"]
            : ["User", "Contact", "Event", "Message", "Channel", "Team", "ChatMessage", "File"];
        const minLength = options?.queryMinLength ?? 3;
        if (this._ms365Connection && this._integrationHelpers) {
            const themeClient = await this._integrationHelpers.getThemeClient();
            const palette = await themeClient.getPalette();
            try {
                // If query starts with ms just do a passthrough to the graph API
                if (!this._settings?.disableGraphExplorer &&
                    query.startsWith(`/${this._settings?.graphExplorerPrefix}/`)) {
                    const path = query.replace(`/${this._settings?.graphExplorerPrefix}/`, "");
                    if (path.length > 0) {
                        const fullPath = `/v1.0/${path}`;
                        this._logger?.info("Graph API Request", fullPath);
                        const response = await this._ms365Connection.executeApiRequest(fullPath);
                        const jsonResult = await this.createGraphJsonResult(this._integrationHelpers.templateHelpers, palette, response);
                        lastResponse.respond([jsonResult]);
                    }
                }
                else if (isRecent || (query.length >= minLength && !query.startsWith("/"))) {
                    const ms365Filter = filters?.find((f) => f.id === Microsoft365Integration._MS365_FILTERS);
                    let includeOptions = [...defaultFilters];
                    if (ms365Filter?.options && Array.isArray(ms365Filter.options)) {
                        includeOptions = ms365Filter.options
                            .filter((o) => o.isSelected)
                            .map((o) => o.value);
                    }
                    const batchRequests = [];
                    if (includeOptions.includes("User")) {
                        const userSearchFields = [
                            "displayName",
                            "givenName",
                            "surname",
                            "department",
                            "jobTitle",
                            "mobilePhone"
                        ];
                        const userSearchQuery = userSearchFields.map((s) => `"${s}:${query}"`).join(" OR ");
                        batchRequests.push({
                            id: "User",
                            method: "GET",
                            url: `/users?$search=${encodeURIComponent(userSearchQuery)}&$top=10`,
                            headers: {
                                ConsistencyLevel: "eventual"
                            }
                        });
                    }
                    if (includeOptions.includes("Contact")) {
                        const contactSearchQuery = `"${query}"`;
                        batchRequests.push({
                            id: "Contact",
                            method: "GET",
                            url: `/me/contacts?$search=${encodeURIComponent(contactSearchQuery)}&$top=10`
                        });
                    }
                    if (includeOptions.includes("Message")) {
                        const messageSearchQuery = `"${query}"`;
                        batchRequests.push({
                            id: "Message",
                            method: "GET",
                            url: `/me/messages?$select=sender,subject,bodyPreview,receivedDateTime,webLink&$search=${encodeURIComponent(messageSearchQuery)}&$top=10`
                        });
                    }
                    if (includeOptions.includes("Event")) {
                        batchRequests.push({
                            id: "Event",
                            url: "/search/query",
                            method: "POST",
                            body: {
                                requests: [
                                    {
                                        entityTypes: ["event"],
                                        query: {
                                            queryString: query
                                        },
                                        from: 0,
                                        size: 10
                                    }
                                ]
                            },
                            headers: {
                                "Content-Type": "application/json"
                            }
                        });
                    }
                    if (includeOptions.includes("ChatMessage")) {
                        batchRequests.push({
                            id: "ChatMessage",
                            url: "/search/query",
                            method: "POST",
                            body: {
                                requests: [
                                    {
                                        entityTypes: ["chatMessage"],
                                        query: {
                                            queryString: query
                                        },
                                        from: 0,
                                        size: 10
                                    }
                                ]
                            },
                            headers: {
                                "Content-Type": "application/json"
                            }
                        });
                    }
                    if (includeOptions.includes("File")) {
                        const fileSearchQuery = `'${query}'`;
                        batchRequests.push({
                            id: "File",
                            url: isRecent
                                ? "/me/drive/recent"
                                : `/me/drive/root/search(q=${encodeURIComponent(fileSearchQuery)})?$top=10&$orderby=lastModifiedDateTime desc&$expand=thumbnails`,
                            method: "GET"
                        });
                    }
                    const homeResults = await this.sendBatchQuery(query, includeOptions, batchRequests);
                    if (includeOptions.includes("Team") || includeOptions.includes("Channel")) {
                        const lowerQuery = query.toLowerCase();
                        for (const teamAndChannels of this._teamsAndChannelsCache) {
                            if (includeOptions.includes("Team") &&
                                (teamAndChannels.team.displayName?.toLowerCase().includes(lowerQuery) ??
                                    teamAndChannels.team.description?.toLowerCase().includes(lowerQuery))) {
                                homeResults.push(await this.createLoadingResult(this._integrationHelpers.templateHelpers, palette, teamAndChannels.team, "displayName", "Team"));
                            }
                            if (includeOptions.includes("Channel")) {
                                for (const channel of teamAndChannels.channels) {
                                    if (channel.displayName?.toLowerCase().includes(lowerQuery) ??
                                        channel.description?.toLowerCase().includes(lowerQuery)) {
                                        homeResults.push(await this.createLoadingResult(this._integrationHelpers.templateHelpers, palette, {
                                            ...channel,
                                            team: teamAndChannels.team
                                        }, "displayName", "Channel"));
                                    }
                                }
                            }
                        }
                    }
                    lastResponse.respond(homeResults);
                    const resultTypes = new Set();
                    for (const searchResult of homeResults) {
                        if (searchResult.label) {
                            resultTypes.add(searchResult.label);
                        }
                    }
                    const newFilters = resultTypes.entries();
                    lastResponse.updateContext({
                        filters: [
                            {
                                id: Microsoft365Integration._MS365_FILTERS,
                                title: "Microsoft 365",
                                options: [...newFilters].map((f) => ({
                                    value: f[0],
                                    isSelected: true
                                }))
                            }
                        ]
                    });
                }
            }
            catch (err) {
                const message = err instanceof Error ? err.message : err;
                lastResponse.respond([
                    await this.createGraphJsonResult(this._integrationHelpers.templateHelpers, palette, {
                        status: 400,
                        data: message
                    })
                ]);
            }
        }
        lastResponse.revoke(`${this._definition?.id}-searching`);
        return {
            results: []
        };
    }
    /**
     * An entry has been selected.
     * @param result The dispatched result.
     * @param lastResponse The last response.
     * @returns True if the item was handled.
     */
    async itemSelection(result, lastResponse) {
        if (result.action.trigger === "focus-change") {
            if (result.data?.state === "loading" && this._ms365Connection && this._integrationHelpers) {
                const themeClient = await this._integrationHelpers.getThemeClient();
                const palette = await themeClient.getPalette();
                const templateHelpers = this._integrationHelpers.templateHelpers;
                const actionData = result.data;
                const objType = actionData.objType;
                const resultHandlers = {
                    User: async () => this.createUserResult(templateHelpers, palette, actionData.obj),
                    Contact: async () => this.createContactResult(templateHelpers, palette, actionData.obj),
                    Message: async () => this.createMessageResult(templateHelpers, palette, actionData.obj),
                    Event: async () => this.createEventResult(templateHelpers, palette, actionData.obj),
                    ChatMessage: async () => this.createChatMessageResult(templateHelpers, palette, actionData.obj),
                    Channel: async () => this.createChannelResult(templateHelpers, palette, actionData.obj),
                    Team: async () => this.createTeamResult(templateHelpers, palette, actionData.obj),
                    File: async () => this.createFileResult(templateHelpers, palette, actionData.obj)
                };
                const typeHandler = resultHandlers[objType];
                if (typeHandler) {
                    const res = await typeHandler();
                    if (res) {
                        lastResponse.respond([res]);
                    }
                }
            }
            return true;
        }
        else if (result.action.trigger === "user-action") {
            return this.handleAction(result.action.name, result.data, lastResponse);
        }
        return false;
    }
    /**
     * Connect to the graph API.
     */
    async connectToMS365() {
        try {
            if (!this._settings?.clientId || !this._settings?.tenantId || !this._settings?.redirectUri) {
                throw new Error("Configuration missing clientId, tenantId or redirectUri");
            }
            this._logger?.info("Connecting to MS Graph API", {
                clientId: this._settings.clientId,
                tenantId: this._settings.tenantId,
                redirectUri: this._settings.redirectUri
            });
            if (this._settings.enableLibLogging) {
                (0,_openfin_microsoft365__WEBPACK_IMPORTED_MODULE_0__.enableLogging)();
            }
            this._connectionError = undefined;
            this._ms365Connection = await (0,_openfin_microsoft365__WEBPACK_IMPORTED_MODULE_0__.connect)(this._settings.clientId, this._settings.tenantId, this._settings.redirectUri, this._settings.permissions);
            this._cacheIntervalId = window.setInterval(async () => this.updateCache(), 30000);
            window.setTimeout(async () => {
                await this.updateCache();
            }, 0);
            if (this._connectLastResponse) {
                this._connectLastResponse.revoke(`${this._definition?.id}-connect`);
                this._connectLastResponse = undefined;
            }
        }
        catch (err) {
            this._ms365Connection = undefined;
            this._connectionError = this.formatError(err);
            this._logger?.error("Connecting to MS Graph API failed", err);
            if (this._connectLastResponse && this._integrationHelpers) {
                const themeClient = await this._integrationHelpers.getThemeClient();
                this._connectLastResponse.respond([
                    await this.createConnectResult(this._integrationHelpers.templateHelpers, await themeClient.getPalette())
                ]);
            }
        }
    }
    /**
     * Handle an action from a home template.
     * @param actionName The name of the action.
     * @param actionData The data associated with the action.
     * @param lastResponse The last response in case we need to update the results.
     * @returns True if the action was handled.
     */
    async handleAction(actionName, actionData, lastResponse) {
        switch (actionName) {
            case Microsoft365Integration._ACTION_CONNECT:
                lastResponse.revoke(`${this._definition?.id}-connect`);
                await this.connectToMS365();
                return true;
            case Microsoft365Integration._ACTION_TEAMS_CALL:
                return this.handleTeamsCall(actionData);
            case Microsoft365Integration._ACTION_TEAMS_MEETING:
                return this.handleTeamsMeeting(actionData);
            case Microsoft365Integration._ACTION_TEAMS_CHAT:
                return this.handleTeamsChat(actionData);
            case Microsoft365Integration._ACTION_OUTLOOK_EMAIL:
                return this.handleOutlookMail(actionData);
            case Microsoft365Integration._ACTION_OUTLOOK_EVENT:
                return this.handleOutlookEvent(actionData);
            case Microsoft365Integration._ACTION_PHONE_CALL:
                return this.handlePhoneCall(actionData);
            case Microsoft365Integration._ACTION_SHARE_CONTACT:
                return this.handleShareContact(actionData);
            case Microsoft365Integration._ACTION_COPY:
                return this.handleCopy(actionData);
            default:
                if (actionName.startsWith(Microsoft365Integration._ACTION_OPEN)) {
                    return this.handleOpen(actionName, actionData);
                }
                return false;
        }
    }
    /**
     * Handle a teams call.
     * @param actionData The data for the call.
     * @returns True if it was handled.
     */
    async handleTeamsCall(actionData) {
        if (this._ms365Connection) {
            this._logger?.info("Teams Call", actionData.emails);
            const teamsConnection = new _openfin_microsoft365__WEBPACK_IMPORTED_MODULE_0__.TeamsConnection(this._ms365Connection);
            await teamsConnection.startCall(actionData.emails);
            return true;
        }
        this._logger?.error("No connection");
        return false;
    }
    /**
     * Handle a teams meeting.
     * @param actionData The data for the meeting.
     * @returns True if it was handled.
     */
    async handleTeamsMeeting(actionData) {
        if (this._ms365Connection && actionData.emails) {
            this._logger?.info("Teams Meeting", this._ms365Connection.currentUser.mail, actionData.emails);
            await fin.System.openUrlWithBrowser(`${Microsoft365Integration._TEAMS_PROTOCOL}/l/meeting/new?attendees=${this._ms365Connection.currentUser.mail},${actionData.emails.join(",")}`);
            return true;
        }
        this._logger?.error("No connection, or action emails", actionData.emails);
        return false;
    }
    /**
     * Handle a teams chat.
     * @param actionData The data for the chat.
     * @returns True if it was handled.
     */
    async handleTeamsChat(actionData) {
        if (this._ms365Connection?.currentUser?.mail) {
            this._logger?.info("Teams Chat", this._ms365Connection.currentUser.mail, actionData.teamId, actionData.channelId, actionData.emails);
            const teamsConnection = new _openfin_microsoft365__WEBPACK_IMPORTED_MODULE_0__.TeamsConnection(this._ms365Connection);
            if (actionData.chatId && actionData.messageId) {
                await fin.System.openUrlWithBrowser(`${Microsoft365Integration._TEAMS_PROTOCOL}/l/message/${actionData.chatId}/${actionData.messageId}`);
            }
            else if (actionData.teamId) {
                await teamsConnection.startChat({ teamId: actionData.teamId, channelId: actionData.channelId });
            }
            else if (actionData.emails) {
                await teamsConnection.startChat({
                    emailAddresses: [this._ms365Connection.currentUser.mail, ...actionData.emails]
                });
            }
            return true;
        }
        this._logger?.error("No connection user mail, or action emails", this._ms365Connection?.currentUser?.mail, actionData.emails);
        return false;
    }
    /**
     * Handle an outlook email.
     * @param actionData The data for the email.
     * @returns True if it was handled.
     */
    async handleOutlookMail(actionData) {
        if (this._integrationHelpers && this._ms365Connection && actionData.emails) {
            this._logger?.info("Open Outlook Mail", actionData.emails);
            const response = await this._ms365Connection.executeApiRequest("/v1.0/me/messages", "POST", {
                toRecipients: actionData.emails.map((e) => ({
                    emailAddress: {
                        address: e
                    }
                }))
            });
            if (response?.data?.webLink) {
                await this._integrationHelpers.launchView({ url: response.data.webLink });
                return true;
            }
            this._logger?.error("No webLink in response data", response.data);
        }
        return false;
    }
    /**
     * Handle an outlook event.
     * @param actionData The data for the event.
     * @returns True if it was handled.
     */
    async handleOutlookEvent(actionData) {
        if (this._integrationHelpers && this._ms365Connection && actionData.emails) {
            this._logger?.info("Open Outlook Event", actionData.emails);
            const response = await this._ms365Connection.executeApiRequest("/v1.0/me/events", "POST", {
                attendees: actionData.emails.map((e) => ({
                    emailAddress: {
                        address: e
                    }
                }))
            });
            if (response?.data?.webLink) {
                await this._integrationHelpers.launchView({ url: response.data.webLink });
                return true;
            }
            this._logger?.error("No webLink in response data", response.data);
        }
        return false;
    }
    /**
     * Handle a phone call.
     * @param actionData The data for the call.
     * @returns True if it was handled.
     */
    async handlePhoneCall(actionData) {
        this._logger?.info("Phone Call", actionData.phone);
        await fin.System.openUrlWithBrowser(`tel:${actionData.phone}`);
        return true;
    }
    /**
     * Handle open of a url.
     * @param actionName The name of the action.
     * @param actionData The data for the url opening.
     * @returns True if the url was opened.
     */
    async handleOpen(actionName, actionData) {
        const linkIndex = actionName.indexOf("_");
        const u = linkIndex < 0 ? actionData.url : actionData.urls?.[actionName.slice(linkIndex + 1)];
        if (u) {
            this._logger?.info("Open", u);
            if (u.startsWith(Microsoft365Integration._TEAMS_URL)) {
                await fin.System.openUrlWithBrowser(u.replace(Microsoft365Integration._TEAMS_URL, Microsoft365Integration._TEAMS_PROTOCOL));
            }
            else if (this._integrationHelpers) {
                await this._integrationHelpers.launchView({ url: u });
            }
            return true;
        }
        this._logger?.error(`Url not found in actionData, linkIndex ${linkIndex}`);
        return false;
    }
    /**
     * Handle sharing a contact.
     * @param actionData The data for the sharing.
     * @returns True if the url was opened.
     */
    async handleShareContact(actionData) {
        if (actionData?.emails?.[0]) {
            const fdc3Contact = {
                type: "fdc3.contact",
                name: actionData.name,
                id: {
                    email: actionData.emails[0]
                }
            };
            if (window.fdc3) {
                this._logger?.info("Share Contact", fdc3Contact);
                await window?.fdc3.raiseIntent("ViewContact", fdc3Contact);
                return true;
            }
            this._logger?.error("FDC3 API is not available so ViewContact cannot be raised.", fdc3Contact);
            return false;
        }
        this._logger?.error("No contact information to share", actionData.emails);
        return false;
    }
    /**
     * Handle copy to clipboard for JSON data.
     * @param actionData The data for copying.
     * @returns True if the url was opened.
     */
    async handleCopy(actionData) {
        this._logger?.info("Copy JSON", actionData.json);
        await fin.Clipboard.writeText({ data: JSON.stringify(actionData.json, undefined, "\t") });
        return true;
    }
    /**
     * Send a batch query to the MS365 graph.
     * @param query The query to send.
     * @param includeOptions The object types to include.
     * @param batchRequests The batch requests to send.
     * @returns The results to display in home.
     */
    async sendBatchQuery(query, includeOptions, batchRequests) {
        const homeResults = [];
        if (this._ms365Connection && this._integrationHelpers) {
            this._logger?.info("Graph API Batch Request", batchRequests);
            try {
                const batchResponses = await this._ms365Connection.executeApiRequest("/v1.0/$batch", "POST", {
                    requests: batchRequests
                });
                if (batchResponses.data?.responses && Array.isArray(batchResponses.data.responses)) {
                    const themeClient = await this._integrationHelpers.getThemeClient();
                    const palette = await themeClient.getPalette();
                    for (const batchResponse of batchResponses.data.responses) {
                        if (batchResponse.status === 200) {
                            this._logger?.info(`${batchResponse.id} Response`, batchResponse.body);
                            await this.handleBatchQueryResponse(this._integrationHelpers.templateHelpers, palette, includeOptions, batchResponse, homeResults);
                        }
                        else {
                            this._logger?.error(`${batchResponse.id} Response Failed`, batchResponse.status, batchResponse.body);
                        }
                    }
                }
            }
            catch (err) {
                this._logger?.error("Batch Response Failed", err);
            }
        }
        else {
            this._logger?.error("No connection for sending batch request");
        }
        return homeResults;
    }
    /**
     * Handle the response from a batch query.
     * @param templateHelpers To help with creating templates.
     * @param palette The current palette.
     * @param includeOptions The object types that were included in the batch request.
     * @param batchResponse The response from the query.
     * @param homeResults The results for the responses.
     */
    async handleBatchQueryResponse(templateHelpers, palette, includeOptions, batchResponse, homeResults) {
        const type = batchResponse.id.split("-")[0];
        if (includeOptions.includes(type)) {
            if (type === "User") {
                const users = batchResponse.body.value;
                if (users?.length) {
                    for (const u of users) {
                        homeResults.push(await this.createLoadingResult(templateHelpers, palette, u, "displayName", "User"));
                    }
                }
            }
            else if (type === "Contact") {
                const contacts = batchResponse.body.value;
                if (contacts?.length) {
                    for (const c of contacts) {
                        homeResults.push(await this.createLoadingResult(templateHelpers, palette, c, "displayName", "Contact"));
                    }
                }
            }
            else if (type === "Message") {
                const messages = batchResponse.body.value;
                if (messages?.length) {
                    for (const msg of messages.filter((m) => m.subject && !m.subject.startsWith("Canceled") && !m.subject.startsWith("Undeliverable"))) {
                        homeResults.push(await this.createLoadingResult(templateHelpers, palette, msg, "subject", "Message"));
                    }
                }
            }
            else if (type === "Event") {
                const graphResponse = batchResponse.body;
                const searchResponse = graphResponse?.value?.[0];
                const events = searchResponse?.hitsContainers?.[0]?.hits;
                if (events?.length) {
                    for (const evt of events.filter((e) => e.resource.subject)) {
                        homeResults.push(await this.createLoadingResult(templateHelpers, palette, {
                            id: this.base64IdToUrl(evt.hitId),
                            ...evt.resource
                        }, "subject", "Event"));
                    }
                }
            }
            else if (type === "ChatMessage") {
                const graphResponse = batchResponse.body;
                const searchResponse = graphResponse?.value?.[0];
                const chatMessages = searchResponse?.hitsContainers?.[0]?.hits;
                if (chatMessages?.length) {
                    for (const cht of chatMessages) {
                        homeResults.push(await this.createLoadingResult(templateHelpers, palette, {
                            id: this.base64IdToUrl(cht.hitId),
                            ...cht.resource,
                            summary: cht.summary
                        }, "summary", "ChatMessage"));
                    }
                }
            }
            else if (type === "File") {
                const files = batchResponse.body.value;
                if (files?.length) {
                    for (const f of files) {
                        homeResults.push(await this.createLoadingResult(templateHelpers, palette, f, "name", "File"));
                    }
                }
            }
        }
    }
    /**
     * Create a result for home to allow reconnection.
     * @param templateHelpers To help with creating templates.
     * @param palette The current palette.
     * @returns The connect template.
     */
    async createConnectResult(templateHelpers, palette) {
        const layout = await templateHelpers.createContainer("column", [
            await templateHelpers.createContainer("row", [await templateHelpers.createText("title", 12, { fontWeight: "bold" })], {
                borderBottom: `1px solid ${palette.background6}`,
                paddingBottom: "5px",
                gap: "5px"
            }),
            await templateHelpers.createText("description", 12),
            await templateHelpers.createText("error", 12, {
                fontFamily: "monospace",
                flex: 1
            }),
            await templateHelpers.createButton(_openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.ButtonStyle.Primary, "connect", Microsoft365Integration._ACTION_CONNECT)
        ], {
            padding: "10px",
            gap: "15px",
            flex: "1"
        });
        return {
            key: `${this._definition?.id}-connect`,
            score: this._definition?.baseScore ?? Microsoft365Integration._DEFAULT_BASE_SCORE,
            title: this._definition?.title ?? "",
            label: "Connect",
            icon: this._settings?.images.microsoft365,
            actions: [
                {
                    name: Microsoft365Integration._ACTION_CONNECT,
                    hotkey: "Enter"
                }
            ],
            data: {
                providerId: this._definition?.id
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Custom,
            templateContent: {
                layout,
                data: {
                    title: `${this._definition?.title} Connection`,
                    description: `${this._definition?.title} failed to connect due to the following error`,
                    error: this._connectionError ?? "Unknown connection error",
                    connect: "Connect"
                }
            }
        };
    }
    /**
     * Create a result to show we are searching.
     * @returns Home template for searching.
     */
    createSearchingResult() {
        return {
            key: `${this._definition?.id}-searching`,
            score: this._definition?.baseScore ?? Microsoft365Integration._DEFAULT_BASE_SCORE,
            title: "Searching ...",
            icon: this._settings?.images.microsoft365,
            actions: [],
            data: {
                providerId: this._definition?.id
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Loading,
            templateContent: ""
        };
    }
    /**
     * Create a home search result which display JSON.
     * @param templateHelpers To help with creating templates.
     * @param palette The current palette.
     * @param response The response to convert to the home template.
     * @returns The home template.
     */
    async createGraphJsonResult(templateHelpers, palette, response) {
        return {
            key: `${this._definition?.id}-rest`,
            score: this._definition?.baseScore ?? Microsoft365Integration._DEFAULT_BASE_SCORE,
            title: "Graph Result",
            label: response.status === 200 ? "JSON" : "Error",
            icon: this._settings?.images.microsoft365,
            actions: [
                {
                    name: Microsoft365Integration._ACTION_COPY,
                    hotkey: "Enter"
                }
            ],
            data: {
                providerId: this._definition?.id,
                json: response.data
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Custom,
            templateContent: {
                layout: await templateHelpers.createText("json", 12, {
                    fontSize: "12px",
                    fontFamily: "monospace",
                    color: response.status === 200 ? palette.textDefault : "red",
                    whiteSpace: "pre",
                    overflow: "auto",
                    flex: 1
                }),
                data: {
                    json: JSON.stringify(response.data, undefined, "  ")
                }
            }
        };
    }
    /**
     * Create a result which show a loading template.
     * @param templateHelpers To help with creating templates.
     * @param palette The current palette.
     * @param obj The object to display loading for.
     * @param title The title of the item.
     * @param objType The type of the item.
     * @returns The home search result.
     */
    async createLoadingResult(templateHelpers, palette, obj, title, objType) {
        const icons = {
            User: "teams",
            Contact: "contact",
            Message: "email",
            Event: "calendar",
            Channel: "channel",
            Team: "team",
            ChatMessage: "chat",
            File: "file"
        };
        let label = objType.split(/(?=[A-Z])/).join(" ");
        let mimeIcon;
        if (objType === "File") {
            mimeIcon = this.getMimeIcon(obj, palette);
            if (this.driveItemIsFolder(obj)) {
                label = "Folder";
            }
            else if (this.driveItemIsImage(obj)) {
                label = "Image";
            }
        }
        return {
            key: `${this._definition?.id}-${obj.id}`,
            score: this.objectTypeToOrder(objType),
            title: obj[title] ?? `Untitled ${objType}`,
            label,
            icon: mimeIcon ?? this.getThemedIcon(icons[objType], palette),
            actions: [],
            data: {
                providerId: this._definition?.id,
                objType,
                obj,
                state: "loading"
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Loading,
            templateContent: ""
        };
    }
    /**
     * Create a result to display a user.
     * @param templateHelpers To help with creating templates.
     * @param palette The current palette.
     * @param user The user to display.
     * @returns The created template.
     */
    async createUserResult(templateHelpers, palette, user) {
        let picData;
        let presence;
        let availableColor = "red";
        let availableIcon = this._settings?.images.cross;
        let availability = "Unknown";
        const teams = [];
        if (this._ms365Connection) {
            const batchRequests = [];
            batchRequests.push(`/users/${user.id}/presence`, `/users/${user.id}/memberOf`);
            if (user.id) {
                if (this._profileImageCache[user.id]) {
                    picData = this._profileImageCache[user.id].data;
                }
                else {
                    batchRequests.push(`/users/${user.id}/photo/$value`);
                }
            }
            try {
                this._logger?.info("Graph API Batch Request", batchRequests);
                const response = await this._ms365Connection.executeApiRequest("/v1.0/$batch", "POST", {
                    requests: batchRequests.map((r, idx) => ({
                        id: (idx + 1).toString(),
                        method: "GET",
                        url: r
                    }))
                });
                const presenceResponse = response.data?.responses.find((r) => r.id === "1");
                if (presenceResponse?.status === 200) {
                    presence = presenceResponse.body;
                    // Availability is in Pascal case, so split on capitals and join with space
                    availability = presence?.availability?.split(/(?=[A-Z])/).join(" ") ?? availability;
                    if (presence?.availability === "Available") {
                        availableColor = "green";
                        availableIcon = this._settings?.images.check;
                    }
                    else if (presence?.availability === "Away" || presence?.availability === "BeRightBack") {
                        availableColor = "orange";
                        availableIcon = this._settings?.images.clock;
                    }
                }
                else {
                    this._logger?.error("Failed getting user presence", presenceResponse?.status, presenceResponse?.body);
                }
                const teamsResponse = response.data?.responses.find((r) => r.id === "2");
                if (teamsResponse?.status === 200) {
                    const memberOf = teamsResponse.body.value;
                    if (memberOf) {
                        const excludeGroups = ["All Users"];
                        const teamsMember = memberOf.filter((m) => m["@odata.type"] === "#microsoft.graph.group" && !excludeGroups.includes(m.displayName ?? ""));
                        for (const member of teamsMember) {
                            if (member.displayName) {
                                teams.push(member.displayName);
                            }
                        }
                    }
                }
                else {
                    this._logger?.error("Failed getting user teams", teamsResponse?.status, teamsResponse?.body);
                }
                const profileResponse = response.data?.responses.find((r) => r.id === "3");
                if (profileResponse) {
                    if (profileResponse?.status === 200) {
                        picData = `data:image/jpeg;base64,${profileResponse.body}`;
                        this._profileImageCache[user.id ?? ""] = {
                            data: picData,
                            added: Date.now()
                        };
                    }
                    else {
                        // If the request failed the JSON error is still base64 encoded
                        this._logger?.error("Failed getting user profile pic", profileResponse.status, atob(profileResponse.body));
                    }
                }
            }
            catch (err) {
                this._logger?.error("Failed performing API batch request", err);
            }
        }
        const pairs = [];
        if (user.jobTitle) {
            pairs.push({ label: "Title", value: user.jobTitle });
        }
        if (user.department) {
            pairs.push({ label: "Department", value: user.department });
        }
        if (user.mail) {
            pairs.push({ label: "E-mail", value: user.mail });
        }
        let phone;
        if (user.mobilePhone) {
            pairs.push({ label: "Cell", value: user.mobilePhone });
            phone = user.mobilePhone;
        }
        if (user.businessPhones?.length) {
            pairs.push({ label: "Business", value: user.businessPhones[0] });
            phone = phone ?? user.businessPhones[0];
        }
        if (teams.length > 0) {
            pairs.push({ label: "Teams", value: teams.join(", ") });
        }
        const buttons = [
            {
                titleKey: "callTitle",
                action: Microsoft365Integration._ACTION_TEAMS_CALL,
                imageKey: "callImage",
                imageAltText: "Teams Call"
            },
            {
                titleKey: "emailTitle",
                action: Microsoft365Integration._ACTION_OUTLOOK_EMAIL,
                imageKey: "emailImage",
                imageAltText: "E-mail"
            },
            {
                titleKey: "meetingTitle",
                action: Microsoft365Integration._ACTION_TEAMS_MEETING,
                imageKey: "meetingImage",
                imageAltText: "Meeting"
            },
            {
                titleKey: "chatTitle",
                action: Microsoft365Integration._ACTION_TEAMS_CHAT,
                imageKey: "chatImage",
                imageAltText: "Chat"
            }
        ];
        return {
            key: `${this._definition?.id}-${user.id}`,
            score: this.objectTypeToOrder("User"),
            title: user.displayName ?? "",
            label: "User",
            icon: this.getThemedIcon("teams", palette),
            actions: [
                {
                    name: Microsoft365Integration._ACTION_TEAMS_CALL,
                    hotkey: "Enter"
                }
            ],
            data: {
                providerId: this._definition?.id,
                objType: "User",
                obj: user,
                emails: [user.mail],
                phone,
                name: user.displayName
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Custom,
            templateContent: {
                layout: await templateHelpers.createContainer("column", [
                    await templateHelpers.createContainer("row", [
                        await templateHelpers.createImage("picData", user.displayName ?? "", {
                            width: "44px",
                            height: "44px",
                            objectFit: "cover",
                            borderRadius: "50%"
                        }),
                        await templateHelpers.createImage("status", availability, {
                            width: "16px",
                            height: "16px",
                            backgroundColor: availableColor,
                            borderRadius: "50%",
                            border: "2px solid white",
                            padding: "2px",
                            position: "relative",
                            left: "-14px",
                            top: "28px"
                        }),
                        await templateHelpers.createContainer("column", [
                            await templateHelpers.createTitle("displayName"),
                            await templateHelpers.createText("availability", 10, {})
                        ], {
                            overflow: "hidden"
                        })
                    ], {
                        borderBottom: `1px solid ${palette.background6}`,
                        paddingBottom: "5px",
                        gap: "5px"
                    }),
                    await this.createPairsLayout(templateHelpers, palette, pairs),
                    await this.createButtonsLayout(templateHelpers, palette, buttons)
                ], {
                    padding: "10px",
                    gap: "15px",
                    flex: "1"
                }),
                data: {
                    picData: picData ?? this.getThemedIcon("contact", palette),
                    status: availableIcon ?? "",
                    displayName: user.displayName ?? "",
                    availability,
                    ...this.mapPairsToData(pairs),
                    callTitle: "Teams Call",
                    callImage: this.getThemedIcon("teams", palette),
                    emailTitle: "Outlook E-mail",
                    emailImage: this.getThemedIcon("email", palette),
                    meetingTitle: "Teams Meeting",
                    meetingImage: this.getThemedIcon("calendar", palette),
                    chatTitle: "Teams Chat",
                    chatImage: this.getThemedIcon("chat", palette)
                }
            }
        };
    }
    /**
     * Create a result to show a contact.
     * @param templateHelpers To help with creating templates.
     * @param palette The current palette.
     * @param contact The contact details.
     * @returns The contact template.
     */
    async createContactResult(templateHelpers, palette, contact) {
        let picData;
        try {
            if (this._ms365Connection && contact.id) {
                if (this._profileImageCache[contact.id]) {
                    picData = this._profileImageCache[contact.id].data;
                }
                else {
                    const batchRequests = [`/me/contacts/${contact.id}/photo/$value`];
                    this._logger?.info("Graph API Batch Request", {
                        photo: batchRequests[0]
                    });
                    const response = await this._ms365Connection.executeApiRequest("/v1.0/$batch", "POST", {
                        requests: batchRequests.map((r, idx) => ({
                            id: (idx + 1).toString(),
                            method: "GET",
                            url: r
                        }))
                    });
                    const profileResponse = response.data?.responses.find((r) => r.id === "1");
                    if (profileResponse?.status === 200) {
                        picData = `data:image/jpeg;base64,${profileResponse.body}`;
                        this._profileImageCache[contact.id] = {
                            data: picData,
                            added: Date.now()
                        };
                    }
                    else {
                        // If the request failed the JSON error is still base64 encoded
                        this._logger?.error("Failed getting contact profile pic", profileResponse?.status, atob(profileResponse?.body));
                    }
                }
            }
        }
        catch (err) {
            this._logger?.error("Failed performing API batch request", err);
        }
        const pairs = [];
        if (contact.companyName) {
            pairs.push({ label: "Company", value: contact.companyName });
        }
        if (contact.jobTitle) {
            pairs.push({ label: "Title", value: contact.jobTitle });
        }
        if (contact.department) {
            pairs.push({ label: "Department", value: contact.department });
        }
        let phone;
        let email;
        if (contact.mobilePhone) {
            pairs.push({ label: "Cell", value: contact.mobilePhone });
            phone = contact.mobilePhone;
        }
        if (contact.businessPhones?.length) {
            pairs.push({ label: "Business", value: contact.businessPhones[0] });
            phone = phone ?? contact.businessPhones[0];
        }
        if (contact.emailAddresses?.length) {
            for (const e of contact.emailAddresses) {
                if (e.address?.length) {
                    pairs.push({ label: "E-mail", value: e.address });
                    email = email ?? e.address;
                    break;
                }
            }
        }
        const buttons = [];
        if (phone) {
            buttons.push({
                titleKey: "callTitle",
                action: Microsoft365Integration._ACTION_PHONE_CALL,
                imageKey: "callImage",
                imageAltText: "Call"
            });
        }
        if (email) {
            buttons.push({
                titleKey: "emailTitle",
                action: Microsoft365Integration._ACTION_OUTLOOK_EMAIL,
                imageKey: "emailImage",
                imageAltText: "E-mail"
            });
            buttons.push({
                titleKey: "calendarTitle",
                action: Microsoft365Integration._ACTION_OUTLOOK_EVENT,
                imageKey: "calendarImage",
                imageAltText: "Calendar"
            });
        }
        return {
            key: `${this._definition?.id}-${contact.id}`,
            score: this.objectTypeToOrder("Contact"),
            title: contact.displayName ?? "",
            label: "Contact",
            icon: this.getThemedIcon("contact", palette),
            actions: [
                {
                    name: Microsoft365Integration._ACTION_PHONE_CALL,
                    hotkey: "Enter"
                }
            ],
            data: {
                providerId: this._definition?.id,
                objType: "Contact",
                obj: contact,
                emails: [email],
                phone,
                name: contact.displayName
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Custom,
            templateContent: {
                layout: await templateHelpers.createContainer("column", [
                    await templateHelpers.createContainer("row", [
                        await templateHelpers.createImage("picData", contact.displayName ?? "", {
                            width: "44px",
                            height: "44px",
                            objectFit: "cover",
                            borderRadius: "50%"
                        }),
                        await templateHelpers.createContainer("column", [
                            await templateHelpers.createTitle("displayName"),
                            await templateHelpers.createText("company", 10, {})
                        ], {
                            overflow: "hidden"
                        })
                    ], {
                        borderBottom: `1px solid ${palette.background6}`,
                        paddingBottom: "5px",
                        gap: "5px"
                    }),
                    await this.createPairsLayout(templateHelpers, palette, pairs),
                    await this.createButtonsLayout(templateHelpers, palette, buttons)
                ], {
                    padding: "10px",
                    gap: "15px",
                    flex: "1"
                }),
                data: {
                    picData: picData ?? this.getThemedIcon("contact", palette),
                    displayName: contact.displayName ?? "",
                    ...this.mapPairsToData(pairs),
                    callTitle: "Call",
                    callImage: this.getThemedIcon("call", palette),
                    emailTitle: "Outlook E-mail",
                    emailImage: this.getThemedIcon("email", palette),
                    calendarTitle: "Outlook Calendar",
                    calendarImage: this.getThemedIcon("calendar", palette)
                }
            }
        };
    }
    /**
     * Create a result to display a message.
     * @param templateHelpers To help with creating templates.
     * @param palette The current palette.
     * @param message The message data.
     * @returns The message template.
     */
    async createMessageResult(templateHelpers, palette, message) {
        const pairs = [];
        if (message.sender?.emailAddress?.name ?? message.sender?.emailAddress?.address) {
            pairs.push({
                label: "From",
                value: message.sender.emailAddress?.name ?? message.sender.emailAddress?.address ?? ""
            });
        }
        if (message.receivedDateTime) {
            pairs.push({
                label: "Received",
                value: new Date(message.receivedDateTime).toLocaleString()
            });
        }
        if (message.bodyPreview) {
            pairs.push({
                label: "Preview",
                value: this.sanitizeString(message.bodyPreview),
                wide: true
            });
        }
        const buttons = [
            {
                titleKey: "openTitle",
                action: Microsoft365Integration._ACTION_OPEN,
                imageKey: "openImage",
                imageAltText: "Open"
            }
        ];
        return {
            key: `${this._definition?.id}-${message.id}`,
            score: this.objectTypeToOrder("Message"),
            title: message.subject ?? "Untitled Message",
            label: "Message",
            icon: this.getThemedIcon("email", palette),
            actions: [
                {
                    name: Microsoft365Integration._ACTION_OPEN,
                    hotkey: "Enter"
                }
            ],
            data: {
                providerId: this._definition?.id,
                objType: "Message",
                obj: message,
                url: message.webLink
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Custom,
            templateContent: {
                layout: await templateHelpers.createContainer("column", [
                    await templateHelpers.createContainer("row", [await templateHelpers.createTitle("subject")], {
                        borderBottom: `1px solid ${palette.background6}`,
                        paddingBottom: "5px",
                        gap: "5px",
                        overflow: "hidden"
                    }),
                    await this.createPairsLayout(templateHelpers, palette, pairs),
                    await this.createButtonsLayout(templateHelpers, palette, buttons)
                ], {
                    padding: "10px",
                    gap: "15px",
                    flex: "1"
                }),
                data: {
                    subject: message.subject ?? "No Subject",
                    ...this.mapPairsToData(pairs),
                    openTitle: "Open Outlook",
                    openImage: this.getThemedIcon("outlook", palette)
                }
            }
        };
    }
    /**
     * Create a result template for event.
     * @param templateHelpers To help with creating templates.
     * @param palette The current palette.
     * @param event The event data.
     * @returns The event template.
     */
    async createEventResult(templateHelpers, palette, event) {
        if (this._ms365Connection) {
            const batchRequests = [`/me/events/${event.id}`];
            try {
                this._logger?.info("Graph API Batch Request", {
                    photo: batchRequests[0]
                });
                const response = await this._ms365Connection.executeApiRequest("/v1.0/$batch", "POST", {
                    requests: batchRequests.map((r, idx) => ({
                        id: (idx + 1).toString(),
                        method: "GET",
                        url: r
                    }))
                });
                const eventResponse = response.data?.responses.find((r) => r.id === "1");
                if (eventResponse?.status === 200) {
                    event = {
                        ...event,
                        ...eventResponse.body
                    };
                }
                else {
                    this._logger?.error("Failed getting event", eventResponse?.status, eventResponse?.body);
                }
            }
            catch (err) {
                this._logger?.error("Failed performing API batch request", err);
            }
        }
        const pairs = [];
        if (event.start?.dateTime) {
            pairs.push({
                label: "Start",
                value: new Date(event.start?.dateTime).toLocaleString()
            });
        }
        if (event.end?.dateTime) {
            pairs.push({
                label: "End",
                value: new Date(event.end?.dateTime).toLocaleString()
            });
        }
        if (event.bodyPreview) {
            pairs.push({
                label: "Preview",
                value: this.sanitizeString(event.bodyPreview),
                wide: true
            });
        }
        const buttons = [
            {
                titleKey: "openTitle",
                action: Microsoft365Integration._ACTION_OPEN,
                imageKey: "openImage",
                imageAltText: "Open"
            }
        ];
        return {
            key: `${this._definition?.id}-${event.id}`,
            score: this.objectTypeToOrder("Event"),
            title: event.subject ?? "Untitled Event",
            label: "Event",
            icon: this.getThemedIcon("calendar", palette),
            actions: [
                {
                    name: Microsoft365Integration._ACTION_OPEN,
                    hotkey: "Enter"
                }
            ],
            data: {
                providerId: this._definition?.id,
                objType: "Event",
                obj: event,
                url: event.webLink
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Custom,
            templateContent: {
                layout: await templateHelpers.createContainer("column", [
                    await templateHelpers.createContainer("row", [await templateHelpers.createTitle("subject")], {
                        borderBottom: `1px solid ${palette.background6}`,
                        paddingBottom: "5px",
                        gap: "5px",
                        overflow: "hidden"
                    }),
                    await this.createPairsLayout(templateHelpers, palette, pairs),
                    await this.createButtonsLayout(templateHelpers, palette, buttons)
                ], {
                    padding: "10px",
                    gap: "15px",
                    flex: "1"
                }),
                data: {
                    subject: event.subject ?? "Untitled Event",
                    ...this.mapPairsToData(pairs),
                    openTitle: "Open Outlook",
                    openImage: this.getThemedIcon("outlook", palette)
                }
            }
        };
    }
    /**
     * Create a result for a chat message.
     * @param templateHelpers To help with creating templates.
     * @param palette The current palette.
     * @param chatMessage The chat message data.
     * @returns The chat message template.
     */
    async createChatMessageResult(templateHelpers, palette, chatMessage) {
        if (this._ms365Connection) {
            try {
                const batchRequests = [`/chats/${chatMessage.chatId}/messages/${chatMessage.etag}`];
                this._logger?.info("Graph API Batch Request", {
                    photo: batchRequests[0]
                });
                const response = await this._ms365Connection.executeApiRequest("/v1.0/$batch", "POST", {
                    requests: batchRequests.map((r, idx) => ({
                        id: (idx + 1).toString(),
                        method: "GET",
                        url: r
                    }))
                });
                const chatMessageResponse = response.data?.responses.find((r) => r.id === "1");
                if (chatMessageResponse?.status === 200) {
                    chatMessage = {
                        ...chatMessage,
                        ...chatMessageResponse.body,
                        summary: chatMessageResponse.body.summary ?? chatMessage.summary
                    };
                }
                else {
                    this._logger?.error("Failed getting event", chatMessageResponse?.status, chatMessageResponse?.body);
                }
            }
            catch (err) {
                this._logger?.error("Failed performing API batch request", err);
            }
        }
        const pairs = [];
        if (chatMessage.lastModifiedDateTime) {
            pairs.push({
                label: "Date/Time",
                value: new Date(chatMessage.lastModifiedDateTime).toLocaleString()
            });
        }
        if (chatMessage.from?.user?.displayName) {
            pairs.push({
                label: "From",
                value: chatMessage.from.user.displayName
            });
        }
        if (chatMessage.body?.content) {
            pairs.push({
                label: "Preview",
                value: this.sanitizeString(chatMessage.body?.content),
                wide: true
            });
        }
        const buttons = [
            {
                titleKey: "openTitle",
                action: Microsoft365Integration._ACTION_TEAMS_CHAT,
                imageKey: "openImage",
                imageAltText: "Open"
            }
        ];
        return {
            key: `${this._definition?.id}-${chatMessage.id}`,
            score: this.objectTypeToOrder("ChatMessage"),
            title: chatMessage.summary ?? "Untitled Chat Message",
            label: "Chat Message",
            icon: this.getThemedIcon("chat", palette),
            actions: [
                {
                    name: Microsoft365Integration._ACTION_TEAMS_CHAT,
                    hotkey: "Enter"
                }
            ],
            data: {
                providerId: this._definition?.id,
                objType: "ChatMessage",
                obj: chatMessage,
                url: chatMessage.webUrl,
                chatId: chatMessage.chatId,
                messageId: chatMessage.id
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Custom,
            templateContent: {
                layout: await templateHelpers.createContainer("column", [
                    await templateHelpers.createContainer("row", [await templateHelpers.createTitle("summary")], {
                        borderBottom: `1px solid ${palette.background6}`,
                        paddingBottom: "5px",
                        gap: "5px",
                        overflow: "hidden"
                    }),
                    await this.createPairsLayout(templateHelpers, palette, pairs),
                    await this.createButtonsLayout(templateHelpers, palette, buttons)
                ], {
                    padding: "10px",
                    gap: "15px",
                    flex: "1"
                }),
                data: {
                    summary: chatMessage.summary ?? "Untitled Chat Message",
                    ...this.mapPairsToData(pairs),
                    openTitle: "Open Chat Message",
                    openImage: this.getThemedIcon("teams", palette)
                }
            }
        };
    }
    /**
     * Create the result for a team.
     * @param templateHelpers To help with creating templates.
     * @param palette The current palette.
     * @param team The team data.
     * @returns The team result template.
     */
    async createTeamResult(templateHelpers, palette, team) {
        const teamMembers = team.id ? await this.getTeamMembers(team.id) : [];
        const pairs = [];
        const urls = {};
        if (team.channels?.length) {
            pairs.push({
                label: "Channel List",
                links: team.channels?.map((c) => c.displayName ?? "")
            });
            for (let i = 0; i < team.channels.length; i++) {
                urls[`Channel List_link_${i}`] = team.channels[i].webUrl ?? "";
            }
        }
        if (teamMembers.length) {
            const userPhotos = await this.getUserPhotos(teamMembers, 16);
            pairs.push({
                label: "Member List",
                srcs: userPhotos
            });
        }
        if (team.description) {
            pairs.push({
                label: "Description",
                value: team.description,
                wide: true
            });
        }
        const buttons = [
            {
                titleKey: "openTitle",
                action: Microsoft365Integration._ACTION_TEAMS_CALL,
                imageKey: "openImage",
                imageAltText: "Open"
            },
            {
                titleKey: "emailTitle",
                action: Microsoft365Integration._ACTION_OUTLOOK_EMAIL,
                imageKey: "emailImage",
                imageAltText: "Email"
            },
            {
                titleKey: "meetingTitle",
                action: Microsoft365Integration._ACTION_TEAMS_MEETING,
                imageKey: "meetingImage",
                imageAltText: "Meeting"
            },
            {
                titleKey: "chatTitle",
                action: Microsoft365Integration._ACTION_TEAMS_CHAT,
                imageKey: "chatImage",
                imageAltText: "Chat"
            }
        ];
        return {
            key: `${this._definition?.id}-${team.id}`,
            score: this.objectTypeToOrder("Team"),
            title: team.displayName ?? "Untitled Team",
            label: "Team",
            icon: this.getThemedIcon("team", palette),
            actions: [
                {
                    name: Microsoft365Integration._ACTION_TEAMS_CALL,
                    hotkey: "Enter"
                }
            ],
            data: {
                providerId: this._definition?.id,
                objType: "Team",
                obj: team,
                url: team.webUrl,
                urls,
                emails: teamMembers.filter((t) => t.email).map((t) => t.email),
                teamId: team.id
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Custom,
            templateContent: {
                layout: await templateHelpers.createContainer("column", [
                    await templateHelpers.createContainer("row", [await templateHelpers.createTitle("displayName")], {
                        borderBottom: `1px solid ${palette.background6}`,
                        paddingBottom: "5px",
                        gap: "5px",
                        overflow: "hidden"
                    }),
                    await this.createPairsLayout(templateHelpers, palette, pairs),
                    await this.createButtonsLayout(templateHelpers, palette, buttons)
                ], {
                    padding: "10px",
                    gap: "15px",
                    flex: "1"
                }),
                data: {
                    displayName: team.displayName ?? "Untitled Team",
                    ...this.mapPairsToData(pairs),
                    openTitle: "Open Teams",
                    openImage: this.getThemedIcon("teams", palette),
                    emailTitle: "Outlook E-mail",
                    emailImage: this.getThemedIcon("email", palette),
                    meetingTitle: "Teams Meeting",
                    meetingImage: this.getThemedIcon("calendar", palette),
                    chatTitle: "Teams Chat",
                    chatImage: this.getThemedIcon("chat", palette)
                }
            }
        };
    }
    /**
     * Create a result template for a channel.
     * @param templateHelpers To help with creating templates.
     * @param palette The current palette.
     * @param channel The channel data.
     * @returns The channel result template.
     */
    async createChannelResult(templateHelpers, palette, channel) {
        const channelMembers = channel.team?.id && channel?.id ? await this.getChannelMembers(channel.team.id, channel.id) : [];
        const pairs = [];
        if (channel.team.displayName) {
            pairs.push({
                label: "Team",
                value: channel.team.displayName
            });
        }
        if (channelMembers.length) {
            const userPhotos = await this.getUserPhotos(channelMembers, 16);
            pairs.push({
                label: "Member List",
                srcs: userPhotos
            });
        }
        if (channel.description) {
            pairs.push({
                label: "Description",
                value: channel.description,
                wide: true
            });
        }
        const buttons = [
            {
                titleKey: "openTitle",
                action: Microsoft365Integration._ACTION_TEAMS_CALL,
                imageKey: "openImage",
                imageAltText: "Open"
            },
            {
                titleKey: "emailTitle",
                action: Microsoft365Integration._ACTION_OUTLOOK_EMAIL,
                imageKey: "emailImage",
                imageAltText: "Email"
            },
            {
                titleKey: "meetingTitle",
                action: Microsoft365Integration._ACTION_TEAMS_MEETING,
                imageKey: "meetingImage",
                imageAltText: "Meeting"
            },
            {
                titleKey: "chatTitle",
                action: Microsoft365Integration._ACTION_TEAMS_CHAT,
                imageKey: "chatImage",
                imageAltText: "Chat"
            }
        ];
        return {
            key: `${this._definition?.id}-${channel.id}`,
            score: this.objectTypeToOrder("Channel"),
            title: channel.displayName ?? "Untitled Channel",
            label: "Channel",
            icon: this.getThemedIcon("channel", palette),
            actions: [
                {
                    name: Microsoft365Integration._ACTION_TEAMS_CALL,
                    hotkey: "Enter"
                }
            ],
            data: {
                providerId: this._definition?.id,
                objType: "Channel",
                obj: channel,
                url: channel.webUrl,
                emails: channelMembers.filter((m) => m.email).map((m) => m.email),
                teamId: channel.team.id,
                channelId: channel.id
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Custom,
            templateContent: {
                layout: await templateHelpers.createContainer("column", [
                    await templateHelpers.createContainer("row", [await templateHelpers.createTitle("displayName")], {
                        borderBottom: `1px solid ${palette.background6}`,
                        paddingBottom: "5px",
                        gap: "5px",
                        overflow: "hidden"
                    }),
                    await this.createPairsLayout(templateHelpers, palette, pairs),
                    await this.createButtonsLayout(templateHelpers, palette, buttons)
                ], {
                    padding: "10px",
                    gap: "15px",
                    flex: "1"
                }),
                data: {
                    displayName: channel.displayName ?? "Untitled Channel",
                    ...this.mapPairsToData(pairs),
                    openTitle: "Open Teams",
                    openImage: this.getThemedIcon("teams", palette),
                    emailTitle: "Outlook E-mail",
                    emailImage: this.getThemedIcon("email", palette),
                    meetingTitle: "Teams Meeting",
                    meetingImage: this.getThemedIcon("calendar", palette),
                    chatTitle: "Teams Chat",
                    chatImage: this.getThemedIcon("chat", palette)
                }
            }
        };
    }
    /**
     * Create the result template for a drive item.
     * @param templateHelpers To help with creating templates.
     * @param palette The current palette.
     * @param driveItem The drive item data.
     * @returns The result template for the drive item.
     */
    async createFileResult(templateHelpers, palette, driveItem) {
        const pairs = [];
        const urls = {};
        const mimeIcon = this.getMimeIcon(driveItem, palette);
        if (driveItem.createdBy?.user?.displayName) {
            pairs.push({
                label: "Created By",
                value: driveItem.createdBy?.user?.displayName
            });
        }
        if (driveItem.createdDateTime) {
            pairs.push({
                label: "Created On",
                value: new Date(driveItem.createdDateTime).toLocaleString()
            });
        }
        if (driveItem.lastModifiedBy?.user?.displayName) {
            pairs.push({
                label: "Updated By",
                value: driveItem.lastModifiedBy?.user?.displayName
            });
        }
        if (driveItem.lastModifiedDateTime) {
            pairs.push({
                label: "Updated On",
                value: new Date(driveItem.lastModifiedDateTime).toLocaleString()
            });
        }
        const buttons = [
            {
                titleKey: "openTitle",
                action: Microsoft365Integration._ACTION_OPEN,
                imageKey: "openImage",
                imageAltText: "Open"
            }
        ];
        const isFolder = this.driveItemIsFolder(driveItem);
        const typeName = isFolder ? "Folder" : "File";
        return {
            key: `${this._definition?.id}-${driveItem.id}`,
            score: this.objectTypeToOrder("File"),
            title: driveItem.name ?? `Untitled ${typeName}`,
            label: typeName,
            icon: mimeIcon ?? this.getThemedIcon(typeName.toLowerCase(), palette),
            actions: [
                {
                    name: Microsoft365Integration._ACTION_OPEN,
                    hotkey: "Enter"
                }
            ],
            data: {
                providerId: this._definition?.id,
                objType: "File",
                obj: driveItem,
                url: driveItem.webUrl,
                urls
            },
            template: _openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.CLITemplate.Custom,
            templateContent: {
                layout: await templateHelpers.createContainer("column", [
                    await templateHelpers.createContainer("row", [await templateHelpers.createTitle("displayName")], {
                        borderBottom: `1px solid ${palette.background6}`,
                        paddingBottom: "5px",
                        gap: "5px",
                        overflow: "hidden"
                    }),
                    await this.createPairsLayout(templateHelpers, palette, pairs),
                    await this.createButtonsLayout(templateHelpers, palette, buttons)
                ], {
                    padding: "10px",
                    gap: "15px",
                    flex: "1"
                }),
                data: {
                    displayName: driveItem.name ?? "Untitled File",
                    ...this.mapPairsToData(pairs),
                    openTitle: "Open File",
                    openImage: mimeIcon ?? this.getThemedIcon("file", palette)
                }
            }
        };
    }
    /**
     * Get team members for a team.
     * @param teamId The id of the team to get the members.
     * @returns The ActiveDirectory data for the team members.
     */
    async getTeamMembers(teamId) {
        try {
            if (this._ms365Connection) {
                this._logger?.info("Get Team Members Request");
                const response = await this._ms365Connection.executeApiRequest(`/v1.0/teams/${teamId}/members`, "GET");
                this._logger?.info("Get Team Members Response", response.data);
                if (response.data?.value) {
                    return response.data.value;
                }
            }
        }
        catch (err) {
            this._logger?.error("Failed getting team members", err);
        }
        return [];
    }
    /**
     * Get the members of a teams channel.
     * @param teamId The team id.
     * @param channelId The channel id.
     * @returns The ActiveDirectory data for the team channel members.
     */
    async getChannelMembers(teamId, channelId) {
        try {
            if (this._ms365Connection) {
                this._logger?.info("Get Channel Members Request");
                const response = await this._ms365Connection.executeApiRequest(`/v1.0/teams/${teamId}/channels/${channelId}/members`, "GET");
                this._logger?.info("Get Channel Members Response", response.data);
                if (response.data?.value) {
                    return response.data.value;
                }
            }
        }
        catch (err) {
            this._logger?.error("Failed getting channel members", err);
        }
        return [];
    }
    /**
     * Get users photos.
     * @param users The users to get the photos for.
     * @param size The size of the photos.
     * @returns List of urls to the photos.
     */
    async getUserPhotos(users, size) {
        try {
            if (this._ms365Connection) {
                const lookupUsers = users.filter((u) => !this._profileImageCache[u.id ?? ""]);
                if (lookupUsers.length > 0) {
                    const chunkCount = Math.ceil(lookupUsers.length / 20);
                    for (let i = 0; i < chunkCount; i++) {
                        const response = await this._ms365Connection.executeApiRequest("/v1.0/$batch", "POST", {
                            requests: lookupUsers.slice(i * 20, (i + 1) * 20).map((u, idx) => ({
                                id: `photos${idx + 1}`,
                                method: "GET",
                                url: `/users/${u.userId}/photo/$value`
                            }))
                        });
                        if (response.data?.responses) {
                            for (const r of response.data.responses) {
                                const lookupIdx = Number.parseInt(r.id.replace("photos", ""), 10);
                                const user = lookupUsers[lookupIdx - 1];
                                if (user.id) {
                                    let picData;
                                    if (r.status === 200) {
                                        picData = `data:image/jpeg;base64,${r.body}`;
                                    }
                                    else {
                                        picData = this.svgToInline(this.imageProfileNone(size, user.displayName ?? "?"));
                                    }
                                    this._profileImageCache[user.id] = {
                                        data: picData,
                                        added: Date.now()
                                    };
                                }
                            }
                        }
                    }
                }
                // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
                return users.map((u) => u.id && this._profileImageCache[u.id].data).filter(Boolean);
            }
        }
        catch (err) {
            this._logger?.error("Failed getting user photos", err);
        }
        return [];
    }
    /**
     * Map data to template layout.
     * @param pairs The data pairs to map.
     * @returns The mapped data.
     */
    mapPairsToData(pairs) {
        const pairData = {};
        for (const pair of pairs) {
            pairData[`${pair.label}Title`] = pair.label;
            if (pair.value) {
                pairData[pair.label] = this.sanitizeString(pair.value);
            }
            if (pair.links) {
                for (let i = 0; i < pair.links.length; i++) {
                    pairData[`${pair.label}_link_${i}`] = pair.links[i];
                }
            }
            if (pair.srcs) {
                for (let i = 0; i < pair.srcs.length; i++) {
                    pairData[`${pair.label}_src_${i}`] = pair.srcs[i];
                }
            }
        }
        return pairData;
    }
    /**
     * Create the template layout for a pair.
     * @param templateHelpers Template helpers.
     * @param palette The palette.
     * @param pairs The pair to create the entry for.
     * @returns The pair template.
     */
    async createPairsLayout(templateHelpers, palette, pairs) {
        return templateHelpers.createContainer("column", await Promise.all(pairs.map(async (p) => this.createPairLayout(templateHelpers, palette, p))), { gap: "5px", flex: "1" });
    }
    /**
     * Create the pairs layout.
     * @param templateHelpers To help with creating templates.
     * @param palette The current palette.
     * @param pair The pair data.
     * @param pair.label Label for the pair.
     * @param pair.value The value for the pair.
     * @param pair.links Any links to display in the pair.
     * @param pair.srcs Any image sources for the pair.
     * @param pair.wide Display the pair in wide format.
     * @returns The formatted pairs.
     */
    async createPairLayout(templateHelpers, palette, pair) {
        const elements = [
            await templateHelpers.createText(`${pair.label}Title`, 10, {
                color: palette.inputPlaceholder,
                flex: 1
            })
        ];
        if (pair.value) {
            elements.push(await templateHelpers.createText(`${pair.label}`, 10, {
                flex: pair.wide ? 1 : 3,
                display: "flex",
                flexWrap: "wrap",
                justifyContent: pair.wide ? "flex-start" : "flex-end",
                wordBreak: "break-all"
            }));
        }
        if (pair.links?.length) {
            elements.push(await templateHelpers.createContainer("row", await Promise.all(pair.links.map(async (l, idx) => templateHelpers.createLink(`${pair.label}_link_${idx}`, `${Microsoft365Integration._ACTION_OPEN}_${pair.label}_link_${idx}`, 10))), { gap: "5px", flex: 3, justifyContent: "flex-end", flexWrap: "wrap" }));
        }
        if (pair.srcs?.length) {
            elements.push(await templateHelpers.createContainer("row", await Promise.all(pair.srcs.map(async (s, idx) => templateHelpers.createImage(`${pair.label}_src_${idx}`, "Member", {
                width: "16px",
                height: "16px",
                objectFit: "cover",
                borderRadius: "50%"
            }))), { gap: "5px", flex: 3, justifyContent: "flex-end", flexWrap: "wrap" }));
        }
        return templateHelpers.createContainer(pair.wide ? "column" : "row", elements, {
            justifyContent: "space-between",
            gap: pair.wide ? "5px" : "10px"
        });
    }
    /**
     * Create a layout with buttons.
     * @param templateHelpers To help with creating templates.
     * @param palette The current palette.
     * @param buttons The buttons to display.
     * @returns The buttons layout.
     */
    async createButtonsLayout(templateHelpers, palette, buttons) {
        return templateHelpers.createContainer("row", await Promise.all(buttons.map(async (b) => templateHelpers.createButton(_openfin_workspace__WEBPACK_IMPORTED_MODULE_1__.ButtonStyle.Secondary, b.titleKey, b.action, {
            border: "none",
            borderRadius: "50%",
            width: "40px",
            height: "40px",
            padding: "0px",
            justifyContent: "center",
            backgroundColor: palette.background2
        }, [
            await templateHelpers.createImage(b.imageKey, b.imageAltText, {
                width: "16px",
                height: "16px"
            })
        ]))), {
            justifyContent: "space-around",
            gap: "10px"
        });
    }
    /**
     * Create a profile image using initials.
     * @param size The size of the image to create.
     * @param name The name of the user.
     * @returns SVG image.
     */
    imageProfileNone(size, name) {
        return `<svg fill="#DDDDDD" viewBox="0 0 512 512" height="${size}px" width="${size}px" xmlns="http://www.w3.org/2000/svg">
		<style>text{font: bold 350px sans-serif;fill: black;}</style>
		<rect width="512" height="512" />
		<text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">${name[0]}</text>
		</svg>`;
    }
    /**
     * Convert and svg into inline format.
     * @param svg The SVG to convert.
     * @returns The converted image.
     */
    svgToInline(svg) {
        return `data:image/svg+xml;utf8,${svg.replace(/#/g, "%23")}`;
    }
    /**
     * Convert a base64 ID in to url format.
     * @param b64Id The base64 id to convert.
     * @returns The url form of the id.
     */
    base64IdToUrl(b64Id) {
        return b64Id ? b64Id.replace(/\+/g, "_").replace(/\//g, "-") : b64Id;
    }
    /**
     * A basic string sanitize function that removes angle brackets <> from a string.
     * @param content the content to sanitize
     * @returns a string without angle brackets <>
     */
    sanitizeString(content) {
        if (content !== undefined && content !== null && typeof content === "string") {
            return content
                .replace(/<[^>]*>?/gm, "")
                .replace(/&gt;/g, ">")
                .replace(/&lt;/g, "<")
                .replace(/&amp;/g, "&")
                .replace(/&nbsp;/g, " ")
                .replace(/\n\s*\n/g, "\n");
        }
        return content;
    }
    /**
     * Convert the object type to a value for ordering.
     * @param objType The object type.
     * @returns The ordering number.
     */
    objectTypeToOrder(objType) {
        const objTypeOrder = {
            User: 100,
            Contact: 200,
            Message: 300,
            ChatMessage: 400,
            Event: 500,
            Team: 600,
            Channel: 700,
            File: 800
        };
        return ((this._definition?.baseScore ?? Microsoft365Integration._DEFAULT_BASE_SCORE) + objTypeOrder[objType]);
    }
    /**
     * Update the cache and remove any stale data.
     */
    async updateCache() {
        // Cleanup any old cached profile images
        const keys = Object.keys(this._profileImageCache);
        const now = Date.now();
        const ttl = keys.length > 50 ? 30000 : 300000;
        for (const id of keys) {
            if (now - this._profileImageCache[id].added > ttl) {
                delete this._profileImageCache[id];
            }
        }
        // Update the teams and channels
        if (this._ms365Connection && this._cacheCounter % 6 === 0) {
            // Update every 3 minutes
            try {
                const response = await this._ms365Connection.executeApiRequest("/v1.0/me/joinedTeams");
                const joinedTeams = response.data?.value ?? [];
                const channelsForTeam = {};
                if (joinedTeams.length) {
                    const batchChannels = joinedTeams.map((t) => `/teams/${t.id}/channels`);
                    const batchResponses = await this._ms365Connection.executeApiRequest("/v1.0/$batch", "POST", {
                        requests: batchChannels.map((url, idx) => ({
                            id: `TeamChannels-${(idx + 1).toString()}`,
                            method: "GET",
                            url
                        }))
                    });
                    if (batchResponses.data?.responses && Array.isArray(batchResponses.data?.responses)) {
                        for (const batchResponse of batchResponses.data.responses) {
                            if (batchResponse.status === 200) {
                                this._logger?.info(`${batchResponse.id} Response`, batchResponse.body);
                                const channels = batchResponse.body;
                                if (channels.value) {
                                    for (const channel of channels.value) {
                                        // The webUrl for the teams management page needs constructing from the first channel in each team
                                        // we also connect the team to the channels and vice versa
                                        if (channel.webUrl) {
                                            const webUrl = new URL(channel.webUrl);
                                            if (webUrl.searchParams.has("groupId")) {
                                                const groupId = webUrl.searchParams.get("groupId");
                                                const team = joinedTeams.find((t) => t.id === groupId);
                                                if (team?.id) {
                                                    team.webUrl = channel.webUrl;
                                                    channelsForTeam[team.id] = channelsForTeam[team.id] ?? [];
                                                    channelsForTeam[team.id].push(channel);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                this._logger?.error(`${batchResponse.id} Response Failed`, batchResponse.status, batchResponse.body);
                            }
                        }
                    }
                }
                this._teamsAndChannelsCache = joinedTeams.map((t) => ({
                    team: t,
                    channels: channelsForTeam[t.id ?? ""] ?? []
                }));
            }
            catch (err) {
                this._logger?.error("Error retrieving joined teams", err);
            }
        }
        this._cacheCounter++;
    }
    /**
     * Get the icon based on the MIME type for a drive item.
     * @param driveItem The drive item.
     * @param palette The palette for theming.
     * @returns The icons for the drive item.
     */
    getMimeIcon(driveItem, palette) {
        const mimeType = driveItem.file?.mimeType ?? "";
        const filename = driveItem.name ?? "";
        const packageType = driveItem.package?.type ?? "";
        if (mimeType === "application/vnd.openxmlformats-officedocument.wordprocessingml.document" ||
            mimeType === "application/msword" ||
            filename.endsWith(".docx") ||
            filename.endsWith(".doc")) {
            return this._settings?.images.word;
        }
        else if (mimeType === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" ||
            mimeType === "application/vnd.ms-excel" ||
            filename.endsWith(".xlsx") ||
            filename.endsWith(".xls")) {
            return this._settings?.images.excel;
        }
        else if (mimeType === "application/vnd.openxmlformats-officedocument.presentationml.presentation" ||
            mimeType === "application/vnd.ms-powerpoint" ||
            filename.endsWith(".pptx") ||
            filename.endsWith(".ppt")) {
            return this._settings?.images.powerpoint;
        }
        else if (this.driveItemIsImage(driveItem)) {
            if (driveItem.thumbnails && Array.isArray(driveItem.thumbnails) && driveItem.thumbnails.length > 0) {
                const thumbnailSet = driveItem.thumbnails[0];
                if (thumbnailSet?.small ?? thumbnailSet.medium) {
                    return thumbnailSet.small?.url ?? thumbnailSet.medium?.url;
                }
            }
        }
        else if (packageType === "oneNote" || filename.endsWith("onetoc2") || filename.endsWith("one")) {
            return this._settings?.images.onenote;
        }
        else if (this.driveItemIsFolder(driveItem)) {
            return this.getThemedIcon("folder", palette);
        }
    }
    /**
     * Get a theme version of an icon.
     * @param themedIcon The theme icon to them.
     * @param palette The palette to use for theming.
     * @returns The themed icon.
     */
    getThemedIcon(themedIcon, palette) {
        if (!this._settings?.images[themedIcon]) {
            return "";
        }
        const icon = this._settings.images[themedIcon];
        if (icon.startsWith("data:image/svg+xml")) {
            return icon.replace(/rgb\(0,0,0\)/g, palette.textDefault?.replace(/#/g, "%23") ?? "0,0,0");
        }
        return icon;
    }
    /**
     * Check to see if a drive item is folder.
     * @param driveItem The driver item to check.
     * @returns True if the item is a folder.
     */
    driveItemIsFolder(driveItem) {
        return driveItem.file === undefined && driveItem.folder !== undefined;
    }
    /**
     * Check to see if a drive item is an image.
     * @param driveItem The drive item to check.
     * @returns True if the item is an
     */
    driveItemIsImage(driveItem) {
        return (driveItem.file?.mimeType?.startsWith("image/") ??
            driveItem.name?.endsWith(".jpeg") ??
            driveItem.name?.endsWith(".jpg") ??
            driveItem.name?.endsWith(".gif") ??
            driveItem.name?.endsWith(".webp") ??
            driveItem.name?.endsWith(".png") ??
            false);
    }
    /**
     * Format an error to a readable string.
     * @param err The error to format.
     * @returns The formatted error.
     */
    formatError(err) {
        if (err instanceof Error) {
            return err.message;
        }
        else if (typeof err === "string") {
            return err;
        }
        return JSON.stringify(err);
    }
}
/**
 * The default base score for ordering.
 * @internal
 */
Microsoft365Integration._DEFAULT_BASE_SCORE = 500000;
/**
 * The key to use for a call key action.
 * @internal
 */
Microsoft365Integration._ACTION_TEAMS_CALL = "Teams Call";
/**
 * The key to use for a outlook email key action.
 * @internal
 */
Microsoft365Integration._ACTION_OUTLOOK_EMAIL = "Outlook Email";
/**
 * The key to use for a teams meeting key action.
 * @internal
 */
Microsoft365Integration._ACTION_TEAMS_MEETING = "Teams Meeting";
/**
 * The key to use for a outlook event key action.
 * @internal
 */
Microsoft365Integration._ACTION_OUTLOOK_EVENT = "Outlook Event";
/**
 * The key to use for a chat key action.
 * @internal
 */
Microsoft365Integration._ACTION_TEAMS_CHAT = "Teams Chat";
/**
 * The key to use for a call key action.
 * @internal
 */
Microsoft365Integration._ACTION_PHONE_CALL = "Call";
/**
 * The key to use for an open key action.
 * @internal
 */
Microsoft365Integration._ACTION_OPEN = "Open";
/**
 * The key to use for an share contact.
 * @internal
 */
Microsoft365Integration._ACTION_SHARE_CONTACT = "Share Contact";
/**
 * The key to use for a copy key action.
 * @internal
 */
Microsoft365Integration._ACTION_COPY = "Copy JSON to Clipboard";
/**
 * The key to use for a connect key action.
 * @internal
 */
Microsoft365Integration._ACTION_CONNECT = "Connect";
/**
 * The key for the ms 365 filters.
 * @internal
 */
Microsoft365Integration._MS365_FILTERS = "MS365";
/**
 * The url for teams.
 * @internal
 */
Microsoft365Integration._TEAMS_URL = "https://teams.microsoft.com/";
/**
 * The protocol for teams.
 * @internal
 */
Microsoft365Integration._TEAMS_PROTOCOL = "msteams:";


/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		id: moduleId,
/******/ 		loaded: false,
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Flag the module as loaded
/******/ 	module.loaded = true;
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/compat get default export */
/******/ (() => {
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = (module) => {
/******/ 		var getter = module && module.__esModule ?
/******/ 			() => (module['default']) :
/******/ 			() => (module);
/******/ 		__webpack_require__.d(getter, { a: getter });
/******/ 		return getter;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/global */
/******/ (() => {
/******/ 	__webpack_require__.g = (function() {
/******/ 		if (typeof globalThis === 'object') return globalThis;
/******/ 		try {
/******/ 			return this || new Function('return this')();
/******/ 		} catch (e) {
/******/ 			if (typeof window === 'object') return window;
/******/ 		}
/******/ 	})();
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/node module decorator */
/******/ (() => {
/******/ 	__webpack_require__.nmd = (module) => {
/******/ 		module.paths = [];
/******/ 		if (!module.children) module.children = [];
/******/ 		return module;
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
/*!******************************************!*\
  !*** ./client/src/module-entry-point.ts ***!
  \******************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   entryPoints: () => (/* binding */ entryPoints)
/* harmony export */ });
/* harmony import */ var _ms365_integration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ms365-integration */ "./client/src/ms365-integration.ts");

/**
 * This entry point is used by webpack to create a module file which can be consumed
 * by the workspace-platform-starter example.
 */
const entryPoints = {
    integrations: new _ms365_integration__WEBPACK_IMPORTED_MODULE_0__.Microsoft365Integration()
};

})();

const __webpack_exports__entryPoints = __webpack_exports__.entryPoints;
export { __webpack_exports__entryPoints as entryPoints };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,