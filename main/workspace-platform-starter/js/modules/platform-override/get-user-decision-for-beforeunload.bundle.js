const e={platformOverride:new class{async initialize(e,o,n){this._definition=e,this._logger=o("GetUserDecisionForBeforeunload"),this._helpers=n,this._logger.info("Initializing")}async closedown(){this._logger?.info("Closedown")}async getConstructorOverride(e){return o=>{const n=this._definition?.data??{},s=this._logger,t=this._helpers;return class extends o{constructor(){super(),s?.info(`Options passed: ${JSON.stringify(e)} and module data: ${JSON.stringify(n)} with session id: ${t?.sessionId}`)}async getUserDecisionForBeforeUnload(e){if(s?.info("getUserDecisionForBeforeUnload called:",e),e.viewsPreventingUnload.length>0&&t?.getDialogClient){const o=await(t?.getDialogClient());let s="Unsaved content changes",i="You have unsaved changes. Are you sure you want to close?",l="Cancel",a="Close";n?.title&&n.title.trim().length>0&&(s=n.title),n?.message&&n.message.trim().length>0?i=n.message.replace("{CLOSE_TYPE}",e.closeType):"window"===e.closeType?i="You have unsaved changes in your content. Are you sure you want to close this window?":"page"===e.closeType?i="You have unsaved changes in your content. Are you sure you want to close this page?":"view"===e.closeType&&(i="You have unsaved changes. Are you sure you want to close this view?"),n?.cancelButtonLabel&&n.cancelButtonLabel.trim().length>0&&(l=n.cancelButtonLabel),n?.closeButtonLabel&&n.closeButtonLabel.trim().length>0&&(a=n.closeButtonLabel);const r=await(o?.showConfirmation({title:s,message:i,buttons:[{label:l,id:"cancel"},{label:a,id:"close"}]},e.windowId));if(r)return"close"===r.id?{windowShouldClose:!0,viewsToClose:[...e.viewsNotPreventingUnload,...e.viewsPreventingUnload]}:{windowShouldClose:!1,viewsToClose:[]}}return super.getUserDecisionForBeforeUnload(e)}}}}}};export{e as entryPoints};
//# sourceMappingURL=get-user-decision-for-beforeunload.bundle.js.map