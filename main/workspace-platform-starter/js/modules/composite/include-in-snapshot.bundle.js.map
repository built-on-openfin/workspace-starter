{"version":3,"file":"include-in-snapshot.bundle.js","mappings":"AACA,ICwCYA,EDxCRC,EAAsB,CAAC,EEIpB,SAASC,EAAQC,GAEvB,OAAOA,OACR,CCPAF,EAAoBG,EAAI,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXL,EAAoBO,EAAEF,EAAYC,KAASN,EAAoBO,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EN,EAAoBO,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GHyClF,SAAYd,GACX,8BACA,wCACA,0CACA,wCACA,0CACA,0CACA,gDACA,WACA,CATD,CAAYA,IAAAA,EAAsB,KIlC3B,MAAMkB,EAAgE,CAC5EC,QAAS,ICUH,MAmBC,gBAAMC,CACZd,EACAe,EACAC,GAEAC,KAAKC,QAAUH,EAAc,oCAC7BE,KAAKE,SAAWH,CACjB,CAOO,SAAMV,CAAIc,GAChB,MAAMC,EAA8B,CAAC,EA4CrC,OA1CAA,EAAU,uBAAyBC,MAAOC,IACzC,GAAIA,EAAQC,aAAe9B,EAAuB+B,aAAc,CAC/DR,KAAKC,SAASQ,KAAK,wBAAyBH,EAAQI,gBACpD,MAAMC,EAAgBR,EAASS,QAAQC,SAASP,EAAQI,gBAElDI,QADgBH,EAAcI,cAAcC,aAElD,GAAmD,aAA/CF,EAAcG,kBAAkBC,WAA2B,CAC9D,MAAMC,EAAwBL,EAAcG,kBAAkBG,eAE9D,SADMT,EAAcI,cAAcM,cAAc,CAAEC,oBAAoB,KACjE3C,EAAQwC,IAA0BnB,KAAKE,UAAUqB,qBAAsB,CAC3E,MAAMC,QAAmBxB,KAAKE,SAASqB,qBACtCJ,EAAsBM,QACtBnB,EAAQoB,WAAWC,SACnBrB,EAAQoB,WAAWE,qBAEdjB,EAAckB,sBAAsB,CAAEJ,QAASD,GACtD,CACD,CACD,GAGDpB,EAAU,wBAA0BC,MAAOC,IAC1C,GAAIA,EAAQC,aAAe9B,EAAuB+B,aAAc,CAC/DR,KAAKC,SAASQ,KAAK,yBAA0BH,EAAQI,gBACrD,MAAMC,EAAgBR,EAASS,QAAQC,SAASP,EAAQI,gBAElDI,QADgBH,EAAcI,cAAcC,aAElD,GAAmD,aAA/CF,EAAcG,kBAAkBC,WAA2B,CAC9D,MAAMC,EAAwBL,EAAcG,kBAAkBG,eAE9D,SADMT,EAAcI,cAAcM,cAAc,CAAEC,oBAAoB,KACjE3C,EAAQwC,IAA0BnB,KAAKE,UAAUqB,qBAAsB,CAC3E,MAAMC,QAAmBxB,KAAKE,SAASqB,qBACtCJ,EAAsBM,QACtBnB,EAAQoB,WAAWC,SACnBrB,EAAQoB,WAAWE,qBAEdjB,EAAckB,sBAAsB,CAAEJ,QAASD,GACtD,CACD,CACD,GAGMpB,CACR,GDxFA0B,WAAY,IEIN,MAcC,gBAAMjC,CACZd,EACAe,EACAC,GAEAC,KAAKC,QAAUH,EAAc,sCAC9B,CAMO,SAAMT,GACZ,MAAM0C,EAA8B,CAAC,EA0BrC,OAxBAA,EAAc,wBAA0B1B,MACvCF,EACA6B,KAEA,GAA4B,YAAxBA,GAASzB,aAA6B5B,EAAQqD,GAASN,YAAa,CACvE,MAAMJ,EAAqBU,EAAQN,WAAWJ,qBAAsB,EAEpE,OADAtB,KAAKC,SAASQ,KAAK,uBAAwBa,GACpCA,CACR,CACA,OAAO,GAGRS,EAAc,yBAA2B1B,MACxCF,EACA6B,KAEA,GAA4B,YAAxBA,GAASzB,aAA6B5B,EAAQqD,GAASN,YAAa,CACvE,MAAMJ,EAAqBU,EAAQN,WAAWJ,qBAAsB,EAEpE,OADAtB,KAAKC,SAASQ,KAAK,yBAA0Ba,IACrCA,CACT,CACA,OAAO,GAGDS,CACR,W","sources":["webpack://openfin-workspace--workspace-platform-starter/webpack/bootstrap","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/shapes/actions-shapes.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/define property getters","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/hasOwnProperty shorthand","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/include-in-snapshot/index.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/include-in-snapshot/actions.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/include-in-snapshot/conditions.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import type { CustomActionsMap, ToolbarButton, WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport type { ModuleHelpers, ModuleImplementation, ModuleList } from \"./module-shapes\";\n\n/**\n * Definition for an action.\n */\nexport interface Actions<O = unknown> extends ModuleImplementation<O, ActionHelpers> {\n\t/**\n\t * Get the actions from the module.\n\t * @param platform The platform module.\n\t * @returns The map of custom actions.\n\t */\n\tget(platform: WorkspacePlatformModule): Promise<CustomActionsMap>;\n}\n\n/**\n * A list of modules that provide actions that can be used by the platform.\n */\nexport type ActionsProviderOptions = ModuleList;\n\n/**\n * Extended helpers used by action modules.\n */\nexport interface ActionHelpers extends ModuleHelpers {\n\t/**\n\t * Update toolbar buttons.\n\t * @param buttons The list of all buttons.\n\t * @param buttonId The button to update.\n\t * @param replacementButtonId The replacement for the button.\n\t * @returns The updated buttons.\n\t */\n\tupdateToolbarButtons: (\n\t\tbuttons: ToolbarButton[],\n\t\tbuttonId: string,\n\t\treplacementButtonId: string\n\t) => Promise<ToolbarButton[]>;\n}\n\n/**\n * Use this in preference to CustomActionCallerType from workspace-platform to avoid the import of the whole of workspace package in modules.\n */\nexport enum CustomActionCallerType {\n\tCustomButton = \"CustomButton\",\n\tStoreCustomButton = \"StoreCustomButton\",\n\tCustomDropdownItem = \"CustomDropdownItem\",\n\tGlobalContextMenu = \"GlobalContextMenu\",\n\tViewTabContextMenu = \"ViewTabContextMenu\",\n\tPageTabContextMenu = \"PageTabContextMenu\",\n\tSaveButtonContextMenu = \"SaveButtonContextMenu\",\n\tAPI = \"API\"\n}\n","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? (undefined as T) : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import type { ModuleImplementation, ModuleTypes } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { IncludeInSnapshotActionsProvider } from \"./actions\";\nimport { IncludeInSnapshotConditionsProvider } from \"./conditions\";\n\n/**\n * Define the entry points for the module.\n */\nexport const entryPoints: { [type in ModuleTypes]?: ModuleImplementation } = {\n\tactions: new IncludeInSnapshotActionsProvider(),\n\tconditions: new IncludeInSnapshotConditionsProvider()\n};\n","import type {\n\tBrowserCreateWindowRequest,\n\tCustomActionPayload,\n\tCustomActionsMap,\n\tWorkspacePlatformModule\n} from \"@openfin/workspace-platform\";\nimport {\n\tCustomActionCallerType,\n\ttype ActionHelpers,\n\ttype Actions\n} from \"workspace-platform-starter/shapes/actions-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty } from \"workspace-platform-starter/utils\";\n\n/**\n * Implementation for the include in snapshot actions provider.\n */\nexport class IncludeInSnapshotActionsProvider implements Actions {\n\t/**\n\t * The helper methods to use.\n\t */\n\tprivate _helpers?: ActionHelpers;\n\n\t/**\n\t * The logger for displaying information from the module.\n\t * @internal\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ActionHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"IncludeInSnapshotActionsProvider\");\n\t\tthis._helpers = helpers;\n\t}\n\n\t/**\n\t * Get the actions from the module.\n\t * @param platform The platform module.\n\t * @returns The map of custom actions.\n\t */\n\tpublic async get(platform: WorkspacePlatformModule): Promise<CustomActionsMap> {\n\t\tconst actionMap: CustomActionsMap = {};\n\n\t\tactionMap[\"include-in-snapshot\"] = async (payload: CustomActionPayload): Promise<void> => {\n\t\t\tif (payload.callerType === CustomActionCallerType.CustomButton) {\n\t\t\t\tthis._logger?.info(\"Including in snapshot\", payload.windowIdentity);\n\t\t\t\tconst browserWindow = platform.Browser.wrapSync(payload.windowIdentity);\n\t\t\t\tconst options = await browserWindow.openfinWindow.getOptions();\n\t\t\t\tconst createRequest: BrowserCreateWindowRequest = options as BrowserCreateWindowRequest;\n\t\t\t\tif (createRequest.workspacePlatform.windowType !== \"platform\") {\n\t\t\t\t\tconst currentToolbarOptions = createRequest.workspacePlatform.toolbarOptions;\n\t\t\t\t\tawait browserWindow.openfinWindow.updateOptions({ includeInSnapshots: true });\n\t\t\t\t\tif (!isEmpty(currentToolbarOptions) && this._helpers?.updateToolbarButtons) {\n\t\t\t\t\t\tconst newButtons = await this._helpers.updateToolbarButtons(\n\t\t\t\t\t\t\tcurrentToolbarOptions.buttons,\n\t\t\t\t\t\t\tpayload.customData.sourceId as string,\n\t\t\t\t\t\t\tpayload.customData.replacementId as string\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait browserWindow.replaceToolbarOptions({ buttons: newButtons });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tactionMap[\"remove-from-snapshot\"] = async (payload: CustomActionPayload): Promise<void> => {\n\t\t\tif (payload.callerType === CustomActionCallerType.CustomButton) {\n\t\t\t\tthis._logger?.info(\"Removing from snapshot\", payload.windowIdentity);\n\t\t\t\tconst browserWindow = platform.Browser.wrapSync(payload.windowIdentity);\n\t\t\t\tconst options = await browserWindow.openfinWindow.getOptions();\n\t\t\t\tconst createRequest: BrowserCreateWindowRequest = options as BrowserCreateWindowRequest;\n\t\t\t\tif (createRequest.workspacePlatform.windowType !== \"platform\") {\n\t\t\t\t\tconst currentToolbarOptions = createRequest.workspacePlatform.toolbarOptions;\n\t\t\t\t\tawait browserWindow.openfinWindow.updateOptions({ includeInSnapshots: false });\n\t\t\t\t\tif (!isEmpty(currentToolbarOptions) && this._helpers?.updateToolbarButtons) {\n\t\t\t\t\t\tconst newButtons = await this._helpers.updateToolbarButtons(\n\t\t\t\t\t\t\tcurrentToolbarOptions.buttons,\n\t\t\t\t\t\t\tpayload.customData.sourceId as string,\n\t\t\t\t\t\t\tpayload.customData.replacementId as string\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait browserWindow.replaceToolbarOptions({ buttons: newButtons });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn actionMap;\n\t}\n}\n","import type { WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport type {\n\tConditionContextTypes,\n\tConditionMap,\n\tConditions\n} from \"workspace-platform-starter/shapes/conditions-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty } from \"workspace-platform-starter/utils\";\n\n/**\n * Implementation for the include in snapshot conditions provider.\n */\nexport class IncludeInSnapshotConditionsProvider implements Conditions {\n\t/**\n\t * The logger for displaying information from the module.\n\t * @internal\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"IncludeInSnapshotConditionsProvider\");\n\t}\n\n\t/**\n\t * Get the conditions from the module.\n\t * @returns Map of the conditions from the module.\n\t */\n\tpublic async get(): Promise<ConditionMap> {\n\t\tconst conditionsMap: ConditionMap = {};\n\n\t\tconditionsMap[\"included-in-snapshot\"] = async (\n\t\t\tplatform: WorkspacePlatformModule,\n\t\t\tcontext?: ConditionContextTypes\n\t\t): Promise<boolean> => {\n\t\t\tif (context?.callerType === \"browser\" && !isEmpty(context?.customData)) {\n\t\t\t\tconst includeInSnapshots = context.customData.includeInSnapshots ?? true;\n\t\t\t\tthis._logger?.info(\"Included in snapshot\", includeInSnapshots);\n\t\t\t\treturn includeInSnapshots;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\tconditionsMap[\"removed-from-snapshot\"] = async (\n\t\t\tplatform: WorkspacePlatformModule,\n\t\t\tcontext?: ConditionContextTypes\n\t\t): Promise<boolean> => {\n\t\t\tif (context?.callerType === \"browser\" && !isEmpty(context?.customData)) {\n\t\t\t\tconst includeInSnapshots = context.customData.includeInSnapshots ?? true;\n\t\t\t\tthis._logger?.info(\"Removed from snapshot\", !includeInSnapshots);\n\t\t\t\treturn !includeInSnapshots;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\treturn conditionsMap;\n\t}\n}\n"],"names":["CustomActionCallerType","__webpack_require__","isEmpty","value","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","entryPoints","actions","initialize","loggerCreator","helpers","this","_logger","_helpers","platform","actionMap","async","payload","callerType","CustomButton","info","windowIdentity","browserWindow","Browser","wrapSync","createRequest","openfinWindow","getOptions","workspacePlatform","windowType","currentToolbarOptions","toolbarOptions","updateOptions","includeInSnapshots","updateToolbarButtons","newButtons","buttons","customData","sourceId","replacementId","replaceToolbarOptions","conditions","conditionsMap","context"],"sourceRoot":""}