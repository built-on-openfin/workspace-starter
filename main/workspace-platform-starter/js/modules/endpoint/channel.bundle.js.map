{"version":3,"file":"channel.bundle.js","mappings":"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","sources":["webpack://openfin-workspace--workspace-platform-starter/webpack/bootstrap","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/define property getters","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/hasOwnProperty shorthand","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/endpoint/channel/index.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/endpoint/channel/endpoint.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? (undefined as T) : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n","import type { ModuleImplementation, ModuleTypes } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { ChannelEndpoint } from \"./endpoint\";\n\nexport const entryPoints: { [type in ModuleTypes]?: ModuleImplementation } = {\n\tendpoint: new ChannelEndpoint()\n};\n","import type { EndpointDefinition, Endpoint } from \"workspace-platform-starter/shapes/endpoint-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty } from \"workspace-platform-starter/utils\";\n\n/**\n * Channel endpoint.\n */\nexport class ChannelEndpoint implements Endpoint {\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"ChannelEndpoint\");\n\t\tthis._logger.info(\"Was passed the following options\", definition.data);\n\t}\n\n\t/**\n\t * Handle an action sent to the endpoint.\n\t * @param endpointDefinition The definition of the endpoint.\n\t * @param endpointDefinition.channelName The endpoint channel name.\n\t * @param endpointDefinition.actionName The endpoint action name.\n\t * @param endpointDefinition.payload The endpoint payload.\n\t * @param endpointDefinition.wait Wait for a response.\n\t * @param endpointDefinition.uuid The endpoint uuid.\n\t * @param endpointDefinition.logInfo Log information.\n\t * @param endpointDefinition.logWarn Log warnings.\n\t * @param endpointDefinition.logError Log errors.\n\t * @param request The request to process.\n\t * @param request.payload The request payload.\n\t * @returns True if processed.\n\t */\n\tpublic async action(\n\t\tendpointDefinition: EndpointDefinition<{\n\t\t\tchannelName: string;\n\t\t\tactionName: string;\n\t\t\tpayload?: unknown;\n\t\t\twait?: boolean;\n\t\t\tuuid?: string;\n\t\t\tlogInfo?: boolean;\n\t\t\tlogWarn?: boolean;\n\t\t\tlogError?: boolean;\n\t\t}>,\n\t\trequest?: { payload?: unknown }\n\t): Promise<boolean> {\n\t\tif (isEmpty(request)) {\n\t\t\tthis._logger?.warn(`A request is required for this action: ${endpointDefinition.id}. Returning false`);\n\t\t\treturn false;\n\t\t}\n\t\tif (endpointDefinition.type !== \"module\") {\n\t\t\tthis._logger?.warn(\n\t\t\t\t`We only expect endpoints of type module. Unable to perform action: ${endpointDefinition.id}`\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\t\tconst logInfo = endpointDefinition?.options?.logInfo ?? true;\n\t\tconst logWarn = endpointDefinition?.options?.logWarn ?? true;\n\t\tconst logError = endpointDefinition?.options?.logError ?? true;\n\n\t\tif (\n\t\t\tisEmpty(endpointDefinition.options) ||\n\t\t\tisEmpty(endpointDefinition.options.actionName) ||\n\t\t\tisEmpty(endpointDefinition.options.channelName)\n\t\t) {\n\t\t\tif (logWarn) {\n\t\t\t\tthis._logger?.warn(\n\t\t\t\t\t`You need to provide actionName and channelName for endpoint: ${endpointDefinition.id}`\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\tconst channel = await fin.InterApplicationBus.Channel.connect(endpointDefinition.options.channelName, {\n\t\t\t\twait: endpointDefinition.options.wait,\n\t\t\t\tpayload: endpointDefinition.options.payload\n\t\t\t});\n\t\t\tif (\n\t\t\t\t!isEmpty(endpointDefinition.options.uuid) &&\n\t\t\t\tendpointDefinition.options.uuid !== channel.providerIdentity.uuid\n\t\t\t) {\n\t\t\t\tif (logWarn) {\n\t\t\t\t\tthis._logger?.warn(\n\t\t\t\t\t\t`Endpoint Id: ${endpointDefinition.id} has the source running (${endpointDefinition.options.uuid}) but the provider of the channel: ${endpointDefinition.options.channelName} is not coming from the source. Returning false.`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (logInfo) {\n\t\t\t\tthis._logger?.info(`Sending action for endpoint id: ${endpointDefinition.id}`);\n\t\t\t}\n\t\t\tawait channel.dispatch(endpointDefinition.options.actionName, request?.payload);\n\t\t\tawait channel.disconnect();\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tif (logError) {\n\t\t\t\tthis._logger?.error(\n\t\t\t\t\t`Error executing/or connecting to action. Endpoint with id: ${endpointDefinition.id}`,\n\t\t\t\t\terror\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Handle a request response on an endpoint.\n\t * @param endpointDefinition The definition of the endpoint.\n\t * @param endpointDefinition.channelName The endpoint channel name.\n\t * @param endpointDefinition.actionName The endpoint action name.\n\t * @param endpointDefinition.payload The endpoint payload.\n\t * @param endpointDefinition.wait Wait for a response.\n\t * @param endpointDefinition.uuid The endpoint uuid.\n\t * @param endpointDefinition.logInfo Log information.\n\t * @param endpointDefinition.logWarn Log warnings.\n\t * @param endpointDefinition.logError Log errors.\n\t * @param endpointDefinition.default The default object type.\n\t * @param request The request to process.\n\t * @param request.payload The request payload.\n\t * @returns The response to the request, or null of not handled.\n\t */\n\tpublic async requestResponse(\n\t\tendpointDefinition: EndpointDefinition<{\n\t\t\tchannelName: string;\n\t\t\tactionName: string;\n\t\t\tpayload?: unknown;\n\t\t\twait?: boolean;\n\t\t\tuuid?: string;\n\t\t\tlogInfo?: boolean;\n\t\t\tlogWarn?: boolean;\n\t\t\tlogError?: boolean;\n\t\t\tdefault?: \"object\" | \"array\";\n\t\t}>,\n\t\trequest?: { payload?: unknown }\n\t): Promise<unknown> {\n\t\tlet defaultValue: unknown = null;\n\n\t\tif (endpointDefinition.type !== \"module\") {\n\t\t\tthis._logger?.warn(\n\t\t\t\t`We only expect endpoints of type module. Unable to action request/response for: ${endpointDefinition.id}`\n\t\t\t);\n\t\t\treturn defaultValue;\n\t\t}\n\t\tconst logInfo = endpointDefinition?.options?.logInfo ?? true;\n\t\tconst logWarn = endpointDefinition?.options?.logWarn ?? true;\n\t\tconst logError = endpointDefinition?.options?.logError ?? true;\n\n\t\tif (!isEmpty(endpointDefinition?.options?.default)) {\n\t\t\tif (endpointDefinition.options.default === \"array\") {\n\t\t\t\tdefaultValue = [];\n\t\t\t} else if (endpointDefinition.options.default === \"object\") {\n\t\t\t\tdefaultValue = {};\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\tisEmpty(endpointDefinition.options) ||\n\t\t\tisEmpty(endpointDefinition.options.actionName) ||\n\t\t\tisEmpty(endpointDefinition.options.channelName)\n\t\t) {\n\t\t\tif (logWarn) {\n\t\t\t\tthis._logger?.warn(\n\t\t\t\t\t`You need to provide actionName and channelName for endpoint: ${endpointDefinition.id}`\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn defaultValue;\n\t\t}\n\t\ttry {\n\t\t\tconst channel = await fin.InterApplicationBus.Channel.connect(endpointDefinition.options.channelName, {\n\t\t\t\twait: endpointDefinition.options.wait,\n\t\t\t\tpayload: endpointDefinition.options.payload\n\t\t\t});\n\t\t\tif (\n\t\t\t\t!isEmpty(endpointDefinition.options.uuid) &&\n\t\t\t\tendpointDefinition.options.uuid !== channel.providerIdentity.uuid\n\t\t\t) {\n\t\t\t\tif (logWarn) {\n\t\t\t\t\tthis._logger?.warn(\n\t\t\t\t\t\t`Endpoint Id: ${endpointDefinition.id} has the source running (${endpointDefinition.options.uuid}) but the provider of the channel: ${endpointDefinition.options.channelName} is not coming from the source. Returning false.`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn defaultValue;\n\t\t\t}\n\t\t\tif (logInfo) {\n\t\t\t\tthis._logger?.info(`Sending request response for endpoint: ${endpointDefinition.id}`);\n\t\t\t}\n\t\t\tconst response: unknown = await channel.dispatch(\n\t\t\t\tendpointDefinition.options.actionName,\n\t\t\t\trequest?.payload\n\t\t\t);\n\t\t\tawait channel.disconnect();\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tif (logError) {\n\t\t\t\tthis._logger?.error(\n\t\t\t\t\t`Error executing request/response and connecting to endpoint with id: ${endpointDefinition.id}`,\n\t\t\t\t\terror\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn defaultValue;\n\t\t}\n\t}\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","isEmpty","value","entryPoints","endpoint","initialize","loggerCreator","helpers","this","_logger","info","data","action","endpointDefinition","request","warn","id","type","logInfo","options","logWarn","logError","actionName","channelName","channel","fin","InterApplicationBus","Channel","connect","wait","payload","uuid","providerIdentity","dispatch","disconnect","error","requestResponse","defaultValue","default","response"],"sourceRoot":""}