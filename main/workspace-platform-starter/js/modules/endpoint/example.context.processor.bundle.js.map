{"version":3,"file":"example.context.processor.bundle.js","mappings":"AACA,IAAIA,EAAsB,CAAC,ECkCpB,SAASC,EAAcC,GAC7B,OAXM,SAAkBA,GAExB,OAAOA,SAA0D,iBAAVA,CACxD,CAQQC,CAASD,IAAUA,EAAME,OAAOC,OAAS,CACjD,CA6CO,SAASC,EAAeC,GAE9B,YAAeC,IAARD,OAAqBC,EAAkBC,KAAKC,MAAMD,KAAKE,UAAUJ,GACzE,CCpFAP,EAAoBY,EAAI,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXd,EAAoBgB,EAAEF,EAAYC,KAASf,EAAoBgB,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3Ef,EAAoBgB,EAAI,CAACT,EAAKc,IAAUJ,OAAOK,UAAUC,eAAeC,KAAKjB,EAAKc,GCG3E,MAAMI,EAAgE,CAC5EC,SAAU,ICUJ,MAaC,gBAAMC,CACZb,EACAc,EACAC,GAEAC,KAAKC,QAAUH,EAAc,mCAC7BE,KAAKC,QAAQC,KAAK,mCAAoClB,EAAWmB,KAClE,CAQO,qBAAMC,CACZC,EACAC,GAEA,GAAgC,WAA5BD,EAAmBE,KAItB,OAHAP,KAAKC,SAASO,KACb,mFAAmFH,EAAmBI,MAEhG,CAAEC,QAASlC,EAAY8B,GAASI,UAIxC,MAAMC,EAAW,CAAED,QAASlC,EAAY8B,GAASI,UAMjD,GAJAV,KAAKC,SAASC,KACb,2HAG8B,sBAA3BI,GAASI,SAASH,KAA8B,CAC/CF,GAAoBO,SAASC,YAChCb,KAAKC,SAASC,KACb,gBAAgBI,EAAQI,QAAQH,kCAChCD,EAAQI,SAGV,MAAMI,EAAYR,EAAQI,QAAQD,GAClC,GAAIK,GJ7DC1C,MI6DqB0C,EAAUC,KAAO,CAE1C,MAAMC,EAAa,IAAIC,KAAKH,EAAUC,MACjC5C,EAAc2C,EAAUI,OAC5BJ,EAAUI,IAAM,GAAGF,EAAWG,aAE1BhD,EAAc2C,EAAUM,SAC5BN,EAAUM,MAAQ,GAAGJ,EAAWK,WAAa,KAEzClD,EAAc2C,EAAUQ,QAC5BR,EAAUQ,KAAO,GAAGN,EAAWO,iBAE3BpD,EAAc2C,EAAUU,SAC5BV,EAAUU,MAAQ,GAAGR,EAAWS,UAAY,KAExCtD,EAAc2C,EAAUY,OAC5BZ,EAAUY,IAAM,GAAGV,EAAWW,iBAE1BxD,EAAc2C,EAAUc,OAC5Bd,EAAUc,IAAM,GAAGZ,EAAWa,iBAE3BxB,GAAoBO,SAASC,YAChCb,KAAKC,SAASC,KACb,gBAAgBS,EAASD,QAAQH,mCACjCI,EAASD,QAGZ,MACCV,KAAKC,SAASO,KACb,qBAAqBF,EAAQI,QAAQH,iDAGxC,CACA,OAAOI,CACR,W","sources":["webpack://openfin-workspace--workspace-platform-starter/webpack/bootstrap","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/define property getters","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/hasOwnProperty shorthand","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/endpoint/example-context-processor/index.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/endpoint/example-context-processor/endpoint.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? (undefined as T) : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import type { ModuleImplementation, ModuleTypes } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { ExampleContextProcessorEndpoint } from \"./endpoint\";\n\nexport const entryPoints: { [type in ModuleTypes]?: ModuleImplementation } = {\n\tendpoint: new ExampleContextProcessorEndpoint()\n};\n","import type { EndpointDefinition } from \"workspace-platform-starter/shapes/endpoint-shapes\";\nimport type {\n\tContextProcessorEndpoint,\n\tContextToProcess,\n\tProcessedContext\n} from \"workspace-platform-starter/shapes/interopbroker-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty, isStringValue, objectClone } from \"workspace-platform-starter/utils\";\nimport type { ContextProcessorSettings } from \"./shapes\";\n\n/**\n * Example context processor endpoint.\n */\nexport class ExampleContextProcessorEndpoint implements ContextProcessorEndpoint {\n\t/**\n\t * Logged for messages.\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers?: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"ExampleContextProcessorEndpoint\");\n\t\tthis._logger.info(\"Was passed the following options\", definition.data);\n\t}\n\n\t/**\n\t * Takes a context object and returns an enriched version.\n\t * @param endpointDefinition The definition of the endpoint (which is passed by the endpoint provider).\n\t * @param request The request containing the context to process that is passed by the interopbroker.\n\t * @returns The response containing the enriched or original context object.\n\t */\n\tpublic async requestResponse(\n\t\tendpointDefinition: EndpointDefinition<ContextProcessorSettings>,\n\t\trequest: ContextToProcess\n\t): Promise<ProcessedContext> {\n\t\tif (endpointDefinition.type !== \"module\") {\n\t\t\tthis._logger?.warn(\n\t\t\t\t`We only expect endpoints of type module. Unable to action request/response for: ${endpointDefinition.id}`\n\t\t\t);\n\t\t\treturn { context: objectClone(request?.context) };\n\t\t}\n\n\t\t// decouple the request from the response.\n\t\tconst response = { context: objectClone(request?.context) };\n\n\t\tthis._logger?.info(\n\t\t\t\"This is an example of an endpoint that can process a context object that was passed to the broker and needs processing.\"\n\t\t);\n\n\t\tif (request?.context?.type === \"org.dayofinterest\") {\n\t\t\tif (endpointDefinition?.options?.logContext) {\n\t\t\t\tthis._logger?.info(\n\t\t\t\t\t`Context Type ${request.context.type} matched. Incoming context:`,\n\t\t\t\t\trequest.context\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst contextId = request.context.id;\n\t\t\tif (contextId && !isEmpty(contextId.date)) {\n\t\t\t\t// we would do more validation in a real app\n\t\t\t\tconst targetDate = new Date(contextId.date);\n\t\t\t\tif (!isStringValue(contextId.day)) {\n\t\t\t\t\tcontextId.day = `${targetDate.getDate()}`;\n\t\t\t\t}\n\t\t\t\tif (!isStringValue(contextId.month)) {\n\t\t\t\t\tcontextId.month = `${targetDate.getMonth() + 1}`;\n\t\t\t\t}\n\t\t\t\tif (!isStringValue(contextId.year)) {\n\t\t\t\t\tcontextId.year = `${targetDate.getFullYear()}`;\n\t\t\t\t}\n\t\t\t\tif (!isStringValue(contextId.epoch)) {\n\t\t\t\t\tcontextId.epoch = `${targetDate.getTime() / 1000}`;\n\t\t\t\t}\n\t\t\t\tif (!isStringValue(contextId.utc)) {\n\t\t\t\t\tcontextId.utc = `${targetDate.toUTCString()}`;\n\t\t\t\t}\n\t\t\t\tif (!isStringValue(contextId.iso)) {\n\t\t\t\t\tcontextId.iso = `${targetDate.toISOString()}`;\n\t\t\t\t}\n\t\t\t\tif (endpointDefinition?.options?.logContext) {\n\t\t\t\t\tthis._logger?.info(\n\t\t\t\t\t\t`Context Type ${response.context.type} matched. Processed context:`,\n\t\t\t\t\t\tresponse.context\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._logger?.warn(\n\t\t\t\t\t`Unable to process ${request.context.type} as it did not have date as part of the id`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn response;\n\t}\n}\n"],"names":["__webpack_require__","isStringValue","value","isString","trim","length","objectClone","obj","undefined","JSON","parse","stringify","d","exports","definition","key","o","Object","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","call","entryPoints","endpoint","initialize","loggerCreator","helpers","this","_logger","info","data","requestResponse","endpointDefinition","request","type","warn","id","context","response","options","logContext","contextId","date","targetDate","Date","day","getDate","month","getMonth","year","getFullYear","epoch","getTime","utc","toUTCString","iso","toISOString"],"sourceRoot":""}