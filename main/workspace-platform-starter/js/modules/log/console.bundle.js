const o={log:new class{async initialize(o,e,t){this._includeLevels=o.data?.includeLevels??["info","warn","error","debug","trace"]}log(o,e,t,n,...r){this._includeLevels?.includes(t)&&(this.handleGroup(e,o),console[t](n,...r))}stringToColor(o){return`hsl(${[...o].reduce((o,e)=>e.charCodeAt(0)+((o<<5)-o),0)%360}, 95%, 35%)`}handleGroup(o,e){const t=`${o} ${e}`;this._lastGroupIdentity!==t&&(this._lastGroupIdentity=t,this._lastGroupIdentity&&console.groupEnd(),o.length>0&&console.group(`%c${o}%c${e}`,`color: #ffffff; background: ${this.stringToColor(o)}; font-size: 10px; font-weight: bold; padding: 2px 4px; border-radius: 5px`,`color: #ffffff; background: ${this.stringToColor(e)}; font-size: 10px; font-weight: bold; padding: 2px 4px; margin-left: 4px; border-radius: 5px`))}}};export{o as entryPoints};
//# sourceMappingURL=console.bundle.js.map