{"version":3,"file":"console.bundle.js","mappings":"AAGO,MAAMA,EAAgE,CAC5EC,UAAW,ICOL,MAYC,gBAAMC,CACZC,EACAC,EACAC,GAEAC,KAAKC,QAAUH,EAAc,0BAC7BE,KAAKC,QAAQC,KAAK,eAClBF,KAAKC,QAAQC,KAAK,eAAgBH,EAAQI,WAC1C,MAAMC,EAC+B,UAApCP,GAAYQ,MAAMC,cAA4B,QAAUT,GAAYQ,MAAMC,eAAiB,OAC5FN,KAAKO,UAAY,CAACC,EAASC,KAEtBT,KAAKC,SACRD,KAAKC,QAAQG,GAAUI,EAASE,KAAKC,UAAUF,IAGlD,CAMO,qBAAMG,CAAgBH,GACxBT,KAAKO,WACRP,KAAKO,UAAU,0CAA2CE,EAE5D,CAKO,eAAMI,GACRb,KAAKC,SACRD,KAAKC,QAAQC,KAAK,eAEpB,W","sources":["webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/analytics/console/index.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/analytics/console/analytics.ts"],"sourcesContent":["import type { ModuleImplementation, ModuleTypes } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { ConsoleAnalyticsModule } from \"./analytics\";\n\nexport const entryPoints: { [type in ModuleTypes]?: ModuleImplementation } = {\n\tanalytics: new ConsoleAnalyticsModule()\n};\n","import type {\n\tAnalyticsModule,\n\tPlatformAnalyticsEvent\n} from \"workspace-platform-starter/shapes/analytics-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport type { ConsoleAnalyticsOptions } from \"./shapes\";\n\n/**\n * Implement the analytics module using the console.\n */\nexport class ConsoleAnalyticsModule implements AnalyticsModule<ConsoleAnalyticsOptions> {\n\tprivate _logger?: Logger;\n\n\tprivate _logEvent?: (message: string, events: PlatformAnalyticsEvent[]) => void;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<ConsoleAnalyticsOptions>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"ConsoleAnalyticsModule\");\n\t\tthis._logger.info(\"Initialized\");\n\t\tthis._logger.info(\"Session Id: \", helpers.sessionId);\n\t\tconst logLevel =\n\t\t\tdefinition?.data?.eventLogLevel === \"trace\" ? \"debug\" : definition?.data?.eventLogLevel ?? \"info\";\n\t\tthis._logEvent = (message, events): void => {\n\t\t\t// we don't want to trace the function so we log it as debug/verbose\n\t\t\tif (this._logger) {\n\t\t\t\tthis._logger[logLevel](message, JSON.stringify(events));\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Handle Analytics. This example module simple console logs the events. You could batch the events and pass settings (number to batch etc, destination to send events) via the module definition.\n\t * @param events one of more analytic events.\n\t */\n\tpublic async handleAnalytics(events: PlatformAnalyticsEvent[]): Promise<void> {\n\t\tif (this._logEvent) {\n\t\t\tthis._logEvent(\"Received the following analytics events\", events);\n\t\t}\n\t}\n\n\t/**\n\t * Closedown the module. If this module had any cached events it needed to process it could try and flush them here.\n\t */\n\tpublic async closedown?(): Promise<void> {\n\t\tif (this._logger) {\n\t\t\tthis._logger.info(\"closing down\");\n\t\t}\n\t}\n}\n"],"names":["entryPoints","analytics","initialize","definition","loggerCreator","helpers","this","_logger","info","sessionId","logLevel","data","eventLogLevel","_logEvent","message","events","JSON","stringify","handleAnalytics","closedown"],"sourceRoot":""}