var e={d:(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{k:()=>n});const n={contentCreation:new class{async initialize(e,t,n){this._logger=t("ViewPositionContentCreationProvider"),this._settings=e.data,this._helpers=n}async getRules(){return this._settings?.rules??[]}async handleViewCreated(e,t,n,i){if(this._logger?.info("View Created",t,n,i),n>=0&&!i){const e=t.parsedFeatures["view-position"];if(function(e){return null!=e&&"string"==typeof e}(r=e)&&r.trim().length>0&&!function(e){return null==e}(t.viewIdentity)){if("right"===e||"left"===e||"top"===e||"bottom"===e){const n=fin.View.wrapSync(t.viewIdentity),i=await n.getCurrentStack();return await i.createAdjacentStack([t.childOptions],{position:e}),!0}if("stack-left"===e||"stack-right"===e){const n=fin.View.wrapSync(t.viewIdentity),i=await n.getCurrentStack(),r=(await i.getViews()).findIndex((e=>e.name===t.viewIdentity?.name));return await i.addView(t.childOptions,{index:"stack-left"===e?r:r+1}),!0}}}var r;return!1}async handleWindowCreated(e,t,n){this._logger?.info("Window Created",t,n)}async handleBrowserCreated(e,t,n){this._logger?.info("Browser Created",t,n)}async handleBlocked(e,t,n){this._logger?.info("Content Blocked",t,n)}}};var i=t.k;export{i as entryPoints};
//# sourceMappingURL=view-position.bundle.js.map