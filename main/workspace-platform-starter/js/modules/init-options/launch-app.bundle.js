function e(e){return null==e}const t={initOptions:new class{async initialize(e,t,i){this._logger=t("InitOptionsLaunchAppHandler"),this._helpers=i,this._definition=e,this._logger.info("The handler has been loaded")}async action(t,i,n){if(e(i))this._logger?.warn(`Actions passed to the module require a payload to be passed. Requested action: ${t} can not be fulfilled.`);else try{if("launch-app"===t){const t=i?.appId;if(this._logger?.info(`The following appId was passed and requested to launch: ${t}`),!(function(e){return null!=e&&"string"==typeof e}(a=t)&&a.trim().length>0))return void this._logger?.error("The init handler received an appId in the wrong format and is unable to launch it");if(e(this._helpers?.launchApp)||e(this._helpers?.getApps))return void this._logger?.warn(`Unable to launch app with appId: ${t} as a launchApp and getApps (to verify appId) function was not passed to this module via the module helpers.`);const n=await(this._helpers?.getApps()),s=n?.find(e=>e.appId===t);if(e(s))return void this._logger?.warn(`Unable to launch app with appId: ${t} because the app is not listed in the directory.`);const p=this._definition?.data?.supportedManifestTypes;if(Array.isArray(p)&&s.manifestType&&!p.includes(s.manifestType))return void this._logger?.warn(`Unable to launch app with appId: ${t} because a list of supported manifest types have been specified and this type of application isn't in the supported list.`);this._logger?.info(`Requesting the launch of app with appId: ${t}`),await(this._helpers?.launchApp(t))}}catch(e){this._logger?.error(`Error trying to perform action ${t}.`,e)}var a}}};export{t as entryPoints};
//# sourceMappingURL=launch-app.bundle.js.map