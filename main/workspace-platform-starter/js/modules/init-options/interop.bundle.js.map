{"version":3,"file":"interop.bundle.js","mappings":"AACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,KCK3E,SAASI,EAAQC,GAEvB,OAAOA,OACR,C,iBCLO,MAAMC,EAAgE,CAC5EC,YAAa,ICSP,MAYC,gBAAMC,CACZhB,EACAiB,EACAC,GAEAC,KAAKC,QAAUH,EAAc,6BAE7BE,KAAKC,QAAQC,KAAK,8BACnB,CAQO,YAAMC,CACZC,EACAC,EACAC,GAEA,GAAIb,EAAQY,GACXL,KAAKC,SAASM,KACb,kFAAkFH,gCAIpF,IACC,OAAQA,GACP,IAAK,qBACEJ,KAAKQ,YAAYH,GACvB,MAED,IAAK,sBACEL,KAAKS,aAAaJ,GAI3B,CAAE,MAAOK,GACRV,KAAKC,SAASS,MAAM,kCAAkCN,KAAoBM,EAC3E,CACD,CAMQ,iBAAMF,CAAYH,GACzB,MAAMM,EAAeC,IAAIC,QAAQC,YAAYF,IAAIG,GAAGC,SAASC,KAAM,CAAC,GACpEjB,KAAKC,SAASC,KAAK,4CAA4CgB,KAAKC,UAAUd,EAAS,KAAM,aACvFM,EAAaS,WAAWf,EAC/B,CAMQ,kBAAMI,CAAaJ,GAC1B,MAAMM,EAAeC,IAAIC,QAAQC,YAAYF,IAAIG,GAAGC,SAASC,KAAM,CAAC,GAE9DI,SADsBV,EAAaW,oBACAC,MAAMC,GAAUA,EAAMC,KAAOpB,EAAQqB,eACzEjC,EAAQ4B,WACNV,EAAagB,iBAAiBN,EAAmBI,IACvDzB,KAAKC,SAASC,KACb,2CAA2CmB,EAAmBI,gBAAgBP,KAAKC,UAClFd,EAAQC,QACR,KACA,YAGIK,EAAaiB,WAAWvB,EAAQC,SAExC,I","sources":["webpack://openfin-workspace--workspace-platform-starter/webpack/bootstrap","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/define property getters","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/hasOwnProperty shorthand","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/init-options/interop/index.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/init-options/interop/init-options.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? (undefined as T) : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n","import type { ModuleImplementation, ModuleTypes } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { InitOptionsInteropHandler } from \"./init-options\";\n\nexport const entryPoints: { [type in ModuleTypes]?: ModuleImplementation } = {\n\tinitOptions: new InitOptionsInteropHandler()\n};\n","import type {\n\tActionHandlerContext,\n\tInitOptionsHandler,\n\tInitOptionsHandlerOptions\n} from \"workspace-platform-starter/shapes/init-options-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty } from \"workspace-platform-starter/utils\";\nimport type { RaiseIntentPayload, ShareContextPayload } from \"./shapes\";\n\n/**\n * Init options interop handler.\n */\nexport class InitOptionsInteropHandler\n\timplements InitOptionsHandler<InitOptionsHandlerOptions, RaiseIntentPayload | ShareContextPayload>\n{\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"InitOptionsInteropHandler\");\n\t\t// the init function could be passed limits (e.g. only support the following intents or contexts. Only publish to the following context groups etc.)\n\t\tthis._logger.info(\"The handler has been loaded\");\n\t}\n\n\t/**\n\t * Handle the init options action.\n\t * @param requestedAction The requested action.\n\t * @param payload The payload for the action.\n\t * @param context The context calling the action.\n\t */\n\tpublic async action(\n\t\trequestedAction: string,\n\t\tpayload: RaiseIntentPayload | ShareContextPayload | undefined,\n\t\tcontext: ActionHandlerContext\n\t): Promise<void> {\n\t\tif (isEmpty(payload)) {\n\t\t\tthis._logger?.warn(\n\t\t\t\t`Actions passed to the module require a payload to be passed. Requested action: ${requestedAction} can not be fulfilled.`\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tswitch (requestedAction) {\n\t\t\t\tcase \"raise-intent\": {\n\t\t\t\t\tawait this.raiseIntent(payload as RaiseIntentPayload);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"share-context\": {\n\t\t\t\t\tawait this.shareContext(payload as ShareContextPayload);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis._logger?.error(`Error trying to perform action ${requestedAction}.`, error);\n\t\t}\n\t}\n\n\t/**\n\t * Raise an intent.\n\t * @param payload The payload to send.\n\t */\n\tprivate async raiseIntent(payload: RaiseIntentPayload): Promise<void> {\n\t\tconst brokerClient = fin.Interop.connectSync(fin.me.identity.uuid, {});\n\t\tthis._logger?.info(`Received intent to raise. Intent Request ${JSON.stringify(payload, null, 4)}.`);\n\t\tawait brokerClient.fireIntent(payload);\n\t}\n\n\t/**\n\t * Share context.\n\t * @param payload The payload to share.\n\t */\n\tprivate async shareContext(payload: ShareContextPayload): Promise<void> {\n\t\tconst brokerClient = fin.Interop.connectSync(fin.me.identity.uuid, {});\n\t\tconst contextGroups = await brokerClient.getContextGroups();\n\t\tconst targetContextGroup = contextGroups.find((group) => group.id === payload.contextGroup);\n\t\tif (!isEmpty(targetContextGroup)) {\n\t\t\tawait brokerClient.joinContextGroup(targetContextGroup.id);\n\t\t\tthis._logger?.info(\n\t\t\t\t`Received context to send. Context Group ${targetContextGroup.id}. Context: ${JSON.stringify(\n\t\t\t\t\tpayload.context,\n\t\t\t\t\tnull,\n\t\t\t\t\t4\n\t\t\t\t)}`\n\t\t\t);\n\t\t\tawait brokerClient.setContext(payload.context);\n\t\t}\n\t}\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","isEmpty","value","entryPoints","initOptions","initialize","loggerCreator","helpers","this","_logger","info","action","requestedAction","payload","context","warn","raiseIntent","shareContext","error","brokerClient","fin","Interop","connectSync","me","identity","uuid","JSON","stringify","fireIntent","targetContextGroup","getContextGroups","find","group","id","contextGroup","joinContextGroup","setContext"],"sourceRoot":""}