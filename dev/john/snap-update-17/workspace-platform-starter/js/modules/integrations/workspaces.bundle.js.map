{"version":3,"file":"workspaces.bundle.js","mappings":"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","sources":["webpack://openfin-workspace--workspace-platform-starter/webpack/bootstrap","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/define property getters","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/hasOwnProperty shorthand","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/shapes/favorite-shapes.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/integrations/workspaces/integration.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/integrations/workspaces/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import type { PlatformStorageMetadata } from \"./platform-shapes\";\n\n/**\n * Favorite type for App.\n */\nexport const FAVORITE_TYPE_NAME_APP = \"app\";\n\n/**\n * Favorite type for Workspace.\n */\nexport const FAVORITE_TYPE_NAME_WORKSPACE = \"workspace\";\n\n/**\n * Favorite type for Page.\n */\nexport const FAVORITE_TYPE_NAME_PAGE = \"page\";\n\n/**\n * Favorite type for Query.\n */\nexport const FAVORITE_TYPE_NAME_QUERY = \"query\";\n\n/**\n * Names for all the favorite types.\n */\nexport type FavoriteTypeNames =\n\t| typeof FAVORITE_TYPE_NAME_APP\n\t| typeof FAVORITE_TYPE_NAME_WORKSPACE\n\t| typeof FAVORITE_TYPE_NAME_PAGE\n\t| typeof FAVORITE_TYPE_NAME_QUERY;\n\n/**\n * Options for the favorite provider.\n */\nexport interface FavoriteProviderOptions {\n\t/**\n\t * Is the provider enabled, defaults to true.\n\t */\n\tenabled?: boolean;\n\n\t/**\n\t * The icon that should be used if you want to indicate this is a favorite action\n\t */\n\tfavoriteIcon: string;\n\n\t/**\n\t * The icon to use to indicate that this favorite can be unset\n\t */\n\tunfavoriteIcon: string;\n\n\t/**\n\t * What commands should integrations check for if they intent to support the display of favorites\n\t */\n\tfavoriteCommand?: string;\n\n\t/**\n\t * The connection provider can have actions registered against it from the platform. This provides a default list of\n\t * actions that connections should be able to use if actions are enabled for that connection.\n\t */\n\tsupportedFavoriteTypes?: FavoriteTypeNames[];\n}\n\n/**\n * When an entry is made it represents a type supported by this platform. This can be used to lookup and launch the thing this entry refers to.\n */\nexport interface FavoriteEntry {\n\t/**\n\t * A unique guid to represent this favorite entry so that it can be updated or removed\n\t */\n\tid: string;\n\n\t/**\n\t * The id for the favorite type this entry represents\n\t */\n\ttypeId: string;\n\n\t/**\n\t * What type of favorite entry does this entry represent\n\t */\n\ttype: FavoriteTypeNames;\n\n\t/**\n\t * The timestamp for the entry.\n\t */\n\ttimestamp?: Date;\n\n\t/**\n\t * Does this favorite have a suggested label that can be used to avoid a lookup\n\t */\n\tlabel?: string;\n\n\t/**\n\t * Does this favorite have a suggested icon that can be used to avoid a lookup\n\t */\n\ticon?: string;\n}\n\n/**\n * Info to return to interested parties to help them support favorites\n */\nexport interface FavoriteInfo {\n\t/**\n\t * The path to an icon that can be used to indicate the ability to favorite\n\t */\n\tfavoriteIcon?: string;\n\t/**\n\t * The path to an icon that can be used to indicate the ability to remove this favorite\n\t */\n\tunfavoriteIcon?: string;\n\t/**\n\t * A command that supporting modules should listen for if they are to display favorites that fall under them\n\t */\n\tcommand?: string;\n\t/**\n\t * What types of favorite item are supported on this platform, this also determines the ordering in the dock menu.\n\t */\n\tenabledTypes?: FavoriteTypeNames[];\n\t/**\n\t * Is favorite support enabled on this platform.\n\t */\n\tisEnabled: boolean;\n}\n\n/**\n * A client that can be used to provide access to some or all of the favorite functionality\n */\nexport interface FavoriteClient {\n\t/**\n\t * The ability to request supporting information about whether favorites are initialized for the platform and supporting information.\n\t * @returns Supporting information.\n\t */\n\tgetInfo(): FavoriteInfo;\n\t/**\n\t * The ability to request all (or some if by type) of the saved favorites\n\t * @param byType the type of saved favorite you are looking for\n\t * @returns An array of saved favorites or an empty array if it was unable to get any back\n\t */\n\tgetSavedFavorites(byType?: FavoriteTypeNames): Promise<FavoriteEntry[] | undefined>;\n\t/**\n\t * The ability to request a particular saved favorite.\n\t * @param id the id of the favorite you are looking for\n\t * @returns the saved favorite if available or false if it didn't exist\n\t */\n\tgetSavedFavorite(id: string): Promise<FavoriteEntry | undefined>;\n\t/**\n\t * The ability to save a favorite.\n\t * @param favorite the Favorite you wish to save\n\t * @returns whether or not the favorite was saved\n\t */\n\tsetSavedFavorite?(favorite: FavoriteEntry): Promise<boolean>;\n\t/**\n\t * The ability to remove/delete a saved favorite.\n\t * @param id The id of the favorite to delete\n\t * @returns whether or not the favorite was deleted.\n\t */\n\tdeleteSavedFavorite?(id: string): Promise<boolean>;\n}\n\n/**\n * An object that represents a favorite and meta data related to it\n */\nexport interface EndpointFavoriteEntry {\n\t/**\n\t * Information related to the platform providing the payload.\n\t */\n\tmetaData: PlatformStorageMetadata;\n\t/**\n\t * The favorite entry\n\t */\n\tpayload: FavoriteEntry;\n}\n\n/**\n * A request type for the FavoriteEndpoint that gets all saved favorite entries\n */\nexport interface EndpointFavoriteListRequest {\n\t/**\n\t * The id of the platform making the request\n\t */\n\tplatform: string;\n\t/**\n\t * The type if specified should be used to filter the response to only send the entries that are relevant\n\t */\n\tfavoriteType?: FavoriteTypeNames;\n}\n\n/**\n * The response after the request for favorites was fulfilled\n */\nexport interface EndpointFavoriteListResponse {\n\t/**\n\t * The list of favorite entries with information of what platform versions they were originally saved against\n\t */\n\tentries: EndpointFavoriteEntry[];\n}\n\n/**\n * The request for getting a specific favorite entry\n */\nexport interface EndpointFavoriteGetRequest {\n\t/**\n\t * The id of the platform making the request\n\t */\n\tplatform: string;\n\t/**\n\t * The id of the specific entry that has been saved\n\t */\n\tid: string;\n}\n\n/**\n * The response after the request for a specific favorite was fulfilled\n */\nexport type EndpointFavoriteGetResponse = EndpointFavoriteEntry;\n\n/**\n * The request for getting a specific favorite entry\n */\nexport interface EndpointFavoriteSetRequest extends EndpointFavoriteEntry {\n\t/**\n\t * The id of the platform making the request\n\t */\n\tplatform: string;\n\t/**\n\t * The id of the specific entry that is to be set\n\t */\n\tid: string;\n}\n\n/**\n * The request for removing a specific favorite entry\n */\nexport interface EndpointFavoriteRemoveRequest {\n\t/**\n\t * The id of the platform making the request\n\t */\n\tplatform: string;\n\t/**\n\t * The id of the specific entry that is to be removed\n\t */\n\tid: string;\n}\n","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? undefined : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n","import type {\n\tCLIFilter,\n\tCLITemplate,\n\tCustomTemplate,\n\tHomeDispatchedSearchResult,\n\tHomeSearchListenerResponse,\n\tHomeSearchResponse,\n\tHomeSearchResult\n} from \"@openfin/workspace\";\nimport type { Workspace, WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport {\n\tFAVORITE_TYPE_NAME_WORKSPACE,\n\ttype FavoriteClient,\n\ttype FavoriteEntry,\n\ttype FavoriteInfo,\n\ttype FavoriteTypeNames\n} from \"workspace-platform-starter/shapes/favorite-shapes\";\nimport type {\n\tIntegrationHelpers,\n\tIntegrationModule,\n\tIntegrationModuleDefinition\n} from \"workspace-platform-starter/shapes/integrations-shapes\";\nimport type {\n\tFavoriteChangedLifecyclePayload,\n\tWorkspaceChangedLifecyclePayload\n} from \"workspace-platform-starter/shapes/lifecycle-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty, isStringValue, randomUUID } from \"workspace-platform-starter/utils\";\nimport type { WorkspacesSettings } from \"./shapes\";\n\n/**\n * Implement the integration provider for workspaces.\n */\nexport class WorkspacesProvider implements IntegrationModule<WorkspacesSettings> {\n\t/**\n\t * The default base score for ordering.\n\t * @internal\n\t */\n\tprivate static readonly _DEFAULT_BASE_SCORE = 100;\n\n\t/**\n\t * The key to use for opening a workspace.\n\t * @internal\n\t */\n\tprivate static readonly _ACTION_OPEN_WORKSPACE = \"Open Workspace\";\n\n\t/**\n\t * The key to use for deleting a workspace.\n\t * @internal\n\t */\n\tprivate static readonly _ACTION_DELETE_WORKSPACE = \"Delete Workspace\";\n\n\t/**\n\t * The key to use for sharing a workspace.\n\t * @internal\n\t */\n\tprivate static readonly _ACTION_SHARE_WORKSPACE = \"Share Workspace\";\n\n\t/**\n\t * The key to use for saving a workspace.\n\t * @internal\n\t */\n\tprivate static readonly _ACTION_SAVE_WORKSPACE = \"Save Workspace\";\n\n\t/**\n\t * The key to use for a workspace exists.\n\t * @internal\n\t */\n\tprivate static readonly _ACTION_EXISTS_WORKSPACE = \"Workspace Exists\";\n\n\t/**\n\t * The module definition.\n\t * @internal\n\t */\n\tprivate _definition: IntegrationModuleDefinition<WorkspacesSettings> | undefined;\n\n\t/**\n\t * The settings from config.\n\t */\n\tprivate _settings?: WorkspacesSettings;\n\n\t/**\n\t * The settings for the integration.\n\t * @internal\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * The integration helpers.\n\t * @internal\n\t */\n\tprivate _integrationHelpers: IntegrationHelpers | undefined;\n\n\t/**\n\t * The last search response.\n\t */\n\tprivate _lastResponse?: HomeSearchListenerResponse;\n\n\t/**\n\t * The last query.\n\t */\n\tprivate _lastQuery?: string;\n\n\t/**\n\t * The last query min length.\n\t */\n\tprivate _lastQueryMinLength?: number;\n\n\t/**\n\t * The last results.\n\t */\n\tprivate _lastResults?: HomeSearchResult[];\n\n\t/**\n\t * Subscription id for theme-changed lifecycle event.\n\t */\n\tprivate _themeChangedSubscriptionId: string | undefined;\n\n\t/**\n\t * Subscription id for favorite-changed lifecycle event.\n\t */\n\tprivate _favChangedSubscriptionId: string | undefined;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<WorkspacesSettings>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: IntegrationHelpers\n\t): Promise<void> {\n\t\tthis._settings = definition.data;\n\t\tthis._integrationHelpers = helpers;\n\t\tthis._definition = definition;\n\t\tthis._logger = loggerCreator(\"WorkspacesProvider\");\n\n\t\tif (this._integrationHelpers.subscribeLifecycleEvent) {\n\t\t\tthis._integrationHelpers.subscribeLifecycleEvent<WorkspaceChangedLifecyclePayload>(\n\t\t\t\t\"workspace-changed\",\n\t\t\t\tasync (\n\t\t\t\t\tplatform: WorkspacePlatformModule,\n\t\t\t\t\tpayload?: WorkspaceChangedLifecyclePayload\n\t\t\t\t): Promise<void> => {\n\t\t\t\t\tif (payload?.action === \"create\") {\n\t\t\t\t\t\tif (!isEmpty(this._lastQuery) && !this._lastQuery.startsWith(\"/w \")) {\n\t\t\t\t\t\t\tawait this.rebuildResults(platform);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (payload?.action === \"update\") {\n\t\t\t\t\t\tconst lastResult = this._lastResults?.find((res) => res.key === payload.id);\n\t\t\t\t\t\tif (lastResult && payload.workspace) {\n\t\t\t\t\t\t\tlastResult.title = payload.workspace.title;\n\t\t\t\t\t\t\tlastResult.data.workspaceTitle = payload.workspace.title;\n\t\t\t\t\t\t\t(lastResult.templateContent as CustomTemplate).data.title = payload.workspace.title;\n\n\t\t\t\t\t\t\tthis.resultAddUpdate([lastResult]);\n\n\t\t\t\t\t\t\tconst { favoriteClient } = await this.getFavInfo(FAVORITE_TYPE_NAME_WORKSPACE);\n\t\t\t\t\t\t\tif (favoriteClient?.setSavedFavorite) {\n\t\t\t\t\t\t\t\tconst saved = await favoriteClient.getSavedFavorites(FAVORITE_TYPE_NAME_WORKSPACE);\n\t\t\t\t\t\t\t\tconst favorite = await saved?.find((f) => f.typeId === payload.id);\n\t\t\t\t\t\t\t\tif (favorite) {\n\t\t\t\t\t\t\t\t\tfavorite.label = payload.workspace.title;\n\t\t\t\t\t\t\t\t\tawait favoriteClient.setSavedFavorite(favorite);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (payload?.action === \"delete\") {\n\t\t\t\t\t\tthis.resultRemove(payload.id);\n\n\t\t\t\t\t\tconst { favoriteClient } = await this.getFavInfo(FAVORITE_TYPE_NAME_WORKSPACE);\n\t\t\t\t\t\tif (favoriteClient?.deleteSavedFavorite) {\n\t\t\t\t\t\t\tconst saved = await favoriteClient.getSavedFavorites(FAVORITE_TYPE_NAME_WORKSPACE);\n\t\t\t\t\t\t\tconst favorite = await saved?.find((f) => f.typeId === payload.id);\n\t\t\t\t\t\t\tif (favorite) {\n\t\t\t\t\t\t\t\tawait favoriteClient.deleteSavedFavorite(favorite.id);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tthis._themeChangedSubscriptionId = this._integrationHelpers.subscribeLifecycleEvent(\n\t\t\t\t\"theme-changed\",\n\t\t\t\tasync () => {\n\t\t\t\t\tif (this._integrationHelpers?.getPlatform) {\n\t\t\t\t\t\tconst platform: WorkspacePlatformModule = this._integrationHelpers.getPlatform();\n\t\t\t\t\t\tawait this.rebuildResults(platform);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tthis._favChangedSubscriptionId =\n\t\t\t\tthis._integrationHelpers.subscribeLifecycleEvent<FavoriteChangedLifecyclePayload>(\n\t\t\t\t\t\"favorite-changed\",\n\t\t\t\t\tasync (_: unknown, payload?: FavoriteChangedLifecyclePayload) => {\n\t\t\t\t\t\tif (!isEmpty(payload)) {\n\t\t\t\t\t\t\tawait this.updateAppFavoriteButtons(payload);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Close down any resources being used by the module.\n\t * @returns Nothing.\n\t */\n\tpublic async closedown(): Promise<void> {\n\t\tif (this._integrationHelpers?.unsubscribeLifecycleEvent) {\n\t\t\tif (isStringValue(this._themeChangedSubscriptionId)) {\n\t\t\t\tthis._integrationHelpers.unsubscribeLifecycleEvent(this._themeChangedSubscriptionId, \"theme-changed\");\n\t\t\t\tthis._themeChangedSubscriptionId = undefined;\n\t\t\t}\n\n\t\t\tif (isStringValue(this._favChangedSubscriptionId)) {\n\t\t\t\tthis._integrationHelpers.unsubscribeLifecycleEvent(\n\t\t\t\t\tthis._favChangedSubscriptionId,\n\t\t\t\t\t\"favorite-changed\"\n\t\t\t\t);\n\t\t\t\tthis._favChangedSubscriptionId = undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get a list of the static help entries.\n\t * @returns The list of help entries.\n\t */\n\tpublic async getHelpSearchEntries(): Promise<HomeSearchResult[]> {\n\t\tif (this._integrationHelpers && this._settings) {\n\t\t\tconst themeClient = await this._integrationHelpers.getThemeClient();\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tkey: `${this._definition?.id}-help1`,\n\t\t\t\t\tscore: this._definition?.baseScore ?? WorkspacesProvider._DEFAULT_BASE_SCORE,\n\t\t\t\t\ttitle: \"Workspaces\",\n\t\t\t\t\tlabel: \"Help\",\n\t\t\t\t\ticon: await themeClient.themeUrl(this._settings.images.workspace),\n\t\t\t\t\tactions: [],\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tproviderId: this._definition?.id\n\t\t\t\t\t},\n\t\t\t\t\ttemplate: \"Custom\" as CLITemplate.Custom,\n\t\t\t\t\ttemplateContent: await this._integrationHelpers.templateHelpers.createHelp(\n\t\t\t\t\t\t\"Workspaces\",\n\t\t\t\t\t\t[\"Use the workspaces command to save your current layout.\"],\n\t\t\t\t\t\t[\"/w title\"]\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t];\n\t\t}\n\t\treturn [];\n\t}\n\n\t/**\n\t * Get a list of search results based on the query and filters.\n\t * @param query The query to search for.\n\t * @param filters The filters to apply.\n\t * @param lastResponse The last search response used for updating existing results.\n\t * @param options Options for the search query.\n\t * @param options.queryMinLength The minimum length before a query is actioned.\n\t * @param options.queryAgainst The fields in the data to query against.\n\t * @param options.isSuggestion Is the query from a suggestion.\n\t * @returns The list of results and new filters.\n\t */\n\tpublic async getSearchResults(\n\t\tquery: string,\n\t\tfilters: CLIFilter[],\n\t\tlastResponse: HomeSearchListenerResponse,\n\t\toptions: {\n\t\t\tqueryMinLength?: number;\n\t\t\tqueryAgainst?: string[];\n\t\t\tisSuggestion?: boolean;\n\t\t}\n\t): Promise<HomeSearchResponse> {\n\t\tif (this._integrationHelpers?.getPlatform && this._settings) {\n\t\t\tconst themeClient = await this._integrationHelpers.getThemeClient();\n\t\t\tconst platform: WorkspacePlatformModule = this._integrationHelpers.getPlatform();\n\t\t\tconst queryLower = query.toLowerCase();\n\t\t\tconst queryMinLength = options?.queryMinLength ?? 3;\n\n\t\t\tlet workspaces: Workspace[] = await platform.Storage.getWorkspaces();\n\t\t\tlet matchQuery = queryLower;\n\n\t\t\tthis._lastResponse = lastResponse;\n\t\t\tthis._lastQuery = queryLower;\n\t\t\tthis._lastQueryMinLength = queryMinLength;\n\n\t\t\tif (queryLower.startsWith(\"/w \")) {\n\t\t\t\tconst title = queryLower.replace(\"/w \", \"\");\n\n\t\t\t\tconst foundMatch = workspaces.find((entry) => entry.title.toLowerCase() === title.toLowerCase());\n\t\t\t\tif (foundMatch) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresults: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: WorkspacesProvider._ACTION_EXISTS_WORKSPACE,\n\t\t\t\t\t\t\t\tscore: this._definition?.baseScore ?? WorkspacesProvider._DEFAULT_BASE_SCORE,\n\t\t\t\t\t\t\t\ttitle: `Workspace ${foundMatch.title} already exists.`,\n\t\t\t\t\t\t\t\ticon: await themeClient.themeUrl(this._settings.images.workspace),\n\t\t\t\t\t\t\t\tactions: [],\n\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\tproviderId: this._definition?.id,\n\t\t\t\t\t\t\t\t\ttags: [\"workspace\"],\n\t\t\t\t\t\t\t\t\tworkspaceId: foundMatch.workspaceId\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ttemplate: \"Plain\" as CLITemplate.Plain,\n\t\t\t\t\t\t\t\ttemplateContent: undefined\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tresults: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: WorkspacesProvider._ACTION_SAVE_WORKSPACE,\n\t\t\t\t\t\t\tscore: this._definition?.baseScore ?? WorkspacesProvider._DEFAULT_BASE_SCORE,\n\t\t\t\t\t\t\ttitle: `Save Current Workspace as ${title}`,\n\t\t\t\t\t\t\ticon: await themeClient.themeUrl(this._settings.images.workspace),\n\t\t\t\t\t\t\tlabel: \"Suggestion\",\n\t\t\t\t\t\t\tactions: [{ name: \"Save Workspace\", hotkey: \"Enter\" }],\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tproviderId: this._definition?.id,\n\t\t\t\t\t\t\t\ttags: [\"workspace\"],\n\t\t\t\t\t\t\t\tworkspaceId: randomUUID(),\n\t\t\t\t\t\t\t\tworkspaceTitle: title\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttemplate: \"Plain\" as CLITemplate.Plain,\n\t\t\t\t\t\t\ttemplateContent: undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst { favoriteClient, favoriteInfo } = await this.getFavInfo(FAVORITE_TYPE_NAME_WORKSPACE);\n\n\t\t\tif (\n\t\t\t\tfavoriteInfo?.isEnabled &&\n\t\t\t\tisStringValue(favoriteInfo?.command) &&\n\t\t\t\tqueryLower === favoriteInfo.command &&\n\t\t\t\tfavoriteClient\n\t\t\t) {\n\t\t\t\tconst favoriteApps = await favoriteClient.getSavedFavorites(FAVORITE_TYPE_NAME_WORKSPACE);\n\t\t\t\tconst favIds = favoriteApps?.map((f) => f.typeId) ?? [];\n\t\t\t\tworkspaces = workspaces.filter((a) => favIds.includes(a.workspaceId));\n\t\t\t\tmatchQuery = \"\";\n\t\t\t}\n\n\t\t\tconst workspaceResults: HomeSearchResult[] = await this.buildResults(\n\t\t\t\tplatform,\n\t\t\t\tworkspaces,\n\t\t\t\tmatchQuery,\n\t\t\t\tqueryMinLength\n\t\t\t);\n\n\t\t\tthis._lastResults = workspaceResults;\n\n\t\t\treturn {\n\t\t\t\tresults: workspaceResults\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tresults: []\n\t\t};\n\t}\n\n\t/**\n\t * An entry has been selected.\n\t * @param result The dispatched result.\n\t * @param lastResponse The last response.\n\t * @returns True if the item was handled.\n\t */\n\tpublic async itemSelection(\n\t\tresult: HomeDispatchedSearchResult,\n\t\tlastResponse: HomeSearchListenerResponse\n\t): Promise<boolean> {\n\t\tlet handled = false;\n\t\tif (result.action.trigger === \"user-action\") {\n\t\t\tif (result.action.name.endsWith(\"favorite\") && result.data?.workspaceId) {\n\t\t\t\tconst { favoriteClient } = await this.getFavInfo(FAVORITE_TYPE_NAME_WORKSPACE);\n\t\t\t\tif (favoriteClient) {\n\t\t\t\t\tif (result.action.name.startsWith(\"un\")) {\n\t\t\t\t\t\tif (!isEmpty(result.data?.favoriteId) && favoriteClient.deleteSavedFavorite) {\n\t\t\t\t\t\t\tawait favoriteClient.deleteSavedFavorite(result.data.favoriteId);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (favoriteClient.setSavedFavorite) {\n\t\t\t\t\t\tawait favoriteClient.setSavedFavorite({\n\t\t\t\t\t\t\tid: randomUUID(),\n\t\t\t\t\t\t\ttype: FAVORITE_TYPE_NAME_WORKSPACE,\n\t\t\t\t\t\t\ttypeId: result.key,\n\t\t\t\t\t\t\tlabel: result.title,\n\t\t\t\t\t\t\ticon: this._settings?.images.workspace\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\thandled = true;\n\t\t\t\t}\n\t\t\t} else if (this._integrationHelpers?.getPlatform) {\n\t\t\t\tconst data: {\n\t\t\t\t\tworkspaceId?: string;\n\t\t\t\t\tworkspaceTitle?: string;\n\t\t\t\t} = result.data;\n\n\t\t\t\tif (data?.workspaceId) {\n\t\t\t\t\thandled = true;\n\n\t\t\t\t\tif (result.key === WorkspacesProvider._ACTION_SAVE_WORKSPACE) {\n\t\t\t\t\t\t// Remove the save workspace entry\n\t\t\t\t\t\tthis.resultRemove(result.key);\n\n\t\t\t\t\t\tconst platform: WorkspacePlatformModule = this._integrationHelpers.getPlatform();\n\t\t\t\t\t\tconst snapshot = await platform.getSnapshot();\n\t\t\t\t\t\tconst currentWorkspace = await platform.getCurrentWorkspace();\n\t\t\t\t\t\tconst currentMetaData = currentWorkspace?.metadata;\n\n\t\t\t\t\t\tconst workspace = {\n\t\t\t\t\t\t\tworkspaceId: data.workspaceId,\n\t\t\t\t\t\t\ttitle: data.workspaceTitle ?? \"\",\n\t\t\t\t\t\t\tmetadata: currentMetaData,\n\t\t\t\t\t\t\tsnapshot\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tawait platform.Storage.saveWorkspace(workspace);\n\n\t\t\t\t\t\tlet shareEnabled: boolean = false;\n\t\t\t\t\t\tif (this._integrationHelpers?.getShareClient) {\n\t\t\t\t\t\t\tconst shareClient = await this._integrationHelpers.getShareClient();\n\t\t\t\t\t\t\tif (shareClient) {\n\t\t\t\t\t\t\t\tshareEnabled = await shareClient.typeEnabled(\"workspace\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst { favoriteInfo } = await this.getFavInfo(FAVORITE_TYPE_NAME_WORKSPACE);\n\n\t\t\t\t\t\tconst savedWorkspace = await this.getWorkspaceTemplate(\n\t\t\t\t\t\t\tworkspace.workspaceId,\n\t\t\t\t\t\t\tworkspace.title,\n\t\t\t\t\t\t\tshareEnabled,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tfavoriteInfo\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// And add the new one\n\t\t\t\t\t\tthis.resultAddUpdate([savedWorkspace]);\n\t\t\t\t\t} else if (result.key === WorkspacesProvider._ACTION_EXISTS_WORKSPACE) {\n\t\t\t\t\t\t// Do nothing, the user must update the query to give it a different\n\t\t\t\t\t\t// name which will automatically refresh the results\n\t\t\t\t\t} else if (result.action.name === WorkspacesProvider._ACTION_OPEN_WORKSPACE) {\n\t\t\t\t\t\tconst platform: WorkspacePlatformModule = this._integrationHelpers.getPlatform();\n\t\t\t\t\t\tconst workspace = await platform.Storage.getWorkspace(data.workspaceId);\n\t\t\t\t\t\tawait platform.applyWorkspace(workspace);\n\t\t\t\t\t\t// We rebuild the results here as we will now have a new current workspace\n\t\t\t\t\t\t// and we need to change the existing one back to a standard template\n\t\t\t\t\t\tawait this.rebuildResults(platform);\n\t\t\t\t\t} else if (result.action.name === WorkspacesProvider._ACTION_DELETE_WORKSPACE) {\n\t\t\t\t\t\tconst platform = this._integrationHelpers.getPlatform();\n\t\t\t\t\t\tawait platform.Storage.deleteWorkspace(data.workspaceId);\n\t\t\t\t\t\t// Deleting the working will eventually trigger the \"delete\" lifecycle\n\t\t\t\t\t\t// event which will remove it from the result list\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tresult.action.name === WorkspacesProvider._ACTION_SHARE_WORKSPACE &&\n\t\t\t\t\t\tthis._integrationHelpers.getShareClient\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst shareClient = await this._integrationHelpers.getShareClient();\n\t\t\t\t\t\tif (shareClient) {\n\t\t\t\t\t\t\tawait shareClient.share(\"workspace\", { workspaceId: data.workspaceId });\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\thandled = false;\n\t\t\t\t\t\tthis._logger?.warn(`Unrecognized action for workspace selection: ${data.workspaceId}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn handled;\n\t}\n\n\t/**\n\t * Get the template for a workspace.\n\t * @param id The id of the item.\n\t * @param title The title of the workspace.\n\t * @param shareEnabled Is sharing enabled.\n\t * @param isCurrent Is this the current workspace.\n\t * @param favInfo The favorites info if it is enabled.\n\t * @param favoriteId The id of the favorite.\n\t * @returns The home result.\n\t */\n\tprivate async getWorkspaceTemplate(\n\t\tid: string,\n\t\ttitle: string,\n\t\tshareEnabled: boolean,\n\t\tisCurrent: boolean,\n\t\tfavInfo: FavoriteInfo | undefined,\n\t\tfavoriteId?: string\n\t): Promise<HomeSearchResult> {\n\t\tif (this._integrationHelpers && this._settings) {\n\t\t\tconst actions = [\n\t\t\t\t{\n\t\t\t\t\tname: WorkspacesProvider._ACTION_OPEN_WORKSPACE,\n\t\t\t\t\thotkey: \"Enter\"\n\t\t\t\t}\n\t\t\t];\n\t\t\tconst actionButtons: { title: string; action: string }[] = [\n\t\t\t\t{\n\t\t\t\t\ttitle: \"Open\",\n\t\t\t\t\taction: WorkspacesProvider._ACTION_OPEN_WORKSPACE\n\t\t\t\t}\n\t\t\t];\n\t\t\tlet instructions;\n\n\t\t\tif (isCurrent) {\n\t\t\t\tinstructions =\n\t\t\t\t\t\"This is the currently active workspace. You can use the Browser menu to update/rename this workspace\";\n\t\t\t} else {\n\t\t\t\tinstructions = \"Use the buttons below to interact with your saved workspace\";\n\t\t\t\tactions.push({\n\t\t\t\t\tname: WorkspacesProvider._ACTION_DELETE_WORKSPACE,\n\t\t\t\t\thotkey: \"CmdOrCtrl+Shift+D\"\n\t\t\t\t});\n\t\t\t\tactionButtons.push({\n\t\t\t\t\ttitle: \"Delete\",\n\t\t\t\t\taction: WorkspacesProvider._ACTION_DELETE_WORKSPACE\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (shareEnabled) {\n\t\t\t\tactions.push({\n\t\t\t\t\tname: WorkspacesProvider._ACTION_SHARE_WORKSPACE,\n\t\t\t\t\thotkey: \"CmdOrCtrl+Shift+S\"\n\t\t\t\t});\n\t\t\t\tactionButtons.push({\n\t\t\t\t\ttitle: \"Share\",\n\t\t\t\t\taction: WorkspacesProvider._ACTION_SHARE_WORKSPACE\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst themeClient = await this._integrationHelpers.getThemeClient();\n\n\t\t\tconst icon = await themeClient.themeUrl(this._settings.images.workspace);\n\n\t\t\tconst headerButtons: { icon: string; action: string }[] = [];\n\n\t\t\tif (favInfo?.favoriteIcon && favInfo.unfavoriteIcon) {\n\t\t\t\tconst favoriteIcon = await themeClient.themeUrl(\n\t\t\t\t\t!isEmpty(favoriteId) ? favInfo.favoriteIcon : favInfo.unfavoriteIcon\n\t\t\t\t);\n\t\t\t\tif (favoriteIcon) {\n\t\t\t\t\theaderButtons.push({\n\t\t\t\t\t\ticon: favoriteIcon,\n\t\t\t\t\t\taction: !isEmpty(favoriteId) ? \"unfavorite\" : \"favorite\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst layoutData = await this._integrationHelpers.templateHelpers.createLayout(\n\t\t\t\ttitle,\n\t\t\t\ticon,\n\t\t\t\t[await this._integrationHelpers.templateHelpers.createText(\"instructions\")],\n\t\t\t\tactionButtons,\n\t\t\t\theaderButtons\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tkey: id,\n\t\t\t\tscore: this._definition?.baseScore ?? WorkspacesProvider._DEFAULT_BASE_SCORE,\n\t\t\t\ttitle,\n\t\t\t\tlabel: \"Workspace\",\n\t\t\t\ticon,\n\t\t\t\tactions,\n\t\t\t\tdata: {\n\t\t\t\t\tproviderId: this._definition?.id,\n\t\t\t\t\tworkspaceTitle: title,\n\t\t\t\t\tworkspaceId: id,\n\t\t\t\t\ttags: [\"workspace\"],\n\t\t\t\t\tfavoriteId\n\t\t\t\t},\n\t\t\t\ttemplate: \"Custom\" as CLITemplate.Custom,\n\t\t\t\ttemplateContent: {\n\t\t\t\t\tlayout: layoutData.layout,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t...layoutData.data,\n\t\t\t\t\t\tinstructions\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tkey: id,\n\t\t\tscore: this._definition?.baseScore ?? WorkspacesProvider._DEFAULT_BASE_SCORE,\n\t\t\ttitle,\n\t\t\tlabel: \"Workspace\",\n\t\t\tactions: [],\n\t\t\tdata: {\n\t\t\t\tproviderId: this._definition?.id,\n\t\t\t\tworkspaceTitle: title,\n\t\t\t\tworkspaceId: id,\n\t\t\t\ttags: [\"workspace\"]\n\t\t\t},\n\t\t\ttemplate: \"Plain\" as CLITemplate.Plain,\n\t\t\ttemplateContent: undefined\n\t\t};\n\t}\n\n\t/**\n\t * Rebuild the results after color scheme change.\n\t * @param platform The workspace platform.\n\t */\n\tprivate async rebuildResults(platform: WorkspacePlatformModule): Promise<void> {\n\t\tif (this._integrationHelpers && !isEmpty(this._lastQuery) && !isEmpty(this._lastQueryMinLength)) {\n\t\t\tconst workspaces: Workspace[] = await platform.Storage.getWorkspaces();\n\t\t\tconst results = await this.buildResults(\n\t\t\t\tplatform,\n\t\t\t\tworkspaces,\n\t\t\t\tthis._lastQuery,\n\t\t\t\tthis._lastQueryMinLength\n\t\t\t);\n\t\t\tthis.resultAddUpdate(results);\n\t\t}\n\t}\n\n\t/**\n\t * Build the results for the workspaces.\n\t * @param platform The workspace platform.\n\t * @param workspaces The list of workspaces to build the results for.\n\t * @param query The query.\n\t * @param queryMinLength The min query length.\n\t * @returns The list of home search results.\n\t */\n\tprivate async buildResults(\n\t\tplatform: WorkspacePlatformModule,\n\t\tworkspaces: Workspace[],\n\t\tquery: string,\n\t\tqueryMinLength: number\n\t): Promise<HomeSearchResult[]> {\n\t\tlet results: HomeSearchResult[] = [];\n\n\t\tif (this._integrationHelpers && Array.isArray(workspaces)) {\n\t\t\tconst currentWorkspace = await platform.getCurrentWorkspace();\n\t\t\tconst currentWorkspaceId = currentWorkspace?.workspaceId;\n\t\t\tlet shareEnabled: boolean = false;\n\t\t\tif (this._integrationHelpers?.getShareClient) {\n\t\t\t\tconst shareClient = await this._integrationHelpers.getShareClient();\n\t\t\t\tif (shareClient) {\n\t\t\t\t\tshareEnabled = await shareClient.typeEnabled(\"workspace\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst { favoriteClient, favoriteInfo } = await this.getFavInfo(FAVORITE_TYPE_NAME_WORKSPACE);\n\t\t\tlet savedFavorites: FavoriteEntry[] | undefined;\n\n\t\t\tif (favoriteClient) {\n\t\t\t\tsavedFavorites = await favoriteClient.getSavedFavorites(FAVORITE_TYPE_NAME_WORKSPACE);\n\t\t\t}\n\n\t\t\tconst wksProm = workspaces\n\t\t\t\t.filter(\n\t\t\t\t\t(w) =>\n\t\t\t\t\t\tquery.length === 0 || (query.length >= queryMinLength && w.title.toLowerCase().includes(query))\n\t\t\t\t)\n\t\t\t\t.sort((a, b) => a.title.localeCompare(b.title))\n\t\t\t\t.map(async (ws: Workspace) => {\n\t\t\t\t\tconst favoriteId = savedFavorites?.find((f) => f.typeId === ws.workspaceId)?.id;\n\n\t\t\t\t\treturn this.getWorkspaceTemplate(\n\t\t\t\t\t\tws.workspaceId,\n\t\t\t\t\t\tws.title,\n\t\t\t\t\t\tshareEnabled,\n\t\t\t\t\t\tcurrentWorkspaceId === ws.workspaceId,\n\t\t\t\t\t\tfavoriteInfo,\n\t\t\t\t\t\tfavoriteId\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\tresults = await Promise.all(wksProm);\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t * Add or update a result.\n\t * @param results The results to add or update.\n\t */\n\tprivate resultAddUpdate(results: HomeSearchResult[]): void {\n\t\tif (this._lastResults) {\n\t\t\tfor (const result of results) {\n\t\t\t\tconst resultIndex = this._lastResults.findIndex((res) => res.key === result.key);\n\t\t\t\tif (resultIndex >= 0) {\n\t\t\t\t\tthis._lastResults.splice(resultIndex, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tthis._lastResults.push(result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this._lastResponse) {\n\t\t\tthis._lastResponse.respond(results);\n\t\t}\n\t}\n\n\t/**\n\t * Remove a result.\n\t * @param id The id of the item to remove.\n\t */\n\tprivate resultRemove(id: string): void {\n\t\tif (this._lastResults) {\n\t\t\tconst resultIndex = this._lastResults.findIndex((res) => res.key === id);\n\t\t\tif (resultIndex >= 0) {\n\t\t\t\tthis._lastResults.splice(resultIndex, 1);\n\t\t\t}\n\t\t}\n\t\tif (this._lastResponse) {\n\t\t\tthis._lastResponse.revoke(id);\n\t\t}\n\t}\n\n\t/**\n\t * Update the app buttons if the favorites have changed.\n\t * @param payload The payload of the favorite change.\n\t */\n\tprivate async updateAppFavoriteButtons(payload: FavoriteChangedLifecyclePayload): Promise<void> {\n\t\tconst favorite: FavoriteEntry = payload.favorite;\n\n\t\tif (\n\t\t\t!isEmpty(this._lastResponse) &&\n\t\t\tthis._integrationHelpers?.getPlatform &&\n\t\t\t(payload.action === \"set\" || payload.action === \"delete\") &&\n\t\t\t!isEmpty(favorite) &&\n\t\t\tfavorite.type === FAVORITE_TYPE_NAME_WORKSPACE &&\n\t\t\tthis._lastResults\n\t\t) {\n\t\t\tconst { favoriteInfo } = await this.getFavInfo(FAVORITE_TYPE_NAME_WORKSPACE);\n\n\t\t\tif (this._lastQuery === favoriteInfo?.command && payload.action === \"delete\") {\n\t\t\t\tthis._lastResponse.revoke(favorite.typeId);\n\t\t\t} else if (this._lastResults) {\n\t\t\t\tconst lastWorkspace = this._lastResults.find((ws) => ws.key === favorite.typeId);\n\n\t\t\t\tif (!isEmpty(lastWorkspace)) {\n\t\t\t\t\tlet shareEnabled: boolean = false;\n\t\t\t\t\tif (this._integrationHelpers?.getConditionsClient) {\n\t\t\t\t\t\tconst conditionsClient = await this._integrationHelpers.getConditionsClient();\n\t\t\t\t\t\tif (conditionsClient) {\n\t\t\t\t\t\t\tshareEnabled = await conditionsClient.check(\"sharing\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst platform = this._integrationHelpers.getPlatform();\n\t\t\t\t\tconst currentWorkspace = await platform.getCurrentWorkspace();\n\t\t\t\t\tconst currentWorkspaceId = currentWorkspace?.workspaceId;\n\n\t\t\t\t\tconst rebuilt = await this.getWorkspaceTemplate(\n\t\t\t\t\t\tlastWorkspace.key,\n\t\t\t\t\t\tlastWorkspace.title,\n\t\t\t\t\t\tshareEnabled,\n\t\t\t\t\t\tcurrentWorkspaceId === lastWorkspace.key,\n\t\t\t\t\t\tfavoriteInfo,\n\t\t\t\t\t\tpayload.action === \"set\" ? favorite.id : undefined\n\t\t\t\t\t);\n\n\t\t\t\t\tthis._lastResponse.respond([rebuilt]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the favorite info and client if they are enabled.\n\t * @param favoriteTypeNames The type of client to get.\n\t * @returns The favorite info and client.\n\t */\n\tprivate async getFavInfo(\n\t\tfavoriteTypeNames: FavoriteTypeNames\n\t): Promise<{ favoriteClient: FavoriteClient | undefined; favoriteInfo: FavoriteInfo | undefined }> {\n\t\tlet favoriteInfo: FavoriteInfo | undefined;\n\t\tlet favoriteClient: FavoriteClient | undefined;\n\n\t\tif ((this._definition?.data?.favoritesEnabled ?? true) && this._integrationHelpers?.getFavoriteClient) {\n\t\t\tfavoriteClient = await this._integrationHelpers.getFavoriteClient();\n\t\t\tif (favoriteClient) {\n\t\t\t\tfavoriteInfo = favoriteClient.getInfo();\n\t\t\t\tif (favoriteInfo.isEnabled) {\n\t\t\t\t\tconst isSupported = favoriteInfo?.enabledTypes?.includes(favoriteTypeNames) ?? true;\n\t\t\t\t\tif (!isSupported) {\n\t\t\t\t\t\tfavoriteInfo = undefined;\n\t\t\t\t\t\tfavoriteClient = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tfavoriteClient,\n\t\t\tfavoriteInfo\n\t\t};\n\t}\n}\n","import { WorkspacesProvider } from \"./integration\";\n\nexport const entryPoints: { [id: string]: WorkspacesProvider } = {\n\tintegrations: new WorkspacesProvider()\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","FAVORITE_TYPE_NAME_WORKSPACE","isEmpty","value","isStringValue","isString","trim","length","randomUUID","globalThis","crypto","replace","c","rnd","getRandomValues","Uint8Array","Number","toString","WorkspacesProvider","initialize","loggerCreator","helpers","this","_settings","data","_integrationHelpers","_definition","_logger","subscribeLifecycleEvent","async","platform","payload","action","_lastQuery","startsWith","rebuildResults","lastResult","_lastResults","find","res","id","workspace","title","workspaceTitle","templateContent","resultAddUpdate","favoriteClient","getFavInfo","setSavedFavorite","saved","getSavedFavorites","favorite","f","typeId","label","resultRemove","deleteSavedFavorite","_themeChangedSubscriptionId","getPlatform","_favChangedSubscriptionId","_","updateAppFavoriteButtons","closedown","unsubscribeLifecycleEvent","undefined","getHelpSearchEntries","themeClient","getThemeClient","score","baseScore","_DEFAULT_BASE_SCORE","icon","themeUrl","images","actions","providerId","template","templateHelpers","createHelp","getSearchResults","query","filters","lastResponse","options","queryLower","toLowerCase","queryMinLength","workspaces","Storage","getWorkspaces","matchQuery","_lastResponse","_lastQueryMinLength","foundMatch","entry","results","_ACTION_EXISTS_WORKSPACE","tags","workspaceId","_ACTION_SAVE_WORKSPACE","name","hotkey","favoriteInfo","isEnabled","command","favoriteApps","favIds","map","filter","a","includes","workspaceResults","buildResults","itemSelection","result","handled","trigger","endsWith","favoriteId","type","snapshot","getSnapshot","currentWorkspace","getCurrentWorkspace","currentMetaData","metadata","saveWorkspace","shareEnabled","getShareClient","shareClient","typeEnabled","savedWorkspace","getWorkspaceTemplate","_ACTION_OPEN_WORKSPACE","getWorkspace","applyWorkspace","_ACTION_DELETE_WORKSPACE","deleteWorkspace","_ACTION_SHARE_WORKSPACE","share","warn","isCurrent","favInfo","actionButtons","instructions","push","headerButtons","favoriteIcon","unfavoriteIcon","layoutData","createLayout","createText","layout","Array","isArray","currentWorkspaceId","savedFavorites","wksProm","w","sort","b","localeCompare","ws","Promise","all","resultIndex","findIndex","splice","respond","revoke","lastWorkspace","getConditionsClient","conditionsClient","check","rebuilt","favoriteTypeNames","favoritesEnabled","getFavoriteClient","getInfo","enabledTypes","entryPoints","integrations"],"sourceRoot":""}