/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./client/src/preload/preload.common.ts":
/*!**********************************************!*\
  !*** ./client/src/preload/preload.common.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initialize: () => (/* binding */ initialize)
/* harmony export */ });
/* harmony import */ var _openfin_snap_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openfin/snap-sdk */ "../../node_modules/@openfin/snap-sdk/openfin.snap.mjs");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../settings */ "./client/src/settings.ts");


/**
 * Initialize the snap components.
 * @param options The options for initializing the snap provider.
 */
async function initialize(options) {
    const settings = await (0,_settings__WEBPACK_IMPORTED_MODULE_1__.getSettings)();
    const finalOptions = { ...settings, ...options };
    try {
        if (finalOptions.platformId) {
            console.log("Registering Snap with platformId", finalOptions.platformId);
            const server = new _openfin_snap_sdk__WEBPACK_IMPORTED_MODULE_0__.SnapServer(finalOptions.platformId);
            console.log("Enabling debug window:", finalOptions.showDebugWindow ?? false);
            await server.start({ showDebug: finalOptions.showDebugWindow ?? false,
                disableUserUnstick: finalOptions.disableShiftToUnsnap ?? false,
                keyToStick: finalOptions.enableCtrlToSnap ?? false,
                disableGPUAcceleratedDragging: finalOptions.disableGPUDragging ?? false,
                disableBlurDropPreview: finalOptions.disableBlurDropPreview ?? false });
            const app = fin.Application.getCurrentSync();
            await app.on("window-created", async (e) => {
                const win = fin.Window.wrapSync(e);
                const winOptions = await win.getOptions();
                if (!winOptions.includeInSnapshots) {
                    console.log("Window is not registered with Snap because includeInSnapshots is disabled.");
                }
                else {
                    const nativeId = await win.getNativeId();
                    console.log("Registering window with NativeID with Snap", nativeId);
                    await server.registerWindow(win.identity.name, nativeId);
                }
            });
            const hostOptions = (await fin.me.getOptions());
            if (hostOptions.autoShow) {
                console.log("Registering current window with snap");
                await server.registerWindow(fin.me.identity.name, await fin.Window.getCurrentSync().getNativeId());
            }
            else {
                console.log("Current window is not registered with Snap because autoShow is disabled.");
            }
        }
    }
    catch (err) {
        console.error("Error initializing Snap", err);
    }
}


/***/ }),

/***/ "./client/src/settings.ts":
/*!********************************!*\
  !*** ./client/src/settings.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getSettings: () => (/* binding */ getSettings)
/* harmony export */ });
/**
 * Gets settings from the manifest.
 * @param showDebugWindow Whether to enable the debug window regardless of manifest settings.
 * @returns The snap provider options from the manifest.
 */
async function getSettings(showDebugWindow) {
    const app = await fin.Application.getCurrent();
    const manifest = await app.getManifest();
    if (manifest.appAssets?.[0].src === "SNAP_ASSET_URL") {
        console.error("Please request the SNAP_ASSET_URL from OpenFin and update manifest.fin.json before running the sample");
    }
    const settings = await getManifestCustomSettings(manifest);
    settings.snapProvider ??= {};
    if (settings.snapProvider.showDebugWindow === undefined) {
        settings.snapProvider.showDebugWindow = showDebugWindow;
    }
    return settings.snapProvider;
}
/**
 * Read the custom settings from the manifest.fin.json.
 * @param manifest The manifest to load the custom settings from.
 * @returns The custom settings from the manifest.
 */
async function getManifestCustomSettings(manifest) {
    return manifest.customSettings ?? {};
}


/***/ }),

/***/ "../../node_modules/@openfin/snap-sdk/openfin.snap.mjs":
/*!*************************************************************!*\
  !*** ../../node_modules/@openfin/snap-sdk/openfin.snap.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SnapServer: () => (/* binding */ i)
/* harmony export */ });
var e={343:e=>{var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,e.exports.once=function(e,t){return new Promise((function(n,r){function i(n){e.removeListener(t,s),r(n)}function s(){"function"==typeof e.removeListener&&e.removeListener("error",i),n([].slice.call(arguments))}y(e,t,s,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&y(e,"error",t,n)}(e,i,{once:!0})}))},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var a=10;function o(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function p(e,t,n,r){var i,s,a,p;if(o(n),void 0===(s=e._events)?(s=e._events=Object.create(null),e._eventsCount=0):(void 0!==s.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),s=e._events),a=s[t]),void 0===a)a=s[t]=n,++e._eventsCount;else if("function"==typeof a?a=s[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(i=c(e))>0&&a.length>i&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=a.length,p=l,console&&console.warn&&console.warn(p)}return e}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function u(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=l.bind(r);return i.listener=n,r.wrapFn=i,i}function h(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):f(i,i.length)}function d(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function f(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function y(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(s){r.once&&e.removeEventListener(t,i),n(s)}))}}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return c(this)},s.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,s=this._events;if(void 0!==s)i=i&&void 0===s.error;else if(!i)return!1;if(i){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var o=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw o.context=a,o}var c=s[e];if(void 0===c)return!1;if("function"==typeof c)r(c,this,t);else{var p=c.length,l=f(c,p);for(n=0;n<p;++n)r(l[n],this,t)}return!0},s.prototype.addListener=function(e,t){return p(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return p(this,e,t,!0)},s.prototype.once=function(e,t){return o(t),this.on(e,u(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return o(t),this.prependListener(e,u(this,e,t)),this},s.prototype.removeListener=function(e,t){var n,r,i,s,a;if(o(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,s=n.length-1;s>=0;s--)if(n[s]===t||n[s].listener===t){a=n[s].listener,i=s;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,s=Object.keys(n);for(r=0;r<s.length;++r)"removeListener"!==(i=s[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},s.prototype.listeners=function(e){return h(this,e,!0)},s.prototype.rawListeners=function(e){return h(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):d.call(e,t)},s.prototype.listenerCount=d,s.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var s=t[r]={exports:{}};return e[r](s,s.exports,n),s.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var r={};(()=>{n.d(r,{P:()=>t});var e=n(343);class t{constructor(t){if(this.server_id=t,this.emitter=new e.EventEmitter,!fin)throw new Error("OpenFin is not available")}async start(e){try{const e=await fin.System.getRuntimeInfo();"x64"!==e?.architecture&&console.warn(`The architecture of the connected OpenFin runtime is '${e.architecture}' - Window snapping is currently only supported with 64-bit applications. Snapping will be disabled.`)}catch(e){console.warn(`Could not get runtime info: ${e}`)}const t=await fin.System.queryPermissionForCurrentContext("System.launchExternalProcess");if(!t.granted)throw new Error("The 'System.launchExternalProcess' permission is required to launch the Snap server");if(t.rawValue){if(e?.executablePath&&!t.rawValue?.executables?.enabled)throw new Error("The 'System.launchExternalProcess.assets' permission is required to launch the Snap server from an executable path");if(!e?.executablePath&&!t.rawValue?.assets?.enabled)throw new Error("The 'System.launchExternalProcess.assets' permission is required to launch the Snap server from a URL")}if(!e?.executablePath)try{await fin.System.getAppAssetInfo({alias:"openfin-snap"})}catch(e){throw new Error("The 'openfin-snap' asset must be defined in the manifest")}const n=await this.build_command_line(e);let r={alias:"openfin-snap",arguments:n,lifetime:"window"};e?.executablePath&&(r={path:e.executablePath,arguments:n,lifetime:"window"});try{this.snap_identity=await fin.System.launchExternalProcess(r)}catch(e){throw new Error(`Failed to launch the Snap server ${JSON.stringify(e)}`)}return this.connect()}async connect(){this.client=await fin.InterApplicationBus.Channel.connect(`snap-server-core-${this.server_id}`),this.client.register("snap_handshake",(async(e,t)=>{try{await fin.System.registerUsage({type:"adapter-feature",data:{apiVersion:e.version,componentName:"snap-server"}})}catch{console.warn("SnapSDK: Failed to register usage for Snap Server")}}));try{await fin.System.registerUsage({type:"adapter-feature",data:{apiVersion:"0.4.1",componentName:"snap-client"}})}catch{console.warn("SnapSDK: Failed to register usage for Snap Server")}this.client.register("snap_updates",((e,t)=>this.handleSnapEvents(e,t)))}async stop(){if(!this.client)throw new Error("Snap server is not running");await(this.client?.dispatch("snap_api_invoke",{action:"shutdown"}))}async getLayout(){if(!this.client)throw new Error("Snap server is not running");const e=await(this.client?.dispatch("snap_api_invoke",{action:"serialiseLayout"}));return e?.payload.layout}async setLayout(e,t=!0){if(!this.client)throw new Error("Snap server is not running");await(this.client?.dispatch("snap_api_invoke",{action:"deserialiseLayout",payload:{layout:e,reset:t}}))}randomUUID(){return"undefined"!=typeof crypto&&"randomUUID"in crypto&&"function"==typeof crypto.randomUUID?crypto.randomUUID():"10000000-1000-4000-8000-100000000000".replace(/[018]/g,(e=>(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)))}mapClientsToGUID(e){const t=new Map;return e.forEach((e=>{t.set(e.id,this.randomUUID())})),t}replaceStringInSnapshot(e,t,n){const r=e=>{return"string"==typeof e?e===t?n:e:Array.isArray(e)?e.map(r):(null===(i=e)||"object"!=typeof i||Array.isArray(i)||Object.keys(e).forEach((t=>{e[t]=r(e[t])})),e);var i};r(e)}async prepareToApplySnapshot(e){if(void 0===e){this.need_to_reset_layout=!0;await(this.client?.dispatch("snap_api_invoke",{action:"resetAll"}));return}this.need_to_reset_layout=!1;const t=e.snapshot,n=t?.snap?.clients;if(n){const e=this.mapClientsToGUID(n);e?.forEach(((e,n)=>{this.replaceStringInSnapshot(t,n,e)}))}}async decorateSnapshot(e){return{...e,snap:await this.getLayout()}}async applySnapshot(e){e.snap&&await this.setLayout(e.snap,this.need_to_reset_layout)}async launch(e){if(!this.client)throw new Error("Not connected to an Snap server");e.appAssetInfo&&(e.path=await this.getAppAssetExecutablePath({target:e.path,...e.appAssetInfo})),console.log("options: ",e);const t={action:"startProcess",payload:{...e,args:e.args||[]}};if(e.strategy){const{type:n,...r}=e.strategy;t.payload.strategy={type:n,parameters:{...r}}}const n=await(this.client?.dispatch("snap_api_invoke",t));if(n?.payload?.success)return{process_id:n.payload.process_id};throw new Error(`Failed to launch process: ${n?.payload?.error}`)}async registerWindow(e,t){await(this.client?.dispatch("snap_api_invoke",{action:"hookAndRegisterWindow",payload:{clientId:e,windowHandle:t}}))}async enableAutoWindowRegistration(){const e=e=>this.handleNewWindow(e);return await fin.Platform.getCurrentSync().addListener("window-created",e),async()=>{await fin.System.removeListener("window-created",e)}}async attachWindows(e,t,n,r){await(this.client?.dispatch("snap_api_invoke",{action:"attach",payload:{targetClientId:e,toAttachClientId:t,targetSide:n,offset:r}}))}async detachFromGroup(e){await(this.client?.dispatch("snap_api_invoke",{action:"detachFromGroup",payload:{clientId:e}}))}async getAttached(e){return(await(this.client?.dispatch("snap_api_invoke",{action:"getAttachedInstances",payload:{clientId:e}}))).payload.attached}async hasAttachments(e){return(await(this.client?.dispatch("snap_api_invoke",{action:"hasAttachments",payload:{clientId:e}}))).payload.hasAttachments}addEventListener(e,t){this.emitter.on(e,t)}removeEventListener(e,t){this.emitter.off(e,t)}once(e,t){this.emitter.once(e,t)}async handleNewWindow(e){const t=await fin.Window.wrap({uuid:e.uuid,name:e.name}),n=await t.getNativeId();let r=t.identity.name;const i=await t.getOptions();if(void 0!==i.includeInSnapshots&&!1===i.includeInSnapshots)return void console.log(`SnapSDK: Not registering ${e.uuid}:${e.name}, Window is explicitly excluded -includeInSnapshots == false`);const s=i.customData||{};s.snapClientId?r=s.snapClientId:await t.updateOptions({customData:{...s,snapClientId:r}}),await this.registerWindow(r,n)}emit_event(e,...t){this.emitter.emit(e,...t)}handleSnapEvents(e,t){switch(this.emit_event("all-events",{type:e.action,payload:e.payload}),e.action){case"clientRegistered":this.emit_event("client-registered",{clientId:e.payload.clientId,windowHandle:`#${e.payload.windowHandle.toString(16).toUpperCase()}`,owningProcessId:e.payload.owningProcessId});break;case"clientUnRegistered":this.emit_event("client-unregistered",{...e.payload});break;case"moveSizeCompleted":this.emit_event("move-size-completed",{...e.payload});break;case"clientsAttached":this.emit_event("clients-attached",{...e.payload});break;case"clientDetached":this.emit_event("client-detached",{...e.payload});break;case"groupsChanged":this.emit_event("groups-changed",{...e.payload});break;case"clientActivated":this.emit_event("client-activated",{...e.payload});break;case"clientDeactivated":this.emit_event("client-deactivated",{...e.payload})}}async build_command_line(e){let t=`--id ${this.server_id} `;e?.showDebug&&(t+=" --show-debug "),e?.disableGPUAcceleratedDragging&&(t+=" --disable-gpu-accelerated-dragging true "),e?.disableBlurDropPreview&&(t+=" --blur-drop-preview false "),void 0!==e?.blurEffectPerformanceThreshold&&(t+=` --blur-effect-performance-threshold=${e?.blurEffectPerformanceThreshold} `),e?.disableUserUnstick&&(t+=" --disable-user-unstick "),e?.keyToStick&&(t+=" --ks ");const n=await fin.System.getRuntimeInfo();return t+=`--runtime-port ${n.port} `,t+=`--runtime-version ${n.version} `,t.trim()}async getAppAssetExecutablePath(e){let t=(await fin.System.getRuntimeInfo()).args["local-startup-url"].replace("config.json","");const n=t.includes("\\")?"\\":"/";return t.endsWith(n)&&(t=t.slice(0,-1)),[t,"assets",e.alias,e.version,e.target].join(n)}}})();var i=r.P;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!*********************************************!*\
  !*** ./client/src/preload/preload.debug.ts ***!
  \*********************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _preload_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./preload.common */ "./client/src/preload/preload.common.ts");

if (window === window.top) {
    console.log("Adding snap support through a debug preload.");
    window.addEventListener("DOMContentLoaded", async () => {
        const snapOptions = { platformId: fin.me.identity.uuid, showDebugWindow: true };
        await (0,_preload_common__WEBPACK_IMPORTED_MODULE_0__.initialize)(snapOptions);
    });
}

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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NUQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3RELE1BQU0sV0FBVyxHQUF3QixFQUFFLFVBQVUsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ3JHLE1BQU0sMkRBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuZmluLXdvcmtzcGFjZS0taW50ZWdyYXRlLXdpdGgtc25hcC8uL2NsaWVudC9zcmMvcHJlbG9hZC9wcmVsb2FkLmNvbW1vbi50cyIsIndlYnBhY2s6Ly9vcGVuZmluLXdvcmtzcGFjZS0taW50ZWdyYXRlLXdpdGgtc25hcC8uL2NsaWVudC9zcmMvc2V0dGluZ3MudHMiLCJ3ZWJwYWNrOi8vb3BlbmZpbi13b3Jrc3BhY2UtLWludGVncmF0ZS13aXRoLXNuYXAvLi4vLi4vbm9kZV9tb2R1bGVzL0BvcGVuZmluL3NuYXAtc2RrL29wZW5maW4uc25hcC5tanMiLCJ3ZWJwYWNrOi8vb3BlbmZpbi13b3Jrc3BhY2UtLWludGVncmF0ZS13aXRoLXNuYXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vb3BlbmZpbi13b3Jrc3BhY2UtLWludGVncmF0ZS13aXRoLXNuYXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL29wZW5maW4td29ya3NwYWNlLS1pbnRlZ3JhdGUtd2l0aC1zbmFwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vb3BlbmZpbi13b3Jrc3BhY2UtLWludGVncmF0ZS13aXRoLXNuYXAvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9vcGVuZmluLXdvcmtzcGFjZS0taW50ZWdyYXRlLXdpdGgtc25hcC8uL2NsaWVudC9zcmMvcHJlbG9hZC9wcmVsb2FkLmRlYnVnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIE9wZW5GaW4gZnJvbSBcIkBvcGVuZmluL2NvcmVcIjtcbmltcG9ydCAqIGFzIFNuYXAgZnJvbSBcIkBvcGVuZmluL3NuYXAtc2RrXCI7XG5pbXBvcnQgeyBnZXRTZXR0aW5ncyB9IGZyb20gXCIuLi9zZXR0aW5nc1wiO1xuaW1wb3J0IHR5cGUgeyBTbmFwUHJvdmlkZXJPcHRpb25zIH0gZnJvbSBcIi4uL3NoYXBlc1wiO1xuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIHNuYXAgY29tcG9uZW50cy5cbiAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIGZvciBpbml0aWFsaXppbmcgdGhlIHNuYXAgcHJvdmlkZXIuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplKG9wdGlvbnM6IFNuYXBQcm92aWRlck9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcblx0Y29uc3Qgc2V0dGluZ3MgPSBhd2FpdCBnZXRTZXR0aW5ncygpO1xuXHRjb25zdCBmaW5hbE9wdGlvbnMgPSB7IC4uLnNldHRpbmdzLCAuLi5vcHRpb25zIH07XG5cdHRyeSB7XG5cdFx0aWYgKGZpbmFsT3B0aW9ucy5wbGF0Zm9ybUlkKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcIlJlZ2lzdGVyaW5nIFNuYXAgd2l0aCBwbGF0Zm9ybUlkXCIsIGZpbmFsT3B0aW9ucy5wbGF0Zm9ybUlkKTtcblx0XHRcdGNvbnN0IHNlcnZlciA9IG5ldyBTbmFwLlNuYXBTZXJ2ZXIoZmluYWxPcHRpb25zLnBsYXRmb3JtSWQpO1xuXHRcdFx0Y29uc29sZS5sb2coXCJFbmFibGluZyBkZWJ1ZyB3aW5kb3c6XCIsIGZpbmFsT3B0aW9ucy5zaG93RGVidWdXaW5kb3cgPz8gZmFsc2UpO1xuXHRcdFx0YXdhaXQgc2VydmVyLnN0YXJ0KHsgc2hvd0RlYnVnOiBmaW5hbE9wdGlvbnMuc2hvd0RlYnVnV2luZG93ID8/IGZhbHNlLFxuXHRcdFx0XHRkaXNhYmxlVXNlclVuc3RpY2s6IGZpbmFsT3B0aW9ucy5kaXNhYmxlU2hpZnRUb1Vuc25hcCA/PyBmYWxzZSxcblx0XHRcdFx0a2V5VG9TdGljazogZmluYWxPcHRpb25zLmVuYWJsZUN0cmxUb1NuYXAgPz8gZmFsc2UsXG5cdFx0XHRcdGRpc2FibGVHUFVBY2NlbGVyYXRlZERyYWdnaW5nOiBmaW5hbE9wdGlvbnMuZGlzYWJsZUdQVURyYWdnaW5nID8/IGZhbHNlLFxuXHRcdFx0XHRkaXNhYmxlQmx1ckRyb3BQcmV2aWV3OiBmaW5hbE9wdGlvbnMuZGlzYWJsZUJsdXJEcm9wUHJldmlldyA/PyBmYWxzZSB9KTtcblx0XHRcdGNvbnN0IGFwcCA9IGZpbi5BcHBsaWNhdGlvbi5nZXRDdXJyZW50U3luYygpO1xuXHRcdFx0YXdhaXQgYXBwLm9uKFwid2luZG93LWNyZWF0ZWRcIiwgYXN5bmMgKGUpID0+IHtcblx0XHRcdFx0Y29uc3Qgd2luID0gZmluLldpbmRvdy53cmFwU3luYyhlKTtcblx0XHRcdFx0Y29uc3Qgd2luT3B0aW9ucyA9IGF3YWl0IHdpbi5nZXRPcHRpb25zKCk7XG5cdFx0XHRcdGlmICghd2luT3B0aW9ucy5pbmNsdWRlSW5TbmFwc2hvdHMpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIldpbmRvdyBpcyBub3QgcmVnaXN0ZXJlZCB3aXRoIFNuYXAgYmVjYXVzZSBpbmNsdWRlSW5TbmFwc2hvdHMgaXMgZGlzYWJsZWQuXCIpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnN0IG5hdGl2ZUlkID0gYXdhaXQgd2luLmdldE5hdGl2ZUlkKCk7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJSZWdpc3RlcmluZyB3aW5kb3cgd2l0aCBOYXRpdmVJRCB3aXRoIFNuYXBcIiwgbmF0aXZlSWQpO1xuXHRcdFx0XHRcdGF3YWl0IHNlcnZlci5yZWdpc3RlcldpbmRvdyh3aW4uaWRlbnRpdHkubmFtZSwgbmF0aXZlSWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdGNvbnN0IGhvc3RPcHRpb25zID0gKGF3YWl0IGZpbi5tZS5nZXRPcHRpb25zKCkpIGFzIE9wZW5GaW4uV2luZG93T3B0aW9ucztcblx0XHRcdGlmIChob3N0T3B0aW9ucy5hdXRvU2hvdykge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcIlJlZ2lzdGVyaW5nIGN1cnJlbnQgd2luZG93IHdpdGggc25hcFwiKTtcblx0XHRcdFx0YXdhaXQgc2VydmVyLnJlZ2lzdGVyV2luZG93KGZpbi5tZS5pZGVudGl0eS5uYW1lLCBhd2FpdCBmaW4uV2luZG93LmdldEN1cnJlbnRTeW5jKCkuZ2V0TmF0aXZlSWQoKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkN1cnJlbnQgd2luZG93IGlzIG5vdCByZWdpc3RlcmVkIHdpdGggU25hcCBiZWNhdXNlIGF1dG9TaG93IGlzIGRpc2FibGVkLlwiKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbml0aWFsaXppbmcgU25hcFwiLCBlcnIpO1xuXHR9XG59XG4iLCJpbXBvcnQgdHlwZSB7IE9wZW5GaW4gfSBmcm9tIFwiQG9wZW5maW4vY29yZVwiO1xuaW1wb3J0IHR5cGUgeyBDdXN0b21TZXR0aW5ncywgU25hcFByb3ZpZGVyT3B0aW9ucyB9IGZyb20gXCIuL3NoYXBlc1wiO1xuXG4vKipcbiAqIEdldHMgc2V0dGluZ3MgZnJvbSB0aGUgbWFuaWZlc3QuXG4gKiBAcGFyYW0gc2hvd0RlYnVnV2luZG93IFdoZXRoZXIgdG8gZW5hYmxlIHRoZSBkZWJ1ZyB3aW5kb3cgcmVnYXJkbGVzcyBvZiBtYW5pZmVzdCBzZXR0aW5ncy5cbiAqIEByZXR1cm5zIFRoZSBzbmFwIHByb3ZpZGVyIG9wdGlvbnMgZnJvbSB0aGUgbWFuaWZlc3QuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTZXR0aW5ncyhzaG93RGVidWdXaW5kb3c/OiBib29sZWFuKTogUHJvbWlzZTxTbmFwUHJvdmlkZXJPcHRpb25zPiB7XG5cdGNvbnN0IGFwcCA9IGF3YWl0IGZpbi5BcHBsaWNhdGlvbi5nZXRDdXJyZW50KCk7XG5cdGNvbnN0IG1hbmlmZXN0ID0gYXdhaXQgYXBwLmdldE1hbmlmZXN0KCk7XG5cdGlmIChtYW5pZmVzdC5hcHBBc3NldHM/LlswXS5zcmMgPT09IFwiU05BUF9BU1NFVF9VUkxcIikge1xuXHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcIlBsZWFzZSByZXF1ZXN0IHRoZSBTTkFQX0FTU0VUX1VSTCBmcm9tIE9wZW5GaW4gYW5kIHVwZGF0ZSBtYW5pZmVzdC5maW4uanNvbiBiZWZvcmUgcnVubmluZyB0aGUgc2FtcGxlXCJcblx0XHQpO1xuXHR9XG4gICAgY29uc3Qgc2V0dGluZ3MgPSBhd2FpdCBnZXRNYW5pZmVzdEN1c3RvbVNldHRpbmdzKG1hbmlmZXN0KTtcbiAgICBzZXR0aW5ncy5zbmFwUHJvdmlkZXIgPz89IHt9O1xuICAgIGlmKHNldHRpbmdzLnNuYXBQcm92aWRlci5zaG93RGVidWdXaW5kb3cgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZXR0aW5ncy5zbmFwUHJvdmlkZXIuc2hvd0RlYnVnV2luZG93ID0gc2hvd0RlYnVnV2luZG93O1xuICAgIH1cbiAgICByZXR1cm4gc2V0dGluZ3Muc25hcFByb3ZpZGVyO1xufVxuXG4vKipcbiAqIFJlYWQgdGhlIGN1c3RvbSBzZXR0aW5ncyBmcm9tIHRoZSBtYW5pZmVzdC5maW4uanNvbi5cbiAqIEBwYXJhbSBtYW5pZmVzdCBUaGUgbWFuaWZlc3QgdG8gbG9hZCB0aGUgY3VzdG9tIHNldHRpbmdzIGZyb20uXG4gKiBAcmV0dXJucyBUaGUgY3VzdG9tIHNldHRpbmdzIGZyb20gdGhlIG1hbmlmZXN0LlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRNYW5pZmVzdEN1c3RvbVNldHRpbmdzKG1hbmlmZXN0OiBPcGVuRmluLk1hbmlmZXN0KTogUHJvbWlzZTxDdXN0b21TZXR0aW5ncz4ge1xuXHRyZXR1cm4gKG1hbmlmZXN0IGFzIE9wZW5GaW4uTWFuaWZlc3QgJiB7IGN1c3RvbVNldHRpbmdzPzogQ3VzdG9tU2V0dGluZ3MgfSkuY3VzdG9tU2V0dGluZ3MgPz8ge307XG59XG4iLCJ2YXIgZT17MzQzOmU9Pnt2YXIgdCxuPVwib2JqZWN0XCI9PXR5cGVvZiBSZWZsZWN0P1JlZmxlY3Q6bnVsbCxyPW4mJlwiZnVuY3Rpb25cIj09dHlwZW9mIG4uYXBwbHk/bi5hcHBseTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGUsdCxuKX07dD1uJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBuLm93bktleXM/bi5vd25LZXlzOk9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM/ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpKX06ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpfTt2YXIgaT1OdW1iZXIuaXNOYU58fGZ1bmN0aW9uKGUpe3JldHVybiBlIT1lfTtmdW5jdGlvbiBzKCl7cy5pbml0LmNhbGwodGhpcyl9ZS5leHBvcnRzPXMsZS5leHBvcnRzLm9uY2U9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKG4scil7ZnVuY3Rpb24gaShuKXtlLnJlbW92ZUxpc3RlbmVyKHQscykscihuKX1mdW5jdGlvbiBzKCl7XCJmdW5jdGlvblwiPT10eXBlb2YgZS5yZW1vdmVMaXN0ZW5lciYmZS5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsaSksbihbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpfXkoZSx0LHMse29uY2U6ITB9KSxcImVycm9yXCIhPT10JiZmdW5jdGlvbihlLHQsbil7XCJmdW5jdGlvblwiPT10eXBlb2YgZS5vbiYmeShlLFwiZXJyb3JcIix0LG4pfShlLGkse29uY2U6ITB9KX0pKX0scy5FdmVudEVtaXR0ZXI9cyxzLnByb3RvdHlwZS5fZXZlbnRzPXZvaWQgMCxzLnByb3RvdHlwZS5fZXZlbnRzQ291bnQ9MCxzLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzPXZvaWQgMDt2YXIgYT0xMDtmdW5jdGlvbiBvKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyt0eXBlb2YgZSl9ZnVuY3Rpb24gYyhlKXtyZXR1cm4gdm9pZCAwPT09ZS5fbWF4TGlzdGVuZXJzP3MuZGVmYXVsdE1heExpc3RlbmVyczplLl9tYXhMaXN0ZW5lcnN9ZnVuY3Rpb24gcChlLHQsbixyKXt2YXIgaSxzLGEscDtpZihvKG4pLHZvaWQgMD09PShzPWUuX2V2ZW50cyk/KHM9ZS5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksZS5fZXZlbnRzQ291bnQ9MCk6KHZvaWQgMCE9PXMubmV3TGlzdGVuZXImJihlLmVtaXQoXCJuZXdMaXN0ZW5lclwiLHQsbi5saXN0ZW5lcj9uLmxpc3RlbmVyOm4pLHM9ZS5fZXZlbnRzKSxhPXNbdF0pLHZvaWQgMD09PWEpYT1zW3RdPW4sKytlLl9ldmVudHNDb3VudDtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGE/YT1zW3RdPXI/W24sYV06W2Esbl06cj9hLnVuc2hpZnQobik6YS5wdXNoKG4pLChpPWMoZSkpPjAmJmEubGVuZ3RoPmkmJiFhLndhcm5lZCl7YS53YXJuZWQ9ITA7dmFyIGw9bmV3IEVycm9yKFwiUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiBcIithLmxlbmd0aCtcIiBcIitTdHJpbmcodCkrXCIgbGlzdGVuZXJzIGFkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdFwiKTtsLm5hbWU9XCJNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmdcIixsLmVtaXR0ZXI9ZSxsLnR5cGU9dCxsLmNvdW50PWEubGVuZ3RoLHA9bCxjb25zb2xlJiZjb25zb2xlLndhcm4mJmNvbnNvbGUud2FybihwKX1yZXR1cm4gZX1mdW5jdGlvbiBsKCl7aWYoIXRoaXMuZmlyZWQpcmV0dXJuIHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSx0aGlzLndyYXBGbiksdGhpcy5maXJlZD0hMCwwPT09YXJndW1lbnRzLmxlbmd0aD90aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpOnRoaXMubGlzdGVuZXIuYXBwbHkodGhpcy50YXJnZXQsYXJndW1lbnRzKX1mdW5jdGlvbiB1KGUsdCxuKXt2YXIgcj17ZmlyZWQ6ITEsd3JhcEZuOnZvaWQgMCx0YXJnZXQ6ZSx0eXBlOnQsbGlzdGVuZXI6bn0saT1sLmJpbmQocik7cmV0dXJuIGkubGlzdGVuZXI9bixyLndyYXBGbj1pLGl9ZnVuY3Rpb24gaChlLHQsbil7dmFyIHI9ZS5fZXZlbnRzO2lmKHZvaWQgMD09PXIpcmV0dXJuW107dmFyIGk9clt0XTtyZXR1cm4gdm9pZCAwPT09aT9bXTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBpP24/W2kubGlzdGVuZXJ8fGldOltpXTpuP2Z1bmN0aW9uKGUpe2Zvcih2YXIgdD1uZXcgQXJyYXkoZS5sZW5ndGgpLG49MDtuPHQubGVuZ3RoOysrbil0W25dPWVbbl0ubGlzdGVuZXJ8fGVbbl07cmV0dXJuIHR9KGkpOmYoaSxpLmxlbmd0aCl9ZnVuY3Rpb24gZChlKXt2YXIgdD10aGlzLl9ldmVudHM7aWYodm9pZCAwIT09dCl7dmFyIG49dFtlXTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuKXJldHVybiAxO2lmKHZvaWQgMCE9PW4pcmV0dXJuIG4ubGVuZ3RofXJldHVybiAwfWZ1bmN0aW9uIGYoZSx0KXtmb3IodmFyIG49bmV3IEFycmF5KHQpLHI9MDtyPHQ7KytyKW5bcl09ZVtyXTtyZXR1cm4gbn1mdW5jdGlvbiB5KGUsdCxuLHIpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUub24pci5vbmNlP2Uub25jZSh0LG4pOmUub24odCxuKTtlbHNle2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUuYWRkRXZlbnRMaXN0ZW5lcil0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJlbWl0dGVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEV2ZW50RW1pdHRlci4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiBlKTtlLmFkZEV2ZW50TGlzdGVuZXIodCwoZnVuY3Rpb24gaShzKXtyLm9uY2UmJmUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LGkpLG4ocyl9KSl9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLFwiZGVmYXVsdE1heExpc3RlbmVyc1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBhfSxzZXQ6ZnVuY3Rpb24oZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGV8fGU8MHx8aShlKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcrZStcIi5cIik7YT1lfX0pLHMuaW5pdD1mdW5jdGlvbigpe3ZvaWQgMCE9PXRoaXMuX2V2ZW50cyYmdGhpcy5fZXZlbnRzIT09T2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHN8fCh0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wKSx0aGlzLl9tYXhMaXN0ZW5lcnM9dGhpcy5fbWF4TGlzdGVuZXJzfHx2b2lkIDB9LHMucHJvdG90eXBlLnNldE1heExpc3RlbmVycz1mdW5jdGlvbihlKXtpZihcIm51bWJlclwiIT10eXBlb2YgZXx8ZTwwfHxpKGUpKXRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJytlK1wiLlwiKTtyZXR1cm4gdGhpcy5fbWF4TGlzdGVuZXJzPWUsdGhpc30scy5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIGModGhpcyl9LHMucHJvdG90eXBlLmVtaXQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLG49MTtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKXQucHVzaChhcmd1bWVudHNbbl0pO3ZhciBpPVwiZXJyb3JcIj09PWUscz10aGlzLl9ldmVudHM7aWYodm9pZCAwIT09cylpPWkmJnZvaWQgMD09PXMuZXJyb3I7ZWxzZSBpZighaSlyZXR1cm4hMTtpZihpKXt2YXIgYTtpZih0Lmxlbmd0aD4wJiYoYT10WzBdKSxhIGluc3RhbmNlb2YgRXJyb3IpdGhyb3cgYTt2YXIgbz1uZXcgRXJyb3IoXCJVbmhhbmRsZWQgZXJyb3IuXCIrKGE/XCIgKFwiK2EubWVzc2FnZStcIilcIjpcIlwiKSk7dGhyb3cgby5jb250ZXh0PWEsb312YXIgYz1zW2VdO2lmKHZvaWQgMD09PWMpcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgYylyKGMsdGhpcyx0KTtlbHNle3ZhciBwPWMubGVuZ3RoLGw9ZihjLHApO2ZvcihuPTA7bjxwOysrbilyKGxbbl0sdGhpcyx0KX1yZXR1cm4hMH0scy5wcm90b3R5cGUuYWRkTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcCh0aGlzLGUsdCwhMSl9LHMucHJvdG90eXBlLm9uPXMucHJvdG90eXBlLmFkZExpc3RlbmVyLHMucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3JldHVybiBwKHRoaXMsZSx0LCEwKX0scy5wcm90b3R5cGUub25jZT1mdW5jdGlvbihlLHQpe3JldHVybiBvKHQpLHRoaXMub24oZSx1KHRoaXMsZSx0KSksdGhpc30scy5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3JldHVybiBvKHQpLHRoaXMucHJlcGVuZExpc3RlbmVyKGUsdSh0aGlzLGUsdCkpLHRoaXN9LHMucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLHMsYTtpZihvKHQpLHZvaWQgMD09PShyPXRoaXMuX2V2ZW50cykpcmV0dXJuIHRoaXM7aWYodm9pZCAwPT09KG49cltlXSkpcmV0dXJuIHRoaXM7aWYobj09PXR8fG4ubGlzdGVuZXI9PT10KTA9PS0tdGhpcy5fZXZlbnRzQ291bnQ/dGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCk6KGRlbGV0ZSByW2VdLHIucmVtb3ZlTGlzdGVuZXImJnRoaXMuZW1pdChcInJlbW92ZUxpc3RlbmVyXCIsZSxuLmxpc3RlbmVyfHx0KSk7ZWxzZSBpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuKXtmb3IoaT0tMSxzPW4ubGVuZ3RoLTE7cz49MDtzLS0paWYobltzXT09PXR8fG5bc10ubGlzdGVuZXI9PT10KXthPW5bc10ubGlzdGVuZXIsaT1zO2JyZWFrfWlmKGk8MClyZXR1cm4gdGhpczswPT09aT9uLnNoaWZ0KCk6ZnVuY3Rpb24oZSx0KXtmb3IoO3QrMTxlLmxlbmd0aDt0KyspZVt0XT1lW3QrMV07ZS5wb3AoKX0obixpKSwxPT09bi5sZW5ndGgmJihyW2VdPW5bMF0pLHZvaWQgMCE9PXIucmVtb3ZlTGlzdGVuZXImJnRoaXMuZW1pdChcInJlbW92ZUxpc3RlbmVyXCIsZSxhfHx0KX1yZXR1cm4gdGhpc30scy5wcm90b3R5cGUub2ZmPXMucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyLHMucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycz1mdW5jdGlvbihlKXt2YXIgdCxuLHI7aWYodm9pZCAwPT09KG49dGhpcy5fZXZlbnRzKSlyZXR1cm4gdGhpcztpZih2b2lkIDA9PT1uLnJlbW92ZUxpc3RlbmVyKXJldHVybiAwPT09YXJndW1lbnRzLmxlbmd0aD8odGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZXZlbnRzQ291bnQ9MCk6dm9pZCAwIT09bltlXSYmKDA9PS0tdGhpcy5fZXZlbnRzQ291bnQ/dGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCk6ZGVsZXRlIG5bZV0pLHRoaXM7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBpLHM9T2JqZWN0LmtleXMobik7Zm9yKHI9MDtyPHMubGVuZ3RoOysrcilcInJlbW92ZUxpc3RlbmVyXCIhPT0oaT1zW3JdKSYmdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoaSk7cmV0dXJuIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKFwicmVtb3ZlTGlzdGVuZXJcIiksdGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZXZlbnRzQ291bnQ9MCx0aGlzfWlmKFwiZnVuY3Rpb25cIj09dHlwZW9mKHQ9bltlXSkpdGhpcy5yZW1vdmVMaXN0ZW5lcihlLHQpO2Vsc2UgaWYodm9pZCAwIT09dClmb3Iocj10Lmxlbmd0aC0xO3I+PTA7ci0tKXRoaXMucmVtb3ZlTGlzdGVuZXIoZSx0W3JdKTtyZXR1cm4gdGhpc30scy5wcm90b3R5cGUubGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybiBoKHRoaXMsZSwhMCl9LHMucHJvdG90eXBlLnJhd0xpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm4gaCh0aGlzLGUsITEpfSxzLmxpc3RlbmVyQ291bnQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmxpc3RlbmVyQ291bnQ/ZS5saXN0ZW5lckNvdW50KHQpOmQuY2FsbChlLHQpfSxzLnByb3RvdHlwZS5saXN0ZW5lckNvdW50PWQscy5wcm90b3R5cGUuZXZlbnROYW1lcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9ldmVudHNDb3VudD4wP3QodGhpcy5fZXZlbnRzKTpbXX19fSx0PXt9O2Z1bmN0aW9uIG4ocil7dmFyIGk9dFtyXTtpZih2b2lkIDAhPT1pKXJldHVybiBpLmV4cG9ydHM7dmFyIHM9dFtyXT17ZXhwb3J0czp7fX07cmV0dXJuIGVbcl0ocyxzLmV4cG9ydHMsbikscy5leHBvcnRzfW4uZD0oZSx0KT0+e2Zvcih2YXIgciBpbiB0KW4ubyh0LHIpJiYhbi5vKGUscikmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIse2VudW1lcmFibGU6ITAsZ2V0OnRbcl19KX0sbi5vPShlLHQpPT5PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KTt2YXIgcj17fTsoKCk9PntuLmQocix7UDooKT0+dH0pO3ZhciBlPW4oMzQzKTtjbGFzcyB0e2NvbnN0cnVjdG9yKHQpe2lmKHRoaXMuc2VydmVyX2lkPXQsdGhpcy5lbWl0dGVyPW5ldyBlLkV2ZW50RW1pdHRlciwhZmluKXRocm93IG5ldyBFcnJvcihcIk9wZW5GaW4gaXMgbm90IGF2YWlsYWJsZVwiKX1hc3luYyBzdGFydChlKXt0cnl7Y29uc3QgZT1hd2FpdCBmaW4uU3lzdGVtLmdldFJ1bnRpbWVJbmZvKCk7XCJ4NjRcIiE9PWU/LmFyY2hpdGVjdHVyZSYmY29uc29sZS53YXJuKGBUaGUgYXJjaGl0ZWN0dXJlIG9mIHRoZSBjb25uZWN0ZWQgT3BlbkZpbiBydW50aW1lIGlzICcke2UuYXJjaGl0ZWN0dXJlfScgLSBXaW5kb3cgc25hcHBpbmcgaXMgY3VycmVudGx5IG9ubHkgc3VwcG9ydGVkIHdpdGggNjQtYml0IGFwcGxpY2F0aW9ucy4gU25hcHBpbmcgd2lsbCBiZSBkaXNhYmxlZC5gKX1jYXRjaChlKXtjb25zb2xlLndhcm4oYENvdWxkIG5vdCBnZXQgcnVudGltZSBpbmZvOiAke2V9YCl9Y29uc3QgdD1hd2FpdCBmaW4uU3lzdGVtLnF1ZXJ5UGVybWlzc2lvbkZvckN1cnJlbnRDb250ZXh0KFwiU3lzdGVtLmxhdW5jaEV4dGVybmFsUHJvY2Vzc1wiKTtpZighdC5ncmFudGVkKXRocm93IG5ldyBFcnJvcihcIlRoZSAnU3lzdGVtLmxhdW5jaEV4dGVybmFsUHJvY2VzcycgcGVybWlzc2lvbiBpcyByZXF1aXJlZCB0byBsYXVuY2ggdGhlIFNuYXAgc2VydmVyXCIpO2lmKHQucmF3VmFsdWUpe2lmKGU/LmV4ZWN1dGFibGVQYXRoJiYhdC5yYXdWYWx1ZT8uZXhlY3V0YWJsZXM/LmVuYWJsZWQpdGhyb3cgbmV3IEVycm9yKFwiVGhlICdTeXN0ZW0ubGF1bmNoRXh0ZXJuYWxQcm9jZXNzLmFzc2V0cycgcGVybWlzc2lvbiBpcyByZXF1aXJlZCB0byBsYXVuY2ggdGhlIFNuYXAgc2VydmVyIGZyb20gYW4gZXhlY3V0YWJsZSBwYXRoXCIpO2lmKCFlPy5leGVjdXRhYmxlUGF0aCYmIXQucmF3VmFsdWU/LmFzc2V0cz8uZW5hYmxlZCl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgJ1N5c3RlbS5sYXVuY2hFeHRlcm5hbFByb2Nlc3MuYXNzZXRzJyBwZXJtaXNzaW9uIGlzIHJlcXVpcmVkIHRvIGxhdW5jaCB0aGUgU25hcCBzZXJ2ZXIgZnJvbSBhIFVSTFwiKX1pZighZT8uZXhlY3V0YWJsZVBhdGgpdHJ5e2F3YWl0IGZpbi5TeXN0ZW0uZ2V0QXBwQXNzZXRJbmZvKHthbGlhczpcIm9wZW5maW4tc25hcFwifSl9Y2F0Y2goZSl7dGhyb3cgbmV3IEVycm9yKFwiVGhlICdvcGVuZmluLXNuYXAnIGFzc2V0IG11c3QgYmUgZGVmaW5lZCBpbiB0aGUgbWFuaWZlc3RcIil9Y29uc3Qgbj1hd2FpdCB0aGlzLmJ1aWxkX2NvbW1hbmRfbGluZShlKTtsZXQgcj17YWxpYXM6XCJvcGVuZmluLXNuYXBcIixhcmd1bWVudHM6bixsaWZldGltZTpcIndpbmRvd1wifTtlPy5leGVjdXRhYmxlUGF0aCYmKHI9e3BhdGg6ZS5leGVjdXRhYmxlUGF0aCxhcmd1bWVudHM6bixsaWZldGltZTpcIndpbmRvd1wifSk7dHJ5e3RoaXMuc25hcF9pZGVudGl0eT1hd2FpdCBmaW4uU3lzdGVtLmxhdW5jaEV4dGVybmFsUHJvY2VzcyhyKX1jYXRjaChlKXt0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBsYXVuY2ggdGhlIFNuYXAgc2VydmVyICR7SlNPTi5zdHJpbmdpZnkoZSl9YCl9cmV0dXJuIHRoaXMuY29ubmVjdCgpfWFzeW5jIGNvbm5lY3QoKXt0aGlzLmNsaWVudD1hd2FpdCBmaW4uSW50ZXJBcHBsaWNhdGlvbkJ1cy5DaGFubmVsLmNvbm5lY3QoYHNuYXAtc2VydmVyLWNvcmUtJHt0aGlzLnNlcnZlcl9pZH1gKSx0aGlzLmNsaWVudC5yZWdpc3RlcihcInNuYXBfaGFuZHNoYWtlXCIsKGFzeW5jKGUsdCk9Pnt0cnl7YXdhaXQgZmluLlN5c3RlbS5yZWdpc3RlclVzYWdlKHt0eXBlOlwiYWRhcHRlci1mZWF0dXJlXCIsZGF0YTp7YXBpVmVyc2lvbjplLnZlcnNpb24sY29tcG9uZW50TmFtZTpcInNuYXAtc2VydmVyXCJ9fSl9Y2F0Y2h7Y29uc29sZS53YXJuKFwiU25hcFNESzogRmFpbGVkIHRvIHJlZ2lzdGVyIHVzYWdlIGZvciBTbmFwIFNlcnZlclwiKX19KSk7dHJ5e2F3YWl0IGZpbi5TeXN0ZW0ucmVnaXN0ZXJVc2FnZSh7dHlwZTpcImFkYXB0ZXItZmVhdHVyZVwiLGRhdGE6e2FwaVZlcnNpb246XCIwLjQuMVwiLGNvbXBvbmVudE5hbWU6XCJzbmFwLWNsaWVudFwifX0pfWNhdGNoe2NvbnNvbGUud2FybihcIlNuYXBTREs6IEZhaWxlZCB0byByZWdpc3RlciB1c2FnZSBmb3IgU25hcCBTZXJ2ZXJcIil9dGhpcy5jbGllbnQucmVnaXN0ZXIoXCJzbmFwX3VwZGF0ZXNcIiwoKGUsdCk9PnRoaXMuaGFuZGxlU25hcEV2ZW50cyhlLHQpKSl9YXN5bmMgc3RvcCgpe2lmKCF0aGlzLmNsaWVudCl0aHJvdyBuZXcgRXJyb3IoXCJTbmFwIHNlcnZlciBpcyBub3QgcnVubmluZ1wiKTthd2FpdCh0aGlzLmNsaWVudD8uZGlzcGF0Y2goXCJzbmFwX2FwaV9pbnZva2VcIix7YWN0aW9uOlwic2h1dGRvd25cIn0pKX1hc3luYyBnZXRMYXlvdXQoKXtpZighdGhpcy5jbGllbnQpdGhyb3cgbmV3IEVycm9yKFwiU25hcCBzZXJ2ZXIgaXMgbm90IHJ1bm5pbmdcIik7Y29uc3QgZT1hd2FpdCh0aGlzLmNsaWVudD8uZGlzcGF0Y2goXCJzbmFwX2FwaV9pbnZva2VcIix7YWN0aW9uOlwic2VyaWFsaXNlTGF5b3V0XCJ9KSk7cmV0dXJuIGU/LnBheWxvYWQubGF5b3V0fWFzeW5jIHNldExheW91dChlLHQ9ITApe2lmKCF0aGlzLmNsaWVudCl0aHJvdyBuZXcgRXJyb3IoXCJTbmFwIHNlcnZlciBpcyBub3QgcnVubmluZ1wiKTthd2FpdCh0aGlzLmNsaWVudD8uZGlzcGF0Y2goXCJzbmFwX2FwaV9pbnZva2VcIix7YWN0aW9uOlwiZGVzZXJpYWxpc2VMYXlvdXRcIixwYXlsb2FkOntsYXlvdXQ6ZSxyZXNldDp0fX0pKX1yYW5kb21VVUlEKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGNyeXB0byYmXCJyYW5kb21VVUlEXCJpbiBjcnlwdG8mJlwiZnVuY3Rpb25cIj09dHlwZW9mIGNyeXB0by5yYW5kb21VVUlEP2NyeXB0by5yYW5kb21VVUlEKCk6XCIxMDAwMDAwMC0xMDAwLTQwMDAtODAwMC0xMDAwMDAwMDAwMDBcIi5yZXBsYWNlKC9bMDE4XS9nLChlPT4oZV5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDEpKVswXSYxNT4+ZS80KS50b1N0cmluZygxNikpKX1tYXBDbGllbnRzVG9HVUlEKGUpe2NvbnN0IHQ9bmV3IE1hcDtyZXR1cm4gZS5mb3JFYWNoKChlPT57dC5zZXQoZS5pZCx0aGlzLnJhbmRvbVVVSUQoKSl9KSksdH1yZXBsYWNlU3RyaW5nSW5TbmFwc2hvdChlLHQsbil7Y29uc3Qgcj1lPT57cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGU/ZT09PXQ/bjplOkFycmF5LmlzQXJyYXkoZSk/ZS5tYXAocik6KG51bGw9PT0oaT1lKXx8XCJvYmplY3RcIiE9dHlwZW9mIGl8fEFycmF5LmlzQXJyYXkoaSl8fE9iamVjdC5rZXlzKGUpLmZvckVhY2goKHQ9PntlW3RdPXIoZVt0XSl9KSksZSk7dmFyIGl9O3IoZSl9YXN5bmMgcHJlcGFyZVRvQXBwbHlTbmFwc2hvdChlKXtpZih2b2lkIDA9PT1lKXt0aGlzLm5lZWRfdG9fcmVzZXRfbGF5b3V0PSEwO2F3YWl0KHRoaXMuY2xpZW50Py5kaXNwYXRjaChcInNuYXBfYXBpX2ludm9rZVwiLHthY3Rpb246XCJyZXNldEFsbFwifSkpO3JldHVybn10aGlzLm5lZWRfdG9fcmVzZXRfbGF5b3V0PSExO2NvbnN0IHQ9ZS5zbmFwc2hvdCxuPXQ/LnNuYXA/LmNsaWVudHM7aWYobil7Y29uc3QgZT10aGlzLm1hcENsaWVudHNUb0dVSUQobik7ZT8uZm9yRWFjaCgoKGUsbik9Pnt0aGlzLnJlcGxhY2VTdHJpbmdJblNuYXBzaG90KHQsbixlKX0pKX19YXN5bmMgZGVjb3JhdGVTbmFwc2hvdChlKXtyZXR1cm57Li4uZSxzbmFwOmF3YWl0IHRoaXMuZ2V0TGF5b3V0KCl9fWFzeW5jIGFwcGx5U25hcHNob3QoZSl7ZS5zbmFwJiZhd2FpdCB0aGlzLnNldExheW91dChlLnNuYXAsdGhpcy5uZWVkX3RvX3Jlc2V0X2xheW91dCl9YXN5bmMgbGF1bmNoKGUpe2lmKCF0aGlzLmNsaWVudCl0aHJvdyBuZXcgRXJyb3IoXCJOb3QgY29ubmVjdGVkIHRvIGFuIFNuYXAgc2VydmVyXCIpO2UuYXBwQXNzZXRJbmZvJiYoZS5wYXRoPWF3YWl0IHRoaXMuZ2V0QXBwQXNzZXRFeGVjdXRhYmxlUGF0aCh7dGFyZ2V0OmUucGF0aCwuLi5lLmFwcEFzc2V0SW5mb30pKSxjb25zb2xlLmxvZyhcIm9wdGlvbnM6IFwiLGUpO2NvbnN0IHQ9e2FjdGlvbjpcInN0YXJ0UHJvY2Vzc1wiLHBheWxvYWQ6ey4uLmUsYXJnczplLmFyZ3N8fFtdfX07aWYoZS5zdHJhdGVneSl7Y29uc3R7dHlwZTpuLC4uLnJ9PWUuc3RyYXRlZ3k7dC5wYXlsb2FkLnN0cmF0ZWd5PXt0eXBlOm4scGFyYW1ldGVyczp7Li4ucn19fWNvbnN0IG49YXdhaXQodGhpcy5jbGllbnQ/LmRpc3BhdGNoKFwic25hcF9hcGlfaW52b2tlXCIsdCkpO2lmKG4/LnBheWxvYWQ/LnN1Y2Nlc3MpcmV0dXJue3Byb2Nlc3NfaWQ6bi5wYXlsb2FkLnByb2Nlc3NfaWR9O3Rocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGxhdW5jaCBwcm9jZXNzOiAke24/LnBheWxvYWQ/LmVycm9yfWApfWFzeW5jIHJlZ2lzdGVyV2luZG93KGUsdCl7YXdhaXQodGhpcy5jbGllbnQ/LmRpc3BhdGNoKFwic25hcF9hcGlfaW52b2tlXCIse2FjdGlvbjpcImhvb2tBbmRSZWdpc3RlcldpbmRvd1wiLHBheWxvYWQ6e2NsaWVudElkOmUsd2luZG93SGFuZGxlOnR9fSkpfWFzeW5jIGVuYWJsZUF1dG9XaW5kb3dSZWdpc3RyYXRpb24oKXtjb25zdCBlPWU9PnRoaXMuaGFuZGxlTmV3V2luZG93KGUpO3JldHVybiBhd2FpdCBmaW4uUGxhdGZvcm0uZ2V0Q3VycmVudFN5bmMoKS5hZGRMaXN0ZW5lcihcIndpbmRvdy1jcmVhdGVkXCIsZSksYXN5bmMoKT0+e2F3YWl0IGZpbi5TeXN0ZW0ucmVtb3ZlTGlzdGVuZXIoXCJ3aW5kb3ctY3JlYXRlZFwiLGUpfX1hc3luYyBhdHRhY2hXaW5kb3dzKGUsdCxuLHIpe2F3YWl0KHRoaXMuY2xpZW50Py5kaXNwYXRjaChcInNuYXBfYXBpX2ludm9rZVwiLHthY3Rpb246XCJhdHRhY2hcIixwYXlsb2FkOnt0YXJnZXRDbGllbnRJZDplLHRvQXR0YWNoQ2xpZW50SWQ6dCx0YXJnZXRTaWRlOm4sb2Zmc2V0OnJ9fSkpfWFzeW5jIGRldGFjaEZyb21Hcm91cChlKXthd2FpdCh0aGlzLmNsaWVudD8uZGlzcGF0Y2goXCJzbmFwX2FwaV9pbnZva2VcIix7YWN0aW9uOlwiZGV0YWNoRnJvbUdyb3VwXCIscGF5bG9hZDp7Y2xpZW50SWQ6ZX19KSl9YXN5bmMgZ2V0QXR0YWNoZWQoZSl7cmV0dXJuKGF3YWl0KHRoaXMuY2xpZW50Py5kaXNwYXRjaChcInNuYXBfYXBpX2ludm9rZVwiLHthY3Rpb246XCJnZXRBdHRhY2hlZEluc3RhbmNlc1wiLHBheWxvYWQ6e2NsaWVudElkOmV9fSkpKS5wYXlsb2FkLmF0dGFjaGVkfWFzeW5jIGhhc0F0dGFjaG1lbnRzKGUpe3JldHVybihhd2FpdCh0aGlzLmNsaWVudD8uZGlzcGF0Y2goXCJzbmFwX2FwaV9pbnZva2VcIix7YWN0aW9uOlwiaGFzQXR0YWNobWVudHNcIixwYXlsb2FkOntjbGllbnRJZDplfX0pKSkucGF5bG9hZC5oYXNBdHRhY2htZW50c31hZGRFdmVudExpc3RlbmVyKGUsdCl7dGhpcy5lbWl0dGVyLm9uKGUsdCl9cmVtb3ZlRXZlbnRMaXN0ZW5lcihlLHQpe3RoaXMuZW1pdHRlci5vZmYoZSx0KX1vbmNlKGUsdCl7dGhpcy5lbWl0dGVyLm9uY2UoZSx0KX1hc3luYyBoYW5kbGVOZXdXaW5kb3coZSl7Y29uc3QgdD1hd2FpdCBmaW4uV2luZG93LndyYXAoe3V1aWQ6ZS51dWlkLG5hbWU6ZS5uYW1lfSksbj1hd2FpdCB0LmdldE5hdGl2ZUlkKCk7bGV0IHI9dC5pZGVudGl0eS5uYW1lO2NvbnN0IGk9YXdhaXQgdC5nZXRPcHRpb25zKCk7aWYodm9pZCAwIT09aS5pbmNsdWRlSW5TbmFwc2hvdHMmJiExPT09aS5pbmNsdWRlSW5TbmFwc2hvdHMpcmV0dXJuIHZvaWQgY29uc29sZS5sb2coYFNuYXBTREs6IE5vdCByZWdpc3RlcmluZyAke2UudXVpZH06JHtlLm5hbWV9LCBXaW5kb3cgaXMgZXhwbGljaXRseSBleGNsdWRlZCAtaW5jbHVkZUluU25hcHNob3RzID09IGZhbHNlYCk7Y29uc3Qgcz1pLmN1c3RvbURhdGF8fHt9O3Muc25hcENsaWVudElkP3I9cy5zbmFwQ2xpZW50SWQ6YXdhaXQgdC51cGRhdGVPcHRpb25zKHtjdXN0b21EYXRhOnsuLi5zLHNuYXBDbGllbnRJZDpyfX0pLGF3YWl0IHRoaXMucmVnaXN0ZXJXaW5kb3cocixuKX1lbWl0X2V2ZW50KGUsLi4udCl7dGhpcy5lbWl0dGVyLmVtaXQoZSwuLi50KX1oYW5kbGVTbmFwRXZlbnRzKGUsdCl7c3dpdGNoKHRoaXMuZW1pdF9ldmVudChcImFsbC1ldmVudHNcIix7dHlwZTplLmFjdGlvbixwYXlsb2FkOmUucGF5bG9hZH0pLGUuYWN0aW9uKXtjYXNlXCJjbGllbnRSZWdpc3RlcmVkXCI6dGhpcy5lbWl0X2V2ZW50KFwiY2xpZW50LXJlZ2lzdGVyZWRcIix7Y2xpZW50SWQ6ZS5wYXlsb2FkLmNsaWVudElkLHdpbmRvd0hhbmRsZTpgIyR7ZS5wYXlsb2FkLndpbmRvd0hhbmRsZS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX1gLG93bmluZ1Byb2Nlc3NJZDplLnBheWxvYWQub3duaW5nUHJvY2Vzc0lkfSk7YnJlYWs7Y2FzZVwiY2xpZW50VW5SZWdpc3RlcmVkXCI6dGhpcy5lbWl0X2V2ZW50KFwiY2xpZW50LXVucmVnaXN0ZXJlZFwiLHsuLi5lLnBheWxvYWR9KTticmVhaztjYXNlXCJtb3ZlU2l6ZUNvbXBsZXRlZFwiOnRoaXMuZW1pdF9ldmVudChcIm1vdmUtc2l6ZS1jb21wbGV0ZWRcIix7Li4uZS5wYXlsb2FkfSk7YnJlYWs7Y2FzZVwiY2xpZW50c0F0dGFjaGVkXCI6dGhpcy5lbWl0X2V2ZW50KFwiY2xpZW50cy1hdHRhY2hlZFwiLHsuLi5lLnBheWxvYWR9KTticmVhaztjYXNlXCJjbGllbnREZXRhY2hlZFwiOnRoaXMuZW1pdF9ldmVudChcImNsaWVudC1kZXRhY2hlZFwiLHsuLi5lLnBheWxvYWR9KTticmVhaztjYXNlXCJncm91cHNDaGFuZ2VkXCI6dGhpcy5lbWl0X2V2ZW50KFwiZ3JvdXBzLWNoYW5nZWRcIix7Li4uZS5wYXlsb2FkfSk7YnJlYWs7Y2FzZVwiY2xpZW50QWN0aXZhdGVkXCI6dGhpcy5lbWl0X2V2ZW50KFwiY2xpZW50LWFjdGl2YXRlZFwiLHsuLi5lLnBheWxvYWR9KTticmVhaztjYXNlXCJjbGllbnREZWFjdGl2YXRlZFwiOnRoaXMuZW1pdF9ldmVudChcImNsaWVudC1kZWFjdGl2YXRlZFwiLHsuLi5lLnBheWxvYWR9KX19YXN5bmMgYnVpbGRfY29tbWFuZF9saW5lKGUpe2xldCB0PWAtLWlkICR7dGhpcy5zZXJ2ZXJfaWR9IGA7ZT8uc2hvd0RlYnVnJiYodCs9XCIgLS1zaG93LWRlYnVnIFwiKSxlPy5kaXNhYmxlR1BVQWNjZWxlcmF0ZWREcmFnZ2luZyYmKHQrPVwiIC0tZGlzYWJsZS1ncHUtYWNjZWxlcmF0ZWQtZHJhZ2dpbmcgdHJ1ZSBcIiksZT8uZGlzYWJsZUJsdXJEcm9wUHJldmlldyYmKHQrPVwiIC0tYmx1ci1kcm9wLXByZXZpZXcgZmFsc2UgXCIpLHZvaWQgMCE9PWU/LmJsdXJFZmZlY3RQZXJmb3JtYW5jZVRocmVzaG9sZCYmKHQrPWAgLS1ibHVyLWVmZmVjdC1wZXJmb3JtYW5jZS10aHJlc2hvbGQ9JHtlPy5ibHVyRWZmZWN0UGVyZm9ybWFuY2VUaHJlc2hvbGR9IGApLGU/LmRpc2FibGVVc2VyVW5zdGljayYmKHQrPVwiIC0tZGlzYWJsZS11c2VyLXVuc3RpY2sgXCIpLGU/LmtleVRvU3RpY2smJih0Kz1cIiAtLWtzIFwiKTtjb25zdCBuPWF3YWl0IGZpbi5TeXN0ZW0uZ2V0UnVudGltZUluZm8oKTtyZXR1cm4gdCs9YC0tcnVudGltZS1wb3J0ICR7bi5wb3J0fSBgLHQrPWAtLXJ1bnRpbWUtdmVyc2lvbiAke24udmVyc2lvbn0gYCx0LnRyaW0oKX1hc3luYyBnZXRBcHBBc3NldEV4ZWN1dGFibGVQYXRoKGUpe2xldCB0PShhd2FpdCBmaW4uU3lzdGVtLmdldFJ1bnRpbWVJbmZvKCkpLmFyZ3NbXCJsb2NhbC1zdGFydHVwLXVybFwiXS5yZXBsYWNlKFwiY29uZmlnLmpzb25cIixcIlwiKTtjb25zdCBuPXQuaW5jbHVkZXMoXCJcXFxcXCIpP1wiXFxcXFwiOlwiL1wiO3JldHVybiB0LmVuZHNXaXRoKG4pJiYodD10LnNsaWNlKDAsLTEpKSxbdCxcImFzc2V0c1wiLGUuYWxpYXMsZS52ZXJzaW9uLGUudGFyZ2V0XS5qb2luKG4pfX19KSgpO3ZhciBpPXIuUDtleHBvcnR7aSBhcyBTbmFwU2VydmVyfTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCB0eXBlIHsgU25hcFByb3ZpZGVyT3B0aW9ucyB9IGZyb20gXCIuLi9zaGFwZXNcIjtcbmltcG9ydCB7IGluaXRpYWxpemUgfSBmcm9tIFwiLi9wcmVsb2FkLmNvbW1vblwiO1xuXG5pZiAod2luZG93ID09PSB3aW5kb3cudG9wKSB7XG5cdGNvbnNvbGUubG9nKFwiQWRkaW5nIHNuYXAgc3VwcG9ydCB0aHJvdWdoIGEgZGVidWcgcHJlbG9hZC5cIik7XG5cblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGFzeW5jICgpID0+IHtcblx0XHRjb25zdCBzbmFwT3B0aW9uczogU25hcFByb3ZpZGVyT3B0aW9ucyA9IHsgcGxhdGZvcm1JZDogZmluLm1lLmlkZW50aXR5LnV1aWQsIHNob3dEZWJ1Z1dpbmRvdzogdHJ1ZSB9O1xuXHRcdGF3YWl0IGluaXRpYWxpemUoc25hcE9wdGlvbnMpO1xuXHR9KTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==