{"version":3,"file":"example-notification-source.bundle.js","mappings":"AACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,KCK3E,SAASI,EAAQC,GAEvB,OAAOA,OACR,C,iBCFO,MAAMC,EAAgE,CAC5EC,SAAU,ICGJ,MA8BC,gBAAMC,CACZhB,EACAiB,EACAC,GAEAC,KAAKC,YAAcpB,EACnBmB,KAAKE,QAAUJ,EAAc,qCAC7BE,KAAKG,SAAWJ,EAEhBC,KAAKE,QAAQE,KAAK,gBAGlBJ,KAAKK,qBAAuB,EAC7B,CAMO,eAAMC,GACZN,KAAKE,SAASE,KAAK,aAEdX,EAAQO,KAAKO,wBACXP,KAAKO,gBAAgBC,QAE7B,CAQO,YAAMC,CACZC,EACAC,GAIA,OAAKlB,EAAQkB,IAKbX,KAAKE,SAASU,KAAK,8CACZ,IALNZ,KAAKE,SAASE,KAAK,0BAA0BS,KAAKC,UAAUH,MAC5DX,KAAKK,sBAAsBU,KAAKJ,IACzB,EAIT,CAQO,mBAAMK,CACZN,EACAC,GAOA,OALIlB,EAAQO,KAAKO,mBAChBP,KAAKE,SAASE,KAAK,uBACnBJ,KAAKO,gBAAkBP,KAAKiB,wBAE7BjB,KAAKE,SAASE,KAAK,8BACZJ,KAAKO,eACb,CAMQ,oBAAAU,GACP,IAAIC,EACJ,MAAMC,EAAwBnB,KAAKC,aAAamB,MAAMC,mBAAqB,EACrEC,EAAyE,KAAzDH,EAAwB,EAAI,EAAIA,GAKhDI,EAAyB,KAC9B,MAAMC,EAAsB,IAAKxB,KAAKK,sBAAwB,IAE9D,OADAL,KAAKK,qBAAuB,GACrBmB,CAAmB,EAuB3B,OArBe,IAAIC,eAAoC,CAKtD,KAAAC,CAAMC,GACLT,EAAaU,aAAY,KAExB,MAAMC,EAAQN,IACd,IAAK,MAAMO,KAAgBD,EAC1BF,EAAWI,QAAQD,EACpB,GACER,EACJ,EAIA,MAAAd,GACCwB,cAAcd,EACf,GAGF,I","sources":["webpack://openfin-workspace--workspace-platform-starter/webpack/bootstrap","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/define property getters","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/hasOwnProperty shorthand","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/endpoint/example-notification-source/index.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/endpoint/example-notification-source/endpoint.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? undefined : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n","import type { ModuleImplementation, ModuleTypes } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { ExampleNotificationSourceProvider } from \"./endpoint\";\n\n/**\n * Define the entry points for the module.\n */\nexport const entryPoints: { [type in ModuleTypes]?: ModuleImplementation } = {\n\tendpoint: new ExampleNotificationSourceProvider()\n};\n","import type { NotificationOptions } from \"@openfin/workspace/notifications\";\nimport type { Endpoint, EndpointDefinition } from \"workspace-platform-starter/shapes/endpoint-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty } from \"workspace-platform-starter/utils\";\nimport type { ExampleNotificationSourceProviderOptions } from \"./shapes\";\n\n/**\n * Implementation for the example notification source endpoint provider.\n */\nexport class ExampleNotificationSourceProvider implements Endpoint<ExampleNotificationSourceProviderOptions> {\n\t/**\n\t * The module definition including settings.\n\t * @internal\n\t */\n\tprivate _definition: ModuleDefinition<ExampleNotificationSourceProviderOptions> | undefined;\n\n\t/**\n\t * The logger for displaying information from the module.\n\t * @internal\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Helper methods for the module.\n\t * @internal\n\t */\n\tprivate _helpers: ModuleHelpers | undefined;\n\n\tprivate _queuedNotifications: NotificationOptions[] | undefined;\n\n\tprivate _readableStream: ReadableStream<NotificationOptions> | undefined;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<ExampleNotificationSourceProviderOptions>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._definition = definition;\n\t\tthis._logger = loggerCreator(\"ExampleNotificationSourceProvider\");\n\t\tthis._helpers = helpers;\n\n\t\tthis._logger.info(\"Initializing\");\n\n\t\t// initialize the queue\n\t\tthis._queuedNotifications = [];\n\t}\n\n\t/**\n\t * Close down any resources being used by the module.\n\t * @returns Nothing.\n\t */\n\tpublic async closedown(): Promise<void> {\n\t\tthis._logger?.info(\"Closedown\");\n\n\t\tif (!isEmpty(this._readableStream)) {\n\t\t\tawait this._readableStream.cancel();\n\t\t}\n\t}\n\n\t/**\n\t * Handle an action sent to the endpoint.\n\t * @param endpointDefinition The definition of the endpoint.\n\t * @param request The request to process.\n\t * @returns True if processed.\n\t */\n\tpublic async action(\n\t\tendpointDefinition: EndpointDefinition,\n\t\trequest?: NotificationOptions\n\t): Promise<boolean> {\n\t\t// this could post to a backend service so that the notification is picked up server side and then distributed to all connected clients (e.g. browser, OpenFin etc)\n\t\t// for now we are simulating it by putting anything posted into a queue so that it will be picked up by the stream\n\t\tif (!isEmpty(request)) {\n\t\t\tthis._logger?.info(`Received notification: ${JSON.stringify(request)}`);\n\t\t\tthis._queuedNotifications?.push(request);\n\t\t\treturn true;\n\t\t}\n\t\tthis._logger?.warn(\"Action called with an empty notification.\");\n\t\treturn false;\n\t}\n\n\t/**\n\t * Handle a requestStream request on an endpoint.\n\t * @param endpointDefinition The definition of the endpoint.\n\t * @param request The request to process if needed.\n\t * @returns The readable stream response to the request, or undefined if not handled.\n\t */\n\tpublic async requestStream(\n\t\tendpointDefinition: EndpointDefinition,\n\t\trequest?: unknown\n\t): Promise<ReadableStream<unknown> | undefined> {\n\t\tif (isEmpty(this._readableStream)) {\n\t\t\tthis._logger?.info(\"Creating new stream\");\n\t\t\tthis._readableStream = this.createReadableStream();\n\t\t}\n\t\tthis._logger?.info(\"Returning requested stream\");\n\t\treturn this._readableStream;\n\t}\n\n\t/**\n\t * This function is called when the stream is requested.\n\t * @returns The readable stream of notifications.\n\t */\n\tprivate createReadableStream(): ReadableStream<NotificationOptions> {\n\t\tlet intervalId: number | NodeJS.Timeout | undefined;\n\t\tconst intervalTimeInSeconds = this._definition?.data?.intervalInSeconds ?? 1;\n\t\tconst intervalTime = (intervalTimeInSeconds < 1 ? 1 : intervalTimeInSeconds) * 1000;\n\t\t/**\n\t\t * Get the pending notification from the queue.\n\t\t * @returns The pending notification.\n\t\t */\n\t\tconst getPendingNotification = (): NotificationOptions[] => {\n\t\t\tconst queuedNotifications = [...(this._queuedNotifications ?? [])];\n\t\t\tthis._queuedNotifications = [];\n\t\t\treturn queuedNotifications;\n\t\t};\n\t\tconst stream = new ReadableStream<NotificationOptions>({\n\t\t\t/**\n\t\t\t * Starts the stream and sends a message every second.\n\t\t\t * @param controller The controller to push values to the stream.\n\t\t\t */\n\t\t\tstart(controller): void {\n\t\t\t\tintervalId = setInterval(() => {\n\t\t\t\t\t// the notification can be fetched from a websocket but here we are just popping off the queue\n\t\t\t\t\tconst queue = getPendingNotification();\n\t\t\t\t\tfor (const notification of queue) {\n\t\t\t\t\t\tcontroller.enqueue(notification);\n\t\t\t\t\t}\n\t\t\t\t}, intervalTime);\n\t\t\t},\n\t\t\t/**\n\t\t\t * When the stream is cancelled this function is called.\n\t\t\t */\n\t\t\tcancel(): void {\n\t\t\t\tclearInterval(intervalId);\n\t\t\t}\n\t\t});\n\t\treturn stream;\n\t}\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","isEmpty","value","entryPoints","endpoint","initialize","loggerCreator","helpers","this","_definition","_logger","_helpers","info","_queuedNotifications","closedown","_readableStream","cancel","action","endpointDefinition","request","warn","JSON","stringify","push","requestStream","createReadableStream","intervalId","intervalTimeInSeconds","data","intervalInSeconds","intervalTime","getPendingNotification","queuedNotifications","ReadableStream","start","controller","setInterval","queue","notification","enqueue","clearInterval"],"sourceRoot":""}