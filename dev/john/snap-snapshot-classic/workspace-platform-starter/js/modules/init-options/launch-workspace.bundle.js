function e(e){return null==e}const o={initOptions:new class{async initialize(e,o,t){this._logger=o("InitOptionsLaunchWorkspaceHandler"),this._helpers=t,this._definition=e,this._logger.info("The handler has been loaded")}async action(o,t,n){if(e(t))this._logger?.warn(`Actions passed to the module require a payload to be passed. Requested action: ${o} can not be fulfilled.`);else try{if("launch-workspace"===o){const o=t?.workspaceId;if(this._logger?.info(`The following workspaceId was passed and requested to launch: ${o}`),!(function(e){return null!=e&&"string"==typeof e}(r=o)&&r.trim().length>0))return void this._logger?.error("The init handler received a workspaceId in the wrong format and is unable to launch it");if(e(this._helpers?.launchWorkspace))return void this._logger?.warn(`Unable to launch workspace with workspaceId: ${o} as a launchWorkspace function was not passed to this module via the module helpers.`);this._logger?.info(`Requesting the launch of workspace with workspaceId: ${o}`),await(this._helpers?.launchWorkspace(o,this._logger))}}catch(e){this._logger?.error(`Error trying to perform action ${o}.`,e)}var r}}};export{o as entryPoints};
//# sourceMappingURL=launch-workspace.bundle.js.map