var e={d:(t,a)=>{for(var i in a)e.o(a,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:a[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};function a(e){return null==e}e.d(t,{k:()=>i});const i={share:new class{async initialize(e,t,a){this._definition=e,this._logger=t("WorkspacesShareProvider"),this._helpers=a,this._logger.info("Initializing")}async closedown(){this._logger?.info("Closedown")}async getShareTypes(){return["workspace"]}async getEntries(e){return[{label:"Share Workspace",type:"workspace",payload:{windowIdentity:e}}]}async share(e,t){if("workspace"===e){const i=await(this._helpers?.getPlatform?.());if(i){let s;const r=t?.workspaceId;if(s=a(r)?await i.getCurrentWorkspace():await i.Storage.getWorkspace(r),!a(s)){const r=await async function(e,t,i,s,r,n){if(a(i))t?.warn("Endpoint client is not available.");else if(a(i.requestResponse))t?.warn("Endpoint client requestResponse is not available.");else{if(!a(s)){try{const l=24,h=await i.requestResponse(s,{type:r,data:n});if(h){let i=h.id;if(a(i)){const e=h.url.lastIndexOf("/");-1!==e&&(i=h.url.slice(e+1))}if(!a(i)){const a=await e.Application.getInfo();let s;if(a.manifestUrl.startsWith("http")?s=`${a.manifestUrl.replace("http","fin")}?$$shareType=${r}&$$payload=${btoa(JSON.stringify({id:i}))}`:t?.error("We do not support file based manifest launches. The manifest has to be served over http/https:",a.manifestUrl),function(e){return null!=e&&"string"==typeof e}(o=s)&&o.trim().length>0)return await fin.Clipboard.writeText({data:s}),{title:"Share Request Raised",message:`The share request you raised has been copied to the **clipboard** and will be valid for ${l} hours. \n Share Url: \n * **${s}**`,status:"shared"}}}}catch(e){t?.error("Error saving share request:",e)}return{title:"Share Request Failed",message:"The share request you raised could not be generated.",status:"error"}}t?.warn("Endpoint id is not available.")}var o}(i,this._logger,await(this._helpers?.getEndpointClient?.()),this._definition?.data?.setEndpointId,e,s);await this.showConfirmation(r,t?.windowIdentity)}}}}async handle(e,t){if("workspace"===e){const i=await async function(e,t,i,s,r){if(a(t))e?.warn("Endpoint client is not available.");else if(a(t.requestResponse))e?.warn("Endpoint client requestResponse is not available.");else{if(!a(i)){try{const i=await t.requestResponse("share-get",{id:r});return a(i)?{confirmation:{title:"Share Load Expired",message:"The share request has expired and is no longer available.",status:"error"}}:s!==i.type?(e?.warn(`Share entry of mismatched type specified: ${i.type} it should be ${s}`),{confirmation:{title:"Share Load Failed",message:"The specified share link does not contain the correct data for the share type.",status:"error"}}):{payload:i.data,confirmation:{title:"Share Request Applied",message:"The share request has been fetched and applied.",status:"loaded"}}}catch(t){e?.error("There has been an error trying to load and apply the share link.",t)}return{confirmation:{title:"Share Load Failed",message:"The specified share link cannot be loaded.",status:"error"}}}e?.warn("Endpoint id is not available.")}}(this._logger,await(this._helpers?.getEndpointClient?.()),this._definition?.data?.getEndpointId,e,t.id),s=await(this._helpers?.getPlatform?.());if(s){const e=i?.payload;!a(e)&&this._helpers?.launchWorkspace&&(await s.Storage.saveWorkspace(e),await this._helpers.launchWorkspace(e.workspaceId,this._logger))}await this.showConfirmation(i?.confirmation)}}async showConfirmation(e,t){if(!a(e)&&this._helpers?.getShareClient){this._logger?.info(e);const i=await this._helpers.getShareClient();if(i){const s="error"===e.status?"error":"success";if(e.iconUrl=this._definition?.data?.images[s],this._helpers?.getThemeClient&&!a(e.iconUrl)){const t=await this._helpers.getThemeClient();e.iconUrl=await t.themeUrl(e.iconUrl)}await i.confirmation(e,this._definition?.data?.confirmationMode,t)}}}}};var s=t.k;export{s as entryPoints};
//# sourceMappingURL=workspaces.bundle.js.map