{"version":3,"file":"example-notification-service.bundle.js","mappings":"AACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,KCK3E,SAASI,EAAQC,GAEvB,OAAOA,OACR,C,iBCFO,MAAMC,EAAgE,CAC5EC,UAAW,ICsBL,MAgDC,gBAAMC,CACZhB,EACAiB,EACAC,GAEAC,KAAKC,YAAcpB,EACnBmB,KAAKE,QAAUJ,EAAc,8BAA8BE,KAAKC,aAAaE,QAC7EH,KAAKI,SAAWL,EAChBC,KAAKK,wBAA0B,CAAC,EAChCL,KAAKE,QAAQI,KAAK,eACnB,CAMO,eAAMC,GACZP,KAAKE,SAASI,KAAK,mBAEbN,KAAKQ,yBACZ,CAMO,SAAMrB,GACZ,MAAMsB,EAAkC,CAAC,EASzC,OAPAA,EAAa,mBAAqBC,MACjCC,EACAC,WAEMZ,KAAKa,0BAA0B,EAG/BJ,CACR,CAKQ,8BAAMI,GACb,MAAMC,EAAYd,KAAKC,aAAac,MAAMC,iBAO1C,GANAhB,KAAKE,SAASI,KACb,mDACCQ,GAAa,0EAIXd,KAAKI,UAAUa,0BAEbjB,KAAKK,0BACTL,KAAKK,wBAA0B,CAAC,GAE5BL,KAAKkB,6BACTlB,KAAKkB,2BAA6B,CAAC,GAGhClB,KAAKI,UAAUe,wBAClBnB,KAAKoB,0BAA4BpB,KAAKI,SAASe,yBAG5CnB,KAAKoB,qBAAqB,CAG7B,SAFMpB,KAAKqB,mCAE2C,IAAlDrB,KAAKC,aAAac,MAAMO,UAAUC,YAAuB,CAC5D,MAAMC,EAA0BxB,KAAKI,UAAUa,wBAAwB,gBAAgBP,UACtF,MAAMe,EAAoC,CACzCC,MAAO,4BACPC,KAAM,mHAAmH3B,KAAKC,aAAaE,OAC3IyB,MAAO,YACPC,SAAU,UACVC,SAAU,kBAEL9B,KAAKoB,qBAAqBW,OAAON,GAAa,IAErDzB,KAAKK,wBAAwBmB,GAA2B,cACzD,CAEA,IAA0D,IAAtDxB,KAAKC,aAAac,MAAMO,UAAUU,gBAA2B,CAChE,MAAMC,EAA8BjC,KAAKI,UAAUa,wBAClD,oBACAP,UACC,MAAMe,EAAoC,CACzCC,MAAO,gCACPC,KAAM,kHAAkH3B,KAAKC,aAAaE,OAC1IyB,MAAO,YACPC,SAAU,UACVC,SAAU,kBAEL9B,KAAKoB,qBAAqBW,OAAON,GAAa,IAGtDzB,KAAKK,wBAAwB4B,GAA+B,kBAC7D,CAEA,IAAsD,IAAlDjC,KAAKC,aAAac,MAAMO,UAAUY,YAAuB,CAC5D,MAAMC,EAA0BnC,KAAKI,UAAUa,wBAAwB,gBAAgBP,UACtF,MAAMe,EAAoC,CACzCC,MAAO,4BACPC,KAAM,gHAAgH3B,KAAKC,aAAaE,OACxIyB,MAAO,YACPC,SAAU,UACVC,SAAU,kBAEL9B,KAAKoB,qBAAqBW,OAAON,GAAa,IAErDzB,KAAKK,wBAAwB8B,GAA2B,cACzD,CAEA,IAAuD,IAAnDnC,KAAKC,aAAac,MAAMO,UAAUc,aAAwB,CAC7D,MAAMC,EAA2BrC,KAAKI,UAAUa,wBAC/C,iBACAP,UACC,MAAMe,EAAoC,CACzCC,MAAO,gBACPC,KAAM,mHAAmH3B,KAAKC,aAAaE,OAC3IyB,MAAO,YACPC,SAAU,UACVC,SAAU,WACVQ,KAAM,CACL,CACCC,KAAM,UACNzD,IAAK,wBACL0D,MAAO,sCACPC,OAAQ,CACPF,KAAM,YAITG,QAAS,CACR,CACChB,MAAO,eACPa,KAAM,SACNI,KAAK,EACLC,QAAQ,WAIL5C,KAAKoB,qBAAqBW,OAAON,GAAa,IAGtDzB,KAAKK,wBAAwBgC,GAA4B,eAC1D,CAEA,IAA2D,IAAvDrC,KAAKC,aAAac,MAAMO,UAAUuB,iBAA4B,CACjE,MAAMC,EAA+B9C,KAAKI,UAAUa,wBACnD,qBACAP,UACC,MAAMe,EAAoC,CACzCC,MAAO,oBACPC,KAAM,sGAAsG3B,KAAKC,aAAaE,OAC9HyB,MAAO,YACPC,SAAU,UACVC,SAAU,WACVY,QAAS,CACR,CACChB,MAAO,eACPa,KAAM,SACNI,KAAK,EACLI,QAAS,CACRC,KAAM,mBACNpC,WAAY,CACXqC,QAAS,+BAIZ,CACCvB,MAAO,SACPa,KAAM,kBAIHvC,KAAKoB,qBAAqBW,OAAON,GAAa,IAGtDzB,KAAKK,wBAAwByC,GAAgC,mBAC9D,CACD,CAEF,CAKQ,6BAAMtC,GAEb,GADAR,KAAKE,SAASI,KAAK,oEACfN,KAAKI,UAAU8C,2BAA6BlD,KAAKK,wBACpD,IAAK,MAAOvB,EAAKY,KAAUV,OAAOmE,QAAQnD,KAAKK,yBAC9CL,KAAKI,SAAS8C,0BAA0BpE,EAAKY,SAGzCM,KAAKoD,kCACZ,CAKQ,qCAAM/B,GACb,IAAK5B,EAAQO,KAAKoB,uBAAyB3B,EAAQO,KAAKkB,4BAA6B,CACpF,MAAMmC,EAAsBC,IAC3BtD,KAAKE,SAASI,KAAK,0CAA2CgD,EAAM,QAG/DtD,KAAKoB,oBAAoBmC,iBAAiB,sBAAuBF,GACvErD,KAAKkB,2BAA2B,uBAAyBmC,EAEzD,MAAMG,EAAsBF,IAC3BtD,KAAKE,SAASI,KAAK,0CAA2CgD,EAAM,QAG/DtD,KAAKoB,oBAAoBmC,iBAAiB,sBAAuBC,GACvExD,KAAKkB,2BAA2B,uBAAyBsC,EAEzD,MAAMC,EAAuBH,IAC5BtD,KAAKE,SAASI,KAAK,2CAA4CgD,EAAM,QAGhEtD,KAAKoB,oBAAoBmC,iBAAiB,uBAAwBE,GACxEzD,KAAKkB,2BAA2B,wBAA0BuC,EAE1D,MAAMC,EAA6BJ,IAClCtD,KAAKE,SAASI,KAAK,kDAAmDgD,EAAM,QAGvEtD,KAAKoB,oBAAoBmC,iBAC9B,8BACAG,GAED1D,KAAKkB,2BAA2B,+BAAiCwC,EAEjE,MAAMC,EAA+BL,IACpCtD,KAAKE,SAASI,KAAK,oDAAqDgD,EAAM,QAGzEtD,KAAKoB,oBAAoBmC,iBAC9B,gCACAI,GAED3D,KAAKkB,2BAA2B,iCAAmCyC,EAEnE,MAAMC,EAA+BN,IACpCtD,KAAKE,SAASI,KAAK,oDAAqDgD,EAAM,QAGzEtD,KAAKoB,oBAAoBmC,iBAC9B,gCACAK,GAED5D,KAAKkB,2BAA2B,iCAAmC0C,EAEnE,MAAMC,EAA8BP,IACnCtD,KAAKE,SAASI,KAAK,mDAAoDgD,EAAM,QAGxEtD,KAAKoB,oBAAoBmC,iBAC9B,+BACAM,GAED7D,KAAKkB,2BAA2B,gCAAkC2C,EAElE,MAAMC,EAAyCR,IAC9CtD,KAAKE,SAASI,KAAK,iDAAkDgD,EAAM,QAGtEtD,KAAKoB,oBAAoBmC,iBAC9B,8BACAO,GAED9D,KAAKkB,2BAA2B,+BAAiC4C,CAClE,CACD,CAKQ,sCAAMV,GACb,IAAK3D,EAAQO,KAAKoB,uBAAyB3B,EAAQO,KAAKkB,4BACvD,IAAK,MAAOpC,EAAKY,KAAUV,OAAOmE,QAAQnD,KAAKkB,kCACxClB,KAAKoB,oBAAoB2C,oBAC9BjF,EACAY,EAIJ,I","sources":["webpack://openfin-workspace--workspace-platform-starter/webpack/bootstrap","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/define property getters","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/hasOwnProperty shorthand","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/lifecycle/example-notification-service/index.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/lifecycle/example-notification-service/lifecycle.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? undefined : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n","import type { ModuleImplementation, ModuleTypes } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { ExampleNotificationServiceProvider } from \"./lifecycle\";\n\n/**\n * Define the entry points for the module.\n */\nexport const entryPoints: { [type in ModuleTypes]?: ModuleImplementation } = {\n\tlifecycle: new ExampleNotificationServiceProvider()\n};\n","import type { WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport type {\n\tNotificationActionEvent,\n\tNotificationClosedEvent,\n\tNotificationCreatedEvent,\n\tNotificationFormSubmittedEvent,\n\tNotificationReminderCreatedEvent,\n\tNotificationReminderRemovedEvent,\n\tNotificationToastDismissedEvent,\n\tNotificationsCountChanged,\n\tNotificationOptions\n} from \"@openfin/workspace/notifications\";\nimport type {\n\tLifecycle,\n\tLifecycleEventMap,\n\tLifecycleEvents\n} from \"workspace-platform-starter/shapes/lifecycle-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport type {\n\tNotificationClient,\n\tNotificationsEventMap\n} from \"workspace-platform-starter/shapes/notification-shapes\";\nimport { isEmpty } from \"workspace-platform-starter/utils\";\nimport type { ExampleNotificationServiceProviderOptions } from \"./shapes\";\n\n/**\n * Implementation for the example notification service lifecycle provider.\n */\nexport class ExampleNotificationServiceProvider\n\timplements Lifecycle<ExampleNotificationServiceProviderOptions>\n{\n\t/**\n\t * The module definition including settings.\n\t * @internal\n\t */\n\tprivate _definition: ModuleDefinition<ExampleNotificationServiceProviderOptions> | undefined;\n\n\t/**\n\t * The logger for displaying information from the module.\n\t * @internal\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Helper methods for the module.\n\t * @internal\n\t */\n\tprivate _helpers: ModuleHelpers | undefined;\n\n\t/**\n\t * An object containing current subscriptions.\n\t * @internal\n\t */\n\tprivate _lifeCycleSubscriptions: { [key: string]: LifecycleEvents } | undefined;\n\n\t/**\n\t * An object containing current subscriptions.\n\t * @internal\n\t */\n\tprivate _notificationSubscriptions:\n\t\t| { [key in keyof NotificationsEventMap]?: (event: NotificationsEventMap[key]) => void }\n\t\t| undefined;\n\n\t/**\n\t * A notification client if available.\n\t * @internal\n\t */\n\tprivate _notificationClient: NotificationClient | undefined;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<ExampleNotificationServiceProviderOptions>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._definition = definition;\n\t\tthis._logger = loggerCreator(`ExampleNotificationService(${this._definition?.id}):`);\n\t\tthis._helpers = helpers;\n\t\tthis._lifeCycleSubscriptions = {};\n\t\tthis._logger.info(\"Initializing\");\n\t}\n\n\t/**\n\t * Close down any resources being used by the module.\n\t * @returns Nothing.\n\t */\n\tpublic async closedown(): Promise<void> {\n\t\tthis._logger?.info(\"Closedown\");\n\t\t// disconnect from websocket/server sent event source for example\n\t\tawait this.stopNotificationService();\n\t}\n\n\t/**\n\t * Get the lifecycle events.\n\t * @returns The map of lifecycle events.\n\t */\n\tpublic async get(): Promise<LifecycleEventMap> {\n\t\tconst lifecycleMap: LifecycleEventMap = {};\n\n\t\tlifecycleMap[\"after-bootstrap\"] = async (\n\t\t\tplatform: WorkspacePlatformModule,\n\t\t\tcustomData?: unknown\n\t\t): Promise<void> => {\n\t\t\tawait this.startNotificationService();\n\t\t};\n\n\t\treturn lifecycleMap;\n\t}\n\n\t/**\n\t * Starts the notification service.\n\t */\n\tprivate async startNotificationService(): Promise<void> {\n\t\tconst serverUrl = this._definition?.data?.exampleServerUrl;\n\t\tthis._logger?.info(\n\t\t\t`Starting notification service and connecting to ${\n\t\t\t\tserverUrl ?? \"https://examplenotificationserver\"\n\t\t\t} (Not Really...this is an example.)`\n\t\t);\n\n\t\tif (this._helpers?.subscribeLifecycleEvent) {\n\t\t\t// we have been passed the ability to subscribe to lifecycle events.\n\t\t\tif (!this._lifeCycleSubscriptions) {\n\t\t\t\tthis._lifeCycleSubscriptions = {};\n\t\t\t}\n\t\t\tif (!this._notificationSubscriptions) {\n\t\t\t\tthis._notificationSubscriptions = {};\n\t\t\t}\n\n\t\t\tif (this._helpers?.getNotificationClient) {\n\t\t\t\tthis._notificationClient = await this._helpers.getNotificationClient();\n\t\t\t}\n\n\t\t\tif (this._notificationClient) {\n\t\t\t\tawait this.setupNotificationEventListeners();\n\n\t\t\t\tif (this._definition?.data?.notifyOn?.appsChanged !== false) {\n\t\t\t\t\tconst appsChangedSubscription = this._helpers?.subscribeLifecycleEvent(\"apps-changed\", async () => {\n\t\t\t\t\t\tconst notification: NotificationOptions = {\n\t\t\t\t\t\t\ttitle: \"Apps Changed Notification\",\n\t\t\t\t\t\t\tbody: `The list of apps on this platform has changed.This was generated by the example notification service (moduleId: ${this._definition?.id}).`,\n\t\t\t\t\t\t\ttoast: \"transient\",\n\t\t\t\t\t\t\tcategory: \"default\",\n\t\t\t\t\t\t\ttemplate: \"markdown\"\n\t\t\t\t\t\t};\n\t\t\t\t\t\tawait this._notificationClient?.create(notification);\n\t\t\t\t\t});\n\t\t\t\t\tthis._lifeCycleSubscriptions[appsChangedSubscription] = \"apps-changed\";\n\t\t\t\t}\n\n\t\t\t\tif (this._definition?.data?.notifyOn?.favoriteChanged !== false) {\n\t\t\t\t\tconst favoriteChangedSubscription = this._helpers?.subscribeLifecycleEvent(\n\t\t\t\t\t\t\"favorite-changed\",\n\t\t\t\t\t\tasync () => {\n\t\t\t\t\t\t\tconst notification: NotificationOptions = {\n\t\t\t\t\t\t\t\ttitle: \"Favorite Changed Notification\",\n\t\t\t\t\t\t\t\tbody: `You have changed a favorite on this platform.This was generated by the example notification service (moduleId: ${this._definition?.id}).`,\n\t\t\t\t\t\t\t\ttoast: \"transient\",\n\t\t\t\t\t\t\t\tcategory: \"default\",\n\t\t\t\t\t\t\t\ttemplate: \"markdown\"\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tawait this._notificationClient?.create(notification);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tthis._lifeCycleSubscriptions[favoriteChangedSubscription] = \"favorite-changed\";\n\t\t\t\t}\n\n\t\t\t\tif (this._definition?.data?.notifyOn?.pageChanged !== false) {\n\t\t\t\t\tconst pageChangedSubscription = this._helpers?.subscribeLifecycleEvent(\"page-changed\", async () => {\n\t\t\t\t\t\tconst notification: NotificationOptions = {\n\t\t\t\t\t\t\ttitle: \"Page Changed Notification\",\n\t\t\t\t\t\t\tbody: `You have changed the page on this platform.This was generated by the example notification service (moduleId: ${this._definition?.id}).`,\n\t\t\t\t\t\t\ttoast: \"transient\",\n\t\t\t\t\t\t\tcategory: \"default\",\n\t\t\t\t\t\t\ttemplate: \"markdown\"\n\t\t\t\t\t\t};\n\t\t\t\t\t\tawait this._notificationClient?.create(notification);\n\t\t\t\t\t});\n\t\t\t\t\tthis._lifeCycleSubscriptions[pageChangedSubscription] = \"page-changed\";\n\t\t\t\t}\n\n\t\t\t\tif (this._definition?.data?.notifyOn?.themeChanged !== false) {\n\t\t\t\t\tconst themeChangedSubscription = this._helpers?.subscribeLifecycleEvent(\n\t\t\t\t\t\t\"theme-changed\",\n\t\t\t\t\t\tasync () => {\n\t\t\t\t\t\t\tconst notification: NotificationOptions = {\n\t\t\t\t\t\t\t\ttitle: \"Theme Changed\",\n\t\t\t\t\t\t\t\tbody: `You have changed the theme for this platform. This was generated by the example notification service (moduleId: ${this._definition?.id}).`,\n\t\t\t\t\t\t\t\ttoast: \"transient\",\n\t\t\t\t\t\t\t\tcategory: \"default\",\n\t\t\t\t\t\t\t\ttemplate: \"markdown\",\n\t\t\t\t\t\t\t\tform: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\t\t\t\t\tkey: \"intended theme change\",\n\t\t\t\t\t\t\t\t\t\tlabel: \"Did you intend to change the theme?\",\n\t\t\t\t\t\t\t\t\t\twidget: {\n\t\t\t\t\t\t\t\t\t\t\ttype: \"Toggle\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttitle: \"Acknowledged\",\n\t\t\t\t\t\t\t\t\t\ttype: \"button\",\n\t\t\t\t\t\t\t\t\t\tcta: true,\n\t\t\t\t\t\t\t\t\t\tsubmit: true\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tawait this._notificationClient?.create(notification);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tthis._lifeCycleSubscriptions[themeChangedSubscription] = \"theme-changed\";\n\t\t\t\t}\n\n\t\t\t\tif (this._definition?.data?.notifyOn?.workspaceChanged !== false) {\n\t\t\t\t\tconst workspaceChangedSubscription = this._helpers?.subscribeLifecycleEvent(\n\t\t\t\t\t\t\"workspace-changed\",\n\t\t\t\t\t\tasync () => {\n\t\t\t\t\t\t\tconst notification: NotificationOptions = {\n\t\t\t\t\t\t\t\ttitle: \"Workspace Changed\",\n\t\t\t\t\t\t\t\tbody: `You have changed your workspace. This was generated by the example notification service (moduleId: ${this._definition?.id}).`,\n\t\t\t\t\t\t\t\ttoast: \"transient\",\n\t\t\t\t\t\t\t\tcategory: \"default\",\n\t\t\t\t\t\t\t\ttemplate: \"markdown\",\n\t\t\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttitle: \"Acknowledged\",\n\t\t\t\t\t\t\t\t\t\ttype: \"button\",\n\t\t\t\t\t\t\t\t\t\tcta: true,\n\t\t\t\t\t\t\t\t\t\tonClick: {\n\t\t\t\t\t\t\t\t\t\t\ttask: \"acknowledge-task\",\n\t\t\t\t\t\t\t\t\t\t\tcustomData: {\n\t\t\t\t\t\t\t\t\t\t\t\tmessage: \"This is the response data\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttitle: \"Cancel\",\n\t\t\t\t\t\t\t\t\t\ttype: \"button\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tawait this._notificationClient?.create(notification);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tthis._lifeCycleSubscriptions[workspaceChangedSubscription] = \"workspace-changed\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stops the notification service.\n\t */\n\tprivate async stopNotificationService(): Promise<void> {\n\t\tthis._logger?.info(\"Stopping notification service (Not Really...this is an example.)\");\n\t\tif (this._helpers?.unsubscribeLifecycleEvent && this._lifeCycleSubscriptions) {\n\t\t\tfor (const [key, value] of Object.entries(this._lifeCycleSubscriptions)) {\n\t\t\t\tthis._helpers.unsubscribeLifecycleEvent(key, value);\n\t\t\t}\n\t\t}\n\t\tawait this.removeNotificationEventListeners();\n\t}\n\n\t/**\n\t * Setup listeners using the notification client fetched via a helper.\n\t */\n\tprivate async setupNotificationEventListeners(): Promise<void> {\n\t\tif (!isEmpty(this._notificationClient) && !isEmpty(this._notificationSubscriptions)) {\n\t\t\tconst actionEventHandler = (event: NotificationActionEvent): void => {\n\t\t\t\tthis._logger?.info(\"Event for notification action received.\", event);\n\t\t\t};\n\n\t\t\tawait this._notificationClient.addEventListener(\"notification-action\", actionEventHandler);\n\t\t\tthis._notificationSubscriptions[\"notification-action\"] = actionEventHandler;\n\n\t\t\tconst closedEventHandler = (event: NotificationClosedEvent): void => {\n\t\t\t\tthis._logger?.info(\"Event for notification closed received.\", event);\n\t\t\t};\n\n\t\t\tawait this._notificationClient.addEventListener(\"notification-closed\", closedEventHandler);\n\t\t\tthis._notificationSubscriptions[\"notification-closed\"] = closedEventHandler;\n\n\t\t\tconst createdEventHandler = (event: NotificationCreatedEvent): void => {\n\t\t\t\tthis._logger?.info(\"Event for notification created received.\", event);\n\t\t\t};\n\n\t\t\tawait this._notificationClient.addEventListener(\"notification-created\", createdEventHandler);\n\t\t\tthis._notificationSubscriptions[\"notification-created\"] = createdEventHandler;\n\n\t\t\tconst formSubmittedEventHandler = (event: NotificationFormSubmittedEvent): void => {\n\t\t\t\tthis._logger?.info(\"Event for notification form submitted received.\", event);\n\t\t\t};\n\n\t\t\tawait this._notificationClient.addEventListener(\n\t\t\t\t\"notification-form-submitted\",\n\t\t\t\tformSubmittedEventHandler\n\t\t\t);\n\t\t\tthis._notificationSubscriptions[\"notification-form-submitted\"] = formSubmittedEventHandler;\n\n\t\t\tconst reminderCreatedEventHandler = (event: NotificationReminderCreatedEvent): void => {\n\t\t\t\tthis._logger?.info(\"Event for notification reminder created received.\", event);\n\t\t\t};\n\n\t\t\tawait this._notificationClient.addEventListener(\n\t\t\t\t\"notification-reminder-created\",\n\t\t\t\treminderCreatedEventHandler\n\t\t\t);\n\t\t\tthis._notificationSubscriptions[\"notification-reminder-created\"] = reminderCreatedEventHandler;\n\n\t\t\tconst reminderRemovedEventHandler = (event: NotificationReminderRemovedEvent): void => {\n\t\t\t\tthis._logger?.info(\"Event for notification reminder removed received.\", event);\n\t\t\t};\n\n\t\t\tawait this._notificationClient.addEventListener(\n\t\t\t\t\"notification-reminder-removed\",\n\t\t\t\treminderRemovedEventHandler\n\t\t\t);\n\t\t\tthis._notificationSubscriptions[\"notification-reminder-removed\"] = reminderRemovedEventHandler;\n\n\t\t\tconst toastDismissedEventHandler = (event: NotificationToastDismissedEvent): void => {\n\t\t\t\tthis._logger?.info(\"Event for notification toast dismissed received.\", event);\n\t\t\t};\n\n\t\t\tawait this._notificationClient.addEventListener(\n\t\t\t\t\"notification-toast-dismissed\",\n\t\t\t\ttoastDismissedEventHandler\n\t\t\t);\n\t\t\tthis._notificationSubscriptions[\"notification-toast-dismissed\"] = toastDismissedEventHandler;\n\n\t\t\tconst notificationsCountChangedEventHandler = (event: NotificationsCountChanged): void => {\n\t\t\t\tthis._logger?.info(\"Event for notification count changed received.\", event);\n\t\t\t};\n\n\t\t\tawait this._notificationClient.addEventListener(\n\t\t\t\t\"notifications-count-changed\",\n\t\t\t\tnotificationsCountChangedEventHandler\n\t\t\t);\n\t\t\tthis._notificationSubscriptions[\"notifications-count-changed\"] = notificationsCountChangedEventHandler;\n\t\t}\n\t}\n\n\t/**\n\t * Clean up notification subscriptions.\n\t */\n\tprivate async removeNotificationEventListeners(): Promise<void> {\n\t\tif (!isEmpty(this._notificationClient) && !isEmpty(this._notificationSubscriptions)) {\n\t\t\tfor (const [key, value] of Object.entries(this._notificationSubscriptions)) {\n\t\t\t\tawait this._notificationClient.removeEventListener(\n\t\t\t\t\tkey as keyof NotificationsEventMap,\n\t\t\t\t\tvalue as never\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","isEmpty","value","entryPoints","lifecycle","initialize","loggerCreator","helpers","this","_definition","_logger","id","_helpers","_lifeCycleSubscriptions","info","closedown","stopNotificationService","lifecycleMap","async","platform","customData","startNotificationService","serverUrl","data","exampleServerUrl","subscribeLifecycleEvent","_notificationSubscriptions","getNotificationClient","_notificationClient","setupNotificationEventListeners","notifyOn","appsChanged","appsChangedSubscription","notification","title","body","toast","category","template","create","favoriteChanged","favoriteChangedSubscription","pageChanged","pageChangedSubscription","themeChanged","themeChangedSubscription","form","type","label","widget","buttons","cta","submit","workspaceChanged","workspaceChangedSubscription","onClick","task","message","unsubscribeLifecycleEvent","entries","removeNotificationEventListeners","actionEventHandler","event","addEventListener","closedEventHandler","createdEventHandler","formSubmittedEventHandler","reminderCreatedEventHandler","reminderRemovedEventHandler","toastDismissedEventHandler","notificationsCountChangedEventHandler","removeEventListener"],"sourceRoot":""}