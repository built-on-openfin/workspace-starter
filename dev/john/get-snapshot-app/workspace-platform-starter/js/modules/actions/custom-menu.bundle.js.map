{"version":3,"file":"custom-menu.bundle.js","mappings":"AAyCA,IAAYA,ECpCL,SAASC,EAAQC,GAEvB,OAAOA,OACR,EDiCA,SAAYF,GACX,8BACA,wCACA,0CACA,wCACA,0CACA,0CACA,gDACA,WACA,CATD,CAAYA,IAAAA,EAAsB,KEnC3B,MAAMG,EAAgE,CAC5EC,QAAS,ICSH,MA0BC,gBAAMC,CACZC,EACAC,EACAC,GAEAC,KAAKC,QAAUH,EAAc,sBAC7BE,KAAKE,UAAYL,EAAWM,KAC5BH,KAAKI,SAAWL,CACjB,CAOO,SAAMM,CAAIC,GAChB,MAAMC,EAA8B,CAAC,EA8DrC,OA5DAA,EAAU,cAAgBC,MAAOC,IAChC,GAAIA,EAAQC,aAAenB,EAAuBoB,cAAgBX,KAAKI,SAAU,CAChF,MAAMQ,QAAsBN,EAASO,QAAQC,WACvCC,QAAmBf,KAAKI,SAASY,gBACjCC,QAAeF,EAAWG,cAC/B,CAAEC,EAAGV,EAAQU,EAAGC,EAAG,IACnBX,EAAQY,eACR,qBACAT,EACEU,KAAKC,IAAM,CACXC,MAAOD,EAAEE,MACTtB,KAAMoB,EAAEG,OACRC,KAAM3B,KAAKE,WAAW0B,OAAOC,SAE7BC,MAAK,CAACC,EAAGC,IAAMD,EAAEP,MAAMS,cAAcD,EAAER,SACzC,CACCU,eAAgBlC,KAAKE,WAAWgC,gBAAkBnB,EAAWoB,sBAI3D3C,EAAQyB,GACXjB,KAAKC,SAASmC,KAAK,kBACTpC,KAAKI,UAAUiC,aACzBrC,KAAKC,SAASmC,KAAK,eAAgBnB,SAC7BjB,KAAKI,SAASiC,WAAWpB,OAAQqB,EAAWtC,KAAKC,SAEzD,GAGDM,EAAU,mBAAqBC,MAAOC,IACrC,GAAIA,EAAQC,aAAenB,EAAuBoB,cAAgBX,KAAKI,SAAU,CAChF,MAAMmC,QAAgCjC,EAASO,QAAQ2B,gBACjDzB,QAAmBf,KAAKI,SAASY,gBACjCkB,EAAiBlC,KAAKE,WAAWgC,gBAAkBnB,EAAWoB,oBAE9DlB,QAAeF,EAAWG,cAC/B,CAAEC,EAAGV,EAAQU,EAAGC,EAAG,IACnBX,EAAQY,eACR,0BACAkB,EACEjB,KAAKC,IAAM,CACXC,MAAOD,EAAEE,MACTtB,KAAMoB,EAAEkB,YACRd,KAAM3B,KAAKE,WAAW0B,OAAOc,cAE7BZ,MAAK,CAACC,EAAGC,IAAMD,EAAEP,MAAMS,cAAcD,EAAER,SACzC,CACCU,mBAIE1C,EAAQyB,GACXjB,KAAKC,SAASmC,KAAK,kBACTpC,KAAKI,UAAUuC,kBACzB3C,KAAKC,SAASmC,KAAK,eAAgBnB,SAC7BjB,KAAKI,SAASuC,gBAAgB1B,EAAQjB,KAAKC,SAEnD,GAGMM,CACR,W","sources":["webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/shapes/actions-shapes.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/actions/custom-menu/index.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/actions/custom-menu/actions.ts"],"sourcesContent":["import type { CustomActionsMap, ToolbarButton, WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport type { ModuleHelpers, ModuleImplementation, ModuleList } from \"./module-shapes\";\n\n/**\n * Definition for an action.\n */\nexport interface Actions<O = unknown> extends ModuleImplementation<O, ActionHelpers> {\n\t/**\n\t * Get the actions from the module.\n\t * @param platform The platform module.\n\t * @returns The map of custom actions.\n\t */\n\tget(platform: WorkspacePlatformModule): Promise<CustomActionsMap>;\n}\n\n/**\n * A list of modules that provide actions that can be used by the platform.\n */\nexport type ActionsProviderOptions = ModuleList;\n\n/**\n * Extended helpers used by action modules.\n */\nexport interface ActionHelpers extends ModuleHelpers {\n\t/**\n\t * Update toolbar buttons.\n\t * @param buttons The list of all buttons.\n\t * @param buttonId The button to update.\n\t * @param replacementButtonId The replacement for the button.\n\t * @returns The updated buttons.\n\t */\n\tupdateToolbarButtons: (\n\t\tbuttons: ToolbarButton[],\n\t\tbuttonId: string,\n\t\treplacementButtonId: string\n\t) => Promise<ToolbarButton[]>;\n}\n\n/**\n * Use this in preference to CustomActionCallerType from workspace-platform to avoid the import of the whole of workspace package in modules.\n */\nexport enum CustomActionCallerType {\n\tCustomButton = \"CustomButton\",\n\tStoreCustomButton = \"StoreCustomButton\",\n\tCustomDropdownItem = \"CustomDropdownItem\",\n\tGlobalContextMenu = \"GlobalContextMenu\",\n\tViewTabContextMenu = \"ViewTabContextMenu\",\n\tPageTabContextMenu = \"PageTabContextMenu\",\n\tSaveButtonContextMenu = \"SaveButtonContextMenu\",\n\tAPI = \"API\"\n}\n","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? (undefined as T) : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n","import type { ModuleImplementation, ModuleTypes } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { CustomMenuProvider } from \"./actions\";\n\n/**\n * Define the entry points for the module.\n */\nexport const entryPoints: { [type in ModuleTypes]?: ModuleImplementation } = {\n\tactions: new CustomMenuProvider()\n};\n","import type {\n\tCustomActionPayload,\n\tCustomActionsMap,\n\tPage,\n\tWorkspace,\n\tWorkspacePlatformModule\n} from \"@openfin/workspace-platform\";\nimport { CustomActionCallerType, type Actions } from \"workspace-platform-starter/shapes/actions-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty } from \"workspace-platform-starter/utils\";\nimport type { CustomMenuProviderSettings } from \"./shapes\";\n\n/**\n * Implementation for the custom menu actions provider.\n */\nexport class CustomMenuProvider implements Actions<CustomMenuProviderSettings> {\n\t/**\n\t * The logger for displaying information from the module.\n\t * @internal\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Helper methods for the module.\n\t * @internal\n\t */\n\tprivate _helpers: ModuleHelpers | undefined;\n\n\t/**\n\t * The settings for the menu.\n\t * @internal\n\t */\n\tprivate _settings: CustomMenuProviderSettings | undefined;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<CustomMenuProviderSettings>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"CustomMenuProvider\");\n\t\tthis._settings = definition.data;\n\t\tthis._helpers = helpers;\n\t}\n\n\t/**\n\t * Get the actions from the module.\n\t * @param platform The platform module.\n\t * @returns The map of custom actions.\n\t */\n\tpublic async get(platform: WorkspacePlatformModule): Promise<CustomActionsMap> {\n\t\tconst actionMap: CustomActionsMap = {};\n\n\t\tactionMap[\"pages-menu\"] = async (payload: CustomActionPayload): Promise<void> => {\n\t\t\tif (payload.callerType === CustomActionCallerType.CustomButton && this._helpers) {\n\t\t\t\tconst pages: Page[] = await platform.Storage.getPages();\n\t\t\t\tconst menuClient = await this._helpers.getMenuClient();\n\t\t\t\tconst result = await menuClient.showPopupMenu(\n\t\t\t\t\t{ x: payload.x, y: 48 },\n\t\t\t\t\tpayload.windowIdentity,\n\t\t\t\t\t\"There are no pages\",\n\t\t\t\t\tpages\n\t\t\t\t\t\t.map((p) => ({\n\t\t\t\t\t\t\tlabel: p.title,\n\t\t\t\t\t\t\tdata: p.pageId,\n\t\t\t\t\t\t\ticon: this._settings?.images.page\n\t\t\t\t\t\t}))\n\t\t\t\t\t\t.sort((a, b) => a.label.localeCompare(b.label)),\n\t\t\t\t\t{\n\t\t\t\t\t\tpopupMenuStyle: this._settings?.popupMenuStyle ?? menuClient.getPopupMenuStyle()\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tif (isEmpty(result)) {\n\t\t\t\t\tthis._logger?.info(\"Menu dismissed\");\n\t\t\t\t} else if (this._helpers?.launchPage) {\n\t\t\t\t\tthis._logger?.info(\"Menu clicked\", result);\n\t\t\t\t\tawait this._helpers.launchPage(result, undefined, this._logger);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tactionMap[\"workspaces-menu\"] = async (payload: CustomActionPayload): Promise<void> => {\n\t\t\tif (payload.callerType === CustomActionCallerType.CustomButton && this._helpers) {\n\t\t\t\tconst workspaces: Workspace[] = await platform.Storage.getWorkspaces();\n\t\t\t\tconst menuClient = await this._helpers.getMenuClient();\n\t\t\t\tconst popupMenuStyle = this._settings?.popupMenuStyle ?? menuClient.getPopupMenuStyle();\n\n\t\t\t\tconst result = await menuClient.showPopupMenu(\n\t\t\t\t\t{ x: payload.x, y: 48 },\n\t\t\t\t\tpayload.windowIdentity,\n\t\t\t\t\t\"There are no workspaces\",\n\t\t\t\t\tworkspaces\n\t\t\t\t\t\t.map((p) => ({\n\t\t\t\t\t\t\tlabel: p.title,\n\t\t\t\t\t\t\tdata: p.workspaceId,\n\t\t\t\t\t\t\ticon: this._settings?.images.workspace\n\t\t\t\t\t\t}))\n\t\t\t\t\t\t.sort((a, b) => a.label.localeCompare(b.label)),\n\t\t\t\t\t{\n\t\t\t\t\t\tpopupMenuStyle\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tif (isEmpty(result)) {\n\t\t\t\t\tthis._logger?.info(\"Menu dismissed\");\n\t\t\t\t} else if (this._helpers?.launchWorkspace) {\n\t\t\t\t\tthis._logger?.info(\"Menu clicked\", result);\n\t\t\t\t\tawait this._helpers.launchWorkspace(result, this._logger);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn actionMap;\n\t}\n}\n"],"names":["CustomActionCallerType","isEmpty","value","entryPoints","actions","initialize","definition","loggerCreator","helpers","this","_logger","_settings","data","_helpers","get","platform","actionMap","async","payload","callerType","CustomButton","pages","Storage","getPages","menuClient","getMenuClient","result","showPopupMenu","x","y","windowIdentity","map","p","label","title","pageId","icon","images","page","sort","a","b","localeCompare","popupMenuStyle","getPopupMenuStyle","info","launchPage","undefined","workspaces","getWorkspaces","workspaceId","workspace","launchWorkspace"],"sourceRoot":""}