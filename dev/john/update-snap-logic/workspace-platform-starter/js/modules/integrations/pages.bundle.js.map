{"version":3,"file":"pages.bundle.js","mappings":"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","sources":["webpack://openfin-workspace--workspace-platform-starter/webpack/bootstrap","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/define property getters","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/hasOwnProperty shorthand","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/shapes/favorite-shapes.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/integrations/pages/integration.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/integrations/pages/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import type { PlatformStorageMetadata } from \"./platform-shapes\";\n\n/**\n * Favorite type for App.\n */\nexport const FAVORITE_TYPE_NAME_APP = \"app\";\n\n/**\n * Favorite type for Workspace.\n */\nexport const FAVORITE_TYPE_NAME_WORKSPACE = \"workspace\";\n\n/**\n * Favorite type for Page.\n */\nexport const FAVORITE_TYPE_NAME_PAGE = \"page\";\n\n/**\n * Favorite type for Query.\n */\nexport const FAVORITE_TYPE_NAME_QUERY = \"query\";\n\n/**\n * Names for all the favorite types.\n */\nexport type FavoriteTypeNames =\n\t| typeof FAVORITE_TYPE_NAME_APP\n\t| typeof FAVORITE_TYPE_NAME_WORKSPACE\n\t| typeof FAVORITE_TYPE_NAME_PAGE\n\t| typeof FAVORITE_TYPE_NAME_QUERY;\n\n/**\n * Options for the favorite provider.\n */\nexport interface FavoriteProviderOptions {\n\t/**\n\t * Is the provider enabled, defaults to true.\n\t */\n\tenabled?: boolean;\n\n\t/**\n\t * The icon that should be used if you want to indicate this is a favorite action\n\t */\n\tfavoriteIcon: string;\n\n\t/**\n\t * The icon to use to indicate that this favorite can be unset\n\t */\n\tunfavoriteIcon: string;\n\n\t/**\n\t * What commands should integrations check for if they intent to support the display of favorites\n\t */\n\tfavoriteCommand?: string;\n\n\t/**\n\t * The connection provider can have actions registered against it from the platform. This provides a default list of\n\t * actions that connections should be able to use if actions are enabled for that connection.\n\t */\n\tsupportedFavoriteTypes?: FavoriteTypeNames[];\n}\n\n/**\n * When an entry is made it represents a type supported by this platform. This can be used to lookup and launch the thing this entry refers to.\n */\nexport interface FavoriteEntry {\n\t/**\n\t * A unique guid to represent this favorite entry so that it can be updated or removed\n\t */\n\tid: string;\n\n\t/**\n\t * The id for the favorite type this entry represents\n\t */\n\ttypeId: string;\n\n\t/**\n\t * What type of favorite entry does this entry represent\n\t */\n\ttype: FavoriteTypeNames;\n\n\t/**\n\t * The timestamp for the entry.\n\t */\n\ttimestamp?: Date;\n\n\t/**\n\t * Does this favorite have a suggested label that can be used to avoid a lookup\n\t */\n\tlabel?: string;\n\n\t/**\n\t * Does this favorite have a suggested icon that can be used to avoid a lookup\n\t */\n\ticon?: string;\n}\n\n/**\n * Info to return to interested parties to help them support favorites\n */\nexport interface FavoriteInfo {\n\t/**\n\t * The path to an icon that can be used to indicate the ability to favorite\n\t */\n\tfavoriteIcon?: string;\n\t/**\n\t * The path to an icon that can be used to indicate the ability to remove this favorite\n\t */\n\tunfavoriteIcon?: string;\n\t/**\n\t * A command that supporting modules should listen for if they are to display favorites that fall under them\n\t */\n\tcommand?: string;\n\t/**\n\t * What types of favorite item are supported on this platform, this also determines the ordering in the dock menu.\n\t */\n\tenabledTypes?: FavoriteTypeNames[];\n\t/**\n\t * Is favorite support enabled on this platform.\n\t */\n\tisEnabled: boolean;\n}\n\n/**\n * A client that can be used to provide access to some or all of the favorite functionality\n */\nexport interface FavoriteClient {\n\t/**\n\t * The ability to request supporting information about whether favorites are initialized for the platform and supporting information.\n\t * @returns Supporting information.\n\t */\n\tgetInfo(): FavoriteInfo;\n\t/**\n\t * The ability to request all (or some if by type) of the saved favorites\n\t * @param byType the type of saved favorite you are looking for\n\t * @returns An array of saved favorites or an empty array if it was unable to get any back\n\t */\n\tgetSavedFavorites(byType?: FavoriteTypeNames): Promise<FavoriteEntry[] | undefined>;\n\t/**\n\t * The ability to request a particular saved favorite.\n\t * @param id the id of the favorite you are looking for\n\t * @returns the saved favorite if available or false if it didn't exist\n\t */\n\tgetSavedFavorite(id: string): Promise<FavoriteEntry | undefined>;\n\t/**\n\t * The ability to save a favorite.\n\t * @param favorite the Favorite you wish to save\n\t * @returns whether or not the favorite was saved\n\t */\n\tsetSavedFavorite?(favorite: FavoriteEntry): Promise<boolean>;\n\t/**\n\t * The ability to remove/delete a saved favorite.\n\t * @param id The id of the favorite to delete\n\t * @returns whether or not the favorite was deleted.\n\t */\n\tdeleteSavedFavorite?(id: string): Promise<boolean>;\n}\n\n/**\n * An object that represents a favorite and meta data related to it\n */\nexport interface EndpointFavoriteEntry {\n\t/**\n\t * Information related to the platform providing the payload.\n\t */\n\tmetaData: PlatformStorageMetadata;\n\t/**\n\t * The favorite entry\n\t */\n\tpayload: FavoriteEntry;\n}\n\n/**\n * A request type for the FavoriteEndpoint that gets all saved favorite entries\n */\nexport interface EndpointFavoriteListRequest {\n\t/**\n\t * The id of the platform making the request\n\t */\n\tplatform: string;\n\t/**\n\t * The type if specified should be used to filter the response to only send the entries that are relevant\n\t */\n\tfavoriteType?: FavoriteTypeNames;\n}\n\n/**\n * The response after the request for favorites was fulfilled\n */\nexport interface EndpointFavoriteListResponse {\n\t/**\n\t * The list of favorite entries with information of what platform versions they were originally saved against\n\t */\n\tentries: EndpointFavoriteEntry[];\n}\n\n/**\n * The request for getting a specific favorite entry\n */\nexport interface EndpointFavoriteGetRequest {\n\t/**\n\t * The id of the platform making the request\n\t */\n\tplatform: string;\n\t/**\n\t * The id of the specific entry that has been saved\n\t */\n\tid: string;\n}\n\n/**\n * The response after the request for a specific favorite was fulfilled\n */\nexport type EndpointFavoriteGetResponse = EndpointFavoriteEntry;\n\n/**\n * The request for getting a specific favorite entry\n */\nexport interface EndpointFavoriteSetRequest extends EndpointFavoriteEntry {\n\t/**\n\t * The id of the platform making the request\n\t */\n\tplatform: string;\n\t/**\n\t * The id of the specific entry that is to be set\n\t */\n\tid: string;\n}\n\n/**\n * The request for removing a specific favorite entry\n */\nexport interface EndpointFavoriteRemoveRequest {\n\t/**\n\t * The id of the platform making the request\n\t */\n\tplatform: string;\n\t/**\n\t * The id of the specific entry that is to be removed\n\t */\n\tid: string;\n}\n","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? undefined : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n","import type {\n\tCLIFilter,\n\tCLITemplate,\n\tCustomTemplate,\n\tHomeDispatchedSearchResult,\n\tHomeSearchListenerResponse,\n\tHomeSearchResponse,\n\tHomeSearchResult\n} from \"@openfin/workspace\";\nimport type { Page, WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport {\n\tFAVORITE_TYPE_NAME_PAGE,\n\ttype FavoriteClient,\n\ttype FavoriteEntry,\n\ttype FavoriteInfo,\n\ttype FavoriteTypeNames\n} from \"workspace-platform-starter/shapes/favorite-shapes\";\nimport type {\n\tIntegrationHelpers,\n\tIntegrationModule,\n\tIntegrationModuleDefinition\n} from \"workspace-platform-starter/shapes/integrations-shapes\";\nimport type {\n\tFavoriteChangedLifecyclePayload,\n\tPageChangedLifecyclePayload\n} from \"workspace-platform-starter/shapes/lifecycle-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty, isStringValue, randomUUID } from \"workspace-platform-starter/utils\";\nimport type { PagesSettings } from \"./shapes\";\n\n/**\n * Implement the integration provider for pages.\n */\nexport class PagesProvider implements IntegrationModule<PagesSettings> {\n\t/**\n\t * The default base score for ordering.\n\t * @internal\n\t */\n\tprivate static readonly _DEFAULT_BASE_SCORE = 200;\n\n\t/**\n\t * The key to use for launching a page.\n\t * @internal\n\t */\n\tprivate static readonly _ACTION_LAUNCH_PAGE = \"Launch Page\";\n\n\t/**\n\t * The key to use for deleting a page.\n\t * @internal\n\t */\n\tprivate static readonly _ACTION_DELETE_PAGE = \"Delete Page\";\n\n\t/**\n\t * The key to use for sharing a page.\n\t * @internal\n\t */\n\tprivate static readonly _ACTION_SHARE_PAGE = \"Share Page\";\n\n\t/**\n\t * The module definition.\n\t * @internal\n\t */\n\tprivate _definition: IntegrationModuleDefinition<PagesSettings> | undefined;\n\n\t/**\n\t * The settings from config.\n\t * @internal\n\t */\n\tprivate _settings?: PagesSettings;\n\n\t/**\n\t * The settings for the integration.\n\t * @internal\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * The integration helpers.\n\t * @internal\n\t */\n\tprivate _integrationHelpers: IntegrationHelpers | undefined;\n\n\t/**\n\t * The last search response.\n\t */\n\tprivate _lastResponse?: HomeSearchListenerResponse;\n\n\t/**\n\t * The last query.\n\t */\n\tprivate _lastQuery?: string;\n\n\t/**\n\t * The last query min length.\n\t */\n\tprivate _lastQueryMinLength?: number;\n\n\t/**\n\t * The last results.\n\t */\n\tprivate _lastResults?: HomeSearchResult[];\n\n\t/**\n\t * Subscription id for theme-changed lifecycle event.\n\t */\n\tprivate _themeChangedSubscriptionId: string | undefined;\n\n\t/**\n\t * Subscription id for favorite-changed lifecycle event.\n\t */\n\tprivate _favChangedSubscriptionId: string | undefined;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<PagesSettings>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: IntegrationHelpers\n\t): Promise<void> {\n\t\tthis._settings = definition.data;\n\t\tthis._integrationHelpers = helpers;\n\t\tthis._logger = loggerCreator(\"PagesProvider\");\n\t\tthis._definition = definition;\n\n\t\tif (this._integrationHelpers.subscribeLifecycleEvent) {\n\t\t\tthis._integrationHelpers.subscribeLifecycleEvent<PageChangedLifecyclePayload>(\n\t\t\t\t\"page-changed\",\n\t\t\t\tasync (platform: WorkspacePlatformModule, payload?: PageChangedLifecyclePayload): Promise<void> => {\n\t\t\t\t\tif (payload?.action === \"create\") {\n\t\t\t\t\t\tawait this.rebuildResults(platform);\n\t\t\t\t\t} else if (payload?.action === \"update\") {\n\t\t\t\t\t\tconst lastResult = this._lastResults?.find((res) => res.key === payload.id);\n\t\t\t\t\t\tif (lastResult && payload.page) {\n\t\t\t\t\t\t\tlastResult.title = payload.page.title;\n\t\t\t\t\t\t\tlastResult.data.workspaceTitle = payload.page.title;\n\t\t\t\t\t\t\t(lastResult.templateContent as CustomTemplate).data.title = payload.page.title;\n\n\t\t\t\t\t\t\tthis.resultAddUpdate([lastResult]);\n\n\t\t\t\t\t\t\tconst { favoriteClient } = await this.getFavInfo(FAVORITE_TYPE_NAME_PAGE);\n\t\t\t\t\t\t\tif (favoriteClient?.setSavedFavorite) {\n\t\t\t\t\t\t\t\tconst saved = await favoriteClient.getSavedFavorites(FAVORITE_TYPE_NAME_PAGE);\n\t\t\t\t\t\t\t\tconst favorite = await saved?.find((f) => f.typeId === payload.id);\n\t\t\t\t\t\t\t\tif (favorite) {\n\t\t\t\t\t\t\t\t\tfavorite.label = payload.page.title;\n\t\t\t\t\t\t\t\t\tawait favoriteClient.setSavedFavorite(favorite);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (payload?.action === \"delete\") {\n\t\t\t\t\t\tthis.resultRemove(payload.id);\n\n\t\t\t\t\t\tconst { favoriteClient } = await this.getFavInfo(FAVORITE_TYPE_NAME_PAGE);\n\t\t\t\t\t\tif (favoriteClient?.deleteSavedFavorite) {\n\t\t\t\t\t\t\tconst saved = await favoriteClient.getSavedFavorites(FAVORITE_TYPE_NAME_PAGE);\n\t\t\t\t\t\t\tconst favorite = await saved?.find((f) => f.typeId === payload.id);\n\t\t\t\t\t\t\tif (favorite) {\n\t\t\t\t\t\t\t\tawait favoriteClient.deleteSavedFavorite(favorite.id);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tthis._themeChangedSubscriptionId = this._integrationHelpers.subscribeLifecycleEvent(\n\t\t\t\t\"theme-changed\",\n\t\t\t\tasync () => {\n\t\t\t\t\tif (this._integrationHelpers?.getPlatform) {\n\t\t\t\t\t\tconst platform: WorkspacePlatformModule = this._integrationHelpers.getPlatform();\n\t\t\t\t\t\tawait this.rebuildResults(platform);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tthis._favChangedSubscriptionId =\n\t\t\t\tthis._integrationHelpers.subscribeLifecycleEvent<FavoriteChangedLifecyclePayload>(\n\t\t\t\t\t\"favorite-changed\",\n\t\t\t\t\tasync (_: unknown, payload?: FavoriteChangedLifecyclePayload) => {\n\t\t\t\t\t\tif (!isEmpty(payload)) {\n\t\t\t\t\t\t\tawait this.updateAppFavoriteButtons(payload);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Close down any resources being used by the module.\n\t * @returns Nothing.\n\t */\n\tpublic async closedown(): Promise<void> {\n\t\tif (this._integrationHelpers?.unsubscribeLifecycleEvent) {\n\t\t\tif (isStringValue(this._themeChangedSubscriptionId)) {\n\t\t\t\tthis._integrationHelpers.unsubscribeLifecycleEvent(this._themeChangedSubscriptionId, \"theme-changed\");\n\t\t\t\tthis._themeChangedSubscriptionId = undefined;\n\t\t\t}\n\n\t\t\tif (isStringValue(this._favChangedSubscriptionId)) {\n\t\t\t\tthis._integrationHelpers.unsubscribeLifecycleEvent(\n\t\t\t\t\tthis._favChangedSubscriptionId,\n\t\t\t\t\t\"favorite-changed\"\n\t\t\t\t);\n\t\t\t\tthis._favChangedSubscriptionId = undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get a list of the static help entries.\n\t * @returns The list of help entries.\n\t */\n\tpublic async getHelpSearchEntries(): Promise<HomeSearchResult[]> {\n\t\treturn [];\n\t}\n\n\t/**\n\t * Get a list of search results based on the query and filters.\n\t * @param query The query to search for.\n\t * @param filters The filters to apply.\n\t * @param lastResponse The last search response used for updating existing results.\n\t * @param options Options for the search query.\n\t * @param options.queryMinLength The minimum length before a query is actioned.\n\t * @param options.queryAgainst The fields in the data to query against.\n\t * @param options.isSuggestion Is the query from a suggestion.\n\t * @returns The list of results and new filters.\n\t */\n\tpublic async getSearchResults(\n\t\tquery: string,\n\t\tfilters: CLIFilter[],\n\t\tlastResponse: HomeSearchListenerResponse,\n\t\toptions: {\n\t\t\tqueryMinLength?: number;\n\t\t\tqueryAgainst?: string[];\n\t\t\tisSuggestion?: boolean;\n\t\t}\n\t): Promise<HomeSearchResponse> {\n\t\tlet pageResults: HomeSearchResult[] = [];\n\n\t\tif (this._integrationHelpers?.getPlatform) {\n\t\t\tconst platform: WorkspacePlatformModule = this._integrationHelpers.getPlatform();\n\t\t\tconst queryLower = query.toLowerCase();\n\t\t\tconst queryMinLength = options?.queryMinLength ?? 3;\n\n\t\t\tlet pages: Page[] = await platform.Storage.getPages();\n\t\t\tlet matchQuery = queryLower;\n\n\t\t\tthis._lastResponse = lastResponse;\n\t\t\tthis._lastQuery = queryLower;\n\t\t\tthis._lastQueryMinLength = queryMinLength;\n\n\t\t\tconst { favoriteClient, favoriteInfo } = await this.getFavInfo(FAVORITE_TYPE_NAME_PAGE);\n\n\t\t\tif (\n\t\t\t\tfavoriteInfo?.isEnabled &&\n\t\t\t\tisStringValue(favoriteInfo?.command) &&\n\t\t\t\tqueryLower === favoriteInfo.command &&\n\t\t\t\tfavoriteClient\n\t\t\t) {\n\t\t\t\tconst favoriteApps = await favoriteClient.getSavedFavorites(FAVORITE_TYPE_NAME_PAGE);\n\t\t\t\tconst favIds = favoriteApps?.map((f) => f.typeId) ?? [];\n\t\t\t\tpages = pages.filter((a) => favIds.includes(a.pageId));\n\t\t\t\tmatchQuery = \"\";\n\t\t\t}\n\n\t\t\tpageResults = await this.buildResults(pages, matchQuery, queryMinLength);\n\n\t\t\tthis._lastResults = pageResults;\n\t\t}\n\n\t\treturn {\n\t\t\tresults: pageResults\n\t\t};\n\t}\n\n\t/**\n\t * An entry has been selected.\n\t * @param result The dispatched result.\n\t * @param lastResponse The last response.\n\t * @returns True if the item was handled.\n\t */\n\tpublic async itemSelection(\n\t\tresult: HomeDispatchedSearchResult,\n\t\tlastResponse: HomeSearchListenerResponse\n\t): Promise<boolean> {\n\t\tlet handled = false;\n\t\tif (result.action.trigger === \"user-action\") {\n\t\t\tif (result.action.name.endsWith(\"favorite\") && result.data?.pageId) {\n\t\t\t\tconst { favoriteClient } = await this.getFavInfo(FAVORITE_TYPE_NAME_PAGE);\n\t\t\t\tif (favoriteClient) {\n\t\t\t\t\tif (result.action.name.startsWith(\"un\")) {\n\t\t\t\t\t\tif (!isEmpty(result.data?.favoriteId) && favoriteClient.deleteSavedFavorite) {\n\t\t\t\t\t\t\tawait favoriteClient.deleteSavedFavorite(result.data.favoriteId);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (favoriteClient.setSavedFavorite) {\n\t\t\t\t\t\tawait favoriteClient.setSavedFavorite({\n\t\t\t\t\t\t\tid: randomUUID(),\n\t\t\t\t\t\t\ttype: FAVORITE_TYPE_NAME_PAGE,\n\t\t\t\t\t\t\ttypeId: result.key,\n\t\t\t\t\t\t\tlabel: result.title,\n\t\t\t\t\t\t\ticon: this._settings?.images.page\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\thandled = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst data: {\n\t\t\t\t\tpageId?: string;\n\t\t\t\t} = result.data;\n\n\t\t\t\tif (data?.pageId) {\n\t\t\t\t\thandled = true;\n\n\t\t\t\t\tif (result.action.name === PagesProvider._ACTION_LAUNCH_PAGE) {\n\t\t\t\t\t\tif (this._integrationHelpers?.getPlatform && this._integrationHelpers?.launchPage) {\n\t\t\t\t\t\t\tawait this._integrationHelpers.launchPage(data.pageId, undefined, this._logger);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (result.action.name === PagesProvider._ACTION_DELETE_PAGE) {\n\t\t\t\t\t\tif (this._integrationHelpers?.getPlatform) {\n\t\t\t\t\t\t\tconst platform = this._integrationHelpers.getPlatform();\n\t\t\t\t\t\t\tawait platform.Storage.deletePage(data.pageId);\n\t\t\t\t\t\t\t// Deleting the page will eventually trigger the \"delete\" lifecycle\n\t\t\t\t\t\t\t// event which will remove it from the result list\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tresult.action.name === PagesProvider._ACTION_SHARE_PAGE &&\n\t\t\t\t\t\tthis._integrationHelpers?.getShareClient\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst shareClient = await this._integrationHelpers.getShareClient();\n\t\t\t\t\t\tif (shareClient) {\n\t\t\t\t\t\t\tawait shareClient.share(\"page\", { pageId: data.pageId });\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\thandled = false;\n\t\t\t\t\t\tthis._logger?.warn(`Unrecognized action for page selection: ${data.pageId}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn handled;\n\t}\n\n\t/**\n\t * Get the template for a page.\n\t * @param id The id of the item.\n\t * @param title The title of the page.\n\t * @param shareEnabled Is sharing enabled.\n\t * @param favInfo The favorites info if it is enabled.\n\t * @param favoriteId The id of the favorite.\n\t * @returns The home result.\n\t */\n\tprivate async getPageTemplate(\n\t\tid: string,\n\t\ttitle: string,\n\t\tshareEnabled: boolean,\n\t\tfavInfo: FavoriteInfo | undefined,\n\t\tfavoriteId: string | undefined\n\t): Promise<HomeSearchResult> {\n\t\tif (this._integrationHelpers && this._settings) {\n\t\t\tconst actions = [\n\t\t\t\t{\n\t\t\t\t\tname: PagesProvider._ACTION_LAUNCH_PAGE,\n\t\t\t\t\thotkey: \"Enter\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: PagesProvider._ACTION_DELETE_PAGE,\n\t\t\t\t\thotkey: \"CmdOrCtrl+Shift+D\"\n\t\t\t\t}\n\t\t\t];\n\t\t\tconst actionButtons: { title: string; action: string }[] = [\n\t\t\t\t{\n\t\t\t\t\ttitle: \"Launch\",\n\t\t\t\t\taction: PagesProvider._ACTION_LAUNCH_PAGE\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttitle: \"Delete\",\n\t\t\t\t\taction: PagesProvider._ACTION_DELETE_PAGE\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tif (shareEnabled) {\n\t\t\t\tactions.push({\n\t\t\t\t\tname: PagesProvider._ACTION_SHARE_PAGE,\n\t\t\t\t\thotkey: \"CmdOrCtrl+Shift+S\"\n\t\t\t\t});\n\t\t\t\tactionButtons.push({\n\t\t\t\t\ttitle: \"Share\",\n\t\t\t\t\taction: PagesProvider._ACTION_SHARE_PAGE\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst themeClient = await this._integrationHelpers.getThemeClient();\n\t\t\tconst icon = await themeClient.themeUrl(this._settings.images.page);\n\n\t\t\tconst headerButtons: { icon: string; action: string }[] = [];\n\n\t\t\tif (favInfo?.favoriteIcon && favInfo.unfavoriteIcon) {\n\t\t\t\tconst favoriteIcon = await themeClient.themeUrl(\n\t\t\t\t\t!isEmpty(favoriteId) ? favInfo.favoriteIcon : favInfo.unfavoriteIcon\n\t\t\t\t);\n\t\t\t\tif (favoriteIcon) {\n\t\t\t\t\theaderButtons.push({\n\t\t\t\t\t\ticon: favoriteIcon,\n\t\t\t\t\t\taction: !isEmpty(favoriteId) ? \"unfavorite\" : \"favorite\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst layoutData = await this._integrationHelpers.templateHelpers.createLayout(\n\t\t\t\ttitle,\n\t\t\t\ticon,\n\t\t\t\t[await this._integrationHelpers.templateHelpers.createText(\"instructions\")],\n\t\t\t\tactionButtons,\n\t\t\t\theaderButtons\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tkey: id,\n\t\t\t\tscore: this._definition?.baseScore ?? PagesProvider._DEFAULT_BASE_SCORE,\n\t\t\t\ttitle,\n\t\t\t\tlabel: \"Page\",\n\t\t\t\ticon,\n\t\t\t\tactions,\n\t\t\t\tdata: {\n\t\t\t\t\tproviderId: this._definition?.id,\n\t\t\t\t\tpageTitle: title,\n\t\t\t\t\tpageId: id,\n\t\t\t\t\ttags: [\"page\"],\n\t\t\t\t\tfavoriteId\n\t\t\t\t},\n\t\t\t\ttemplate: \"Custom\" as CLITemplate.Custom,\n\t\t\t\ttemplateContent: {\n\t\t\t\t\tlayout: layoutData.layout,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t...layoutData.data,\n\t\t\t\t\t\tinstructions: \"Use the buttons below to interact with your saved page\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tkey: id,\n\t\t\tscore: this._definition?.baseScore ?? PagesProvider._DEFAULT_BASE_SCORE,\n\t\t\ttitle,\n\t\t\tlabel: \"Page\",\n\t\t\tactions: [],\n\t\t\tdata: {\n\t\t\t\tproviderId: this._definition?.id,\n\t\t\t\tpageTitle: title,\n\t\t\t\tpageId: id,\n\t\t\t\ttags: [\"page\"]\n\t\t\t},\n\t\t\ttemplate: \"Plain\" as CLITemplate.Plain,\n\t\t\ttemplateContent: undefined\n\t\t};\n\t}\n\n\t/**\n\t * Rebuild the results after color scheme change.\n\t * @param platform The workspace platform.\n\t */\n\tprivate async rebuildResults(platform: WorkspacePlatformModule): Promise<void> {\n\t\tif (this._integrationHelpers && !isEmpty(this._lastQuery) && !isEmpty(this._lastQueryMinLength)) {\n\t\t\tconst pages: Page[] = await platform.Storage.getPages();\n\t\t\tconst results = await this.buildResults(pages, this._lastQuery, this._lastQueryMinLength);\n\t\t\tthis.resultAddUpdate(results);\n\t\t}\n\t}\n\n\t/**\n\t * Build the results for the pages.\n\t * @param pages The list of workspaces to build the results for.\n\t * @param query The query.\n\t * @param queryMinLength The min query length.\n\t * @returns The list of home search results.\n\t */\n\tprivate async buildResults(\n\t\tpages: Page[],\n\t\tquery: string,\n\t\tqueryMinLength: number\n\t): Promise<HomeSearchResult[]> {\n\t\tlet results: HomeSearchResult[] = [];\n\n\t\tif (this._integrationHelpers && Array.isArray(pages)) {\n\t\t\tlet shareEnabled: boolean = false;\n\t\t\tif (this._integrationHelpers?.getShareClient) {\n\t\t\t\tconst shareClient = await this._integrationHelpers.getShareClient();\n\t\t\t\tif (shareClient) {\n\t\t\t\t\tshareEnabled = await shareClient.typeEnabled(\"page\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst { favoriteClient, favoriteInfo } = await this.getFavInfo(FAVORITE_TYPE_NAME_PAGE);\n\t\t\tlet savedFavorites: FavoriteEntry[] | undefined;\n\n\t\t\tif (favoriteClient) {\n\t\t\t\tsavedFavorites = await favoriteClient.getSavedFavorites(FAVORITE_TYPE_NAME_PAGE);\n\t\t\t}\n\n\t\t\tconst pgsProm = pages\n\t\t\t\t.filter(\n\t\t\t\t\t(pg) =>\n\t\t\t\t\t\tquery.length === 0 || (query.length >= queryMinLength && pg.title.toLowerCase().includes(query))\n\t\t\t\t)\n\t\t\t\t.sort((a, b) => a.title.localeCompare(b.title))\n\t\t\t\t.map(async (pg: Page) => {\n\t\t\t\t\tconst favoriteId = savedFavorites?.find((f) => f.typeId === pg.pageId)?.id;\n\n\t\t\t\t\treturn this.getPageTemplate(pg.pageId, pg.title, shareEnabled, favoriteInfo, favoriteId);\n\t\t\t\t});\n\n\t\t\tresults = await Promise.all(pgsProm);\n\t\t}\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Add or update a result.\n\t * @param results The results to add or update.\n\t */\n\tprivate resultAddUpdate(results: HomeSearchResult[]): void {\n\t\tif (this._lastResults) {\n\t\t\tfor (const result of results) {\n\t\t\t\tconst resultIndex = this._lastResults.findIndex((res) => res.key === result.key);\n\t\t\t\tif (resultIndex >= 0) {\n\t\t\t\t\tthis._lastResults.splice(resultIndex, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tthis._lastResults.push(result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this._lastResponse) {\n\t\t\tthis._lastResponse.respond(results);\n\t\t}\n\t}\n\n\t/**\n\t * Remove a result.\n\t * @param id The id of the item to remove.\n\t */\n\tprivate resultRemove(id: string): void {\n\t\tif (this._lastResults) {\n\t\t\tconst resultIndex = this._lastResults.findIndex((res) => res.key === id);\n\t\t\tif (resultIndex >= 0) {\n\t\t\t\tthis._lastResults.splice(resultIndex, 1);\n\t\t\t}\n\t\t}\n\t\tif (this._lastResponse) {\n\t\t\tthis._lastResponse.revoke(id);\n\t\t}\n\t}\n\n\t/**\n\t * Update the app buttons if the favorites have changed.\n\t * @param payload The payload of the favorite change.\n\t */\n\tprivate async updateAppFavoriteButtons(payload: FavoriteChangedLifecyclePayload): Promise<void> {\n\t\tconst favorite: FavoriteEntry = payload.favorite;\n\n\t\tif (\n\t\t\t!isEmpty(this._lastResponse) &&\n\t\t\t(payload.action === \"set\" || payload.action === \"delete\") &&\n\t\t\t!isEmpty(favorite) &&\n\t\t\tfavorite.type === FAVORITE_TYPE_NAME_PAGE &&\n\t\t\tthis._lastResults &&\n\t\t\tthis._integrationHelpers\n\t\t) {\n\t\t\tconst { favoriteInfo } = await this.getFavInfo(FAVORITE_TYPE_NAME_PAGE);\n\n\t\t\tif (this._lastQuery === favoriteInfo?.command && payload.action === \"delete\") {\n\t\t\t\tthis._lastResponse.revoke(favorite.typeId);\n\t\t\t} else if (this._lastResults) {\n\t\t\t\tconst lastPage = this._lastResults.find((pg) => pg.key === favorite.typeId);\n\n\t\t\t\tif (!isEmpty(lastPage)) {\n\t\t\t\t\tlet shareEnabled: boolean = false;\n\t\t\t\t\tif (this._integrationHelpers?.getShareClient) {\n\t\t\t\t\t\tconst shareClient = await this._integrationHelpers.getShareClient();\n\t\t\t\t\t\tif (shareClient) {\n\t\t\t\t\t\t\tshareEnabled = await shareClient.typeEnabled(\"page\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst rebuilt = await this.getPageTemplate(\n\t\t\t\t\t\tlastPage.key,\n\t\t\t\t\t\tlastPage.title,\n\t\t\t\t\t\tshareEnabled,\n\t\t\t\t\t\tfavoriteInfo,\n\t\t\t\t\t\tpayload.action === \"set\" ? favorite.id : undefined\n\t\t\t\t\t);\n\n\t\t\t\t\tthis._lastResponse.respond([rebuilt]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the favorite info and client if they are enabled.\n\t * @param favoriteTypeNames The type of client to get.\n\t * @returns The favorite info and client.\n\t */\n\tprivate async getFavInfo(\n\t\tfavoriteTypeNames: FavoriteTypeNames\n\t): Promise<{ favoriteClient: FavoriteClient | undefined; favoriteInfo: FavoriteInfo | undefined }> {\n\t\tlet favoriteInfo: FavoriteInfo | undefined;\n\t\tlet favoriteClient: FavoriteClient | undefined;\n\n\t\tif ((this._definition?.data?.favoritesEnabled ?? true) && this._integrationHelpers?.getFavoriteClient) {\n\t\t\tfavoriteClient = await this._integrationHelpers.getFavoriteClient();\n\t\t\tif (favoriteClient) {\n\t\t\t\tfavoriteInfo = favoriteClient.getInfo();\n\t\t\t\tif (favoriteInfo.isEnabled) {\n\t\t\t\t\tconst isSupported = favoriteInfo?.enabledTypes?.includes(favoriteTypeNames) ?? true;\n\t\t\t\t\tif (!isSupported) {\n\t\t\t\t\t\tfavoriteInfo = undefined;\n\t\t\t\t\t\tfavoriteClient = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tfavoriteClient,\n\t\t\tfavoriteInfo\n\t\t};\n\t}\n}\n","import { PagesProvider } from \"./integration\";\n\nexport const entryPoints: { [id: string]: PagesProvider } = {\n\tintegrations: new PagesProvider()\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","FAVORITE_TYPE_NAME_PAGE","isEmpty","value","isStringValue","isString","trim","length","PagesProvider","initialize","loggerCreator","helpers","this","_settings","data","_integrationHelpers","_logger","_definition","subscribeLifecycleEvent","async","platform","payload","action","rebuildResults","lastResult","_lastResults","find","res","id","page","title","workspaceTitle","templateContent","resultAddUpdate","favoriteClient","getFavInfo","setSavedFavorite","saved","getSavedFavorites","favorite","f","typeId","label","resultRemove","deleteSavedFavorite","_themeChangedSubscriptionId","getPlatform","_favChangedSubscriptionId","_","updateAppFavoriteButtons","closedown","unsubscribeLifecycleEvent","undefined","getHelpSearchEntries","getSearchResults","query","filters","lastResponse","options","pageResults","queryLower","toLowerCase","queryMinLength","pages","Storage","getPages","matchQuery","_lastResponse","_lastQuery","_lastQueryMinLength","favoriteInfo","isEnabled","command","favoriteApps","favIds","map","filter","a","includes","pageId","buildResults","results","itemSelection","result","handled","trigger","name","endsWith","startsWith","favoriteId","globalThis","crypto","randomUUID","replace","c","rnd","getRandomValues","Uint8Array","Number","toString","type","icon","images","_ACTION_LAUNCH_PAGE","launchPage","_ACTION_DELETE_PAGE","deletePage","_ACTION_SHARE_PAGE","getShareClient","shareClient","share","warn","getPageTemplate","shareEnabled","favInfo","actions","hotkey","actionButtons","push","themeClient","getThemeClient","themeUrl","headerButtons","favoriteIcon","unfavoriteIcon","layoutData","templateHelpers","createLayout","createText","score","baseScore","_DEFAULT_BASE_SCORE","providerId","pageTitle","tags","template","layout","instructions","Array","isArray","typeEnabled","savedFavorites","pgsProm","pg","sort","b","localeCompare","Promise","all","resultIndex","findIndex","splice","respond","revoke","lastPage","rebuilt","favoriteTypeNames","favoritesEnabled","getFavoriteClient","getInfo","enabledTypes","entryPoints","integrations"],"sourceRoot":""}