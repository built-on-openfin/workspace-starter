{"version":3,"file":"windows.bundle.js","mappings":"AACA,ICwCYA,EDxCRC,EAAsB,CEA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,KCK3E,SAASI,EAAQC,GAEvB,OAAOA,OACR,CCFOC,eAAeC,IACrB,MAAMC,EAAWC,IAAIC,SAASC,iBACxBC,QAAgBJ,EAASK,YAAYC,kBACrCC,EAAqC,GAC3C,IAAK,MAAMC,KAAiBJ,SACHI,EAAcC,aAOvB,oBADMD,EAAcE,aAJlCH,EAAiBI,KAAKH,GAUxB,OAAOD,CACR,C,iBJiBA,SAAY1B,GACX,8BACA,wCACA,0CACA,wCACA,0CACA,0CACA,gDACA,WACA,CATD,CAAYA,IAAAA,EAAsB,KKrC3B,MAAM+B,EAAgE,CAC5EC,QAAS,ICcH,MAkBC,gBAAMC,CACZ9B,EACA+B,EACAC,GAEAC,KAAKC,QAAUH,EAAc,iBAC7BE,KAAKE,SAAWH,CACjB,CAOO,SAAM1B,CAAIU,GAmDhB,MAlDoC,CAEpCoB,kBAA+BtB,MAAOuB,IACrC,GACCA,EAAQC,aAAezC,EAAuB0C,KAC9CF,EAAQC,aAAezC,EAAuB2C,sBAC7C,CACD,MAAMC,QAAoB1B,IAC1B,IAAI2B,EACJ,IAAK,MAAMC,KAAiBF,EAE1BE,EAAcC,SAASC,OAASR,EAAQS,eAAeD,MACvDF,EAAcC,SAASG,OAASV,EAAQS,eAAeC,KAEvDL,EAAkBC,GAGE,oBADMA,EAAcjB,kBAEjCiB,EAAcK,gBAEfL,EAAcM,gBAGjBrC,EAAQ8B,UACNA,EAAgBQ,iBAExB,GAGDd,kBAA+BtB,MAAOuB,IACrC,MAAMI,QAAoB1B,IAC1B,IAAK,MAAMoC,KAAcV,QAClBU,EAAWC,UAClB,EAGDhB,qBAAkCtB,MAAOuB,IACxC,GACCA,EAAQC,aAAezC,EAAuB0C,KAC9CF,EAAQC,aAAezC,EAAuB2C,sBAC7C,CACD,MAAMC,QAAoB1B,IAC1B,IAAK,MAAMoC,KAAcV,EACpBU,EAAWP,SAASC,OAASR,EAAQS,eAAeD,YACjDM,EAAWC,UAGpB,GAIF,GDjGAC,MAAO,IEUD,MAkBC,gBAAMvB,CACZ9B,EACA+B,EACAC,GAEAC,KAAKC,QAAUH,EAAc,eAC7BE,KAAKqB,UAAYtD,EAAWuD,IAC7B,CASO,SAAMjD,CACZkD,EACAxC,EACAyC,GAEA,GAAiB,WAAbD,IAA0B5C,EAAQ6C,GAAeX,gBAAiB,CAErE,MAAMY,EAAwBzB,KAAKqB,WAAWK,gBAAgBC,UAAW,EACnEC,EAAwB5B,KAAKqB,WAAWQ,gBAAgBF,UAAW,EACnEG,EAA0B9B,KAAKqB,WAAWU,kBAAkBJ,UAAW,EAEvEnB,QAAoB1B,IAEpBkD,EAAiC,CACtCC,MAAOjC,KAAKqB,WAAWK,gBAAgBQ,WAAa,mBACpDC,KAAMnC,KAAKqB,WAAWK,gBAAgBU,SACtCC,QAAS7B,EAAY8B,OAAS,EAC9BC,SAAU,CACTC,KAAM,cACNC,UAAW,YACRzC,KAAKqB,WAAWK,gBAAgBgB,cAEpCpB,KAAM,CACLkB,KAAM,SACNG,OAAQ,CACPC,GAAI,qBAKDC,EAAiC,CACtCZ,MAAOjC,KAAKqB,WAAWQ,gBAAgBK,WAAa,mBACpDC,KAAMnC,KAAKqB,WAAWQ,gBAAgBO,SACtCG,SAAU,CACTC,KAAM,cACNC,UAAW,YACRzC,KAAKqB,WAAWQ,gBAAgBa,cAEpCpB,KAAM,CACLkB,KAAM,SACNG,OAAQ,CACPC,GAAI,qBAKDE,EAAmC,CACxCb,MAAOjC,KAAKqB,WAAWU,kBAAkBG,WAAa,qBACtDC,KAAMnC,KAAKqB,WAAWU,kBAAkBK,SACxCC,QAAS7B,EAAY8B,OAAS,EAC9BC,SAAU,CACTC,KAAM,cACNC,UAAW,YACRzC,KAAKqB,WAAWU,kBAAkBW,cAEtCpB,KAAM,CACLkB,KAAM,SACNG,OAAQ,CACPC,GAAI,wBAKDG,EAAiC,GAkBvC,OAhBItB,GACHsB,EAAkBrD,KAAKsC,GAGpBJ,GACHmB,EAAkBrD,KAAKmD,GAGpBf,GACHiB,EAAkBrD,KAAKoD,GAGU,SAA9B9C,KAAKqB,WAAW2B,WAAwBD,EAAkBT,OAAS,IACtES,EAAkB,GAAGC,UAAYhD,KAAKqB,WAAW2B,WAAa,UAGxDD,CACR,CACD,I","sources":["webpack://openfin-workspace--workspace-platform-starter/webpack/bootstrap","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/shapes/actions-shapes.ts","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/define property getters","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/hasOwnProperty shorthand","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/windows/helper.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/windows/index.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/windows/actions.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/windows/menus.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import type { CustomActionsMap, ToolbarButton, WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport type { ModuleHelpers, ModuleImplementation, ModuleList } from \"./module-shapes\";\n\n/**\n * Definition for an action.\n */\nexport interface Actions<O = unknown> extends ModuleImplementation<O, ActionHelpers> {\n\t/**\n\t * Get the actions from the module.\n\t * @param platform The platform module.\n\t * @returns The map of custom actions.\n\t */\n\tget(platform: WorkspacePlatformModule): Promise<CustomActionsMap>;\n}\n\n/**\n * A list of modules that provide actions that can be used by the platform.\n */\nexport type ActionsProviderOptions = ModuleList;\n\n/**\n * Extended helpers used by action modules.\n */\nexport interface ActionHelpers extends ModuleHelpers {\n\t/**\n\t * Update toolbar buttons.\n\t * @param buttons The list of all buttons.\n\t * @param buttonId The button to update.\n\t * @param replacementButtonId The replacement for the button.\n\t * @returns The updated buttons.\n\t */\n\tupdateToolbarButtons: (\n\t\tbuttons: ToolbarButton[],\n\t\tbuttonId: string,\n\t\treplacementButtonId: string\n\t) => Promise<ToolbarButton[]>;\n}\n\n/**\n * Use this in preference to CustomActionCallerType from workspace-platform to avoid the import of the whole of workspace package in modules.\n */\nexport enum CustomActionCallerType {\n\tCustomButton = \"CustomButton\",\n\tStoreCustomButton = \"StoreCustomButton\",\n\tCustomDropdownItem = \"CustomDropdownItem\",\n\tGlobalContextMenu = \"GlobalContextMenu\",\n\tViewTabContextMenu = \"ViewTabContextMenu\",\n\tPageTabContextMenu = \"PageTabContextMenu\",\n\tSaveButtonContextMenu = \"SaveButtonContextMenu\",\n\tAPI = \"API\"\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? undefined : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n","import type OpenFin from \"@openfin/core\";\n\n/**\n * Get all user windows and not hidden/background windows.\n * @returns The list of all user windows.\n */\nexport async function getAllUserWindows(): Promise<OpenFin.Window[]> {\n\tconst platform = fin.Platform.getCurrentSync();\n\tconst windows = await platform.Application.getChildWindows();\n\tconst availableWindows: OpenFin.Window[] = [];\n\tfor (const currentWindow of windows) {\n\t\tconst isShowing = await currentWindow.isShowing();\n\t\tif (isShowing) {\n\t\t\tavailableWindows.push(currentWindow);\n\t\t} else {\n\t\t\t// check to see if it is minimized as isShowing only counts windows that\n\t\t\t// are on the desktop in a visible sense and not hidden or minimized (from v32)\n\t\t\tconst state = await currentWindow.getState();\n\t\t\tif (state === \"minimized\") {\n\t\t\t\tavailableWindows.push(currentWindow);\n\t\t\t}\n\t\t}\n\t}\n\treturn availableWindows;\n}\n","import type { ModuleImplementation, ModuleTypes } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { WindowActions } from \"./actions\";\nimport { WindowMenus } from \"./menus\";\n\nexport const entryPoints: { [type in ModuleTypes]?: ModuleImplementation } = {\n\tactions: new WindowActions(),\n\tmenus: new WindowMenus()\n};\n","import type OpenFin from \"@openfin/core\";\nimport type {\n\tCustomActionPayload,\n\tCustomActionsMap,\n\tWorkspacePlatformModule\n} from \"@openfin/workspace-platform\";\nimport {\n\tCustomActionCallerType,\n\ttype ActionHelpers,\n\ttype Actions\n} from \"workspace-platform-starter/shapes/actions-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty } from \"workspace-platform-starter/utils\";\nimport { getAllUserWindows } from \"./helper\";\n\n/**\n * Implement the actions.\n */\nexport class WindowActions implements Actions {\n\t/**\n\t * The helper methods to use.\n\t */\n\tprivate _helpers?: ActionHelpers;\n\n\t/**\n\t * The helper methods to use.\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ActionHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"WindowActions\");\n\t\tthis._helpers = helpers;\n\t}\n\n\t/**\n\t * Get the actions from the module.\n\t * @param platform The platform module.\n\t * @returns The map of custom actions.\n\t */\n\tpublic async get(platform: WorkspacePlatformModule): Promise<CustomActionsMap> {\n\t\tconst actionMap: CustomActionsMap = {};\n\n\t\tactionMap[\"window-show-all\"] = async (payload: CustomActionPayload): Promise<void> => {\n\t\t\tif (\n\t\t\t\tpayload.callerType !== CustomActionCallerType.API &&\n\t\t\t\tpayload.callerType !== CustomActionCallerType.SaveButtonContextMenu\n\t\t\t) {\n\t\t\t\tconst userWindows = await getAllUserWindows();\n\t\t\t\tlet windowInitiator: OpenFin.Window | undefined;\n\t\t\t\tfor (const visibleWindow of userWindows) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tvisibleWindow.identity.name === payload.windowIdentity.name &&\n\t\t\t\t\t\tvisibleWindow.identity.uuid === payload.windowIdentity.uuid\n\t\t\t\t\t) {\n\t\t\t\t\t\twindowInitiator = visibleWindow;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst windowState = await visibleWindow.getState();\n\t\t\t\t\t\tif (windowState === \"minimized\") {\n\t\t\t\t\t\t\tawait visibleWindow.restore();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tawait visibleWindow.bringToFront();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!isEmpty(windowInitiator)) {\n\t\t\t\t\tawait windowInitiator.setAsForeground();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tactionMap[\"window-hide-all\"] = async (payload: CustomActionPayload): Promise<void> => {\n\t\t\tconst userWindows = await getAllUserWindows();\n\t\t\tfor (const userWindow of userWindows) {\n\t\t\t\tawait userWindow.minimize();\n\t\t\t}\n\t\t};\n\n\t\tactionMap[\"window-hide-others\"] = async (payload: CustomActionPayload): Promise<void> => {\n\t\t\tif (\n\t\t\t\tpayload.callerType !== CustomActionCallerType.API &&\n\t\t\t\tpayload.callerType !== CustomActionCallerType.SaveButtonContextMenu\n\t\t\t) {\n\t\t\t\tconst userWindows = await getAllUserWindows();\n\t\t\t\tfor (const userWindow of userWindows) {\n\t\t\t\t\tif (userWindow.identity.name !== payload.windowIdentity.name) {\n\t\t\t\t\t\tawait userWindow.minimize();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn actionMap;\n\t}\n}\n","import type { WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type {\n\tMenuEntry,\n\tMenuType,\n\tMenus,\n\tRelatedMenuId\n} from \"workspace-platform-starter/shapes/menu-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty } from \"workspace-platform-starter/utils\";\nimport { getAllUserWindows } from \"./helper\";\nimport type { WindowMenuSettings } from \"./shapes\";\n\n/**\n * Implement the menus.\n */\nexport class WindowMenus implements Menus<WindowMenuSettings> {\n\t/**\n\t * The helper methods to use.\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * The helper methods to use.\n\t */\n\tprivate _settings?: WindowMenuSettings;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<WindowMenuSettings>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"WindowMenus\");\n\t\tthis._settings = definition.data;\n\t}\n\n\t/**\n\t * Get the menus from the module.\n\t * @param menuType The type of menu to get the entries for.\n\t * @param platform The current platform.\n\t * @param relatedMenuId The related menu information (viewId/viewIds, pageId and window Id based on the type of menu).\n\t * @returns The menu entries.\n\t */\n\tpublic async get(\n\t\tmenuType: MenuType,\n\t\tplatform: WorkspacePlatformModule,\n\t\trelatedMenuId?: RelatedMenuId\n\t): Promise<MenuEntry[] | undefined> {\n\t\tif (menuType === \"global\" && !isEmpty(relatedMenuId?.windowIdentity)) {\n\t\t\t// you can customize the browser main menu here\n\t\t\tconst includeShowAllWindows = this._settings?.showAllWindows?.include ?? true;\n\t\t\tconst includeHideAllWindows = this._settings?.hideAllWindows?.include ?? true;\n\t\t\tconst includeHideOtherWindows = this._settings?.hideOtherWindows?.include ?? true;\n\n\t\t\tconst userWindows = await getAllUserWindows();\n\n\t\t\tconst showAllWindowsEntry: MenuEntry = {\n\t\t\t\tlabel: this._settings?.showAllWindows?.menuLabel ?? \"Show All Windows\",\n\t\t\t\ticon: this._settings?.showAllWindows?.menuIcon,\n\t\t\t\tenabled: userWindows.length > 1,\n\t\t\t\tposition: {\n\t\t\t\t\ttype: \"CloseWindow\",\n\t\t\t\t\toperation: \"before\",\n\t\t\t\t\t...this._settings?.showAllWindows?.menuPosition\n\t\t\t\t},\n\t\t\t\tdata: {\n\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\taction: {\n\t\t\t\t\t\tid: \"window-show-all\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst hideAllWindowsEntry: MenuEntry = {\n\t\t\t\tlabel: this._settings?.hideAllWindows?.menuLabel ?? \"Hide All Windows\",\n\t\t\t\ticon: this._settings?.hideAllWindows?.menuIcon,\n\t\t\t\tposition: {\n\t\t\t\t\ttype: \"CloseWindow\",\n\t\t\t\t\toperation: \"before\",\n\t\t\t\t\t...this._settings?.hideAllWindows?.menuPosition\n\t\t\t\t},\n\t\t\t\tdata: {\n\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\taction: {\n\t\t\t\t\t\tid: \"window-hide-all\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst hideOtherWindowsEntry: MenuEntry = {\n\t\t\t\tlabel: this._settings?.hideOtherWindows?.menuLabel ?? \"Hide Other Windows\",\n\t\t\t\ticon: this._settings?.hideOtherWindows?.menuIcon,\n\t\t\t\tenabled: userWindows.length > 1,\n\t\t\t\tposition: {\n\t\t\t\t\ttype: \"CloseWindow\",\n\t\t\t\t\toperation: \"before\",\n\t\t\t\t\t...this._settings?.hideOtherWindows?.menuPosition\n\t\t\t\t},\n\t\t\t\tdata: {\n\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\taction: {\n\t\t\t\t\t\tid: \"window-hide-others\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst menuItemsToReturn: MenuEntry[] = [];\n\n\t\t\tif (includeShowAllWindows) {\n\t\t\t\tmenuItemsToReturn.push(showAllWindowsEntry);\n\t\t\t}\n\n\t\t\tif (includeHideAllWindows) {\n\t\t\t\tmenuItemsToReturn.push(hideAllWindowsEntry);\n\t\t\t}\n\n\t\t\tif (includeHideOtherWindows) {\n\t\t\t\tmenuItemsToReturn.push(hideOtherWindowsEntry);\n\t\t\t}\n\n\t\t\tif (this._settings?.separator !== \"none\" && menuItemsToReturn.length > 0) {\n\t\t\t\tmenuItemsToReturn[0].separator = this._settings?.separator ?? \"before\";\n\t\t\t}\n\n\t\t\treturn menuItemsToReturn;\n\t\t}\n\t}\n}\n"],"names":["CustomActionCallerType","__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","isEmpty","value","async","getAllUserWindows","platform","fin","Platform","getCurrentSync","windows","Application","getChildWindows","availableWindows","currentWindow","isShowing","getState","push","entryPoints","actions","initialize","loggerCreator","helpers","this","_logger","_helpers","actionMap","payload","callerType","API","SaveButtonContextMenu","userWindows","windowInitiator","visibleWindow","identity","name","windowIdentity","uuid","restore","bringToFront","setAsForeground","userWindow","minimize","menus","_settings","data","menuType","relatedMenuId","includeShowAllWindows","showAllWindows","include","includeHideAllWindows","hideAllWindows","includeHideOtherWindows","hideOtherWindows","showAllWindowsEntry","label","menuLabel","icon","menuIcon","enabled","length","position","type","operation","menuPosition","action","id","hideAllWindowsEntry","hideOtherWindowsEntry","menuItemsToReturn","separator"],"sourceRoot":""}