/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../../node_modules/@openfin/workspace-platform/index.js":
/*!***************************************************************!*\
  !*** ../../node_modules/@openfin/workspace-platform/index.js ***!
  \***************************************************************/
/***/ ((module) => {

/*! For license information please see index.js.LICENSE.txt */
(()=>{"use strict";var e={525:e=>{var t=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},a=0;a<10;a++)t["_"+String.fromCharCode(a)]=a;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,r){for(var i,s,c=o(e),d=1;d<arguments.length;d++){for(var p in i=Object(arguments[d]))a.call(i,p)&&(c[p]=i[p]);if(t){s=t(i);for(var l=0;l<s.length;l++)n.call(i,s[l])&&(c[s[l]]=i[s[l]])}}return c}},535:(e,t,a)=>{var n=a(525),o=60103,r=60106;var i=60109,s=60110,c=60112;var d=60115,p=60116;if("function"==typeof Symbol&&Symbol.for){var l=Symbol.for;o=l("react.element"),r=l("react.portal"),l("react.fragment"),l("react.strict_mode"),l("react.profiler"),i=l("react.provider"),s=l("react.context"),c=l("react.forward_ref"),l("react.suspense"),d=l("react.memo"),p=l("react.lazy")}var u="function"==typeof Symbol&&Symbol.iterator;function w(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,a=1;a<arguments.length;a++)t+="&args[]="+encodeURIComponent(arguments[a]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var f={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function y(e,t,a){this.props=e,this.context=t,this.refs=g,this.updater=a||f}function h(){}function m(e,t,a){this.props=e,this.context=t,this.refs=g,this.updater=a||f}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(w(85));this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},h.prototype=y.prototype;var v=m.prototype=new h;v.constructor=m,n(v,y.prototype),v.isPureReactComponent=!0;var S={current:null},P=Object.prototype.hasOwnProperty,b={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,a){var n,r={},i=null,s=null;if(null!=t)for(n in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(i=""+t.key),t)P.call(t,n)&&!b.hasOwnProperty(n)&&(r[n]=t[n]);var c=arguments.length-2;if(1===c)r.children=a;else if(1<c){for(var d=Array(c),p=0;p<c;p++)d[p]=arguments[p+2];r.children=d}if(e&&e.defaultProps)for(n in c=e.defaultProps)void 0===r[n]&&(r[n]=c[n]);return{$$typeof:o,type:e,key:i,ref:s,props:r,_owner:S.current}}function W(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function A(e,t,a,n,i){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var c=!1;if(null===e)c=!0;else switch(s){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case o:case r:c=!0}}if(c)return i=i(c=e),e=""===n?"."+I(c,0):n,Array.isArray(i)?(a="",null!=e&&(a=e.replace(C,"$&/")+"/"),A(i,t,a,"",(function(e){return e}))):null!=i&&(W(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||c&&c.key===i.key?"":(""+i.key).replace(C,"$&/")+"/")+e)),t.push(i)),1;if(c=0,n=""===n?".":n+":",Array.isArray(e))for(var d=0;d<e.length;d++){var p=n+I(s=e[d],d);c+=A(s,t,a,p,i)}else if(p=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=u&&e[u]||e["@@iterator"])?e:null}(e),"function"==typeof p)for(e=p.call(e),d=0;!(s=e.next()).done;)c+=A(s=s.value,t,a,p=n+I(s,d++),i);else if("object"===s)throw t=""+e,Error(w(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return c}function M(e,t,a){if(null==e)return e;var n=[],o=0;return A(e,n,"","",(function(e){return t.call(a,e,o++)})),n}function O(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var T={current:null};function E(){var e=T.current;if(null===e)throw Error(w(321));return e}},378:(e,t,a)=>{a(535)}},t={};function a(n){var o=t[n];if(void 0!==o)return o.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,a),r.exports}a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{var e,t,o,r,i,s,c,d;a.r(n),a.d(n,{AppManifestType:()=>c,BrowserButtonType:()=>g,CustomActionCallerType:()=>h,GlobalContextMenuOptionType:()=>u,PageTabContextMenuOptionType:()=>w,SaveButtonContextMenuOptionType:()=>y,SaveModalType:()=>m,ViewTabMenuOptionType:()=>f,getCurrentSync:()=>Ut,init:()=>Cn,wrapSync:()=>Dt}),function(e){e.Fetching="fetching",e.Fetched="fetched",e.Complete="complete"}(e||(e={})),function(e){e.UserAction="user-action",e.FocusChange="focus-change",e.Reload="reload"}(t||(t={})),function(e){e.Active="active",e.Default="default"}(o||(o={})),function(e){e.Suggestion="suggestion"}(r||(r={})),function(e){e.Contact="Contact",e.Custom="Custom",e.List="List",e.Plain="Plain",e.SimpleText="SimpleText",e.Loading="Loading",e.Error="Error"}(i||(i={})),function(e){e.MultiSelect="MultiSelect"}(s||(s={})),function(e){e.Snapshot="snapshot",e.Manifest="manifest",e.View="view",e.External="external"}(c||(c={})),function(e){e.LandingPage="landingPage",e.AppGrid="appGrid"}(d||(d={}));var p,l,u,w,f,g,y,h,m,v;!function(e){e.Primary="primary",e.Secondary="secondary",e.TextOnly="textOnly"}(p||(p={})),function(e){e.ActionButton="ActionButton",e.DropdownButton="DropdownButton"}(l||(l={})),function(e){e.NewWindow="NewWindow",e.NewPage="NewPage",e.SavePage="SavePage",e.SavePageAs="SavePageAs",e.CloseWindow="CloseWindow",e.RestoreChanges="RestoreChanges",e.SaveWorkspace="SaveWorkspace",e.SaveWorkspaceAs="SaveWorkspaceAs",e.RenameWorkspace="RenameWorkspace",e.SwitchWorkspace="SwitchWorkspace",e.DeleteWorkspace="DeleteWorkspace",e.OpenStorefront="OpenStorefront",e.Quit="Quit",e.Custom="Custom"}(u||(u={})),function(e){e.Close="Close",e.Duplicate="Duplicate",e.Rename="Rename",e.Save="Save",e.SaveAs="Save As",e.Custom="Custom"}(w||(w={})),function(e){e.NewView="NewView",e.DuplicateViews="DuplicateView",e.OpenWithDefaultBrowser="OpenWithDefaultBrowser",e.ReloadViews="ReloadTab",e.CloseViews="CloseTab",e.AddToChannel="AddToChannel",e.RemoveFromChannel="RemoveFromChannel",e.Custom="Custom"}(f||(f={})),function(e){e.ShowHideTabs="ShowHideTabs",e.ColorLinking="ColorLinking",e.PresetLayouts="PresetLayouts",e.LockUnlockPage="LockUnlockPage",e.SaveMenu="SaveMenu",e.SavePage="SavePage",e.Minimise="Minimise",e.Maximise="Maximise",e.Close="Close",e.Custom="Custom"}(g||(g={})),function(e){e.SavePage="SavePage",e.SaveWorkspace="SaveWorkspace",e.SavePageAs="SavePageAs",e.SaveWorkspaceAs="SaveWorkspaceAs",e.Custom="Custom"}(y||(y={})),function(e){e.CustomButton="CustomButton",e.CustomDropdownItem="CustomDropdownItem",e.GlobalContextMenu="GlobalContextMenu",e.ViewTabContextMenu="ViewTabContextMenu",e.PageTabContextMenu="PageTabContextMenu",e.SaveButtonContextMenu="SaveButtonContextMenu",e.API="API"}(h||(h={})),function(e){e.SAVE_PAGE="SAVE_PAGE",e.SAVE_WORKSPACE="SAVE_WORKSPACE",e.SAVE_PAGE_AS="SAVE_PAGE_AS",e.SAVE_WORKSPACE_AS="SAVE_WORKSPACE_AS",e.RENAME_PAGE="RENAME_PAGE",e.RENAME_WORKSPACE="RENAME_WORKSPACE"}(m||(m={})),function(e){e.Local="local",e.Dev="dev",e.Staging="staging",e.Prod="prod"}(v||(v={}));const S="undefined"!=typeof window&&"undefined"!=typeof fin,P=("undefined"==typeof process||process.env?.JEST_WORKER_ID,"undefined"!=typeof window),b=P&&"undefined"!=typeof indexedDB,k=P?window.origin:v.Local,W=S&&fin.me.uuid,C=S&&fin.me.name,I=S&&fin.me.entityType,A=(v.Local,v.Dev,v.Staging,v.Prod,e=>e.startsWith("http://")||e.startsWith("https://")?e:k+e),M=(A("https://cdn.openfin.co/workspace/9.0.9"),A("https://cdn.openfin.co/workspace/9.0.9")),O=("undefined"!=typeof WORKSPACE_DOCS_PLATFORM_URL&&A(WORKSPACE_DOCS_PLATFORM_URL),"undefined"!=typeof WORKSPACE_DOCS_CLIENT_URL&&A(WORKSPACE_DOCS_CLIENT_URL),"26.102.71.7"),T="9.0.9";var E,B,x;!function(e){e.Workspace="openfin-browser"}(E||(E={})),function(e){e.RunRequested="run-requested",e.WindowOptionsChanged="window-options-changed",e.WindowClosed="window-closed",e.WindowCreated="window-created"}(B||(B={})),function(e){e.FinProtocol="fin-protocol"}(x||(x={}));const R={uuid:W},_=(E.Workspace,e=>{if(!S)throw new Error("getApplication cannot be used in a non OpenFin env. Avoid using this during pre-rendering.");return fin.Application.wrapSync(e)}),L=()=>_(R);var V,D;!function(e){e.Home="openfin-home",e.Dock="openfin-dock",e.Storefront="openfin-storefront",e.HomeInternal="openfin-home-internal",e.BrowserMenu="openfin-browser-menu",e.BrowserIndicator="openfin-browser-indicator",e.BrowserWindow="internal-generated-window"}(V||(V={})),function(e){e.Shown="shown",e.BoundsChanged="bounds-changed",e.LayoutReady="layout-ready",e.EndUserBoundsChanging="end-user-bounds-changing",e.Blurred="blurred",e.Closed="closed",e.CloseRequested="close-requested",e.Focused="focused",e.ShowRequested="show-requested",e.ViewCrashed="view-crashed",e.ViewAttached="view-attached",e.ViewDetached="view-detached",e.ViewPageTitleUpdated="view-page-title-updated",e.ViewDestroyed="view-destroyed",e.OptionsChanged="options-changed"}(D||(D={}));function U(e){if(!S)throw new Error("getOFWindow can only be used in an OpenFin env. Avoid calling this method during pre-rendering.");return fin.Window.wrapSync(e)}const F={name:C,uuid:W};function G(){return U(F)}V.Home,E.Workspace,V.Dock,E.Workspace;const $={name:V.Storefront,uuid:E.Workspace};E.Workspace,E.Workspace;async function N(e){const t=U(e);"minimized"===await t.getState()&&await t.restore(),await t.show(),await t.setAsForeground()}const j=e=>e.startsWith(V.BrowserWindow);async function H(){return(await fin.Application.getCurrentSync().getChildWindows()).filter((e=>j(e.identity.name)))}const q=e=>U(e).getOptions().then((()=>!0)).catch((()=>!1)),K=()=>q($);var Q;!function(e){e.Browser="Browser",e.Dock="Dock",e.Home="Home",e.Notification="Notification",e.Storefront="Storefront",e.Platform="Platform",e.Theming="Theming"}(Q||(Q={}));const z=async(e,t)=>{const a={apiVersion:t.apiVersion||T,componentName:e,componentVersion:t.componentVersion||T,allowed:t.allowed,rejectionCode:t.rejectionCode};fin.System.registerUsage({type:"workspace-licensing",data:a})};a(378);const J=e=>fin.System.getSystemAppConfig(e);let X;async function Y(){if(X)return X;if(!S)return{};const e=await async function(){if(S)try{let e=await J("workspace").catch((e=>{}));return e||(e=await J("home")),e}catch(e){}}(),t=await async function(){const{manifest:e,initialOptions:t}=await fin.Application.getCurrentSync().getInfo();return e?.workspace||e?.home||t?.workspace||t?.home,e?.workspace?e?.workspace:e?.home?e?.home:t?.workspace?t?.workspace:t?.home?t?.home:void 0}();return X={...t,...e},X}var Z;!function(e){e.CurrentWorkspaceId="currentWorkspaceId",e.LastFocusedBrowserWindow="lastFocusedBrowserWindow",e.MachineName="machineName",e.NewTabPageLayout="NewTabPageLayout",e.NewTabPageSort="NewTabPageSort",e.DockPosition="DockPosition"}(Z||(Z={}));const ee=Z,te=(e,t)=>{localStorage.setItem(`${W}-${e}`,t)},ae=e=>localStorage.getItem(`${W}-${e}`);var ne;!function(e){e.LaunchApp="launchApp",e.SavePage="savePage",e.GetSavedPage="getSavedPage",e.CreateSavedPage="createSavedPage",e.UpdateSavedPage="updateSavedPage",e.DeleteSavedPage="deleteSavedPage",e.GetSavedPages="getSavedPages",e.CreateSavedPageInternal="createSavedPageInternal",e.UpdateSavedPageInternal="updateSavedPageInternal",e.DeleteSavedPageInternal="deleteSavedPageInternal",e.SharePage="sharePage",e.UpdatePageForWindow="updatePageForWindow",e.AttachPagesToWindow="attachPagesToWindow",e.DetachPagesFromWindow="detachPagesFromWindow",e.ReorderPagesForWindow="reorderPagesForWindow",e.SetActivePage="setActivePage",e.GetAllAttachedPages="getAllAttachedPages",e.GetActivePageIdForWindow="getActivePageIdForWindow",e.GetPagesForWindow="getPagesForWindow",e.GetPageForWindow="getPageForWindow",e.GetSavedPageMetadata="getSavedPageMetadata",e.GetUniquePageTitle="getUniquePageTitle",e.GetLastFocusedBrowserWindow="getLastFocusedBrowserWindow",e.GetThemes="getThemes",e.OpenGlobalContextMenuInternal="openGlobalContextMenuInternal",e.OpenViewTabContextMenuInternal="openViewTabContextMenuInternal",e.OpenPageTabContextMenuInternal="openPageTabContextMenuInternal",e.OpenSaveButtonContextMenuInternal="openSaveButtonContextMenuInternal",e.InvokeCustomActionInternal="invokeCustomActionInternal",e.RequestQuitPlatformDialogInternal="requestQuitPlatformDialogInternal",e.GetSavedWorkspace="getSavedWorkspace",e.CreateSavedWorkspace="createSavedWorkspace",e.UpdateSavedWorkspace="updateSavedWorkspace",e.DeleteSavedWorkspace="deleteSavedWorkspace",e.GetSavedWorkspaces="getSavedWorkspaces",e.SaveWorkspace="saveWorkspace",e.GetCurrentWorkspace="getCurrentWorkspace",e.ApplyWorkspace="applyWorkspace",e.SetActiveWorkspace="setActiveWorkspace",e.IsBrowserInitialized="isBrowserInitialized"}(ne||(ne={}));const oe=async e=>fin.Platform.wrapSync(e).getClient(),re=async e=>{const t=await oe(e),a="Target is not a Workspace Platform. Target must call WorkspacePlatform.init";let n;try{n=await t.dispatch("isWorkspacePlatform")}catch(e){throw new Error(a)}if(!0!==n?.isWorkspacePlatform)throw new Error(a);return n},ie=async e=>(await re(e),oe(e)),se=async e=>{if(!0!==(await re(e))?.isBrowserInitialized)throw new Error("Target is not a Browser-enabled Workspace Platform.");return oe(e)},ce=(e,t)=>!t.find((t=>t===e)),de=(e,t)=>`${e} (${t})`,pe=(e,t)=>{let a=1;const n=e.replace(/ \(.+\)$/,"");for(;!ce(de(n,a),t);)a+=1;return de(n,a)};async function le(e){try{const t=Ut();await t.applySnapshot(e.snapshot,{closeExistingWindows:!0}),ue(e)}catch(e){}}function ue(e){if("undefined"!=typeof localStorage)try{const t=JSON.stringify(e);te(ee.CurrentWorkspaceId,t)}catch(e){}}async function we(){if("undefined"==typeof localStorage)return;const e=Ut(),t=await e.getSnapshot();return{workspaceId:crypto.randomUUID(),title:await ye(),metadata:{APIVersion:T},snapshot:t}}async function fe(){if("undefined"==typeof localStorage)return;const e=ae(ee.CurrentWorkspaceId);if(!e)return we();const t=JSON.parse(e),a=Ut(),n=await a.getSnapshot();return{...t,metadata:{APIVersion:T},snapshot:n}}const ge=async e=>await(async e=>(await ie(F)).dispatch(ne.GetSavedWorkspace,e))(e.workspaceId)?(async e=>(await ie(F)).dispatch(ne.UpdateSavedWorkspace,e))({workspaceId:e.workspaceId,workspace:e}):(async e=>(await ie(F)).dispatch(ne.CreateSavedWorkspace,e))({workspace:e});async function ye(e="Untitled Workspace"){const t=(await(async()=>(await ie(F)).dispatch(ne.GetSavedWorkspaces,void 0))()).map((({title:e})=>e));return t.find((t=>t===e))?pe(e,t):e}async function he(){if("undefined"!=typeof localStorage)try{const e=ae(ee.LastFocusedBrowserWindow);if(!e)return;const t=JSON.parse(e);if(await q(t))return t}catch(e){throw new Error(`failed to get last focused browser window: ${e}`)}}function me(e=fin.me.identity){j(e.name)&&function(e){if("undefined"!=typeof localStorage)try{const t=JSON.stringify(e);te(ee.LastFocusedBrowserWindow,t)}catch(e){}}(e)}const ve=(e,t=0)=>{let a,n,o=!1;const r=async n=>{const i=await e(...n);if(o){await new Promise((e=>setTimeout(e,t)));const e=a;return a=void 0,o=!1,r(e)}return i};return(...e)=>(n?(o=!0,a=e):n=r(e).catch((e=>{throw e})).finally((()=>{n=void 0})),n)};var Se;!function(e){e.TabCreated="tab-created",e.ContainerCreated="container-created",e.ContainerResized="container-resized"}(Se||(Se={}));const Pe=(e,t)=>e.content?{...e,content:e.content.map((e=>Pe(e,t)))}:{...e,componentState:t(e.componentState)},be=e=>({...e,name:e.name?e.name:crypto.randomUUID()}),ke=e=>{const t=[];return(e&&Array.isArray(e)?e:[]).forEach((e=>{if("component"===e.type)return t.push(e.componentState);const a=ke(e.content);t.push(...a)})),t},We=async(e,t,a=F)=>{let n;if(j(a.name)){n=(await U(a).getOptions()).layout||{settings:{}}}return{...n,content:[{type:"stack",content:[{type:"component",componentName:"view",componentState:{title:e,url:t}}]}]}};new Map;function Ce(e,t){return async(a,...n)=>{e.has(a)&&e.get(a).forEach((e=>e(...n))),t&&await t({event:a,payload:n})}}function Ie(e,t){return t&&t((t=>{const{event:a,payload:n}=t;e.has(a)&&e.get(a).forEach((e=>e(...n)))})),(t,a)=>{e.has(t)||e.set(t,new Set),e.get(t).add(a)}}function Ae(e){return(t,a)=>{e.has(t)||e.set(t,new Set);const n=e.get(t),o=(...e)=>{a(...e),n.delete(o)};n.add(o)}}function Me(e){return(t,a)=>{e.has(t)&&e.get(t).delete(a)}}const Oe=P&&"complete"!==document.readyState&&new Promise((e=>document.addEventListener("readystatechange",(()=>{"complete"===document.readyState&&e()}))));function Te(e){let t;return()=>{if(!S)throw new Error("getChannelClient cannot be used outside an OpenFin env. Avoid using this method during pre-rendering.");return t||(t=(async()=>{await Oe;const a={clientAPIVersion:T},n=await fin.InterApplicationBus.Channel.connect(e,{payload:a});return n.onDisconnection((async()=>{t=void 0})),n})().then((e=>e)).catch((a=>{throw t=void 0,new Error(`failed to connect to channel provider ${e}: ${a}`)}))),t}}const Ee=e=>`__browser_window__-${e.uuid}-${e.name}`,Be=new Map,xe=e=>{const t=Ee(e);return Be.has(t)||Be.set(t,Te(t)),Be.get(t)()};var Re,_e;!function(e){e.CloseBrowserWindow="close-browser-window",e.QuitPlatform="quit-platform",e.ClosePage="close-page",e.AddToChannel="add-to-channel",e.RemoveFromChannel="remove-from-channel",e.OpenSaveModalInternal="open-save-modal-internal",e.DuplicatePage="duplicate-page"}(Re||(Re={})),function(e){e.GetPages="get-pages",e.GetActivePageForWindow="get-active-page-for-window",e.AttachPagesToWindow="attach-pages-to-window",e.DetachPagesFromWindow="detach-pages-from-window",e.SetActivePageForWindow="set-active-page-for-window",e.RenamePage="rename-page",e.ReorderPagesForWindow="reorder-pages-for-window",e.UpdatePageForWindow="update-page-for-window",e.UpdatePagesWindowOptions="update-pages-window-options",e.IsDetachingPages="is-detaching-pages",e.IsActivePageChanging="is-active-page-changing"}(_e||(_e={}));const Le={...Re,..._e};var Ve;!function(e){e.AttachedPagesToWindow="attached-pages-to-window",e.DetachedPagesFromWindow="detached-pages-from-window"}(Ve||(Ve={}));new Map;const De=async e=>{const t=await xe(e);return await t.dispatch(Le.GetPages)},Ue=async e=>(await xe(e.identity)).dispatch(Le.UpdatePageForWindow,e),Fe=async()=>{const e=await H();return(await Promise.all(e.map((async({identity:e})=>De(e))))).reduce(((e,t)=>e.concat(t)),[])},Ge=async()=>(await ie(F)).dispatch(ne.GetSavedPages,void 0),$e=async e=>(await ie(F)).dispatch(ne.GetSavedPage,e),Ne=async(e,t)=>{const a=await(async e=>(await Fe()).find((t=>t.pageId===e)))(e);return!a||a.title===t.title&&e===t.pageId||await Ue({identity:a.parentIdentity,pageId:e,page:{pageId:t.pageId,title:t.title}}),a},je=async({page:e})=>{await Ne(e.pageId,e),await(async e=>(await ie(F)).dispatch(ne.CreateSavedPage,e))({page:e})},He=async e=>{await $e(e)&&await(async e=>(await ie(F)).dispatch(ne.DeleteSavedPage,e))(e)},qe=async({pageId:e,page:t})=>{await Ne(e,t);return await(async e=>(await ie(F)).dispatch(ne.UpdateSavedPage,e))({pageId:e,page:t})},Ke=async e=>await $e(e.pageId)?qe({pageId:e.pageId,page:e}):je({page:e}),Qe=async e=>{await(async e=>(await xe(e.identity)).dispatch(Le.AttachPagesToWindow,e))(e)},ze=async e=>{await Ue(e)},Je=async e=>{await(async e=>(await xe(e.identity)).dispatch(Le.DetachPagesFromWindow,e))(e)},Xe=async e=>{await(async e=>(await xe(e.identity)).dispatch(Le.SetActivePageForWindow,e))(e)},Ye=e=>De(e),Ze=async({identity:e,pageId:t})=>(await Ye(e)).find((e=>e.pageId===t)),et=async e=>{await(async e=>(await xe(e.identity)).dispatch(Le.ReorderPagesForWindow,e))(e)};async function tt(e="Untitled Page"){const[t,a]=await Promise.all([Ge(),Fe()]),n=[...t,...a].map((({title:e})=>e));return n.find((t=>t===e))?pe(e,n):e}const at=new Map,nt=e=>`${e.uuid}-${e.name}`;const ot=ve((async function(){let e=[];try{e=await Fe()}catch(e){return void at.forEach(((e,t)=>{clearTimeout(e),at.delete(t)}))}const t=new Set;e.forEach((e=>{ke(e.layout.content).forEach((e=>{if(e.name){const a=nt(e);t.add(a)}}))}));const a=G();(await a.getCurrentViews()).forEach((({identity:e})=>{const a=nt(e);if(t.has(a)||at.has(a))return;const n=setTimeout((()=>{fin.View.wrapSync(e).destroy(),at.delete(a)}),5e3);at.set(a,n)})),at.forEach(((e,a)=>{t.has(a)&&(clearTimeout(e),at.delete(a))}))}),2500),rt=({name:e})=>{e&&j(e)&&ot().catch((()=>{}))};let it={};const st=({actionId:e,payload:t})=>{if("function"!=typeof it[e])throw new Error(`Cannot find a configured function for the action '${e}'`);return it[e](t)};function ct(){return localStorage.getItem(ee.MachineName)}let dt;async function pt(){return dt||(dt=await fin.System.getMachineId()),dt}const lt=e=>{if(e.layout&&Array.isArray(e.workspacePlatform?.pages)){const t=e.workspacePlatform.pages.find((e=>e.isActive));if(t)if(t.isLocked){const a=((e,t)=>{const a=ke(t.content);return{...Pe(e,(e=>{const t=a.find((t=>t.name===e.name&&t.uuid===e.uuid)),n=t?t.isClosable:e.isClosable;return{...e,isClosable:n}})),settings:t.settings}})(e.layout,t.layout);t.layout=a,e.layout=a}else t.layout=e.layout}return e};async function ut(e){const t=e||await fin.Platform.getCurrentSync().getSnapshot();if(t.snapshotDetails?.machineId)return t;const a=ct();return{...t,snapshotDetails:{...e.snapshotDetails,machineId:await pt(),machineName:a}}}function wt(e){return new Promise(((t,a)=>{e.oncomplete=e.onsuccess=()=>t(e.result),e.onabort=e.onerror=()=>a(e.error)}))}function ft(e,t){const a=indexedDB.open(e);a.onupgradeneeded=()=>a.result.createObjectStore(t);const n=wt(a);return(e,a)=>n.then((n=>a(n.transaction(t,e).objectStore(t))))}let gt;function yt(){return gt||(gt=ft("keyval-store","keyval")),gt}function ht(e,t=yt()){return t("readonly",(t=>wt(t.get(e))))}function mt(e,t,a=yt()){return a("readwrite",(a=>(a.put(t,e),wt(a.transaction))))}function vt(e,t=yt()){return t("readwrite",(t=>(t.delete(e),wt(t.transaction))))}function St(e,t){return e.openCursor().onsuccess=function(){this.result&&(t(this.result),this.result.continue())},wt(e.transaction)}function Pt(e=yt()){return e("readonly",(e=>{if(e.getAllKeys)return wt(e.getAllKeys());const t=[];return St(e,(e=>t.push(e.key))).then((()=>t))}))}const bt=(e,t="")=>e.toLowerCase().includes(t.toLowerCase()),kt=b&&ft("openfin-home-pages","pages");async function Wt(e){const t=await ht(e,kt);return t?(t.pageId=e.toString(),t.title=t.title||t.pageId,t):null}async function Ct(e){const t=await Pt(kt),a=await Promise.all(t.map((e=>Wt(e.toString()))));return e?a.filter((t=>bt(t.title,e))):a}async function It({page:e}){await mt(e.pageId,e,kt)}async function At(e){await vt(e,kt)}async function Mt({pageId:e,page:t}){if(void 0===await Wt(e))throw new Error("page not found");await It({page:t}),e!==t.pageId&&await At(e)}var Ot;!function(e){e.Label="normal",e.Separator="separator",e.Submenu="submenu",e.Checkbox="checkbox"}(Ot||(Ot={}));const Tt={type:Ot.Separator,data:void 0};var Et;!function(e){e.RegisterProvider="register-provider",e.DeregisterProvider="deregister-provider",e.CreateProviderWindow="create-provider-window",e.GetProviders="get-providers",e.ShowProviderWindow="show-provider-window",e.HideProviderWindow="hide-provider-window",e.GetStorefrontProviderApps="get-storefront-provider-apps",e.GetStorefrontProviderLandingPage="get-storefront-provider-landing-page",e.GetStorefrontProviderFooter="get-storefront-provider-footer",e.GetStorefrontProviderNavigation="get-storefront-provider-navigation",e.LaunchStorefrontProviderApp="launch-storefront-provider-app",e.ShowHome="show-home",e.HideHome="hide-home",e.AssignHomeSearchContext="assign-home-search-context",e.GetLegacyPages="get-legacy-pages",e.GetLegacyWorkspaces="get-legacy-workspaces",e.GetComputedPlatformTheme="get-computed-platform-theme",e.RegisterStorefrontProvider="register-storefront-provider",e.DeregisterStorefrontProvider="deregister-storefront-provider",e.HideStorefront="hide-storefront",e.ShowStorefront="show-storefront"}(Et||(Et={}));Te("__of_workspace_protocol__");const Bt=async(e,t)=>{const a=await(async e=>({...e,layoutDetails:{machineId:await pt(),machineName:ct()}}))(t);return{pageId:crypto.randomUUID(),title:e,layout:a,isReadOnly:!1,hasUnsavedChanges:!0}},xt=e=>({identity:e,openfinWindow:fin.Window.wrapSync(e),getPages:async()=>(await se(e)).dispatch(ne.GetPagesForWindow,e),getPage:async t=>(await se(e)).dispatch(ne.GetPageForWindow,{identity:e,pageId:t}),addPage:async t=>{const a=await se(e);t?.title||(t.title=await a.dispatch(ne.GetUniquePageTitle,void 0));const n=(await a.dispatch(ne.GetAllAttachedPages,void 0)).find((e=>e.pageId===t.pageId||e.title===t.title));if(n)throw n.pageId===t.pageId?new Error(`page with id ${t.pageId} is already attached to a browser window ${n.parentIdentity.name}`):new Error(`page with title ${t.title} is already attached to a browser window ${n.parentIdentity.name}`);const o={identity:e,pages:[t]};return a.dispatch(ne.AttachPagesToWindow,o)},removePage:async t=>(await se(e)).dispatch(ne.DetachPagesFromWindow,{identity:e,pageIds:[t]}),setActivePage:async t=>(await se(e)).dispatch(ne.SetActivePage,{identity:e,pageId:t}),updatePage:async t=>{const a=await se(e);return t.identity=e,a.dispatch(ne.UpdatePageForWindow,t)},reorderPages:async t=>{const a=await se(e);return t.identity=e,a.dispatch(ne.ReorderPagesForWindow,t)},_openGlobalContextMenu:async t=>{const a=await se(e);return t.identity=e,a.dispatch(ne.OpenGlobalContextMenuInternal,t)},replaceToolbarOptions:async t=>{await se(e);const a=fin.Window.wrapSync(e);await a.updateOptions({workspacePlatform:{toolbarOptions:t}})},replaceWindowStateButtonOptions:async t=>{await se(e);const a=fin.Window.wrapSync(e);await a.updateOptions({workspacePlatform:{windowStateButtonOptions:t}})},_openViewTabContextMenu:async t=>{const a=await se(e);return t.identity=e,a.dispatch(ne.OpenViewTabContextMenuInternal,t)},_openPageTabContextMenu:async t=>{const a=await se(e);return t.identity=e,a.dispatch(ne.OpenPageTabContextMenuInternal,t)},_openSaveModal:async t=>{await se(e);return(await xe(e)).dispatch(Le.OpenSaveModalInternal,t)},_openSaveButtonContextMenu:async t=>{const a=await se(e);return t.identity=e,a.dispatch(ne.OpenSaveButtonContextMenuInternal,t)}});let Rt=!1;const _t=e=>{const t=fin.Platform.wrapSync(e);return{wrapSync:e=>xt(e),createWindow:async a=>{await se(e),Rt||(Rt=!0,(async e=>{z(Q.Browser,e)})({allowed:!0}));const n=await t.createWindow(a);return xt(n.identity)},getAllAttachedPages:async()=>(await se(e)).dispatch(ne.GetAllAttachedPages,void 0),getAllWindows:async()=>{await se(e);return(await fin.Application.wrapSync(e).getChildWindows()).filter((e=>e.identity.name.includes("internal-generated-window-"))).map((e=>xt(e.identity)))},getUniquePageTitle:async t=>(await se(e)).dispatch(ne.GetUniquePageTitle,t),getLastFocusedWindow:async()=>(await se(e)).dispatch(ne.GetLastFocusedBrowserWindow,void 0)}},Lt=e=>({createPage:async t=>(await se(e)).dispatch(ne.CreateSavedPageInternal,t),deletePage:async t=>(await se(e)).dispatch(ne.DeleteSavedPageInternal,t),updatePage:async t=>(await se(e)).dispatch(ne.UpdateSavedPageInternal,t),getPage:async t=>(await se(e)).dispatch(ne.GetSavedPage,t),getPages:async t=>(await se(e)).dispatch(ne.GetSavedPages,t),savePage:async t=>(await se(e)).dispatch(ne.SavePage,t),createWorkspace:async t=>(await ie(e)).dispatch(ne.CreateSavedWorkspace,t),deleteWorkspace:async t=>(await ie(e)).dispatch(ne.DeleteSavedWorkspace,t),updateWorkspace:async t=>(await ie(e)).dispatch(ne.UpdateSavedWorkspace,t),getWorkspace:async t=>(await ie(e)).dispatch(ne.GetSavedWorkspace,t),getWorkspaces:async t=>(await ie(e)).dispatch(ne.GetSavedWorkspaces,t),saveWorkspace:async t=>(await ie(e)).dispatch(ne.SaveWorkspace,t)}),Vt=e=>({getThemes:async()=>(await ie(e)).dispatch(ne.GetThemes,void 0)}),Dt=e=>{const t=fin.Platform.wrapSync(e);return Object.assign(t,{applySnapshot:async(t,a)=>{if("string"!=typeof t&&!t?.windows)throw new Error("Not a valid browser snapshot");return fin.Platform.wrapSync(e).applySnapshot(t,a)},getSnapshot:()=>fin.Platform.wrapSync(e).getSnapshot().then((e=>e)),launchApp:async t=>{t.target||(t.target={uuid:W,name:C,entityType:I||"unknown"});return(await ie(e)).dispatch(ne.LaunchApp,t)},_invokeCustomAction:async(t,a)=>{const n=await ie(e),o={actionId:t,payload:{...a,callerType:a.callerType||h.API}};return n.dispatch(ne.InvokeCustomActionInternal,o)},_requestQuitPlatformDialog:async t=>(await ie(e)).dispatch(ne.RequestQuitPlatformDialogInternal,t),getCurrentWorkspace:async()=>(await ie(e)).dispatch(ne.GetCurrentWorkspace,void 0),applyWorkspace:async t=>(await ie(e)).dispatch(ne.ApplyWorkspace,t),setActiveWorkspace:async t=>(await ie(e)).dispatch(ne.SetActiveWorkspace,t),Theme:Vt(e),Browser:_t(e),Storage:Lt(e)})},Ut=()=>Dt(fin.me.identity),Ft=async(e=F)=>{const{workspacePlatform:t}=await U(e).getOptions(),a=t?.newPageUrl,n=t?.newTabUrl;return{newPageUrl:a,newTabUrl:n}},Gt=async(e=F)=>{const t=await Ut().Browser.getUniquePageTitle("Untitled Page"),a=await(async(e=F)=>{const{newPageUrl:t}=await Ft(e);if(!t)throw new Error("Trying to create a new page without a newPageUrl set");return We("New Tab",t,e)})(e);return Bt(t,a)},$t={type:Ot.Label,label:"Close Window",data:{type:u.CloseWindow}},Nt={type:Ot.Label,label:"Open Storefront",data:{type:u.OpenStorefront}},jt={type:Ot.Label,label:"Quit Platform",data:{type:u.Quit}},Ht={type:Ot.Label,label:"New Window",data:{type:u.NewWindow}},qt={type:Ot.Label,label:"Save Page",data:{type:u.SavePage}},Kt={type:Ot.Label,label:"Save Page As...",data:{type:u.SavePageAs}},Qt={type:Ot.Label,label:"Restore to Last Saved Changes",data:{type:u.RestoreChanges}},zt={type:Ot.Label,label:"Save Workspace",data:{type:u.SaveWorkspace}},Jt={type:Ot.Label,label:"Save Workspace As...",data:{type:u.SaveWorkspaceAs}},Xt={type:Ot.Label,label:"Rename Workspace",data:{type:u.RenameWorkspace}},Yt="Switch Workspace",Zt="Delete Workspace",ea=[$t,Tt,Nt,Tt,jt],ta=[Tt,$t,Tt,jt],aa=(e,t,a)=>t.map((t=>{const n=t.workspaceId===e.workspaceId;return{label:t.title,type:Ot.Checkbox,enabled:!n,checked:n,data:{type:a,workspaceId:t.workspaceId}}})),na=async e=>{const t=await K(),{newPageUrl:a}=await Ft(e),n=await(async e=>{const t=U(e),{workspacePlatform:a}=await t.getOptions();return a?.disableMultiplePages})(e),o=await(async e=>{const t=U(e),{workspacePlatform:a}=await t.getOptions();return a?.isLocked})(e),r=[];var i;a&&(r.push(Ht),n||r.push((i=!o,{type:Ot.Label,label:"New Page",data:{type:u.NewPage},enabled:i}))),r.push(Tt);const s=Ut(),c=await s.getCurrentWorkspace(),d=await s.Storage.getWorkspaces(),p=d.find((e=>e.workspaceId===c.workspaceId));return p?r.push(Qt):r.push({label:Qt.label,enabled:!1}),r.push(zt,Jt),p?r.push(Xt):r.push({label:Xt.label,enabled:!1}),d.some((e=>e.workspaceId!==c.workspaceId))?r.push({label:Yt,submenu:aa(c,d,u.SwitchWorkspace)},{label:Zt,submenu:aa(c,d,u.DeleteWorkspace)}):r.push({label:Yt,enabled:!1},{label:Zt,enabled:!1}),r.push(Tt,qt,Kt),t?[...r,...ea]:[...r,...ta]};let oa="Platform";const ra=async()=>oa;var ia,sa,ca;!function(e){e.Home="/home/",e.HomeSearch="/home/?deeplink=search",e.HomePagesRename="/home/pages/rename/",e.Dock="/dock/",e.BrowserPagesLanding="/browser/pages/landing/",e.HomeIndicator="/home/indicator/",e.Browser="/browser/",e.BrowserPopupMenu="/browser/popup-menu/",e.Provider="/provider/",e.BrowserPopupMenuSharePage="/browser/popup-menu/share-page/",e.BrowserPopupMenuSaveModal="/browser/popup-menu/save-modal/",e.BrowserPopupMenuLayouts="/browser/popup-menu/layouts/layouts/",e.BrowserPopupMenuColorLinking="/browser/popup-menu/color-linking/color-linking/",e.BrowserIndicator="/browser/indicator/",e.ResponseModal="/browser/popup-menu/response-modal/",e.Docs="/provider/docs/",e.Storefront="/storefront/",e.DeprecatedAlert="/provider/deprecated-alert/"}(ia||(ia={})),function(e){e.IconOpenFinLogo="/icons/openfinlogo.svg",e.IconFilter="/icons/filter.svg"}(sa||(sa={})),function(e){e.Search="search"}(ca||(ca={}));const da={...sa,...ia};var pa;!function(e){e.Home="/home",e.Browser="/browser",e.Provider="/provider",e.Storefront="/storefront",e.Dock="/dock"}(pa||(pa={}));const la="/workspace/9.0.9";function ua(){return la.substring(0,la.length-"".length)}function wa(e){if(!P)throw new Error("getAbsoluteRoutePath can only be used in a window");return function(){if(!window)throw new Error("getAbsoluteBasePath can only be used in a window");return`${window.origin}${ua()}`}()+e}const fa={name:V.BrowserMenu,alwaysOnTop:!0,autoShow:!1,frame:!1,resizable:!1,backgroundColor:"#2f3136",smallWindow:!0,showTaskbarIcon:!1,backgroundThrottling:!0};function ga(e){const t={...fa,...e};return t.url=function(e){if(!P)throw new Error("resolveAbsolutePath can only be used in a window");return e.startsWith("http")?e:`${window.origin}${e}`}(t.url),t}var ya,ha;!function(e){e.Update="update",e.Response="response"}(ya||(ya={})),function(e){e.Canceled="canceled",e.Negative="negative",e.Affirmative="affirmative"}(ha||(ha={}));const ma=function(e){const t=new Map;return{emit:Ce(t,(t=>S&&fin.InterApplicationBus.publish(e,t))),addListener:Ie(t,(t=>S&&fin.InterApplicationBus.subscribe({uuid:fin.me.uuid},e,t))),removeListener:Me(t),once:Ae(t)}}("window.menu"),va=e=>ma.emit(ya.Response,e),Sa=ve((()=>L().getChildWindows()),500);const Pa=new Map;async function ba({options:e,parameters:t},a){const n=ga(e),{name:o}=n;let r=await async function(e){return(await Sa()).find((t=>t.identity.name===e))}(o);return r||(r=await async function(e){const t=ga(e);if(!Pa.has(t.name)){const e=(async()=>{const e=await fin.Platform.getCurrentSync().createWindow(t);return e.once("closed",(()=>{Pa.delete(t.name)})),e})();Pa.set(t.name,e)}return Pa.get(t.name)}(n)),await async function(e,t){const a=ga(e),{top:n,left:o,defaultWidth:r,defaultHeight:i}=a,s={top:n,left:o,width:r,height:i},c={parentName:fin.Window.getCurrentSync().identity.name};for(const[e,a]of Object.entries(c))t.set(e,a);const d=t.toString(),p=`${a.url}?${d}`;ma.emit(ya.Update,a.name,s,p),await va({name:a.name,data:ha.Canceled})}(e,t||new URLSearchParams),a&&r.center(),r}const ka=async(e,t,a)=>{const n=t?U(t):G();if(!a){await(async(e=fin.me.identity)=>{const t=U(e),a=await t.getBounds();(a.right>screen.availLeft+screen.width||a.left<screen.availLeft||a.bottom>screen.availTop+screen.height||a.top<screen.availTop)&&await t.center()})(n.identity);const t=(e=>({left:(e.left+e.right)/2,top:(e.top+e.bottom)/2}))(await n.getBounds()),{defaultHeight:a,defaultWidth:o}=e;return((e,t)=>{const{height:a,width:n}=t,o=n/2,r=a/2;return{left:e.left-o,top:e.top-r}})(t,{height:a,width:o})}return await n.getBounds()},Wa=async({options:e,content:t},a)=>{const n=new URLSearchParams({...t});return await ba({options:e,parameters:n},a),new Promise((t=>{ma.once(ya.Response,(a=>{a.name===e.name&&t(a)}))}))},Ca=async(e,t)=>{const{windowOptions:a,content:n}=await(async(e,t)=>({title:"Switch Workspace",windowOptions:{url:M+da.ResponseModal,name:V.BrowserMenu,defaultHeight:112,defaultWidth:424,modalParentIdentity:e},content:{title:`Are you sure you want to switch to ${t}`,body:"Any unsaved changes will be discarded",affirmativeButton:"Confirm",negativeButton:"Cancel"}}))(e,t),o=await ka(a,a.modalParentIdentity),r={...a,top:o.top,left:o.left};return(await Wa({options:r,content:n})).data===ha.Affirmative},Ia=async(e,t)=>{const{windowOptions:a,content:n}=await(async(e,t)=>({title:"Delete Workspace",windowOptions:{url:M+da.ResponseModal,name:V.BrowserMenu,defaultHeight:144,defaultWidth:372,modalParentIdentity:e},content:{title:"Are you sure you want to permanently delete this workspace?",body:`${t}`,affirmativeButton:"Confirm",negativeButton:"Cancel"}}))(e,t),o=await ka(a,a.modalParentIdentity),r={...a,top:o.top,left:o.left};return(await Wa({options:r,content:n})).data===ha.Affirmative},Aa=async(e,t,a)=>{const n=a?void 0:e,{windowOptions:o,content:r}=await(async(e,t)=>({title:"Platform Quit",windowOptions:{url:M+da.ResponseModal,name:V.BrowserMenu,defaultHeight:134,defaultWidth:474,modalParentIdentity:t},content:{title:`Close the ${"Platform"===e?"platform":`${e} Platform`}?`,body:"Closing a platform will close any workspaces, apps or any processes that are running.",affirmativeButton:"Confirm",negativeButton:"Cancel"}}))(t,n),i=await ka(o,o.modalParentIdentity),s={...o,top:i.top,left:i.left};return(await Wa({options:s,content:r},a)).data===ha.Affirmative},Ma=async e=>{const{windowOptions:t,content:a}=await(async e=>({title:"Restore Changes",windowOptions:{url:M+da.ResponseModal,name:V.BrowserMenu,defaultHeight:112,defaultWidth:424,modalParentIdentity:e},content:{title:"Are you sure you want to restore to last saved changes?",body:"Any unsaved changes will be discarded",affirmativeButton:"Confirm",negativeButton:"Cancel"}}))(e),n=await ka(t,t.modalParentIdentity),o={...t,top:n.top,left:n.left};return(await Wa({options:o,content:a})).data===ha.Affirmative};var Oa;!function(e){e.ERROR="error",e.SUCCESS="success",e.INFO="info"}(Oa||(Oa={}));const Ta={alwaysOnTop:!0,autoShow:!1,frame:!1,resizable:!1,showTaskbarIcon:!1};var Ea;!function(e){e.Locked="LockClosedIcon",e.Unlocked="LockOpen1Icon"}(Ea||(Ea={}));const Ba=function(e=Ta){const t=new Map;return async(a,n,o,r)=>{if(t.has(a)){const{currentUrl:e,currentName:o}=t.get(a);if(e===n)return;const r=fin.Window.wrapSync({uuid:fin.me.uuid,name:o});await r.close()}const i=`${V.HomeInternal}-${Date.now()}${Math.random()}`;t.set(a,{currentUrl:n,currentName:i});const s=await fin.Platform.getCurrentSync().createWindow({...e,name:i,url:n});((e,t)=>{const a=document.createElement("div");a.setAttribute("aria-live",t||"polite"),(e=>{e.style.position="absolute",e.style.width="1px",e.style.height="1px",e.style.padding="0",e.style.margin="-1px",e.style.overflow="hidden",e.style.whiteSpace="nowrap",e.style.border="0"})(a),document.body.appendChild(a),setTimeout((()=>{a.innerHTML=e}),100),setTimeout((()=>{document.body.removeChild(a)}),1e3)})(`New ${r} indicator: ${o}`),s.once("closed",(()=>{t.delete(a)}))}}();async function xa(e,t,a,n){const o=new URLSearchParams;o.append("type",e),o.append("message",t),o.append("parentName",a||""),o.append("icon",n||"");const r=`${wa(da.BrowserIndicator)}?${o.toString()}`;return Ba("browser"+a,r,t,e)}function Ra(e,t,a){return xa(Oa.SUCCESS,e,t,a)}const _a=async e=>{const t=Ut(),a=await t.getCurrentWorkspace(),n=await t.Storage.getWorkspaces(),o=a.workspaceId;if(n.some((e=>e.workspaceId===o)))t.Storage.saveWorkspace(a),t.setActiveWorkspace(a),Ra("Workspace Saved",e.name);else{t.Browser.wrapSync(e)._openSaveModal({menuType:m.SAVE_WORKSPACE})}},La=e=>{Ut().Browser.wrapSync(e)._openSaveModal({menuType:m.SAVE_WORKSPACE_AS})},Va=async(e,t)=>{const a=Ut().Browser.wrapSync(e),n=await Ut().Storage.getPages(),o=(await a.getPages()).find((e=>t?e.pageId===t:e.isActive)),r=n.some((e=>o.pageId===e.pageId));if(r)try{await Ut().Storage.savePage((d=o,{...d,hasUnsavedChanges:void 0,parentIdentity:void 0,isActive:void 0})),await a.updatePage({pageId:o.pageId,page:{hasUnsavedChanges:!1}}),Ra("Page saved",o.parentIdentity.name)}catch{i="Page failed to save",s=o.parentIdentity.name,xa(Oa.ERROR,i,s,c)}else a._openSaveModal({id:o.pageId,menuType:m.SAVE_PAGE});var i,s,c,d},Da=async(e,t)=>{const a=Ut().Browser.wrapSync(e),n=(await a.getPages()).find((e=>t?e.pageId===t:e.isActive));a._openSaveModal({id:n.pageId,menuType:m.SAVE_PAGE_AS})},Ua=async(e,t)=>{if(!e)return;const a=t.identity,n=await xe(a),o=Ut().Browser.wrapSync(t.identity);switch(e.type){case u.NewWindow:const{newPageUrl:t}=await Ft(a);if(!t)throw new Error("Trying to create a new empty window without a newPageUrl set");Ut().createView({target:void 0,url:t});break;case u.NewPage:await(async e=>{const t=Ut().Browser.wrapSync(e),a=await Gt(e);await t.addPage(a),await t.setActivePage(a.pageId)})(a);break;case u.CloseWindow:n.dispatch(Le.CloseBrowserWindow);break;case u.SaveWorkspace:await _a(a);break;case u.SavePage:await Va(a);break;case u.SavePageAs:await Da(a);break;case u.SaveWorkspaceAs:await La(a);break;case u.RenameWorkspace:o._openSaveModal({menuType:m.RENAME_WORKSPACE});break;case u.SwitchWorkspace:await(async(e,t)=>{const a=Ut(),n=(await a.Storage.getWorkspaces()).find((e=>e.workspaceId===t.workspaceId));n&&await Ca(e,n.title)&&(await a.applyWorkspace(n),Ra("Workspace Switched!",null))})(a,e);break;case u.DeleteWorkspace:await(async(e,t)=>{const a=Ut(),n=(await a.Storage.getWorkspaces()).find((e=>e.workspaceId===t.workspaceId));n&&await Ia(e,n.title)&&(await a.Storage.deleteWorkspace(t.workspaceId),Ra("Workspace Deleted!",e.name))})(a,e);break;case u.Quit:const r=await ra();await Aa(a,r)&&fin.Platform.getCurrentSync().quit();break;case u.OpenStorefront:(async()=>{await K()&&N($)})();break;case u.RestoreChanges:const i=await async function(){const e=Ut(),t=await e.getCurrentWorkspace();return(await e.Storage.getWorkspaces()).find((e=>e.workspaceId===t.workspaceId))}();await Ma(a)&&await le(i);break;case u.Custom:if(e.action){const t={callerType:h.GlobalContextMenu,windowIdentity:a,customData:e.action.customData};Ut()._invokeCustomAction(e.action.id,t)}}},Fa=async(e,t)=>{const a=await xe(t.identity),n=Ut();switch(e?.type){case w.Save:await Va(t.identity,t.pageId);break;case w.SaveAs:await Da(t.identity,t.pageId);break;case w.Rename:await n.Browser.wrapSync(t.identity)._openSaveModal({menuType:m.RENAME_PAGE,id:t.pageId});break;case w.Duplicate:a.dispatch(Le.DuplicatePage,t.pageId);break;case w.Close:a.dispatch(Le.ClosePage,t.pageId);break;case w.Custom:if(e.action){const a={callerType:h.PageTabContextMenu,windowIdentity:t.identity,pageId:t.pageId,customData:e.action.customData};Ut()._invokeCustomAction(e.action.id,a)}}},Ga=async(e,t)=>{if(e?.type){const a=t.identity;switch(e.type){case y.SavePage:await Va(a);break;case y.SaveWorkspace:await _a(a);break;case y.SavePageAs:await Da(a);break;case y.SaveWorkspaceAs:await La(a);break;case y.Custom:if(e.action){const a={callerType:h.SaveButtonContextMenu,windowIdentity:t.identity,pageId:t.pageId,customData:e.action.customData};Ut()._invokeCustomAction(e.action.id,a)}}}},$a=async(e,t)=>{const a=t.selectedViews[0],n=fin.View.wrapSync(a),o=await(async e=>{const{newTabUrl:t}=await Ft(e);if(!t)throw new Error("Trying to create a new page without a newTabUrl set");return{...We("New View",t),url:t,target:e}})(e);await Ut().createView(o,e,n.identity)},Na=async(e,t)=>{const a=await(e=>Promise.all(e.map((async e=>fin.View.wrapSync(e).getInfo()))))(t),{newPageUrl:n,newTabUrl:o}=await Ft(e);a.forEach((async e=>{e.url!==n&&e.url!==o&&await fin.System.openUrlWithBrowser(e.url)}))},ja=(e,t)=>{t.forEach((async t=>{const a=fin.View.wrapSync(t);await(async(e,t)=>{const{url:a}=await t.getInfo(),n={...await t.getOptions(),url:a,target:e,name:void 0};await Ut().createView(n,e,t.identity)})(e,a)}))},Ha=async(e,t)=>{if(!e)return;const a=t.identity;switch(e.type){case f.CloseViews:await(async(e,t)=>{if((await fin.Window.wrapSync(e).getCurrentViews()).length!==t.length)t.forEach((async e=>{const t=fin.View.wrapSync(e);await t.destroy()}));else{const t=(await Ut().Browser.wrapSync(e).getPages()).find((e=>e.isActive));(await xe(e)).dispatch(Le.ClosePage,t?.pageId)}})(a,t.selectedViews);break;case f.OpenWithDefaultBrowser:await Na(a,t.selectedViews);break;case f.ReloadViews:t.selectedViews.forEach((async e=>{const t=fin.View.wrapSync(e);await t.reload()}));break;case f.NewView:await $a(a,t);break;case f.DuplicateViews:ja(a,t.selectedViews);break;case f.AddToChannel:(async(e,t,a)=>{const n={newChannelId:t,selectedViews:a};(await xe(e)).dispatch(Le.AddToChannel,n)})(a,e.option,t.selectedViews);break;case f.RemoveFromChannel:(async(e,t)=>{(await xe(e)).dispatch(Le.RemoveFromChannel,t)})(a,t.selectedViews);break;case f.Custom:if(e.action){const n={callerType:h.ViewTabContextMenu,windowIdentity:a,selectedViews:t.selectedViews,customData:e.action.customData};Ut()._invokeCustomAction(e.action.id,n)}}};async function qa(e,t){const a=await na(e.identity),n=await ra();a.find((e=>e.data?.type===u.Quit)).label=`Quit ${n}`;const o={...e,template:a,callback:Ua};await this.openGlobalContextMenu(o,t)}const Ka=async(e,t)=>{const{x:a,y:n,identity:o,template:r,callback:i}=e,{data:s}=await function(e,t){if(!S)throw new Error("showContextMenu can only be used in an OpenFin env. Avoid calling this method during pre-rendering.");if(!t&&!fin.me.isWindow)throw new Error("showContextMenu can only be used in an OpenFin window.");return(t||fin.Window.getCurrentSync()).showPopupMenu(e)}({x:a,y:n,template:r},fin.Window.wrapSync(o));i(s,e)};async function Qa(e,t){const a={...e,callback:Ha};await this.openViewTabContextMenu(a,t)}async function za(e,t){const a=await(async(e,t)=>{const a=await Ut().Storage.getPage(e),n=(await Fe()).find((t=>t.pageId===e)),{workspacePlatform:o}=await U(t).getOptions(),r=!(o.isLocked||o.preventPageClose||n.closeButton?.disabled||n.closeButton?.hidden);return[{type:Ot.Label,label:"Save Page",data:{type:w.Save}},{type:Ot.Label,label:"Save Page As",data:{type:w.SaveAs}},Tt,{type:Ot.Label,label:"Rename Page",data:{type:w.Rename},enabled:!!a},{type:Ot.Label,label:"Duplicate Page",data:{type:w.Duplicate},enabled:!o.isLocked},Tt,{type:Ot.Label,label:"Close Page",data:{type:w.Close},enabled:r}]})(e.pageId,e.identity),n={...e,template:a,callback:Fa};await this.openPageTabContextMenu(n,t)}async function Ja(e,t){const a={...e,template:await(async()=>[{type:Ot.Label,label:"Save Workspace",data:{type:y.SaveWorkspace}},{type:Ot.Label,label:"Save Workspace As",data:{type:y.SaveWorkspaceAs}},{type:Ot.Separator,data:void 0},{type:Ot.Label,label:"Save Page",data:{type:y.SavePage}},{type:Ot.Label,label:"Save Page As",data:{type:y.SavePageAs}}])(),callback:Ga};await this.openSaveButtonContextMenu(a,t)}const Xa=b&&ft("openfin-workspace-platform-workspaces","workspaces");async function Ya(e){const t=await ht(e,Xa);return t?(t.workspaceId=e.toString(),t.title=t.title||t.workspaceId,t):null}async function Za(e){const t=await Pt(Xa),a=await Promise.all(t.map((e=>Ya(e.toString()))));return e?a.filter((t=>bt(t.title,e))):a}async function en({workspace:e}){await mt(e.workspaceId,e,Xa)}async function tn(e){await vt(e,Xa)}async function an({workspaceId:e,workspace:t}){if(void 0===await Ya(e))throw new Error("workspace not found");await en({workspace:t}),e!==t.workspaceId&&await tn(e)}async function nn({app:e,target:t}){const a=fin.Platform.getCurrentSync();switch(e.manifestType){case c.Snapshot:return a.applySnapshot(e.manifest);case c.View:return async function(e,t){const a=fin.Platform.getCurrentSync();if("view"===t.entityType){const a=fin.View.wrapSync(t),n=await a.getParentLayout();return await n.replaceView(t,{manifestUrl:e.manifest,url:void 0,target:void 0}),a.destroy()}return a.createView({name:void 0,url:void 0,manifestUrl:e.manifest,target:void 0})}(e,t);case c.External:return fin.System.launchExternalProcess({path:e.manifest,uuid:e.appId});default:return fin.Application.startFromManifest(e.manifest)}}const on=e=>e&&"object"==typeof e&&!Array.isArray(e);function rn(e,...t){if(!t.length)return e;const a=t.shift();return on(e)&&on(a)&&Object.entries(a).forEach((([t,a])=>{if(on(a))return e[t]||(e[t]={}),rn(e[t],a);e[t]=a})),rn(e,...t)}const sn=M+da.Browser;function cn(e,t){const a=rn({},t,e);return a.detachOnClose=!0,a}async function dn(e,t,a){const n=e.manifestUrl?await t({manifestUrl:e.manifestUrl},a):void 0;if(n?.interop&&e.interop){const t={...e,...n,interop:e.interop};return delete t.manifestUrl,t}return e}const pn=e=>{const t=e.name===V.Home,a=e.name?.startsWith(V.HomeInternal),n=e.name?.startsWith(V.BrowserMenu);return!t&&!a&&!n},ln=e=>"workspacePlatform"in e?e:(({workstacks:e,pages:t,...a})=>({...a,workspacePlatform:{pages:t||e||null}}))(e),un={contextMenuSettings:{reload:!1},backgroundThrottling:!0,url:sn,contextMenu:!0,closeOnLastViewRemoved:!1,experimental:{showFavicons:!0,defaultFaviconUrl:`${M}/icons/defaultFavicon.svg`},permissions:{System:{openUrlWithBrowser:{enabled:!0,protocols:["mailto"]}}}},wn={dimensions:{borderWidth:3,headerHeight:30}},fn=async(e,t)=>{const a=await Ut().Storage.getPages(),n=await Ut().Browser.getAllAttachedPages();return e.map((e=>{let o=e.title;void 0===e.pageId&&(e.pageId=crypto.randomUUID());const r=a.find((e=>e.title===o));return(r&&r.pageId!==e.pageId||n.find((e=>e.title===o)))&&(o=pe(e.title,[...a,...n].map((e=>e.title)))),n.push({...e,title:o}),{...t,...e,title:o,layout:(i=e.layout,Pe({...i},be))};var i}))};var gn;!function(e){e.Browser="browser",e.Platform="platform",e.Classic="classic",e.Mixed="mixed"}(gn||(gn={}));const yn=e=>{const t=fin.Window.wrapSync(e);return Promise.all([t.bringToFront(),t.restore(),t.focus()])};async function hn(e){const t=(await H()).map((async e=>{const t=await e.getOptions();t.workspacePlatform?.pages&&t.layout&&await(async e=>(await xe(e)).dispatch(Le.UpdatePagesWindowOptions))(e.identity)}));return await Promise.all(t),e?e():ut()}const mn=async e=>{await Aa(fin.me.identity,e.title??await ra(),e.shouldCenterOnMonitor)&&fin.Platform.getCurrentSync().quit()};let vn=[];const Sn=()=>vn;const Pn=(e,t)=>async a=>{const n=null!==e;class o extends a{constructor(){super(),this.isWorkspacePlatform=()=>({isWorkspacePlatform:!0,isBrowserInitialized:!!e}),this.addPage=this.attachPagesToWindow,this.detachPagesFromWindow=Je,this.getAllAttachedPages=Fe,this.getPagesForWindow=Ye,this.getPageForWindow=Ze,this.setActivePage=Xe,this.launchApp=nn,this.savePage=Ke,this.saveWorkspace=ge,this.createSavedPageInternal=je,this.updateSavedPageInternal=qe,this.deleteSavedPageInternal=He,this.reorderPagesForWindow=et,this.getUniquePageTitle=tt,this.updatePageForWindow=ze,this.getLastFocusedBrowserWindow=he,this.getThemes=Sn,this.invokeCustomActionInternal=st,this.requestQuitPlatformDialogInternal=mn,this.getCurrentWorkspace=fe,this.applyWorkspace=le,this.setActiveWorkspace=ue,this.openGlobalContextMenuInternal=this.openGlobalContextMenuInternal.bind(this),this.openGlobalContextMenu=this.openGlobalContextMenu.bind(this),this.getSavedPages=this.getSavedPages.bind(this),this.getSavedPage=this.getSavedPage.bind(this),this.createSavedPage=this.createSavedPage.bind(this),this.updateSavedPage=this.updateSavedPage.bind(this),this.deleteSavedPage=this.deleteSavedPage.bind(this),this.attachPagesToWindow=this.attachPagesToWindow.bind(this),this.openViewTabContextMenuInternal=this.openViewTabContextMenuInternal.bind(this),this.openViewTabContextMenu=this.openViewTabContextMenu.bind(this),this.openPageTabContextMenuInternal=this.openPageTabContextMenuInternal.bind(this),this.openPageTabContextMenu=this.openPageTabContextMenu.bind(this),this.getSavedWorkspaces=this.getSavedWorkspaces.bind(this),this.getSavedWorkspace=this.getSavedWorkspace.bind(this),this.createSavedWorkspace=this.createSavedWorkspace.bind(this),this.updateSavedWorkspace=this.updateSavedWorkspace.bind(this),this.deleteSavedWorkspace=this.deleteSavedWorkspace.bind(this),this.getCurrentWorkspace=this.getCurrentWorkspace.bind(this),this.applyWorkspace=this.applyWorkspace.bind(this),this.setActiveWorkspace=this.setActiveWorkspace.bind(this),this.openSaveButtonContextMenu=this.openSaveButtonContextMenu.bind(this),this.openSaveButtonContextMenuInternal=this.openSaveButtonContextMenuInternal.bind(this)}async getSnapshot(){const e=n?await hn((async()=>ut(await super.getSnapshot(void 0,fin.me.identity)))):await ut(await super.getSnapshot(void 0,fin.me.identity));return{...e,windows:e.windows.filter(pn).map(lt)}}async applySnapshot({snapshot:e,options:t}){const a=e=>super.applySnapshot({snapshot:e,options:{...t,closeExistingWindows:!1}});let o=e;"string"==typeof o&&(o=await super.fetchManifest({manifestUrl:o},fin.me.identity));const r=function(e){let t=!1,a=!1;for(const n of e.windows){if(t&&a)break;n.workspacePlatform?.pages?.length?a=!0:n.layout&&(t=!0)}return t&&a?gn.Mixed:t?gn.Platform:a?gn.Browser:e.windows.length?gn.Classic:null}(o);if(r===gn.Mixed)throw new Error("This snapshot cannot be applied as it contains a mixture of browser and platform windows.");if(n)gn.Platform;else if(r===gn.Browser)throw new Error("This snapshot cannot be applied as the platform has been initialized without the browser.");return t?.closeExistingWindows&&await async function(){const e=await H();await Promise.all(e.map((e=>e.close(!0).catch((()=>{})))))}(),n?async function(e,t){const a=await Fe(),n=e.snapshotDetails?.monitorInfo||await fin.System.getMonitorInfo(),[o,r]=(e.windows||[]).reduce((([e,t],a)=>a?.workspacePlatform?.pages?.length?[[...e,a],t]:[e,[...t,a]]),[[],[]]),i=new Map;a.forEach((e=>i.set(e.pageId,e)));const s=[],c=o.map((async e=>{const t=ln(e),a=[],n=(e=>{let t=!1;const a=(e||[]).map((e=>{const a=function({id:e,name:t,...a}){return{pageId:e,title:t,...a}}(e);return t&&a.isActive&&(a.isActive=!1),a.isActive&&(t=!0),a}));return!t&&a.length&&(a[0].isActive=!0),a})(t?.workspacePlatform?.pages);if(!n?.length){const e=await tt();a.push(await Bt(e,t.layout))}let o;n.forEach((e=>{const t=i.get(e.pageId);t?o=t:a.push(e)})),o&&await Promise.all([Xe({identity:o.parentIdentity,pageId:o.pageId}),yn(o.parentIdentity)]),a.length&&s.push({...t,workspacePlatform:{...t.workspacePlatform,pages:a}})}));if(await Promise.all(c),!s.length&&!r.length)return;const d=fin.Platform.getCurrentSync();return(t||d.applySnapshot.bind(d))({...e,snapshotDetails:{...e.snapshotDetails,monitorInfo:n},windows:[...s,...r]})}(o,a):a(o)}async createWindow(t,a){t.workspacePlatform?.toolbarOptions?.buttons&&(e=>{const t=e.filter((e=>e.type!==g.Custom)),a=new Set;for(const e of t){if(a.has(e.type))throw new Error(`Encountered a duplicate of ${e.type} button. No more than one instance of a button type may be provided.`);a.add(e.type)}})(t.workspacePlatform.toolbarOptions.buttons);let o=ln(t);if(n){const t=this.getThemes();o=await(async(e,t,a)=>{let n=e;const o=n?.workspacePlatform?.pages;if(o){const e=o.find((e=>e.isActive));e?n.layout=e.layout:(o[0].isActive=!0,n.layout=o[0].layout)}if(n.layout){if(n=rn({},t.defaultWindowOptions,n,un),n.layout=rn(n.layout,wn),(n.icon||n.taskbarIcon)&&(n.taskbarIconGroup=n.taskbarIconGroup||fin.me.identity.uuid),!n.backgroundColor){const e=a?.palette;n.backgroundColor=e?.background2||e?.backgroundPrimary}const e=n.workspacePlatform.newTabUrl;if(e&&(n.layout.settings||(n.layout.settings={}),n.layout.settings.newTabButton={url:e}),n=((e,t)=>{const a=e;return a.workspacePlatform||(a.workspacePlatform={}),a.workspacePlatform._internalDeferShowOptions={setAsForeground:!!t,deferShowEnabled:!0,autoShow:a.workspacePlatform?._internalAutoShow||a.workspacePlatform?._internalDeferShowOptions?.autoShow||void 0===a.autoShow||a.autoShow},a.autoShow=!1,a})(n,!0),!n.workspacePlatform.pages?.length){const e=await tt("Untitled Page"),t={...await Bt(e,n.layout),isActive:!0};n.workspacePlatform.pages=[t]}}return n.workspacePlatform?.pages&&(n.workspacePlatform.pages=await fn(n.workspacePlatform.pages,t?.defaultPageOptions)),n.cornerRounding&&delete n.cornerRounding,n})(o,e,t[0])}o=await(async e=>{const t=await fin.System.getMonitorInfo(),a=t.primaryMonitor.availableRect.bottom-t.primaryMonitor.availableRect.top,n=t.primaryMonitor.availableRect.right-t.primaryMonitor.availableRect.left;return e.defaultHeight=e.defaultHeight||"800",e.defaultWidth=e.defaultWidth||"800",a<e.defaultHeight&&(e.defaultHeight=a),n<e.defaultWidth&&(e.defaultWidth=n),e})(o);const r=(e,t)=>super.createWindow(e,t),i=n?(e=>async(t,a)=>{let n=!1;const o=await e(t,a);return t?.workspacePlatform?._internalDeferShowOptions?.deferShowEnabled?(await o.addListener(D.ShowRequested,(async()=>{if(n)return;const e=await o.getOptions();await o.updateOptions({workspacePlatform:{...e.workspacePlatform,_internalDeferShowOptions:{...e.workspacePlatform._internalDeferShowOptions,autoShow:!0}}}),n=!0})),o):o})(r):r;return i(o,a)}async createView(t,a){return t.opts=cn(t.opts,e?.defaultViewOptions),t.opts=await dn(t.opts,this.fetchManifest,a),super.createView(t,a)}async replaceView(t,a){return t.opts.newView=await cn(t.opts.newView,e?.defaultViewOptions),t.opts.newView=await dn(t.opts.newView,this.fetchManifest,a),super.replaceView(t,a)}async replaceLayout(e,t){return delete e.opts.layout?.dimensions,super.replaceLayout(e,t)}async closeView(e,t){const a=fin.View.wrapSync(e.view);await super.closeView(e,t),await a.destroy().catch((e=>e))}async getSavedPage(...e){return Wt.apply(this,e)}async getSavedPages(...e){return Ct.apply(this,e)}async createSavedPage(...e){return It.apply(this,e)}async deleteSavedPage(...e){return At.apply(this,e)}async updateSavedPage(...e){return Mt.apply(this,e)}async getSavedWorkspace(...e){return Ya.apply(this,e)}async getSavedWorkspaces(...e){return Za.apply(this,e)}async createSavedWorkspace(...e){return en.apply(this,e)}async deleteSavedWorkspace(...e){return tn.apply(this,e)}async updateSavedWorkspace(...e){return an.apply(this,e)}async attachPagesToWindow(t){t.pages=await fn(t.pages,e?.defaultPageOptions),await Qe(t)}async openGlobalContextMenuInternal(...e){return qa.apply(this,e)}async openGlobalContextMenu(...e){return Ka.apply(this,e)}async openViewTabContextMenuInternal(...e){return Qa.apply(this,e)}async openViewTabContextMenu(...e){return Ka.apply(this,e)}async openPageTabContextMenuInternal(...e){return za.apply(this,e)}async openPageTabContextMenu(...e){return Ka.apply(this,e)}async openSaveButtonContextMenu(...e){return Ka.apply(this,e)}async openSaveButtonContextMenuInternal(...e){return Ja.apply(this,e)}}return"function"==typeof t?t(o):new o};async function bn(){!function(){const e=L();e.addListener(B.WindowOptionsChanged,ot),e.addListener(B.WindowClosed,rt),e.addListener(B.WindowCreated,rt),fin.InterApplicationBus.subscribe({uuid:fin.me.identity.uuid},"browser-window-ready",rt)}(),async function(){const e=fin.Application.getCurrentSync();await e.addListener("window-focused",me)}();ue(await we())}let kn;function Wn({overrideCallback:e,interopOverride:t,browser:a}){if(!S)throw new Error("Cannot be used outside an OpenFin env.");if(!kn){fin.Platform.getCurrentSync().once("platform-api-ready",(()=>bn())),a?.title&&(n=a.title,oa=n),kn=fin.Platform.init({overrideCallback:Pn(a,e||a?.overrideCallback),interopOverride:t||a?.interopOverride}),(async e=>{z(Q.Platform,e)})({allowed:!0})}var n;return kn}const Cn=async({theme:e,customActions:t,...a})=>{const n=O.split(".").map((e=>parseInt(e))),o=await(async e=>new Promise((async t=>{(await Y()).disableRuntimeValidation&&t(!0);const a=(await fin.System.getVersion()).split(".").map((e=>parseInt(e)));t(e.every(((t,n)=>!(n<3)||a[n]===e[n])))})))(n);var r;if(e&&((r=e).forEach((e=>{const t=e.palette.backgroundPrimary;if(!t.includes("#")&&!t.includes("rgb")&&!t.includes("hsl"))throw new Error("Background primary color is not the right format.")})),vn=r,(async e=>{z(Q.Theming,e)})({allowed:!0})),t&&(it=t),o)return Wn(a);throw new Error(`Runtime version is not supported.  ${n[0]}.${n[1]}.${n[2]}.* is required`)}})(),module.exports=n})();
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../node_modules/@openfin/workspace/index.js":
/*!******************************************************!*\
  !*** ../../node_modules/@openfin/workspace/index.js ***!
  \******************************************************/
/***/ ((module) => {

(()=>{"use strict";var e={703:(e,t,n)=>{n.r(t),n.d(t,{CLIAction:()=>l.Pt,CLIFilterOptionType:()=>l.el,CLITemplate:()=>l.yW,deregister:()=>et,hide:()=>nt,register:()=>Ye,show:()=>tt});var o={};n.r(o),n.d(o,{subscribe:()=>ae});var r={};n.r(r),n.d(r,{create:()=>He});var i=n(678),s=n(532),a=n(436);const c="home";var d;!function(e){e.Commands="home-commands"}(d||(d={}));var u,p=n(806),l=(n(298),n(758));n(114),n(109),n(427);!function(e){e[e.Initial=0]="Initial",e[e.Open=1]="Open",e[e.Close=2]="Close"}(u||(u={}));var f=n(316);const w="all",g="0",h="5",y="6",v=()=>{};function m(e,t){return e?`${e}-${t}`:t}function S(e){return`__search-${e}-topic__`}const P=new Map;function C(e,t){P.has(e)||P.set(e,new Set),P.get(e).add(t)}function k(e,t){const n=P.get(e);n&&n.delete(t)}const W=new Map;function R(e,t){W.has(e)||W.set(e,new Set),W.get(e).add(t)}function T(e,t){const n=W.get(e);n&&n.delete(t)}const I=new Map;async function b(e,t){I.has(e)||I.set(e,new Map),I.get(e).set(t.id,t);const n=P.get(e);if(!n)return;const o=[...n].map((e=>e()));await Promise.all(o)}async function D(e,t){const n=I.get(e);if(!n)return;n.delete(t);const o=W.get(e);if(!o)return;const r=[...o].map((e=>e()));await Promise.all(r)}function B(e){return I.get(e)?[...I.get(e).values()]:[]}function F(e){const t=I.get(e);t&&t.clear()}function L(e,t){const n=I.get(e);return n?n.get(t):null}function A(e,t,n){return{...e,action:n||{...e.actions[0],trigger:f.px.UserAction},dispatcherIdentity:t}}function O(e,t,n="ascending"){const o=e||[];if(!t?.length)return o;const r=[],i=new Map;t.forEach((e=>{if(e.key)return i.set(e.key,e);r.push(e)}));let s=o.map((e=>{const{key:t}=e;if(t&&i.has(t)){const e=i.get(t);return i.delete(t),e}return e}));return s.push(...i.values(),...r),s="ascending"===n?s.sort(((e,t)=>(null!==e.score&&void 0!==e.score?e.score:1/0)-(null!==t.score&&void 0!==t.score?t.score:1/0))):s.sort(((e,t)=>(null!==t.score&&void 0!==t.score?t.score:1/0)-(null!==e.score&&void 0!==e.score?e.score:1/0))),s}function x(e){const t={};let n=[];let o=[];let r=u.Initial;t.getStatus=()=>r,t.getResultBuffer=()=>n,t.setResultBuffer=e=>{n=e,n?.length&&t.onChange()},t.getRevokedBuffer=()=>o,t.setRevokedBuffer=e=>{o=e,o?.length&&t.onChange()},t.onChange=v;const i={};return t.res=i,i.close=()=>{r!==u.Close&&(r=u.Close,t.onChange())},i.open=()=>{r!==u.Open&&(r=u.Open,t.onChange())},i.respond=n=>{const o=O(t.getResultBuffer(),n,e);t.setResultBuffer(o)},i.revoke=(...e)=>{const n=new Set(e),o=t.getResultBuffer().filter((({key:e})=>{const t=n.has(e);return t&&n.delete(e),!t}));t.setResultBuffer(o),n.size&&(t.getRevokedBuffer().forEach((e=>n.add(e))),t.setRevokedBuffer([...n]))},t}function E(e,t,n){const o=new Set;let r=!1;return{close:()=>{r=!0;for(const e of o)e()},req:{id:t,topic:e,...n,context:n?.context||{},onClose:e=>{o.add(e),r&&e()},removeListener:e=>{o.delete(e)}}}}function V(){return{name:fin.me.name,uuid:fin.me.uuid}}function M(){let e;try{const t=fin.Platform.getCurrentSync();if(!t?.identity)return;e=t.identity.uuid}catch(e){}return e}const _="deregistered or does not exist",$=new Error(`provider ${_}`),q=new Error("provider with name already exists"),G=new Error("bad payload"),H=new Error("subscription rejected"),N=new Error(`channel ${_}`),U=new Map;function j(e){const t=X(e);if(t)return t;throw N}function X(e){const t=U.get(e);if(t)return t}function K(e,t){U.set(e,t)}const J=new Map;function z(e){J.has(e)||J.set(e,new Map);const t=J.get(e);return{getRequestsForIdentity:e=>{const n=function(e){return`${e.uuid}:${e.name}`}(e);return t.has(n)||t.set(n,new Map),t.get(n)}}}async function Z(e,t){return(await j(e)).dispatch(g,t)}function Q({namespacedTopic:e,topic:t}){const n=L.bind(null,e),o=z(e),r=Z.bind(null,e);return async(e,i)=>{if(!e||!e.id||!e.providerId){const e=G;return{error:e.message}}const{id:s,providerId:a}=e,c=n(a);if(!c){const e=$;return{error:e.message}}const d=o.getRequestsForIdentity(i);let u=d.get(e.id);u||(u=E(t,s,e),d.set(e.id,u));const p=x(),l=()=>{const e=p.getResultBuffer();p.setResultBuffer([]);const t=p.getRevokedBuffer();p.setRevokedBuffer([]);const n=p.getStatus();r({id:s,providerId:a,results:e,revoked:t,status:n})};let f=!0,w=!1;p.onChange=()=>{if(f)return f=!1,void l();w||(w=!0,setTimeout((()=>{w=!1,l()}),100))};try{const{results:e,context:t}=await c.onUserInput(u.req,p.res),n=p.getStatus();return{id:s,providerId:a,status:n,results:e,context:t}}catch(e){return{id:s,providerId:a,error:e.message}}}}async function Y(e,t,n){const o=n||await j(e),r=V(),i={identity:r,...t,onUserInput:void 0,onResultDispatch:void 0},s=await o.dispatch("2",i);return await b(e,{identity:r,...t}),s}async function ee(e,t){const n=await j(e);return await n.dispatch("3",t),D(e,t)}async function te(e,t,n,o){const r=A(n,V(),o),i=L(e,t);if(i){const{onResultDispatch:e}=i;if(!e)return;return e(r)}const s={providerId:t,result:r};return(await j(e)).dispatch(h,s)}async function ne(e,t){const n={...t,context:t?.context||{}},o={},r=async function*(e,t,{setState:n}){const o=await j(e);for(;;){const e=await o.dispatch("1",t),r=e.error;if(r)throw new Error(r);const i=e;if(t.id=i.id,n(i.state),i.done)return i.value;yield i.value}}(e,n,{setState:e=>{o.state=e}});let i=await r.next();return o.id=n.id,o.close=()=>{!async function(e,t){(await j(e)).dispatch(y,{id:t})}(e,o.id)},o.next=()=>{if(i){const e=i;return i=void 0,e}return r.next()},o}async function oe(e){return(await j(e)).dispatch("4",null)}async function re(e){const t=await j(e);var n;n=e,U.delete(n),F(e),await t.disconnect()}function ie(e){const{namespacedTopic:t}=e,n=z(t);return async o=>{if(!X(t))return;const r=n.getRequestsForIdentity(o);for(const{req:e,close:t}of r.values())t(),r.delete(e.id);K(t,(async e=>{const{namespacedTopic:t}=e,n=await se(e);for(const e of B(t))await Y(t,e,n);return n})(e))}}async function se(e){const{namespacedTopic:t}=e,n=S(t),o=await async function(e){for(let t=0;t<50;t++)try{return await fin.InterApplicationBus.Channel.connect(e,{wait:!1})}catch(e){if(49===t)throw e;await new Promise((e=>setTimeout(e,1e3)))}}(n);return o.register(g,Q(e)),o.register(y,function(e){const t=z(e);return(e,n)=>{const o=t.getRequestsForIdentity(n),r=o.get(e.id);r&&(r.close(),o.delete(e.id))}}(t)),o.register(h,function(e){return async(t,n)=>{if(!t||!t.providerId||!t.result)return;const o=L(e,t.providerId);if(!o)return;const{onResultDispatch:r}=o;return r?(t.result.dispatcherIdentity=n,r(t.result)):void 0}}(t)),o.onDisconnection(ie(e)),o}async function ae(e){const t=("string"==typeof e?e:e?.topic)||w,n=("string"==typeof e?null:e?.uuid)||M(),o=m(n,t),r={topic:t,namespace:n,namespacedTopic:o};let i=X(o);return i||(i=se(r),K(o,i),await i),{getAllProviders:oe.bind(null,o),register:Y.bind(null,o),search:ne.bind(null,o),deregister:ee.bind(null,o),dispatch:te.bind(null,o),disconnect:re.bind(null,o)}}const ce=new Map;function de(e){const t=ue(e);if(t)return t;throw N}function ue(e){const t=ce.get(e);if(t)return t}const pe=new Map;function le(e,t){pe.has(e)||pe.set(e,new Set),pe.get(e).add(t)}function fe(e,t){const n=pe.get(e);n&&n.delete(t)}function we(e){return[...B(e)].map((e=>({...e,onUserInput:void 0,onResultDispatch:void 0})))}async function ge(e,t){if(L(e,t.id))throw new Error("provider with name already exists");const n=V();await b(e,{identity:n,...t})}function he(e,t){D(e,t)}async function ye(e,t,n,o){const r=L(e,t);if(!r)throw $;const{onResultDispatch:i}=r;if(!i)return;return i(A(n,V(),o))}async function*ve(e,t,n){const o=function(e,t){const n=[],o=[],r=[],i=[];for(const s of e){const e=x(s.scoreOrder),a={results:[],provider:{id:s.id,identity:s.identity,title:s.title,scoreOrder:s.scoreOrder,icon:s.icon,dispatchFocusEvents:s.dispatchFocusEvents}};n.push(a),o.push(e);const c=(async()=>{try{const{results:n,context:o}=await s.onUserInput(t,e.res);a.results=O(a.results,n),a.context={...a.context,...o}}catch(e){a.error=e}})();c.finally((()=>{c.done=!0})),i.push(c),r.push(r.length)}return{providerResponses:n,listenerResponses:o,openListenerResponses:r,initialResponsePromises:i}}(t.targets?t.targets.map((t=>L(e,t))).filter((e=>!!e)):[...B(e).filter((e=>!e.hidden))],t),{providerResponses:r,listenerResponses:i}=o;let{openListenerResponses:s,initialResponsePromises:a}=o,c=f.De.Fetching;const d=e=>{c=e,n.setState(c)};let p,l=!1;t.onClose((()=>{l=!0,p&&p()}));do{let e=!1;if(a.length){const t=[];for(const n of a)n.done?e=!0:t.push(n);a=t,a.length||(d(f.De.Fetched),e=!0)}let t,n=!1;const o=()=>{n=!0,t&&t()},w=[];for(const t of s){const n=i[t],s=r[t],a=n.getStatus();(a===u.Open||c===f.De.Fetching&&a===u.Initial)&&(w.push(t),n.onChange=o);const d=n.getResultBuffer();d.length&&(n.setResultBuffer([]),s.results=O(s.results,d),e=!0);const p=n.getRevokedBuffer();if(p.length){n.setRevokedBuffer([]);const t=new Set(p);s.results=s.results.filter((({key:e})=>!t.has(e))),e=!0}}if(s=w,e&&(yield r),l)break;n||(s.length||a.length)&&await Promise.race([...a,new Promise((e=>{t=e})),new Promise((e=>{p=e}))])}while(s.length||a.length);return d(f.De.Complete),r}let me=0;function Se({namespacedTopic:e,topic:t},n){me+=1;const o=E(t,me.toString(),n),r=ve(e,o.req,{setState:e=>{r.state=e}});return r.id=me.toString(),r.close=o.close,r.state=f.De.Fetching,r}const Pe=new Map;function Ce(e,t){return`${e}:${t}`}function ke(e){return async(t,...n)=>{if(!t)return{error:G.message};let o;if(t.id)o=Ce(e.namespacedTopic,t.id);else{const n=Se(e,t);o=Ce(e.namespacedTopic,n.id),t.id=n.id,Pe.set(o,{generator:n})}const r=Pe.get(o);clearTimeout(r.timeout);const i=await r.generator.next();return r.timeout=function(e){return window.setTimeout((()=>{Pe.delete(e)}),1e4)}(o),{...i,id:t.id,state:r.generator.state}}}function We(e,t,n){return de(e).dispatch(t,y,{id:n})}function Re(e){return t=>function(e,t){const n=Ce(e,t),o=Pe.get(n);o&&o.generator.close()}(e,t.id)}async function Te(e,t,{id:n,query:o,context:r,targets:i}){const s=de(e),a={id:n,query:o,context:r,targets:i,providerId:t.id},c=await s.dispatch(t.identity,g,a),d=c.error;if(d)throw new Error(d);return c}const Ie=new Map;function be(e,t,n){return`${e}:${t.name}:${t.uuid}:${n}`}const De=new Map;function Be(e,t,n){return`${e}:${t}:${n}`}function Fe(e,t){const n=be.bind(null,e,t.identity),o=We.bind(null,e,t.identity),r=Te.bind(null,e,t);return async(i,s)=>{const a=n(i.id);if(!Ie.has(a)){const e=()=>{o(i.id),Ie.delete(a)};Ie.set(a,e),i.onClose(e)}const c=Be(e,t.id,i.id),d=()=>{De.delete(c),s.close()};i.onClose(d),De.set(c,(e=>{e.results?.length&&s.respond(e.results),e.revoked?.length&&s.revoke(...e.revoked),e.status===u.Open&&s.open(),e.status===u.Close&&d()}));const p=await r(i);return p.status===u.Open&&s.open(),p.status!==u.Close&&p.status!==u.Initial||d(),p}}function Le(e,t){return async n=>{const o=de(e),r={providerId:t.id,result:n};return o.dispatch(t.identity,h,r)}}const Ae=new Map;function Oe(e,t){return`${e}-${t.name}-${t.uuid}`}function xe(e){return async(t,n)=>{if(!t||!t.id)return void new Error(JSON.stringify(t));if(L(e,t.id))throw q;return t.identity=n,await async function(e,t){const n=Oe(e,t.identity);Ae.has(n)||Ae.set(n,[]),Ae.get(n).push(t.id),await b(e,{...t,onUserInput:Fe(e,t),onResultDispatch:Le(e,t)})}(e,t),{workspaceVersion:i.u0,clientAPIVersion:t.clientAPIVersion}}}function Ee(e){return t=>{t&&function(e,t){const n=L(e,t);if(!n)return;const o=Oe(e,n.identity),r=Ae.get(o);if(r){const n=r.findIndex((e=>e===t));-1!==n&&(r.splice(n,1),D(e,t))}}(e,t)}}const Ve=new Map;function Me(e,t){Ve.has(e)||Ve.set(e,new Set),Ve.get(e).add(t)}function _e(e,t){const n=Ve.get(e);n&&n.delete(t)}function $e(e){return async t=>{!function(e,t){const n=Oe(e,t),o=Ae.get(n);if(o){for(const t of o)D(e,t);Ae.delete(n)}}(e,t);const n=Ve.get(e);n&&n.forEach((e=>e(t)))}}async function qe(e){const{namespacedTopic:t}=e,n=S(e.namespacedTopic),o=await(r=n,fin.InterApplicationBus.Channel.create(r));var r;return o.onConnection(function({namespacedTopic:e}){return async t=>{const n=pe.get(e);if(n)for(const e of n)if(!await e(t))throw H}}(e)),o.onDisconnection($e(t)),o.register(y,Re(t)),o.register(g,function(e){return t=>{const n=Be(e,t.providerId,t.id),o=De.get(n);o&&o(t)}}(t)),o.register("2",xe(t)),o.register("3",Ee(t)),o.register("4",function(e){return async()=>we(e)}(t)),o.register("1",ke(e)),o.register(h,function(e){return async(t,n)=>{if(!t||!t.providerId||!t.result)return;const o=L(e,t.providerId);if(!o)throw $;const{onResultDispatch:r}=o;return r?(t.result.dispatcherIdentity=n,r(t.result)):void 0}}(t)),o}async function Ge(e){const t=de(e);var n;n=e,ce.delete(n),await t.destroy(),F(e)}async function He(e){const t=("string"==typeof e?e:e?.topic)||w,n=M(),o=m(n,t),r={topic:t,namespace:n,namespacedTopic:o};let i=ue(o);i||(i=await qe(r),function(e,t){ce.set(e,t)}(o,i));const s=fe.bind(null,o),a=_e.bind(null,o),c=k.bind(null,o),d=T.bind(null,o);return{getAllProviders:we.bind(null,o),search:Se.bind(null,r),register:ge.bind(null,o),deregister:he.bind(null,o),onSubscription:le.bind(null,o),onDisconnect:Me.bind(null,o),onRegister:C.bind(null,o),onDeregister:R.bind(null,o),dispatch:ye.bind(null,r),disconnect:Ge.bind(null,o),removeListener:e=>{s(e),a(e),c(e),d(e)}}}const{create:Ne}=r,{subscribe:Ue}=o,je={create:Ne,subscribe:Ue,defaultTopic:"all"},Xe=()=>{window.search=je},Ke=e=>{const t=()=>{Xe(),window.removeEventListener(e,t)};return t};if("undefined"!=typeof window){Xe();const e="load",t=Ke(e);window.addEventListener(e,t);const n="DOMContentLoaded",o=Ke(n);window.addEventListener(n,o)}const Je=new Map;async function ze(){await async function(e){Je.set(e,await Ue({topic:e,uuid:p.q9.Workspace}))}(c)}let Ze;async function Qe(e){return await async function(){return Ze||(Ze=ze()),Ze}(),Je.get(e)}const Ye=async e=>{if(!e.icon)throw new Error(`${e.id} provider needs to have icon property defined.`);await(0,a.aB)();const t=await Qe(c);try{e.clientAPIVersion=i.u0;const n=await t.register(e);return(0,s.ck)({allowed:!0,componentVersion:n?.workspaceVersion}),n}catch(e){throw(0,s.ck)({allowed:!1,rejectionCode:e.message}),e}},et=async e=>{await(0,a.aB)();return(await Qe(c)).deregister(e)};async function tt(){return(await(0,a.Xl)()).dispatch(a.WF.ShowHome,void 0)}async function nt(){return(await(0,a.Xl)()).dispatch(a.WF.HideHome,void 0)}},298:(e,t,n)=>{n.d(t,{p:()=>o.px,w:()=>o.wt});var o=n(316)},427:(e,t,n)=>{var o;n.d(t,{v:()=>o}),function(e){e.ActionButton="ActionButton",e.DropdownButton="DropdownButton"}(o||(o={}))},758:(e,t,n)=>{var o,r,i;n.d(t,{Pt:()=>o,el:()=>i,yW:()=>r}),function(e){e.Suggestion="suggestion"}(o||(o={})),function(e){e.Contact="Contact",e.Custom="Custom",e.List="List",e.Plain="Plain",e.SimpleText="SimpleText",e.Loading="Loading",e.Error="Error"}(r||(r={})),function(e){e.MultiSelect="MultiSelect"}(i||(i={}))},114:(e,t,n)=>{var o,r;n.d(t,{L:()=>o,T:()=>r}),function(e){e.Snapshot="snapshot",e.Manifest="manifest",e.View="view",e.External="external"}(o||(o={})),function(e){e.LandingPage="landingPage",e.AppGrid="appGrid"}(r||(r={}))},109:(e,t,n)=>{n.d(t,{Go:()=>r,ZJ:()=>s,bI:()=>i,p6:()=>o});const o={Container:"Container",Button:"Button"},r={Text:"Text",Image:"Image",List:"List"},i={...o,...r};var s;!function(e){e.Primary="primary",e.Secondary="secondary",e.TextOnly="textOnly"}(s||(s={}))},528:(e,t,n)=>{n.r(t),n.d(t,{AppManifestType:()=>s.L,StorefrontTemplate:()=>s.T,deregister:()=>g,hide:()=>h,register:()=>w,show:()=>y});var o=n(532),r=n(436),i=n(82),s=n(114),a=n(678);let c,d=!1;async function u(e,t,n){const o=await(0,r.Dm)();try{return await o.dispatch(e.action,e.payload)}catch(r){if(-1!==r.toString().indexOf(e.action))return d=!0,await o.dispatch(t.action,t.payload),n;throw r}}const p=new Map,l=e=>{if(!p.has(e))throw new Error(`Storefront Provider with id ${e} is not registered`);return p.get(e)},f=async e=>{const t=await(0,r.Xl)();if(p.has(e.id))throw new Error(`Storefront provider with id ${e.id} already registered`);return p.set(e.id,e),(e=>{e.isStorefrontActionsRegistered||(e.isStorefrontActionsRegistered=!0,e.register(r.WF.GetStorefrontProviderApps,(e=>l(e).getApps())),e.register(r.WF.GetStorefrontProviderFooter,(e=>l(e).getFooter())),e.register(r.WF.GetStorefrontProviderLandingPage,(e=>l(e).getLandingPage())),e.register(r.WF.GetStorefrontProviderNavigation,(e=>l(e).getNavigation())),e.register(r.WF.LaunchStorefrontProviderApp,(({id:e,app:t})=>l(e).launchApp(t))))})(t),e.clientAPIVersion=a.u0,u({action:r.WF.RegisterProvider,payload:{providerType:i.lP.Storefront,info:e}},{action:r.WF.RegisterStorefrontProvider,payload:e},{workspaceVersion:"unknown"})},w=e=>(c=new Promise((async(t,n)=>{try{const n=await f(e);(0,o.d9)({allowed:!0,componentVersion:n?.workspaceVersion}),t({clientAPIVersion:a.u0,workspaceVersion:n.workspaceVersion||""})}catch(e){(0,o.d9)({allowed:!1,rejectionCode:e.message}),n(e)}})),c),g=async e=>(await c,p.delete(e),await(0,r.aB)(),u({action:r.WF.DeregisterProvider,payload:{providerType:i.lP.Storefront,id:e}},{action:r.WF.DeregisterStorefrontProvider,payload:e})),h=async()=>(await c,await(0,r.aB)(),u({action:r.WF.HideProviderWindow,payload:{providerType:i.lP.Storefront}},{action:r.WF.HideStorefront})),y=async()=>(await c,await(0,r.aB)(),u({action:r.WF.ShowProviderWindow,payload:{providerType:i.lP.Storefront}},{action:r.WF.ShowStorefront}))},436:(e,t,n)=>{n.d(t,{WF:()=>s,Dm:()=>a,Xl:()=>p,aB:()=>u});var o=n(678);const r=o.Ax&&"complete"!==document.readyState&&new Promise((e=>document.addEventListener("readystatechange",(()=>{"complete"===document.readyState&&e()}))));var i=n(121);var s;!function(e){e.RegisterProvider="register-provider",e.DeregisterProvider="deregister-provider",e.CreateProviderWindow="create-provider-window",e.GetProviders="get-providers",e.ShowProviderWindow="show-provider-window",e.HideProviderWindow="hide-provider-window",e.GetStorefrontProviderApps="get-storefront-provider-apps",e.GetStorefrontProviderLandingPage="get-storefront-provider-landing-page",e.GetStorefrontProviderFooter="get-storefront-provider-footer",e.GetStorefrontProviderNavigation="get-storefront-provider-navigation",e.LaunchStorefrontProviderApp="launch-storefront-provider-app",e.ShowHome="show-home",e.HideHome="hide-home",e.AssignHomeSearchContext="assign-home-search-context",e.GetLegacyPages="get-legacy-pages",e.GetLegacyWorkspaces="get-legacy-workspaces",e.GetComputedPlatformTheme="get-computed-platform-theme",e.RegisterStorefrontProvider="register-storefront-provider",e.DeregisterStorefrontProvider="deregister-storefront-provider",e.HideStorefront="hide-storefront",e.ShowStorefront="show-storefront"}(s||(s={}));const a=function(e){let t;return()=>{if(!o.sS)throw new Error("getChannelClient cannot be used outside an OpenFin env. Avoid using this method during pre-rendering.");return t||(t=(async()=>{await r;const n={clientAPIVersion:o.u0},i=await fin.InterApplicationBus.Channel.connect(e,{payload:n});return i.onDisconnection((async()=>{t=void 0})),i})().then((e=>e)).catch((n=>{throw t=void 0,new Error(`failed to connect to channel provider ${e}: ${n}`)}))),t}}("__of_workspace_protocol__"),c="isLaunchedViaLib",d=e=>{const t=new URL(e);return t.searchParams.append(c,"true"),t.toString()},u=async()=>{if(!await(0,i.JV)(i.iW))return(o.ZK||-1===navigator.userAgent.indexOf("Win"))&&await fin.Application.startFromManifest(d(o.aW)),fin.System.openUrlWithBrowser(d(o.GX))},p=async()=>(await u(),a())},82:(e,t,n)=>{n.d(t,{R8:()=>s,X_:()=>i,lP:()=>o});var o,r=n(436);!function(e){e.Storefront="storefront",e.Dock="dock"}(o||(o={}));const i=async e=>(await(0,r.Dm)()).dispatch(r.WF.ShowProviderWindow,{providerType:e}),s=async e=>(await(0,r.Dm)()).dispatch(r.WF.HideProviderWindow,{providerType:e})},806:(e,t,n)=>{n.d(t,{q9:()=>o});var o,r,i,s=n(678);!function(e){e.Workspace="openfin-browser"}(o||(o={})),function(e){e.RunRequested="run-requested",e.WindowOptionsChanged="window-options-changed",e.WindowClosed="window-closed",e.WindowCreated="window-created"}(r||(r={})),function(e){e.FinProtocol="fin-protocol"}(i||(i={}));s.AB,o.Workspace},678:(e,t,n)=>{var o;n.d(t,{AB:()=>a,Ax:()=>i,GX:()=>u,ZK:()=>d,aW:()=>p,oC:()=>c,sS:()=>r,u0:()=>f}),function(e){e.Local="local",e.Dev="dev",e.Staging="staging",e.Prod="prod"}(o||(o={}));const r="undefined"!=typeof window&&"undefined"!=typeof fin,i=("undefined"==typeof process||process.env?.JEST_WORKER_ID,"undefined"!=typeof window),s=i?window.origin:o.Local,a=r&&fin.me.uuid,c=r&&fin.me.name,d=(r&&fin.me.entityType,"prod"===o.Local),u=(o.Dev,o.Staging,o.Prod,"fins://system-apps/workspace"),p="https://cdn.openfin.co/workspace/9.0.9/app.json",l=e=>e.startsWith("http://")||e.startsWith("https://")?e:s+e,f=(l("https://cdn.openfin.co/workspace/9.0.9"),l("https://cdn.openfin.co/workspace/9.0.9"),"undefined"!=typeof WORKSPACE_DOCS_PLATFORM_URL&&l(WORKSPACE_DOCS_PLATFORM_URL),"undefined"!=typeof WORKSPACE_DOCS_CLIENT_URL&&l(WORKSPACE_DOCS_CLIENT_URL),"9.0.9")},532:(e,t,n)=>{n.d(t,{Wn:()=>d,ck:()=>a,d9:()=>c});var o,r=n(678),i=n(121);!function(e){e.Browser="Browser",e.Dock="Dock",e.Home="Home",e.Notification="Notification",e.Storefront="Storefront",e.Platform="Platform",e.Theming="Theming"}(o||(o={}));const s=async(e,t)=>{const n={apiVersion:t.apiVersion||r.u0,componentName:e,componentVersion:t.componentVersion||r.u0,allowed:t.allowed,rejectionCode:t.rejectionCode};fin.System.registerUsage({type:"workspace-licensing",data:n})},a=async e=>{i.OI.uuid===i.Gi.uuid&&i.OI.name===i.Gi.name||s(o.Home,e)},c=async e=>{s(o.Storefront,e)},d=async e=>{s(o.Dock,e)}},121:(e,t,n)=>{n.d(t,{Gi:()=>c,JV:()=>p,OI:()=>d,iW:()=>u});var o,r,i=n(806),s=n(678);!function(e){e.Home="openfin-home",e.Dock="openfin-dock",e.Storefront="openfin-storefront",e.HomeInternal="openfin-home-internal",e.BrowserMenu="openfin-browser-menu",e.BrowserIndicator="openfin-browser-indicator",e.BrowserWindow="internal-generated-window"}(o||(o={})),function(e){e.Shown="shown",e.BoundsChanged="bounds-changed",e.LayoutReady="layout-ready",e.EndUserBoundsChanging="end-user-bounds-changing",e.Blurred="blurred",e.Closed="closed",e.CloseRequested="close-requested",e.Focused="focused",e.ShowRequested="show-requested",e.ViewCrashed="view-crashed",e.ViewAttached="view-attached",e.ViewDetached="view-detached",e.ViewPageTitleUpdated="view-page-title-updated",e.ViewDestroyed="view-destroyed",e.OptionsChanged="options-changed"}(r||(r={}));function a(e){if(!s.sS)throw new Error("getOFWindow can only be used in an OpenFin env. Avoid calling this method during pre-rendering.");return fin.Window.wrapSync(e)}const c={name:s.oC,uuid:s.AB};const d={name:o.Home,uuid:i.q9.Workspace},u=(o.Dock,i.q9.Workspace,o.Storefront,i.q9.Workspace,{name:i.q9.Workspace,uuid:i.q9.Workspace});const p=e=>a(e).getOptions().then((()=>!0)).catch((()=>!1))},316:(e,t,n)=>{var o,r,i;n.d(t,{De:()=>o,px:()=>r,wt:()=>i}),function(e){e.Fetching="fetching",e.Fetched="fetched",e.Complete="complete"}(o||(o={})),function(e){e.UserAction="user-action",e.FocusChange="focus-change",e.Reload="reload"}(r||(r={})),function(e){e.Active="active",e.Default="default"}(i||(i={}))}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,n),i.exports}n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{n.r(o),n.d(o,{ActionTrigger:()=>P.p,AppManifestType:()=>W.L,ButtonStyle:()=>C.ZJ,CLIAction:()=>k.Pt,CLIFilterOptionType:()=>k.el,CLITemplate:()=>k.yW,ContainerTemplateFragmentNames:()=>C.p6,Dock:()=>e,DockButtonNames:()=>c.v,Home:()=>h,Legacy:()=>t,PresentationTemplateFragmentNames:()=>C.Go,SearchTagBackground:()=>P.w,Storefront:()=>S,StorefrontTemplate:()=>W.T,TemplateFragmentTypes:()=>C.bI});var e={};n.r(e),n.d(e,{DockButtonNames:()=>c.v,deregister:()=>l,minimize:()=>f,register:()=>p,show:()=>w});var t={};n.r(t),n.d(t,{getPages:()=>v,getWorkspaces:()=>m});var r=n(678),i=n(532),s=n(436),a=n(82),c=n(427);let d,u=!1;const p=e=>(d=new Promise((async(t,n)=>{try{const n=await(async e=>{const t=await(0,s.Xl)();if(u)throw new Error("A dock provider for the platform is already registered.");return u=!0,e.clientAPIVersion=r.u0,t.dispatch(s.WF.RegisterProvider,{providerType:a.lP.Dock,info:e})})(e);(0,i.Wn)({allowed:!0,componentVersion:n?.workspaceVersion}),t({clientAPIVersion:r.u0,workspaceVersion:n.workspaceVersion||""})}catch(e){(0,i.Wn)({allowed:!1,rejectionCode:e.message}),n(e),d=null}})),d),l=async()=>{await d,u=!1;return(await(0,s.Xl)()).dispatch(s.WF.DeregisterProvider,{providerType:a.lP.Dock})},f=async()=>{await d,await(0,s.aB)(),await(0,a.R8)(a.lP.Dock)},w=async()=>{await d,await(0,s.aB)(),await(0,a.X_)(a.lP.Dock)};var g,h=n(703);n(121);!function(e){e.TabCreated="tab-created",e.ContainerCreated="container-created",e.ContainerResized="container-resized"}(g||(g={}));new Map;var y;!function(e){e.CurrentWorkspaceId="currentWorkspaceId",e.LastFocusedBrowserWindow="lastFocusedBrowserWindow",e.MachineName="machineName",e.NewTabPageLayout="NewTabPageLayout",e.NewTabPageSort="NewTabPageSort",e.DockPosition="DockPosition"}(y||(y={}));const v=()=>async function(){return(await(0,s.Dm)()).dispatch(s.WF.GetLegacyPages,void 0)}(),m=()=>(async()=>(await(0,s.Dm)()).dispatch(s.WF.GetLegacyWorkspaces,void 0))();var S=n(528),P=n(298),C=n(109),k=n(758),W=n(114)})(),module.exports=o})();
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./client/src/apps.ts":
/*!****************************!*\
  !*** ./client/src/apps.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getApp": () => (/* binding */ getApp),
/* harmony export */   "getApps": () => (/* binding */ getApps),
/* harmony export */   "getAppsByIntent": () => (/* binding */ getAppsByIntent),
/* harmony export */   "getAppsByTag": () => (/* binding */ getAppsByTag),
/* harmony export */   "getIntent": () => (/* binding */ getIntent),
/* harmony export */   "getIntentsByContext": () => (/* binding */ getIntentsByContext)
/* harmony export */ });
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings */ "./client/src/settings.ts");

let cachedApps;
async function validateEntries(apps) {
    let canLaunchExternalProcessResponse;
    try {
        canLaunchExternalProcessResponse = await fin.System.queryPermissionForCurrentContext("System.launchExternalProcess");
    }
    catch (error) {
        console.error("Error while querying for System.launchExternalProcess permission", error);
    }
    const canLaunchExternalProcess = canLaunchExternalProcessResponse?.granted;
    let canDownloadAppAssetsResponse;
    try {
        canDownloadAppAssetsResponse = await fin.System.queryPermissionForCurrentContext("System.downloadAsset");
    }
    catch (error) {
        console.error("Error while querying for System.downloadAsset permission", error);
    }
    const canDownloadAppAssets = canDownloadAppAssetsResponse?.granted;
    const validatedApps = [];
    const rejectedAppIds = [];
    const settings = await (0,_settings__WEBPACK_IMPORTED_MODULE_0__.getSettings)();
    const appAssetTag = settings?.appProvider?.appAssetTag ?? "appasset";
    const supportedManifestTypes = settings?.appProvider?.manifestTypes;
    for (let i = 0; i < apps.length; i++) {
        let validApp = true;
        if (supportedManifestTypes !== undefined && supportedManifestTypes.length > 0) {
            validApp = supportedManifestTypes.includes(apps[i].manifestType);
        }
        if (validApp) {
            if (apps[i].manifestType !== "external") {
                validatedApps.push(apps[i]);
            }
            else if (canLaunchExternalProcess === false) {
                rejectedAppIds.push(apps[i].appId);
            }
            else if (Array.isArray(apps[i].tags) &&
                apps[i].tags.includes(appAssetTag) &&
                canDownloadAppAssets === false) {
                rejectedAppIds.push(apps[i].appId);
            }
            else {
                validatedApps.push(apps[i]);
            }
        }
    }
    if (rejectedAppIds.length > 0) {
        console.warn("Apps.ts: validateEntries: Not passing the following list of applications as they will not be able to run on this machine due to missing permissions. Alternatively this logic could be moved to the launch function where a selection is not launched but the user is presented with a modal saying they can't launch it due to permissions.", rejectedAppIds);
    }
    return validatedApps;
}
async function getRestEntries(url, credentials, cacheDuration) {
    const options = credentials !== undefined ? { credentials } : undefined;
    if (url === undefined) {
        return [];
    }
    const response = await fetch(url, options);
    const apps = await response.json();
    cachedApps = await validateEntries(apps);
    if (cacheDuration !== undefined) {
        const setTimeoutInMs = cacheDuration * 60 * 1000;
        setTimeout(() => {
            console.log("Clearing cache of apps as cache duration has passed.");
            cachedApps = undefined;
        }, setTimeoutInMs);
    }
    return cachedApps;
}
function updateEntry(source, intent, app) {
    if (source[intent.name] === undefined) {
        // in a production app you would either need to ensure that every app was populated with the same name & displayName for an intent from a golden source (e.g. intents table) so picking the first entry wouldn't make a difference.
        // or you could pull in a golden source of intents from a service and then do a lookup using the intent name to get an object with intent name and official display name.
        source[intent.name] = {
            intent: {
                name: intent.name,
                displayName: intent.displayName
            },
            apps: []
        };
    }
    source[intent.name].apps.push(app);
    return source;
}
async function getApps() {
    console.log("Requesting apps.");
    try {
        const settings = await (0,_settings__WEBPACK_IMPORTED_MODULE_0__.getSettings)();
        const apps = cachedApps ??
            (await getRestEntries(settings?.appProvider?.appsSourceUrl, settings?.appProvider?.includeCredentialOnSourceRequest, settings?.appProvider?.cacheDurationInMinutes));
        return apps;
    }
    catch (err) {
        console.error("Error retrieving apps. Returning empty list.", err);
        return [];
    }
}
async function getAppsByTag(tags) {
    const apps = await getApps();
    const filteredApps = apps.filter((value) => {
        if (value.tags === undefined) {
            return false;
        }
        for (let i = 0; i < tags.length; i++) {
            if (value.tags.includes(tags[i])) {
                return true;
            }
        }
        return false;
    });
    return filteredApps;
}
async function getApp(requestedApp) {
    const apps = await getApps();
    let appId;
    if (requestedApp !== undefined) {
        if (typeof requestedApp === "string") {
            appId = requestedApp;
        }
        else {
            appId = requestedApp.appId;
        }
    }
    if (appId === undefined) {
        return undefined;
    }
    const app = apps.find((entry) => entry.appId === appId);
    return app;
}
async function getAppsByIntent(intent) {
    const apps = await getApps();
    const filteredApps = apps.filter((value) => {
        if (value.intents === undefined) {
            return false;
        }
        for (let i = 0; i < value.intents.length; i++) {
            if (value.intents[i].name.toLowerCase() === intent.toLowerCase()) {
                return true;
            }
        }
        return false;
    });
    return filteredApps;
}
async function getIntent(intent, contextType) {
    const apps = await getApps();
    let intents = {};
    if (Array.isArray(apps)) {
        for (const value of apps) {
            if (value.intents !== undefined) {
                for (let i = 0; i < value.intents.length; i++) {
                    if (value.intents[i].name === intent) {
                        if (contextType === undefined) {
                            intents = updateEntry(intents, value.intents[i], value);
                        }
                        else if (Array.isArray(value.intents[i].contexts) &&
                            value.intents[i].contexts.includes(contextType)) {
                            intents = updateEntry(intents, value.intents[i], value);
                        }
                    }
                }
            }
        }
        const results = Object.values(intents);
        if (results.length === 0) {
            console.log(`No results found for findIntent for intent ${intent} and context ${contextType}`);
            return null;
        }
        else if (results.length === 1) {
            return results[0];
        }
        console.warn(`Received more than one result for findIntent for intent ${intent} and context ${contextType}. Returning the first entry.`);
        return results[0];
    }
    console.warn("There was no apps returned so we are unable to find apps that support an intent.");
    return null;
}
async function getIntentsByContext(contextType) {
    const apps = await getApps();
    let intents = {};
    if (Array.isArray(apps)) {
        for (const value of apps) {
            if (value.intents !== undefined) {
                for (let i = 0; i < value.intents.length; i++) {
                    if (Array.isArray(value.intents[i].contexts) && value.intents[i].contexts.includes(contextType)) {
                        intents = updateEntry(intents, value.intents[i], value);
                    }
                }
            }
        }
        return Object.values(intents);
    }
    console.warn("Unable to get apps so we can not get apps and intents that support a particular context");
    return [];
}


/***/ }),

/***/ "./client/src/bootstrapper.ts":
/*!************************************!*\
  !*** ./client/src/bootstrapper.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "init": () => (/* binding */ init)
/* harmony export */ });
/* harmony import */ var _home__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./home */ "./client/src/home.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings */ "./client/src/settings.ts");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./store */ "./client/src/store.ts");



async function init() {
    // you can kick off your bootstrapping process here where you may decide to prompt for authentication,
    // gather reference data etc before starting workspace and interacting with it.
    console.log("Initialising the bootstrapper");
    const settings = await (0,_settings__WEBPACK_IMPORTED_MODULE_1__.getSettings)();
    let workspaceLoaded = false;
    const setupHome = settings?.bootstrap?.home ?? true;
    const setupStore = settings?.bootstrap?.store ?? true;
    if (setupHome) {
        // only register search logic once workspace is running
        await (0,_home__WEBPACK_IMPORTED_MODULE_0__.register)();
        workspaceLoaded = true;
        await (0,_home__WEBPACK_IMPORTED_MODULE_0__.show)();
    }
    if (setupStore) {
        await (0,_store__WEBPACK_IMPORTED_MODULE_2__.register)();
        if (!workspaceLoaded) {
            await (0,_store__WEBPACK_IMPORTED_MODULE_2__.show)();
        }
    }
    const providerWindow = fin.Window.getCurrentSync();
    await providerWindow.once("close-requested", async (event) => {
        await (0,_store__WEBPACK_IMPORTED_MODULE_2__.deregister)();
        await (0,_home__WEBPACK_IMPORTED_MODULE_0__.deregister)();
        await fin.Platform.getCurrentSync().quit();
    });
}


/***/ }),

/***/ "./client/src/browser.ts":
/*!*******************************!*\
  !*** ./client/src/browser.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deletePage": () => (/* binding */ deletePage),
/* harmony export */   "getPage": () => (/* binding */ getPage),
/* harmony export */   "getPages": () => (/* binding */ getPages),
/* harmony export */   "launchPage": () => (/* binding */ launchPage),
/* harmony export */   "launchView": () => (/* binding */ launchView)
/* harmony export */ });
/* harmony import */ var _openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openfin/workspace-platform */ "../../node_modules/@openfin/workspace-platform/index.js");
/* harmony import */ var _openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0__);

async function getPage(pageId) {
    const platform = (0,_openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0__.getCurrentSync)();
    return platform.Storage.getPage(pageId);
}
async function getPages() {
    const platform = (0,_openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0__.getCurrentSync)();
    return platform.Storage.getPages();
}
async function deletePage(pageId) {
    const platform = (0,_openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0__.getCurrentSync)();
    return platform.Storage.deletePage(pageId);
}
async function launchPage(page) {
    const platform = (0,_openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0__.getCurrentSync)();
    return platform.Browser.createWindow({
        workspacePlatform: {
            pages: [page]
        }
    });
}
async function launchView(view, targetIdentity) {
    const platform = (0,_openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0__.getCurrentSync)();
    let viewOptions;
    if (typeof view === "string") {
        viewOptions = { url: view, target: null };
    }
    else {
        viewOptions = view;
    }
    return platform.createView(viewOptions, targetIdentity);
}


/***/ }),

/***/ "./client/src/home.ts":
/*!****************************!*\
  !*** ./client/src/home.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deregister": () => (/* binding */ deregister),
/* harmony export */   "hide": () => (/* binding */ hide),
/* harmony export */   "register": () => (/* binding */ register),
/* harmony export */   "show": () => (/* binding */ show)
/* harmony export */ });
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openfin/workspace */ "../../node_modules/@openfin/workspace/index.js");
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_openfin_workspace__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _apps__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./apps */ "./client/src/apps.ts");
/* harmony import */ var _browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./browser */ "./client/src/browser.ts");
/* harmony import */ var _launch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./launch */ "./client/src/launch.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./settings */ "./client/src/settings.ts");





const HOME_ACTION_DELETE_PAGE = "Delete Page";
const HOME_ACTION_LAUNCH_PAGE = "Launch Page";
let isHomeRegistered = false;
function getSearchFilters(tags) {
    if (Array.isArray(tags)) {
        const filters = [];
        const uniqueTags = [...new Set(tags.sort())];
        const tagFilter = {
            id: "tags",
            title: "Tags",
            type: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLIFilterOptionType.MultiSelect,
            options: []
        };
        for (const tag of uniqueTags) {
            if (Array.isArray(tagFilter.options)) {
                tagFilter.options.push({
                    value: tag,
                    isSelected: false
                });
            }
        }
        filters.push(tagFilter);
        return filters;
    }
    return [];
}
function mapAppEntriesToSearchEntries(apps) {
    const appResults = [];
    if (Array.isArray(apps)) {
        for (let i = 0; i < apps.length; i++) {
            const action = { name: "Launch View", hotkey: "enter" };
            const entry = {
                key: apps[i].appId,
                title: apps[i].title,
                data: apps[i]
            };
            if (apps[i].manifestType === "view") {
                entry.label = "View";
                entry.actions = [action];
            }
            if (apps[i].manifestType === "snapshot") {
                entry.label = "Snapshot";
                action.name = "Launch Snapshot";
                entry.actions = [action];
            }
            if (apps[i].manifestType === "manifest") {
                entry.label = "App";
                action.name = "Launch App";
                entry.actions = [action];
            }
            if (apps[i].manifestType === "external") {
                action.name = "Launch Native App";
                entry.actions = [action];
                entry.label = "Native App";
            }
            if (Array.isArray(apps[i].icons) && apps[i].icons.length > 0) {
                entry.icon = apps[i].icons[0].src;
            }
            if (apps[i].description !== undefined) {
                entry.description = apps[i].description;
                entry.shortDescription = apps[i].description;
                entry.template = _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLITemplate.SimpleText;
                entry.templateContent = apps[i].description;
            }
            else {
                entry.template = _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLITemplate.Plain;
            }
            appResults.push(entry);
        }
    }
    return appResults;
}
function mapPageEntriesToSearchEntries(pages) {
    const pageResults = [];
    if (Array.isArray(pages)) {
        for (let i = 0; i < pages.length; i++) {
            const entry = {
                key: pages[i].pageId,
                title: pages[i].title,
                label: "Page",
                actions: [
                    { name: HOME_ACTION_DELETE_PAGE, hotkey: "CmdOrCtrl+Shift+D" },
                    { name: HOME_ACTION_LAUNCH_PAGE, hotkey: "Enter" }
                ],
                data: { tags: ["page"], pageId: pages[i].pageId }
            };
            if (pages[i].description !== undefined) {
                entry.description = pages[i].description;
                entry.shortDescription = pages[i].description;
                entry.template = _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLITemplate.SimpleText;
                entry.templateContent = pages[i].description;
            }
            else {
                entry.template = _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.CLITemplate.Plain;
            }
            pageResults.push(entry);
        }
    }
    return pageResults;
}
async function getResults(query, queryMinLength = 3, queryAgainst = ["title"], filters) {
    const apps = await (0,_apps__WEBPACK_IMPORTED_MODULE_1__.getApps)();
    const pages = await (0,_browser__WEBPACK_IMPORTED_MODULE_2__.getPages)();
    const tags = [];
    const appSearchEntries = mapAppEntriesToSearchEntries(apps);
    const pageSearchEntries = mapPageEntriesToSearchEntries(pages);
    const initialResults = [...appSearchEntries, ...pageSearchEntries];
    if (initialResults.length > 0) {
        const finalResults = initialResults.filter((entry) => {
            let textMatchFound = true;
            let filterMatchFound = true;
            if (query !== undefined && query !== null && query.length >= queryMinLength) {
                textMatchFound = queryAgainst.some((target) => {
                    const path = target.split(".");
                    if (path.length === 1) {
                        const targetValue = entry[path[0]];
                        if (targetValue !== undefined && targetValue !== null && typeof targetValue === "string") {
                            return targetValue.toLowerCase().includes(query);
                        }
                    }
                    else if (path.length === 2) {
                        const targetEntry = entry[path[0]];
                        let targetValue;
                        if (targetEntry !== undefined && targetEntry !== null) {
                            targetValue = targetEntry[path[1]];
                        }
                        if (targetValue !== undefined && targetValue !== null && typeof targetValue === "string") {
                            return targetValue.toLowerCase().includes(query);
                        }
                        if (targetValue !== undefined && targetValue !== null && Array.isArray(targetValue)) {
                            if (targetValue.length > 0 &&
                                typeof targetValue[0] === "string" &&
                                targetValue.some((target2) => target2.toLowerCase().startsWith(query))) {
                                return true;
                            }
                            console.warn(`Manifest configuration for search specified a queryAgainst target that is an array but not an array of strings. Only string values and arrays are supported: ${targetEntry}`);
                        }
                    }
                    else {
                        console.warn("The manifest configuration for search has a queryAgainst entry that has a depth greater than 1. You can search for e.g. data.tags if data has tags in it and it is either a string or an array of strings.");
                    }
                    return false;
                });
            }
            if (Array.isArray(filters) && filters.length > 0) {
                filterMatchFound = filters.some((filter) => {
                    if (Array.isArray(filter.options)) {
                        if (entry.data?.tags !== undefined) {
                            return filter.options.every((option) => !option.isSelected || entry.data.tags.includes(option.value));
                        }
                    }
                    else if (filter.options.isSelected && entry.data?.tags !== undefined) {
                        return entry.data?.tags.indexOf(filter.options.value) > -1;
                    }
                    return true;
                });
            }
            if (textMatchFound && Array.isArray(entry.data?.tags)) {
                tags.push(...entry.data.tags);
            }
            return textMatchFound && filterMatchFound;
        });
        const response = {
            results: finalResults,
            context: {
                filters: getSearchFilters(tags)
            }
        };
        return response;
    }
    return {
        results: []
    };
}
async function register() {
    console.log("Initialising home.");
    const settings = await (0,_settings__WEBPACK_IMPORTED_MODULE_4__.getSettings)();
    if (settings.homeProvider === undefined ||
        settings.homeProvider.id === undefined ||
        settings.homeProvider.title === undefined) {
        console.warn("homeProvider: not configured in the customSettings of your manifest correctly. Ensure you have the homeProvider object defined in customSettings with the following defined: id, title");
        return;
    }
    const queryMinLength = settings?.homeProvider?.queryMinLength || 3;
    const queryAgainst = settings?.homeProvider?.queryAgainst;
    let lastResponse;
    const onUserInput = async (request, response) => {
        const query = request.query.toLowerCase();
        if (query.startsWith("/")) {
            return { results: [] };
        }
        const filters = request?.context?.selectedFilters;
        if (lastResponse !== undefined) {
            lastResponse.close();
        }
        lastResponse = response;
        lastResponse.open();
        const results = await getResults(query, queryMinLength, queryAgainst, filters);
        return results;
    };
    const onSelection = async (result) => {
        if (result.data !== undefined) {
            const data = result.data;
            if (data.pageId !== undefined) {
                if (result.action.name === HOME_ACTION_DELETE_PAGE) {
                    await (0,_browser__WEBPACK_IMPORTED_MODULE_2__.deletePage)(data.pageId);
                    if (lastResponse !== undefined && lastResponse !== null) {
                        lastResponse.revoke(result.key);
                    }
                }
                else {
                    const pageToLaunch = await (0,_browser__WEBPACK_IMPORTED_MODULE_2__.getPage)(data.pageId);
                    await (0,_browser__WEBPACK_IMPORTED_MODULE_2__.launchPage)(pageToLaunch);
                }
            }
            else {
                await (0,_launch__WEBPACK_IMPORTED_MODULE_3__.launch)(data);
            }
        }
        else {
            console.warn("Unable to execute result without data being passed");
        }
    };
    const cliProvider = {
        title: settings.homeProvider.title,
        id: settings.homeProvider.id,
        icon: settings.homeProvider.icon,
        onUserInput,
        onResultDispatch: onSelection
    };
    await _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.Home.register(cliProvider);
    isHomeRegistered = true;
    console.log("Home configured.");
}
async function show() {
    return _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.Home.show();
}
async function hide() {
    return _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.Home.hide();
}
async function deregister() {
    if (isHomeRegistered) {
        const settings = await (0,_settings__WEBPACK_IMPORTED_MODULE_4__.getSettings)();
        return _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.Home.deregister(settings.homeProvider.id);
    }
    console.warn("Unable to deregister home as there is an indication it was never registered");
}


/***/ }),

/***/ "./client/src/interopbroker.ts":
/*!*************************************!*\
  !*** ./client/src/interopbroker.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "interopOverride": () => (/* binding */ interopOverride)
/* harmony export */ });
/* harmony import */ var _apps__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./apps */ "./client/src/apps.ts");
/* harmony import */ var _launch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./launch */ "./client/src/launch.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./settings */ "./client/src/settings.ts");



const NO_APPS_FOUND = "NoAppsFound";
const RESOLVER_TIMEOUT = "ResolverTimeout";
function interopOverride(InteropBroker, provider, options, ...args) {
    class InteropOverride extends InteropBroker {
        async launchAppWithIntent(app, intent) {
            console.log("Launching app with intent.");
            if (app.manifestType !== "view" &&
                app.manifestType !== "inline-view" &&
                app.manifestType !== "snapshot") {
                // optional logic show a prompt to the user to let them know
                console.warn("Unable to raise intent against app as only view/snapshot based apps are supported.");
                return null;
            }
            if (app.manifestType === "view" || app.manifestType === "inline-view") {
                console.log(`The supporting app is a view (${app.manifestType})`);
                const identity = await (0,_launch__WEBPACK_IMPORTED_MODULE_1__.launchView)(app);
                if (identity === null) {
                    // optional logic show a prompt to the user to let them know
                    console.warn("Unable to raise intent against view as no identity was returned.");
                    return null;
                }
                await super.setIntentTarget(intent, identity);
            }
            if (app.manifestType === "snapshot") {
                console.log("The supporting app is a view.");
                const identities = await (0,_launch__WEBPACK_IMPORTED_MODULE_1__.launchSnapshot)(app);
                if (identities === null) {
                    // optional logic show a prompt to the user to let them know
                    console.warn("Unable to raise intent against target as no identity was returned.");
                    return null;
                }
                for (let i = 0; i < identities.length; i++) {
                    await super.setIntentTarget(intent, identities[i]);
                }
            }
            return {
                source: app.appId,
                version: app.version
            };
        }
        async getTargetIdentity(appId) {
            if (appId === undefined || appId === null) {
                return;
            }
            const passedIdentity = appId.split("@");
            const name = passedIdentity[0];
            let uuid = fin.me.identity.uuid;
            if (passedIdentity.length === 2) {
                uuid = passedIdentity[1];
            }
            const resolvedIdentity = { uuid, name };
            try {
                const targetView = await fin.View.wrap({ uuid, name });
                await targetView.getInfo();
                // passed identity found
                return resolvedIdentity;
            }
            catch {
                // passed identity does not exist
            }
        }
        async launchAppPicker(launchOptions) {
            // show menu
            // launch a new window and optionally pass the available intents as customData.apps as part of the window options
            // the window can then use raiseIntent against a specific app (the selected one). This is a very basic example.
            const settings = await (0,_settings__WEBPACK_IMPORTED_MODULE_2__.getSettings)();
            const height = settings?.platformProvider?.intentPicker?.height || 400;
            const width = settings?.platformProvider?.intentPicker?.width || 400;
            // this logic runs in the provider so we are using it as a way of determining the root (so it works with root hosting and subdirectory based hosting if a url is not provided)
            const url = settings?.platformProvider?.intentPicker.url ||
                window.location.href.replace("platform/provider.html", "common/windows/intents/picker.html");
            const winOption = {
                name: "intent-picker",
                includeInSnapshot: false,
                fdc3InteropApi: "1.2",
                defaultWidth: width,
                defaultHeight: height,
                showTaskbarIcon: false,
                saveWindowState: false,
                defaultCentered: true,
                customData: {
                    apps: launchOptions.apps,
                    intent: launchOptions.intent,
                    intents: launchOptions.intents
                },
                url,
                frame: false,
                autoShow: true,
                alwaysOnTop: true
            };
            const win = await fin.Window.create(winOption);
            const webWindow = win.getWebWindow();
            try {
                // eslint-disable-next-line @typescript-eslint/dot-notation
                const selectedAppId = await webWindow["getIntentSelection"]();
                return selectedAppId;
            }
            catch {
                console.error("App for intent not selected/launched.", launchOptions.intent);
                return null;
            }
        }
        async isConnectionAuthorized(id, payload) {
            console.log("Interop connection being made by the following identity with payload:", id, payload);
            // perform connection validation checks here if required and return false if it shouldn't be permissioned.
            return true;
        }
        async isActionAuthorized(action, payload, identity) {
            console.log("Interop Broker is action authorized:", action, payload, identity);
            // perform check here if you wish and return true/false accordingly
            return true;
        }
        async handleInfoForIntentsByContext(context, clientIdentity) {
            const intents = await (0,_apps__WEBPACK_IMPORTED_MODULE_0__.getIntentsByContext)(context.type);
            if (intents.length === 0) {
                throw new Error(NO_APPS_FOUND);
            }
            const mappedIntents = intents.map((entry) => ({
                intent: entry.intent,
                apps: entry.apps.map((app) => ({
                    name: app.appId,
                    appId: app.appId,
                    title: app.title
                }))
            }));
            return mappedIntents;
        }
        async handleInfoForIntent(intentOptions, clientIdentity) {
            const result = await (0,_apps__WEBPACK_IMPORTED_MODULE_0__.getIntent)(intentOptions.name, intentOptions.context?.type);
            if (result === null) {
                throw new Error(NO_APPS_FOUND);
            }
            const response = {
                intent: result.intent,
                apps: result.apps.map((app) => {
                    const appEntry = {
                        name: app.appId,
                        appId: app.appId,
                        title: app.title
                    };
                    return appEntry;
                })
            };
            return response;
        }
        async handleFiredIntentForContext(contextForIntent, clientIdentity) {
            const availableIntents = await (0,_apps__WEBPACK_IMPORTED_MODULE_0__.getIntentsByContext)(contextForIntent.type);
            if (availableIntents.length === 0) {
                throw new Error(NO_APPS_FOUND);
            }
            const intent = {
                context: contextForIntent,
                name: undefined,
                displayName: undefined
            };
            let targetApp;
            let targetAppIntent;
            let targetAppIntentCount = 0;
            if (contextForIntent.metadata?.target !== undefined) {
                targetApp = await (0,_apps__WEBPACK_IMPORTED_MODULE_0__.getApp)(contextForIntent.metadata?.target);
            }
            if (targetApp !== undefined && Array.isArray(targetApp.intents)) {
                for (let i = 0; i < targetApp.intents.length; i++) {
                    targetAppIntent = targetApp.intents[i];
                    if (Array.isArray(targetAppIntent.contexts) &&
                        targetAppIntent.contexts.includes(contextForIntent.type)) {
                        targetAppIntentCount++;
                    }
                }
            }
            if (targetApp !== undefined && targetAppIntent !== undefined && targetAppIntentCount === 1) {
                // a preferred name for an app was given with the context object
                // the app existed and it supported the context type and there was only one intent that supported
                // that context type. Launch the app with that intent otherwise present the user with a list of
                // everything that supports that context type
                intent.name = targetAppIntent.name;
                intent.displayName = targetAppIntent.name;
                const intentResolver = await this.launchAppWithIntent(targetApp, intent);
                if (intentResolver === null) {
                    throw new Error(NO_APPS_FOUND);
                }
                return intentResolver;
            }
            if (availableIntents.length === 1) {
                intent.name = availableIntents[0].intent.name;
                intent.displayName = availableIntents[0].intent.name;
                if (availableIntents[0].apps.length === 1) {
                    const intentResolver = await this.launchAppWithIntent(availableIntents[0].apps[0], intent);
                    if (intentResolver === null) {
                        throw new Error(NO_APPS_FOUND);
                    }
                    return intentResolver;
                }
                if (availableIntents[0].apps.length > 1) {
                    try {
                        const userSelection = await this.launchAppPicker({
                            apps: availableIntents[0].apps,
                            intent
                        });
                        const selectedApp = availableIntents[0].apps.find((entry) => entry.appId === userSelection.appId && entry.appId !== undefined);
                        if (selectedApp !== null && selectedApp !== undefined) {
                            const intentResolver = await this.launchAppWithIntent(selectedApp, intent);
                            if (intentResolver === null) {
                                throw new Error(NO_APPS_FOUND);
                            }
                            return intentResolver;
                        }
                        console.error("We were returned a non existent appId to launch with the intent.");
                        throw new Error(NO_APPS_FOUND);
                    }
                    catch {
                        console.error("App for intent by context not selected/launched.", intent);
                        throw new Error(RESOLVER_TIMEOUT);
                    }
                }
            }
            else {
                try {
                    const userSelection = await this.launchAppPicker({
                        intent,
                        intents: availableIntents
                    });
                    const selectedIntent = availableIntents.find((entry) => entry.intent.name === userSelection.intent.name);
                    if (selectedIntent === undefined) {
                        console.error("The user selected an intent but it's name doesn't match the available intents.", userSelection);
                        throw new Error(NO_APPS_FOUND);
                    }
                    const selectedApp = selectedIntent.apps.find((entry) => entry.appId === userSelection.appId && entry.appId !== undefined);
                    if (selectedApp !== null && selectedApp !== undefined) {
                        intent.displayName = userSelection.intent.displayName;
                        intent.name = userSelection.intent.name;
                        const intentResolver = await this.launchAppWithIntent(selectedApp, intent);
                        if (intentResolver === null) {
                            throw new Error(NO_APPS_FOUND);
                        }
                        return intentResolver;
                    }
                    console.error("We were returned a non existent appId to launch with the intent.");
                    throw new Error(NO_APPS_FOUND);
                }
                catch {
                    console.error("App for intent by context not selected/launched.", intent);
                    throw new Error(RESOLVER_TIMEOUT);
                }
            }
        }
        async handleFiredIntent(intent) {
            console.log("Received request for a raised intent:", intent);
            let intentApps = await (0,_apps__WEBPACK_IMPORTED_MODULE_0__.getAppsByIntent)(intent.name);
            let targetApp;
            if (intent.metadata?.target !== undefined) {
                targetApp = await (0,_apps__WEBPACK_IMPORTED_MODULE_0__.getApp)(intent.metadata.target);
                if (targetApp === undefined) {
                    // check to see if you have been passed a specific identity for a view that should be targetted instead of an app
                    const targetIdentity = await this.getTargetIdentity(intent.metadata?.target);
                    if (targetIdentity !== undefined) {
                        console.log("We were passed a view identity instead of an app entry when raising/firing an intent. We will fire the intent at that as it exists and no app entry exists with that name.:", targetIdentity, intent);
                        await super.setIntentTarget(intent, targetIdentity);
                        return {
                            source: targetIdentity.name
                        };
                    }
                }
            }
            if (intentApps.length === 0) {
                console.log("No apps support this intent.");
                throw new Error(NO_APPS_FOUND);
            }
            if (targetApp !== undefined && intentApps.includes(targetApp)) {
                console.log("Assigning selected application with intent.", intent);
                intentApps = [targetApp];
            }
            if (intentApps.length === 1) {
                // handle single entry
                const intentResolver = await this.launchAppWithIntent(intentApps[0], intent);
                if (intentResolver === null) {
                    throw new Error(NO_APPS_FOUND);
                }
                return intentResolver;
            }
            // show menu
            // launch a new window and optionally pass the available intents as customData.apps as part of the window options
            // the window can then use raiseIntent against a specific app (the selected one). This is a very basic example.
            try {
                const userSelection = await this.launchAppPicker({
                    apps: intentApps,
                    intent
                });
                if (intentApps === undefined) {
                    console.warn("We should have a list of apps to search from.");
                    intentApps = [];
                }
                const selectedApp = intentApps.find((entry) => entry.appId === userSelection.appId && entry.appId !== undefined);
                if (selectedApp !== null && selectedApp !== undefined) {
                    const intentResolver = await this.launchAppWithIntent(selectedApp, intent);
                    if (intentResolver === null) {
                        throw new Error(NO_APPS_FOUND);
                    }
                    return intentResolver;
                }
                console.error("We were returned a non existent appId to launch with the intent.");
                throw new Error(NO_APPS_FOUND);
            }
            catch {
                console.error("App for intent not selected/launched.", intent);
                throw new Error(RESOLVER_TIMEOUT);
            }
        }
    }
    return new InteropOverride(provider, options, ...args);
}


/***/ }),

/***/ "./client/src/launch.ts":
/*!******************************!*\
  !*** ./client/src/launch.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "launch": () => (/* binding */ launch),
/* harmony export */   "launchSnapshot": () => (/* binding */ launchSnapshot),
/* harmony export */   "launchView": () => (/* binding */ launchView)
/* harmony export */ });
/* harmony import */ var _openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openfin/workspace-platform */ "../../node_modules/@openfin/workspace-platform/index.js");
/* harmony import */ var _openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings */ "./client/src/settings.ts");


async function getViewIdentities(name, uuid) {
    const identity = { uuid, name };
    const win = fin.Window.wrapSync(identity);
    const views = await win.getCurrentViews();
    const viewIdentities = views.map((view) => view.identity);
    await win.setAsForeground();
    return viewIdentities;
}
async function doesViewExist(name, uuid) {
    const view = fin.View.wrapSync({ name, uuid });
    let exists = false;
    try {
        await view.getInfo();
        const viewHost = await view.getCurrentWindow();
        await viewHost.bringToFront();
        exists = true;
    }
    catch {
        exists = false;
    }
    return exists;
}
function findViewNames(layout) {
    const collectedNames = [];
    JSON.stringify(layout, (_, nestedValue) => {
        // check to ensure that we have a name field and that we also have a url field in this object (in case name was added to a random part of the layout)
        if (nestedValue?.name?.length && nestedValue.url !== undefined) {
            collectedNames.push(nestedValue.name);
        }
        return nestedValue;
    });
    return collectedNames;
}
async function launchView(viewApp) {
    if (viewApp === undefined || viewApp === null) {
        console.warn("No app was passed to launchView");
        return null;
    }
    if (viewApp.manifestType !== "view" && viewApp.manifestType !== "inline-view") {
        console.warn("The app passed was not of manifestType view or inline-view.");
        return null;
    }
    let manifest;
    if (viewApp.manifestType === "view") {
        const manifestResponse = await fetch(viewApp.manifest);
        manifest = await manifestResponse.json();
    }
    else {
        // conversion because of manifestType. In most use cases manifest is always a path to an executable or to a manifest file. For views we are demonstrating how it could be used
        // for passing the manifest inline
        manifest = viewApp.manifest;
    }
    const name = manifest.name;
    let identity = { uuid: fin.me.identity.uuid, name };
    const wasNameSpecified = name !== undefined;
    let viewExists = false;
    if (wasNameSpecified) {
        viewExists = await doesViewExist(identity.name, identity.uuid);
    }
    if (!viewExists) {
        try {
            const platform = (0,_openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0__.getCurrentSync)();
            const createdView = await platform.createView(manifest);
            identity = createdView.identity;
        }
        catch (err) {
            console.error("Error launching view", err);
            return null;
        }
    }
    return identity;
}
async function launchSnapshot(snapshotApp) {
    if (snapshotApp === undefined || snapshotApp === null) {
        console.warn("No app was passed to launchSnapshot");
        return null;
    }
    if (snapshotApp.manifestType !== "snapshot") {
        console.warn("The app passed was not of manifestType snapshot.");
        return null;
    }
    const manifestResponse = await fetch(snapshotApp.manifest);
    const manifest = await manifestResponse.json();
    const windows = manifest.windows;
    const windowsToCreate = [];
    if (Array.isArray(windows)) {
        const windowsToGather = [];
        const viewIds = [];
        for (let i = 0; i < windows.length; i++) {
            const getViewIdsForLayout = findViewNames(windows[i].layout);
            if (getViewIdsForLayout.length === 0) {
                const uuid = window.crypto.randomUUID();
                const name = `internal-generated-window-${uuid}`;
                windows[i].name = name;
                windowsToCreate.push(windows[i]);
                windowsToGather.push(name);
            }
            else {
                // we have views. Grab the first one to validate existence.
                const viewId = getViewIdsForLayout[0];
                for (const entry of getViewIdsForLayout) {
                    viewIds.push({ name: entry, uuid: fin.me.identity.uuid });
                }
                // these views should be readonly and cannot be pulled out of the page or closed
                if (!(await doesViewExist(viewId, fin.me.identity.uuid))) {
                    windowsToCreate.push(windows[i]);
                }
            }
        }
        manifest.windows = windowsToCreate;
        if (windowsToCreate.length > 0) {
            const platform = (0,_openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0__.getCurrentSync)();
            try {
                await platform.applySnapshot(manifest);
            }
            catch (err) {
                console.error("Error trying to apply snapshot to platform.", err, manifest);
            }
        }
        for (let w = 0; w < windowsToGather.length; w++) {
            const windowViewIds = await getViewIdentities(windowsToGather[w], fin.me.identity.uuid);
            viewIds.push(...windowViewIds);
        }
        return viewIds;
    }
    return null;
}
async function launch(appEntry) {
    console.log("Application launch requested:", appEntry);
    if (appEntry.manifestType === "external") {
        const settings = await (0,_settings__WEBPACK_IMPORTED_MODULE_1__.getSettings)();
        const appAssetTag = settings?.appProvider?.appAssetTag ?? "appasset";
        if (appEntry.tags?.includes(appAssetTag)) {
            console.log("Application requested is a native app with a tag of appasset so it is provided by this workspace platform. Managing request via platform and not Workspace.");
            const options = {};
            options.alias = appEntry.manifest;
            options.uuid = appEntry.appId;
            await fin.System.launchExternalProcess(options);
        }
        else {
            console.log("Application requested is a native app. Managing request via platform and not Workspace.");
            const options = {};
            options.path = appEntry.manifest;
            options.uuid = appEntry.appId;
            await fin.System.launchExternalProcess(options);
        }
    }
    else if (appEntry.manifestType === "inline-view") {
        await launchView(appEntry);
    }
    else {
        const platform = (0,_openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0__.getCurrentSync)();
        await platform.launchApp({ app: appEntry });
    }
    console.log("Finished application launch request");
}


/***/ }),

/***/ "./client/src/platform.ts":
/*!********************************!*\
  !*** ./client/src/platform.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "init": () => (/* binding */ init)
/* harmony export */ });
/* harmony import */ var _openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openfin/workspace-platform */ "../../node_modules/@openfin/workspace-platform/index.js");
/* harmony import */ var _openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _interopbroker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interopbroker */ "./client/src/interopbroker.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./settings */ "./client/src/settings.ts");



async function init() {
    console.log("Initialising platform");
    const settings = await (0,_settings__WEBPACK_IMPORTED_MODULE_2__.getSettings)();
    const browser = {};
    if (settings.browserProvider !== undefined) {
        browser.defaultWindowOptions = {
            icon: settings.browserProvider.windowOptions?.icon,
            workspacePlatform: {
                pages: null,
                title: settings.browserProvider.windowOptions?.title,
                favicon: settings.browserProvider.windowOptions?.icon,
                newTabUrl: settings.browserProvider.windowOptions?.newTabUrl,
                newPageUrl: settings.browserProvider.windowOptions?.newPageUrl
            }
        };
        // Fix this type overload when openfin-adapter references are removed from WS
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        browser.interopOverride = _interopbroker__WEBPACK_IMPORTED_MODULE_1__.interopOverride;
    }
    console.log("Specifying following browser options:", browser);
    await (0,_openfin_workspace_platform__WEBPACK_IMPORTED_MODULE_0__.init)({
        browser,
        theme: (0,_settings__WEBPACK_IMPORTED_MODULE_2__.validateThemes)(settings?.themeProvider?.themes)
    });
}


/***/ }),

/***/ "./client/src/settings.ts":
/*!********************************!*\
  !*** ./client/src/settings.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getSettings": () => (/* binding */ getSettings),
/* harmony export */   "validateThemes": () => (/* binding */ validateThemes)
/* harmony export */ });
let settings;
async function getConfiguredSettings() {
    const app = await fin.Application.getCurrent();
    const manifest = await app.getManifest();
    if (manifest.customSettings !== undefined) {
        settings = manifest.customSettings;
    }
    else {
        settings = {};
    }
    return settings;
}
async function getSettings() {
    if (settings === undefined) {
        settings = await getConfiguredSettings();
    }
    return settings;
}
function validatePalette(themePalette, themeLabel) {
    const palette = {};
    const keys = Object.keys(themePalette);
    for (const key of keys) {
        if (themePalette[key] !== undefined &&
            themePalette[key] !== null &&
            themePalette[key].trim().length > 0) {
            palette[key] = themePalette[key];
        }
    }
    const brandPrimaryKey = "brandPrimary";
    const brandPrimaryValue = "#504CFF";
    const brandSecondaryKey = "brandSecondary";
    const brandSecondaryValue = "#383A40";
    const backgroundPrimaryKey = "backgroundPrimary";
    const backgroundPrimaryValue = "#111214";
    if (palette[brandPrimaryKey] === undefined) {
        console.warn(`Theme: ${themeLabel} : ${brandPrimaryKey} not specified (it is required if specifying other theme palette settings). Providing default of: ${brandPrimaryValue}`);
        palette[brandPrimaryKey] = brandPrimaryValue;
    }
    if (palette[brandSecondaryKey] === undefined) {
        console.warn(`Theme: ${themeLabel} : ${brandSecondaryKey} not specified (it is required if specifying other theme palette settings). Providing default of: ${brandSecondaryValue}`);
        palette[brandSecondaryKey] = brandSecondaryValue;
    }
    if (palette[backgroundPrimaryKey] === undefined) {
        console.warn(`Theme: ${themeLabel} : ${backgroundPrimaryKey} not specified (it is required if specifying other theme palette settings). Providing default of: ${backgroundPrimaryValue}`);
        palette[backgroundPrimaryKey] = backgroundPrimaryValue;
    }
    return palette;
}
function validateThemes(themes) {
    const validatedThemes = [];
    if (Array.isArray(themes)) {
        for (let i = 0; i < themes.length; i++) {
            const themeToValidate = themes[i];
            const palette = validatePalette(themeToValidate.palette, themeToValidate.label);
            if (palette !== null) {
                themeToValidate.palette = palette;
            }
            else {
                // don't pass an empty object as there are no theme properties
                themeToValidate.palette = undefined;
            }
            validatedThemes.push(themeToValidate);
        }
    }
    return validatedThemes;
}


/***/ }),

/***/ "./client/src/store.ts":
/*!*****************************!*\
  !*** ./client/src/store.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deregister": () => (/* binding */ deregister),
/* harmony export */   "hide": () => (/* binding */ hide),
/* harmony export */   "register": () => (/* binding */ register),
/* harmony export */   "show": () => (/* binding */ show)
/* harmony export */ });
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openfin/workspace */ "../../node_modules/@openfin/workspace/index.js");
/* harmony import */ var _openfin_workspace__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_openfin_workspace__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _apps__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./apps */ "./client/src/apps.ts");
/* harmony import */ var _launch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./launch */ "./client/src/launch.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./settings */ "./client/src/settings.ts");




let isStoreRegistered = false;
async function register() {
    console.log("Initialising the storefront provider.");
    const provider = await getStoreProvider();
    if (provider !== null) {
        try {
            await _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.Storefront.register(provider);
            isStoreRegistered = true;
            console.log("Storefront provider initialised.");
        }
        catch (err) {
            console.error("An error was encountered while trying to register the content store provider", err);
        }
    }
}
async function deregister() {
    if (isStoreRegistered) {
        const settings = await (0,_settings__WEBPACK_IMPORTED_MODULE_3__.getSettings)();
        await _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.Storefront.deregister(settings.storefrontProvider.id);
    }
    else {
        console.warn("Unable to call store deregister as there is an indication it was never registered successfully.");
    }
}
async function show() {
    console.log("Showing the store.");
    return _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.Storefront.show();
}
async function hide() {
    console.log("Hiding the store.");
    return _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.Storefront.hide();
}
/**
 * This function is used when a navigation item or section hasn't been configured with an ID. This is to simplify configuration for this demo.
 * In a real application you would need an idempotent and unique ID (think GUID) that doesn't change for that navigation item/section regardless of how
 * many times it is regenerated (e.g. more items can be added to the item/section but the ID stays the same).
 * As you navigate around the store this ID is used as a route. So if a user clicks on a link, navigates to a new page and the re-requested navigation item has
 * a different ID then the store will not be able to find a match and it won't be able to render the navigation item.
 * A real application would not use this approach (as an update to the tag list would result in a new ID which would fail if the config was fetched from a server and not a manifest)
 */
function getId(title, tags = []) {
    const search = " ";
    const replaceWith = "-";
    let result = title.replaceAll(search, replaceWith);
    result += `-${tags.join("-")}`;
    return result.toLowerCase();
}
function isStorefrontConfigurationValid(config) {
    const idList = [];
    let hasDuplicateIds = false;
    if (config === undefined ||
        config.storefrontProvider === undefined ||
        config.storefrontProvider.id === undefined ||
        config.storefrontProvider.title === undefined ||
        (config.storefrontProvider.footer === undefined &&
            config.storefrontProvider.landingPage !== undefined &&
            config.storefrontProvider.landingPage.topRow !== undefined &&
            config.storefrontProvider.landingPage.middleRow !== undefined &&
            config.storefrontProvider.landingPage.bottomRow !== undefined &&
            config.storefrontProvider.navigation !== undefined)) {
        console.error("StorefrontProvider is not correctly configured in the customSettings of this manifest. You must ensure that storefrontProvider is defined, that it has an id and title and that the footer, landingPage (top row, middle row and bottom row) and navigation sections have been defined.");
        return false;
    }
    const validateId = (id, namespace, warning) => {
        if (id === undefined) {
            console.warn(`${namespace}: ${warning}`);
        }
        else if (idList.includes(id)) {
            hasDuplicateIds = true;
            console.error(`${namespace}: The id is used in more than one place. Please have a unique and idempotent id: ${id}`);
        }
        else {
            idList.push(id);
        }
    };
    const warningMessage = "The id is not defined. This demo will generate an id based on title but you should have a unique and idempotent id when building your own store.";
    console.log("Validating settings storefrontProvider navigation config");
    const navigation = config.storefrontProvider.navigation;
    for (let i = 0; i < navigation.length; i++) {
        validateId(navigation[i].id, `storefrontProvider.navigation[${i}].id`, warningMessage);
        const items = navigation[i].items;
        for (let n = 0; n < items.length; n++) {
            validateId(items[n].id, `storefrontProvider.navigation[${i}].items[${n}].id`, warningMessage);
        }
    }
    console.log("Validating settings storefrontProvider landing page hero config");
    const landingPage = config.storefrontProvider.landingPage;
    if (landingPage?.hero?.cta !== undefined) {
        validateId(landingPage.hero.cta.id, "storefrontProvider.landingPage.hero.cta.id", warningMessage);
    }
    console.log("Validating settings storefrontProvider landing page top row config");
    const topRow = landingPage.topRow;
    if (topRow.items !== undefined) {
        for (let i = 0; i < topRow.items.length; i++) {
            validateId(topRow.items[i].id, `storefrontProvider.landingPage.topRow.items[${i}].id`, warningMessage);
        }
    }
    console.log("Validating settings storefrontProvider landing page bottom row config");
    const bottomRow = landingPage.bottomRow;
    if (bottomRow.items !== undefined) {
        for (let i = 0; i < bottomRow.items.length; i++) {
            validateId(bottomRow.items[i].id, `storefrontProvider.landingPage.bottomRow.items[${i}].id`, warningMessage);
        }
    }
    console.log("Validating ids, checking for duplicate ids.");
    if (hasDuplicateIds) {
        console.error("You have defined duplicate ids (please see the other error messages) which could result in strange behaviour (if we are routing by id and you have two or more items that resolve to the same id then it could navigate to something unexpected. Please ensure ids are unique and idempotent.");
        return false;
    }
    return true;
}
async function getStoreProvider() {
    console.log("Getting the store provider.");
    const settings = await (0,_settings__WEBPACK_IMPORTED_MODULE_3__.getSettings)();
    if (isStorefrontConfigurationValid(settings)) {
        return {
            id: settings.storefrontProvider.id,
            title: settings.storefrontProvider.title,
            icon: settings.storefrontProvider.icon,
            getNavigation: getNavigation.bind(this),
            getLandingPage: getLandingPage.bind(this),
            getFooter: getFooter.bind(this),
            getApps: _apps__WEBPACK_IMPORTED_MODULE_1__.getApps,
            launchApp: _launch__WEBPACK_IMPORTED_MODULE_2__.launch
        };
    }
    return null;
}
async function getNavigation() {
    console.log("Showing the store navigation.");
    const navigationSectionItemLimit = 5;
    const navigationSectionLimit = 2;
    const settings = await (0,_settings__WEBPACK_IMPORTED_MODULE_3__.getSettings)();
    const navigationSections = [];
    if (settings?.storefrontProvider?.navigation === undefined) {
        return [];
    }
    for (let i = 0; i < settings.storefrontProvider.navigation.length; i++) {
        if (navigationSections.length === navigationSectionLimit) {
            console.log("More than 2 navigation sections defined in StorefrontProvider settings. Only two are taken.");
            break;
        }
        const navigationSection = {
            id: settings.storefrontProvider.navigation[i].id ??
                getId(settings.storefrontProvider.navigation[i].title),
            title: settings.storefrontProvider.navigation[i].title,
            items: (await getNavigationItems(settings.storefrontProvider.navigation[i].items, navigationSectionItemLimit))
        };
        navigationSections.push(navigationSection);
    }
    return navigationSections;
}
async function getLandingPage() {
    console.log("Getting the store landing page.");
    const landingPage = {
        topRow: null,
        middleRow: null,
        bottomRow: null
    };
    const settings = await (0,_settings__WEBPACK_IMPORTED_MODULE_3__.getSettings)();
    const storeFrontDetailedNavigationItemBottomRowLimit = 3;
    const storeFrontDetailedNavigationItemTopRowLimit = 4;
    const middleRowAppLimit = 6;
    if (settings?.storefrontProvider?.landingPage?.hero !== undefined) {
        const hero = settings.storefrontProvider.landingPage.hero;
        const cta = await getNavigationItem(hero.cta.id, hero.cta.title, hero.cta.tags);
        landingPage.hero = {
            title: hero.title,
            image: hero.image,
            description: hero.description,
            cta
        };
    }
    if (settings?.storefrontProvider?.landingPage?.topRow !== undefined) {
        const row = await getLandingPageRow(settings?.storefrontProvider?.landingPage?.topRow, storeFrontDetailedNavigationItemTopRowLimit);
        landingPage.topRow = {
            title: row.title,
            items: row.items
        };
    }
    else {
        console.error("You need to have a topRow defined in your landing page.");
    }
    if (settings?.storefrontProvider?.landingPage?.middleRow !== undefined) {
        const middleRow = settings.storefrontProvider.landingPage.middleRow;
        const middleRowApps = await (0,_apps__WEBPACK_IMPORTED_MODULE_1__.getAppsByTag)(middleRow.tags);
        if (middleRowApps.length > middleRowAppLimit) {
            console.warn(`Too many apps (${middleRowApps.length}) have been returned by the middle row tag definition ${middleRow.tags.join(" ")}. Only ${middleRowAppLimit} will be shown.`);
        }
        const validatedMiddleRowApps = middleRowApps.slice(0, middleRowAppLimit);
        landingPage.middleRow = {
            title: middleRow.title,
            apps: validatedMiddleRowApps
        };
    }
    else {
        console.error("You need to have a middleRow defined in your landing page.");
    }
    if (settings?.storefrontProvider?.landingPage?.bottomRow !== undefined) {
        const row = await getLandingPageRow(settings.storefrontProvider.landingPage.bottomRow, storeFrontDetailedNavigationItemBottomRowLimit);
        landingPage.bottomRow = {
            title: row.title,
            items: row.items
        };
    }
    else {
        console.error("You need to have a bottomRow defined in your landing page.");
    }
    return landingPage;
}
async function getFooter() {
    console.log("Getting the store footer.");
    const settings = await (0,_settings__WEBPACK_IMPORTED_MODULE_3__.getSettings)();
    if (settings?.storefrontProvider?.footer !== undefined) {
        return settings.storefrontProvider.footer;
    }
    console.error("Storefront is being initialised without a footer configured.");
    return null;
}
/**
 * This section generates a navigation item for Storefront based on some configuration.
 * @param id
 * This id should be unique and idempotent and isn't changed regardless of how often the same navigation item is regenerated.
 * The reason for this is because it is used for routing in Storefront. If a user navigated from a link and the id changes when the item
 * is re-requested by storefront then it will not be able to render the contents.
 * @param title
 * @param tags
 * Tags are used as a way of filtering out which apps should be assigned to a StorefrontNavigationItem.
 * This allows apps to be tagged on the server and the store would automatically update the apps assigned to a particular section.
 * @returns StorefrontNavigationItem
 */
async function getNavigationItem(id, title, tags) {
    const navigationItem = {
        id: id ?? getId(title, tags),
        title,
        templateId: _openfin_workspace__WEBPACK_IMPORTED_MODULE_0__.StorefrontTemplate.AppGrid,
        templateData: {
            apps: []
        }
    };
    const apps = await (0,_apps__WEBPACK_IMPORTED_MODULE_1__.getAppsByTag)(tags);
    if (apps !== undefined && apps.length > 0) {
        navigationItem.templateData.apps = apps;
    }
    return navigationItem;
}
async function getNavigationItems(items, limit) {
    const navigationItems = [];
    for (let i = 0; i < items.length; i++) {
        const navigationItem = await getNavigationItem(items[i].id, items[i].title, items[i].tags);
        navigationItems.push(navigationItem);
    }
    if (navigationItems.length > limit) {
        console.warn(`You have defined too many navigations items (${navigationItems.length}). Please limit it to ${limit} as we will only take the first ${limit}`);
    }
    return navigationItems.slice(0, limit);
}
async function getLandingPageRow(definition, limit) {
    const items = [];
    for (let i = 0; i < definition.items.length; i++) {
        const navigationItem = await getNavigationItem(definition.items[i].id, definition.items[i].title, definition.items[i].tags);
        const item = {
            description: definition.items[i].description,
            image: definition.items[i].image,
            ...navigationItem
        };
        items.push(item);
    }
    if (items.length > limit) {
        console.warn(`You have defined too many storefront detailed navigation items (${items.length}). Please keep it to the limit of ${limit} as only the first ${limit} will be returned.`);
    }
    const detailedNavigationItems = items.slice(0, limit);
    return {
        title: definition.title,
        items: detailedNavigationItems
    };
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!********************************!*\
  !*** ./client/src/provider.ts ***!
  \********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _bootstrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bootstrapper */ "./client/src/bootstrapper.ts");
/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform */ "./client/src/platform.ts");


window.addEventListener("DOMContentLoaded", async () => {
    const platform = fin.Platform.getCurrentSync();
    await platform.once("platform-api-ready", async () => (0,_bootstrapper__WEBPACK_IMPORTED_MODULE_0__.init)());
    await (0,_platform__WEBPACK_IMPORTED_MODULE_1__.init)();
});

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,