{"version":3,"file":"developer.bundle.js","mappings":"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","sources":["webpack://openfin-workspace--workspace-platform-starter/webpack/bootstrap","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/shapes/actions-shapes.ts","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/define property getters","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/hasOwnProperty shorthand","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/manifest-types.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/developer/index.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/developer/actions.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/developer/analytics.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/developer/menus.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import type { CustomActionsMap, ToolbarButton, WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport type { ModuleHelpers, ModuleImplementation, ModuleList } from \"./module-shapes\";\n\n/**\n * Definition for an action.\n */\nexport interface Actions<O = unknown> extends ModuleImplementation<O, ActionHelpers> {\n\t/**\n\t * Get the actions from the module.\n\t * @param platform The platform module.\n\t * @returns The map of custom actions.\n\t */\n\tget(platform: WorkspacePlatformModule): Promise<CustomActionsMap>;\n}\n\n/**\n * A list of modules that provide actions that can be used by the platform.\n */\nexport type ActionsProviderOptions = ModuleList;\n\n/**\n * Extended helpers used by action modules.\n */\nexport interface ActionHelpers extends ModuleHelpers {\n\t/**\n\t * Update toolbar buttons.\n\t * @param buttons The list of all buttons.\n\t * @param buttonId The button to update.\n\t * @param replacementButtonId The replacement for the button.\n\t * @returns The updated buttons.\n\t */\n\tupdateToolbarButtons: (\n\t\tbuttons: ToolbarButton[],\n\t\tbuttonId: string,\n\t\treplacementButtonId: string\n\t) => Promise<ToolbarButton[]>;\n}\n\n/**\n * Use this in preference to CustomActionCallerType from workspace-platform to avoid the import of the whole of workspace package in modules.\n */\nexport enum CustomActionCallerType {\n\tCustomButton = \"CustomButton\",\n\tStoreCustomButton = \"StoreCustomButton\",\n\tCustomDropdownItem = \"CustomDropdownItem\",\n\tGlobalContextMenu = \"GlobalContextMenu\",\n\tViewTabContextMenu = \"ViewTabContextMenu\",\n\tPageTabContextMenu = \"PageTabContextMenu\",\n\tSaveButtonContextMenu = \"SaveButtonContextMenu\",\n\tAPI = \"API\"\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? undefined : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n","import type { ManifestTypes } from \"./shapes/app-shapes\";\n\nexport const MANIFEST_TYPES: ManifestTypes = {\n\tView: {\n\t\tid: \"view\",\n\t\tlabel: \"View\",\n\t\tdescription:\n\t\t\t\"This manifest type expects the manifest setting to be pointed to a json file that contains view options.\"\n\t},\n\tInlineView: {\n\t\tid: \"inline-view\",\n\t\tlabel: \"View\",\n\t\tdescription:\n\t\t\t\"This manifest type expects the manifest setting to have the options inline rather than a url to a json file.\"\n\t},\n\tWindow: {\n\t\tid: \"window\",\n\t\tlabel: \"Window\",\n\t\tdescription:\n\t\t\t\"This manifest type expects the manifest setting to point to a json file that contains classic window options.\"\n\t},\n\tInlineWindow: {\n\t\tid: \"inline-window\",\n\t\tlabel: \"Window\",\n\t\tdescription:\n\t\t\t\"This manifest type expects the manifest setting to have the classic window options inline rather than a url to a json file.\"\n\t},\n\tSnapshot: {\n\t\tid: \"snapshot\",\n\t\tlabel: \"Snapshot\",\n\t\tdescription:\n\t\t\t\"This manifest type expects the manifest setting to point to a json file that contains a snapshot (one or more windows)\"\n\t},\n\tInlineSnapshot: {\n\t\tid: \"inline-snapshot\",\n\t\tlabel: \"Snapshot\",\n\t\tdescription:\n\t\t\t\"This manifest type expects the manifest setting to have a snapshot inline rather than a url to a json file that contains a snapshot (one or more windows)\"\n\t},\n\tManifest: {\n\t\tid: \"manifest\",\n\t\tlabel: \"App\",\n\t\tdescription:\n\t\t\t\"This manifest type expects the manifest setting to point to a json file that is an openfin manifest. An openfin app.\"\n\t},\n\tExternal: {\n\t\tid: \"external\",\n\t\tlabel: \"Native App\",\n\t\tdescription: \"This manifest type expects the manifest setting to point to an exe.\"\n\t},\n\tInlineExternal: {\n\t\tid: \"inline-external\",\n\t\tlabel: \"Native App\",\n\t\tdescription:\n\t\t\t\"This manifest type expects the manifest setting to point to an exe using an inline launch external process request.\"\n\t},\n\tAppasset: {\n\t\tid: \"appasset\",\n\t\tlabel: \"Native App\",\n\t\tdescription: \"This manifest type expects the manifest setting to point to an app asset name.\"\n\t},\n\tInlineAppAsset: {\n\t\tid: \"inline-appasset\",\n\t\tlabel: \"Native App\",\n\t\tdescription:\n\t\t\t\"This manifest type expects the manifest setting to point to an app asset config using an inline launch external process request.\"\n\t},\n\tDesktopBrowser: {\n\t\tid: \"desktop-browser\",\n\t\tlabel: \"Desktop Browser\",\n\t\tdescription:\n\t\t\t\"This manifest type expects the manifest setting to point to a url which will be launched in the default desktop browser.\"\n\t},\n\tEndpoint: {\n\t\tid: \"endpoint\",\n\t\tlabel: \"Endpoint\",\n\t\tdescription:\n\t\t\t\"This manifest type expects the manifest setting to point to an endpoint (which should be defined in the endpointProvider). Action will be called on that endpoint and passed the specified app.\"\n\t},\n\tConnection: {\n\t\tid: \"connection\",\n\t\tlabel: \"Connected App\",\n\t\tdescription:\n\t\t\t\"This manifest type expects the manifest setting to have a uuid. This must match to a connection registered in the connectionProvider with app support.\"\n\t},\n\tUnregisteredApp: {\n\t\tid: \"unregistered-app\",\n\t\tlabel: \"Unregistered App\",\n\t\tdescription:\n\t\t\t\"This manifest type represents web page instances that have been launched that are not linked to an app. This manifest type should not be in the permitted manifest type list for app feeds as it is for dynamic urls.\"\n\t}\n};\n","import type { ModuleImplementation, ModuleTypes } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { DeveloperActions } from \"./actions\";\nimport { DevAnalyticsModule } from \"./analytics\";\nimport { DeveloperMenus } from \"./menus\";\n\nexport const entryPoints: { [type in ModuleTypes]?: ModuleImplementation } = {\n\tactions: new DeveloperActions(),\n\tanalytics: new DevAnalyticsModule(),\n\tmenus: new DeveloperMenus()\n};\n","import type OpenFin from \"@openfin/core\";\nimport type {\n\tCustomActionPayload,\n\tCustomActionsMap,\n\tWorkspacePlatformModule\n} from \"@openfin/workspace-platform\";\nimport {\n\tCustomActionCallerType,\n\ttype ActionHelpers,\n\ttype Actions\n} from \"workspace-platform-starter/shapes/actions-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isStringValue } from \"workspace-platform-starter/utils\";\nimport { MANIFEST_TYPES } from \"../../../framework/manifest-types\";\n\n/**\n * Implement the actions.\n */\nexport class DeveloperActions implements Actions {\n\t/**\n\t * The helper methods to use.\n\t */\n\tprivate _helpers?: ActionHelpers;\n\n\t/**\n\t * The helper methods to use.\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ActionHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"DeveloperActions\");\n\t\tthis._helpers = helpers;\n\t}\n\n\t/**\n\t * Get the actions from the module.\n\t * @param platform The platform module.\n\t * @returns The map of custom actions.\n\t */\n\tpublic async get(platform: WorkspacePlatformModule): Promise<CustomActionsMap> {\n\t\tconst actionMap: CustomActionsMap = {};\n\n\t\tactionMap[\"developer-inspect\"] = async (payload: CustomActionPayload): Promise<void> => {\n\t\t\tif (payload.callerType === CustomActionCallerType.ViewTabContextMenu) {\n\t\t\t\tfor (let i = 0; i < payload.selectedViews.length; i++) {\n\t\t\t\t\tconst identity: OpenFin.Identity = payload.selectedViews[i];\n\t\t\t\t\tconst view = fin.View.wrapSync(identity);\n\t\t\t\t\tawait view.showDeveloperTools();\n\t\t\t\t}\n\t\t\t} else if (payload.callerType === CustomActionCallerType.PageTabContextMenu) {\n\t\t\t\tconst pageWindowIdentity: OpenFin.Identity = payload.windowIdentity;\n\t\t\t\tconst pageWindow = fin.Window.wrapSync(pageWindowIdentity);\n\t\t\t\tawait pageWindow.showDeveloperTools();\n\t\t\t} else if (payload.callerType === CustomActionCallerType.GlobalContextMenu) {\n\t\t\t\tconst target = payload?.customData?.target === \"platform\" ? \"platform\" : \"window\";\n\t\t\t\tconst targetIdentity: OpenFin.Identity =\n\t\t\t\t\ttarget === \"window\"\n\t\t\t\t\t\t? payload.windowIdentity\n\t\t\t\t\t\t: { uuid: payload.windowIdentity.uuid, name: payload.windowIdentity.uuid };\n\t\t\t\tconst targetWindow = fin.Window.wrapSync(targetIdentity);\n\t\t\t\tawait targetWindow.showDeveloperTools();\n\t\t\t}\n\t\t};\n\n\t\tactionMap[\"raise-create-app-definition-intent\"] = async (payload: CustomActionPayload): Promise<void> => {\n\t\t\tif (payload.callerType === CustomActionCallerType.ViewTabContextMenu) {\n\t\t\t\tconst brokerClient = fin.Interop.connectSync(fin.me.identity.uuid, {});\n\t\t\t\tfor (let i = 0; i < payload.selectedViews.length; i++) {\n\t\t\t\t\tconst viewIdentity = payload.selectedViews[i];\n\t\t\t\t\tconst intentName = \"CreateAppDefinition\";\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst view = fin.View.wrapSync(viewIdentity);\n\t\t\t\t\t\tconst options = await view.getOptions();\n\t\t\t\t\t\tconst info = await view.getInfo();\n\t\t\t\t\t\tconst name = options.name;\n\t\t\t\t\t\tconst fdc3InteropApi = isStringValue(options.fdc3InteropApi) ? options.fdc3InteropApi : \"1.2\";\n\t\t\t\t\t\tconst preloads =\n\t\t\t\t\t\t\tArray.isArray(options.preloadScripts) && options.preloadScripts.length > 0\n\t\t\t\t\t\t\t\t? options.preloadScripts\n\t\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\t\tconst manifest = {\n\t\t\t\t\t\t\turl: info.url,\n\t\t\t\t\t\t\tfdc3InteropApi,\n\t\t\t\t\t\t\tinterop: options.interop,\n\t\t\t\t\t\t\tcustomData: options.customData,\n\t\t\t\t\t\t\tpreloadScripts: preloads\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst icons = [];\n\t\t\t\t\t\tconst favicons = info.favicons || [];\n\t\t\t\t\t\tfor (let f = 0; f < favicons.length; f++) {\n\t\t\t\t\t\t\ticons.push({ src: favicons[f] });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst app = {\n\t\t\t\t\t\t\tappId: name,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\ttitle: info.title,\n\t\t\t\t\t\t\tdescription: info.title,\n\t\t\t\t\t\t\tmanifestType: MANIFEST_TYPES.InlineView.id,\n\t\t\t\t\t\t\tmanifest,\n\t\t\t\t\t\t\ttags: [MANIFEST_TYPES.View.id],\n\t\t\t\t\t\t\ticons,\n\t\t\t\t\t\t\timages: [],\n\t\t\t\t\t\t\tpublisher: \"\",\n\t\t\t\t\t\t\tcontactEmail: \"\",\n\t\t\t\t\t\t\tsupportEmail: \"\",\n\t\t\t\t\t\t\tintents: []\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst intent = {\n\t\t\t\t\t\t\tname: intentName,\n\t\t\t\t\t\t\tcontext: {\n\t\t\t\t\t\t\t\ttype: \"openfin.app\",\n\t\t\t\t\t\t\t\tapp\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tawait brokerClient.fireIntent(intent);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis._logger?.error(\n\t\t\t\t\t\t\t`Error while trying to raise intent ${intentName} for view ${viewIdentity.name}`,\n\t\t\t\t\t\t\terror\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tactionMap[\"copy-url\"] = async (payload: CustomActionPayload): Promise<void> => {\n\t\t\tif (payload.callerType === CustomActionCallerType.ViewTabContextMenu) {\n\t\t\t\tconst urls: string[] = [];\n\t\t\t\tfor (let i = 0; i < payload.selectedViews.length; i++) {\n\t\t\t\t\tconst viewIdentity = payload.selectedViews[i];\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst view = fin.View.wrapSync(viewIdentity);\n\t\t\t\t\t\tconst info = await view.getInfo();\n\t\t\t\t\t\turls.push(info.url);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis._logger?.error(\n\t\t\t\t\t\t\t`Error while trying to capture view url for view ${viewIdentity.name}`,\n\t\t\t\t\t\t\terror\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (urls.length > 0) {\n\t\t\t\t\tconst url = urls.join(\"\\n\");\n\t\t\t\t\tawait fin.Clipboard.writeText({\n\t\t\t\t\t\tdata: url\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn actionMap;\n\t}\n}\n","import type OpenFin from \"@openfin/core\";\nimport type {\n\tAnalyticsModule,\n\tPlatformAnalyticsEvent\n} from \"workspace-platform-starter/shapes/analytics-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty } from \"workspace-platform-starter/utils\";\nimport type { DevAnalyticsOptions } from \"./shapes\";\n\n/**\n * Implement the analytics module using the interop channels as the means of publishing the events.\n */\nexport class DevAnalyticsModule implements AnalyticsModule<DevAnalyticsOptions> {\n\tprivate _logger?: Logger;\n\n\tprivate _interopClient: OpenFin.InteropClient | undefined;\n\n\tprivate _channel?: OpenFin.SessionContextGroup;\n\n\tprivate _contextType?: string;\n\n\tprivate _cachedAnalyticEvents: PlatformAnalyticsEvent[] = [];\n\n\tprivate _helpers?: ModuleHelpers;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<DevAnalyticsOptions>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"DeveloperAnalyticsModule\");\n\t\tthis._logger.info(\"Initialized\");\n\t\tthis._logger.info(\"Session Id: \", helpers.sessionId);\n\t\tthis._helpers = helpers;\n\t\tthis._contextType = definition.data?.contextType ?? \"fin.dev.platform.analytics\";\n\t\tconst channelName: string = definition.data?.sessionContextGroupName ?? \"dev/platform/analytics\";\n\t\tthis._logger.info(\n\t\t\t`Using channel name: ${channelName} and contextType: ${this._contextType}. These can be customized by passing data settings: sessionContextGroupName and contextType in the module settings.`\n\t\t);\n\t\tif (!isEmpty(helpers.subscribeLifecycleEvent)) {\n\t\t\tthis._logger.info(\"Subscribing to the after bootstrap event.\");\n\t\t\tconst lifeCycleAfterBootstrapSubscriptionId = helpers.subscribeLifecycleEvent(\n\t\t\t\t\"after-bootstrap\",\n\t\t\t\tasync (_platform) => {\n\t\t\t\t\tif (!isEmpty(helpers.getInteropClient)) {\n\t\t\t\t\t\tthis._logger?.info(\"After bootstrap lifecycle event received. Getting interop client.\");\n\t\t\t\t\t\tthis._interopClient = await helpers.getInteropClient();\n\t\t\t\t\t\tif (this._interopClient) {\n\t\t\t\t\t\t\tthis._channel = await this._interopClient.joinSessionContextGroup(channelName);\n\t\t\t\t\t\t\tif (!isEmpty(this._helpers?.unsubscribeLifecycleEvent)) {\n\t\t\t\t\t\t\t\tthis._helpers?.unsubscribeLifecycleEvent(\n\t\t\t\t\t\t\t\t\tlifeCycleAfterBootstrapSubscriptionId,\n\t\t\t\t\t\t\t\t\t\"after-bootstrap\"\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\tthis._logger.warn(\n\t\t\t\t\"This analytics module requires a session context group name, a context type, the ability to create an interop client and the ability to listen for lifecycle events. Unfortunately this criteria has not been met.\"\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Handle Analytics. This example module simple console logs the events. You could batch the events and pass settings (number to batch etc, destination to send events) via the module definition.\n\t * @param events one of more analytic events.\n\t */\n\tpublic async handleAnalytics(events: PlatformAnalyticsEvent[]): Promise<void> {\n\t\tif (!Array.isArray(events)) {\n\t\t\tthis._logger?.warn(\"We were not passed an array of analytical events.\");\n\t\t\treturn;\n\t\t}\n\t\tif (!isEmpty(this._channel)) {\n\t\t\tlet platformAnalyticEvents: PlatformAnalyticsEvent[] = [];\n\t\t\tif (this._cachedAnalyticEvents.length > 0) {\n\t\t\t\tthis._logger?.info(`Adding ${this._cachedAnalyticEvents.length} analytic events.`);\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t\tplatformAnalyticEvents.push(...this._cachedAnalyticEvents);\n\t\t\t\tthis._cachedAnalyticEvents = [];\n\t\t\t}\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\tplatformAnalyticEvents.push(...events);\n\t\t\tconst eventCount = platformAnalyticEvents.length;\n\t\t\tplatformAnalyticEvents = platformAnalyticEvents.filter(\n\t\t\t\t(entry) => !(entry.type.toLowerCase() === \"interop\" && entry.source.toLowerCase() !== \"browser\")\n\t\t\t);\n\t\t\tconst filteredCount = platformAnalyticEvents.length;\n\n\t\t\tif (eventCount !== filteredCount) {\n\t\t\t\tthis._logger?.info(\n\t\t\t\t\t`Filtered out ${\n\t\t\t\t\t\teventCount - filteredCount\n\t\t\t\t\t} events as they were of type interop and not from the browser and we send events out over interop`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst context = {\n\t\t\t\ttype: this._contextType,\n\t\t\t\tname: \"Analytic Events\",\n\t\t\t\tevents: platformAnalyticEvents\n\t\t\t};\n\t\t\tawait this._channel.setContext(context as OpenFin.Context);\n\t\t} else {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\tthis._cachedAnalyticEvents.push(...events);\n\t\t}\n\t}\n\n\t/**\n\t * Close down the module. If this module had any cached events it needed to process it could try and flush them here.\n\t */\n\tpublic async closedown?(): Promise<void> {\n\t\tthis._logger?.info(\"closing down\");\n\t}\n}\n","import type { WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { MenuEntry, MenuType, Menus } from \"workspace-platform-starter/shapes/menu-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\n\n/**\n * Implement the menus.\n */\nexport class DeveloperMenus implements Menus {\n\t/**\n\t * The helper methods to use.\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"DeveloperMenus\");\n\t}\n\n\t/**\n\t * Get the menus from the module.\n\t * @param menuType The type of menu to get the entries for.\n\t * @param platform The current platform.\n\t * @returns The menu entries.\n\t */\n\tpublic async get(menuType: MenuType, platform: WorkspacePlatformModule): Promise<MenuEntry[] | undefined> {\n\t\tif (menuType === \"global\") {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tinclude: true,\n\t\t\t\t\tlabel: \"Inspect Window\",\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\tid: \"developer-inspect\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tposition: {\n\t\t\t\t\t\toperation: \"after\",\n\t\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\t\tcustomId: \"notification-toggle\"\n\t\t\t\t\t},\n\t\t\t\t\tseparator: \"before\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tinclude: true,\n\t\t\t\t\tlabel: \"Inspect Platform\",\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\tid: \"developer-inspect\",\n\t\t\t\t\t\t\tcustomData: { target: \"platform\" }\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tposition: {\n\t\t\t\t\t\toperation: \"after\",\n\t\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\t\tcustomId: \"developer-inspect\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\t\t} else if (menuType === \"page\") {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tinclude: true,\n\t\t\t\t\tlabel: \"Inspect Window\",\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\tid: \"developer-inspect\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tposition: {\n\t\t\t\t\t\toperation: \"before\",\n\t\t\t\t\t\ttype: \"Close\"\n\t\t\t\t\t},\n\t\t\t\t\tseparator: \"after\"\n\t\t\t\t}\n\t\t\t];\n\t\t} else if (menuType === \"view\") {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tinclude: true,\n\t\t\t\t\tlabel: \"Inspect View\",\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\tid: \"developer-inspect\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tposition: {\n\t\t\t\t\t\toperation: \"before\",\n\t\t\t\t\t\ttype: \"CloseTab\"\n\t\t\t\t\t},\n\t\t\t\t\tseparator: \"before\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tinclude: true,\n\t\t\t\t\tlabel: \"Create App Definition\",\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\tid: \"raise-create-app-definition-intent\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tposition: {\n\t\t\t\t\t\toperation: \"after\",\n\t\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\t\tcustomId: \"developer-inspect\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tinclude: true,\n\t\t\t\t\tlabel: \"Copy Url\",\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\tid: \"copy-url\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tposition: {\n\t\t\t\t\t\toperation: \"after\",\n\t\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\t\tcustomId: \"raise-create-app-definition-intent\"\n\t\t\t\t\t},\n\t\t\t\t\tseparator: \"after\"\n\t\t\t\t}\n\t\t\t];\n\t\t}\n\t}\n}\n"],"names":["CustomActionCallerType","__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","isEmpty","value","MANIFEST_TYPES","entryPoints","actions","initialize","loggerCreator","helpers","this","_logger","_helpers","platform","actionMap","async","payload","callerType","ViewTabContextMenu","i","selectedViews","length","identity","view","fin","View","wrapSync","showDeveloperTools","PageTabContextMenu","pageWindowIdentity","windowIdentity","pageWindow","Window","GlobalContextMenu","targetIdentity","customData","target","uuid","name","targetWindow","brokerClient","Interop","connectSync","me","viewIdentity","intentName","options","getOptions","info","getInfo","fdc3InteropApi","isString","trim","preloads","Array","isArray","preloadScripts","undefined","manifest","url","interop","icons","favicons","f","push","src","intent","context","type","app","appId","title","description","manifestType","tags","images","publisher","contactEmail","supportEmail","intents","fireIntent","error","urls","join","Clipboard","writeText","data","analytics","_cachedAnalyticEvents","sessionId","_contextType","contextType","channelName","sessionContextGroupName","subscribeLifecycleEvent","warn","lifeCycleAfterBootstrapSubscriptionId","_platform","getInteropClient","_interopClient","_channel","joinSessionContextGroup","unsubscribeLifecycleEvent","handleAnalytics","events","platformAnalyticEvents","eventCount","filter","entry","toLowerCase","source","filteredCount","setContext","closedown","menus","menuType","include","label","action","id","position","operation","customId","separator"],"sourceRoot":""}