{"version":3,"file":"snap-window-selection-override.bundle.js","mappings":"AAMO,MAAMA,EAAgE,CAC5EC,iBAAkB,ICQZ,MA0BC,gBAAMC,CACZC,EACAC,EACAC,GAEAC,KAAKC,YAAcJ,EACnBG,KAAKE,QAAUJ,EAAc,+BAC7BE,KAAKG,SAAWJ,EAEhBC,KAAKE,QAAQE,KAAK,eAInB,CAMO,eAAMC,GACZL,KAAKE,SAASE,KAAK,YAGpB,CAOO,4BAAME,CACZC,GAEA,OAAQC,IAGP,MAAMC,EAAaT,KAAKC,aAAaS,MAAQ,CAAC,EACxCC,EAASX,KAAKE,QACdH,EAAUC,KAAKG,SAIrB,OAAO,cAAqCK,EAI3C,WAAAI,GACCC,QAEAF,GAAQP,KACP,mBAAmBU,KAAKC,UAAUR,uBAA6BO,KAAKC,UAAUN,uBAAgCV,GAASiB,YAEzH,CAQO,kBAAMC,CACZC,EACAC,GAEA,MAAMC,QAAsBP,MAAMI,aAAaC,EAAeC,GAGxDE,QAAsBtB,GAASsB,iBAC/BC,QAAoBD,GAAeE,aACnCC,QAAmBH,GAAeI,iBACxC,IAAKH,IAAgBE,EACpB,OAAOJ,EAER,IAAIM,GAAQ,EAEZ,GACCC,MAAMC,QAAQnB,GAAYoB,cAC1BpB,EAAWoB,YAAYC,OAAS,GAChCZ,EAAca,IACb,CAED,MAAMA,EAAMb,EAAca,IAC1BL,GAASjB,EAAWoB,YAAYG,KAAMC,GACvB,IAAIC,OAAOD,EAAQE,QAAQ,MAAO,OACnCC,KAAKL,GAEpB,CACA,GAAIL,EAAO,CACV,MAAMW,QAAiBjB,EAAckB,oBAC/Bd,EAAWe,eAAenB,EAAcD,SAASqB,KAAMH,EAC9D,CACA,OAAOjB,CACR,GAGH,W","sources":["webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/platform-override/snap-window-selection-override/index.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/platform-override/snap-window-selection-override/platform-override.ts"],"sourcesContent":["import type { ModuleImplementation, ModuleTypes } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { SnapWindowSelectionOverride } from \"./platform-override\";\n\n/**\n * Define the entry points for the module.\n */\nexport const entryPoints: { [type in ModuleTypes]?: ModuleImplementation } = {\n\tplatformOverride: new SnapWindowSelectionOverride()\n};\n","// eslint-disable-next-line max-classes-per-file\nimport type OpenFin from \"@openfin/core\";\nimport type { WorkspacePlatformProvider } from \"@openfin/workspace-platform\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition } from \"workspace-platform-starter/shapes/module-shapes\";\nimport type {\n\tPlatformOverride,\n\tPlatformOverrideHelpers,\n\tPlatformOverrideOptions\n} from \"workspace-platform-starter/shapes/platform-shapes\";\nimport type { SnapWindowSelectionOverrideOptions } from \"./shapes\";\n\n/**\n * Implementation for the snap window selection override platform override.\n */\nexport class SnapWindowSelectionOverride implements PlatformOverride<SnapWindowSelectionOverrideOptions> {\n\t/**\n\t * The module definition including settings.\n\t * @internal\n\t */\n\tprivate _definition: ModuleDefinition<SnapWindowSelectionOverrideOptions> | undefined;\n\n\t/**\n\t * The logger for displaying information from the module.\n\t * @internal\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * Helper methods for the module.\n\t * @internal\n\t */\n\tprivate _helpers: PlatformOverrideHelpers | undefined;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<SnapWindowSelectionOverrideOptions>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: PlatformOverrideHelpers\n\t): Promise<void> {\n\t\tthis._definition = definition;\n\t\tthis._logger = loggerCreator(\"SnapWindowSelectionOverride\");\n\t\tthis._helpers = helpers;\n\n\t\tthis._logger.info(\"Initializing\");\n\n\t\t// TODO: Add code here to allocate any module resources\n\t\t// You can access the configured options e.g. definition.data?.exampleProp\n\t}\n\n\t/**\n\t * Close down any resources being used by the module.\n\t * @returns Nothing.\n\t */\n\tpublic async closedown(): Promise<void> {\n\t\tthis._logger?.info(\"Closedown\");\n\n\t\t// TODO: Add code here to free up any module resources\n\t}\n\n\t/**\n\t * Get the override constructor for the platform override (useful if you wish this implementation to be layered with other implementations and passed to the platform's initialization object as part of an array).\n\t * @param options The options for the platform override defined as part of the platform.\n\t * @returns The override constructor to be used in an array.\n\t */\n\tpublic async getConstructorOverride(\n\t\toptions: PlatformOverrideOptions\n\t): Promise<OpenFin.ConstructorOverride<WorkspacePlatformProvider>> {\n\t\treturn (Base: OpenFin.Constructor<WorkspacePlatformProvider>) => {\n\t\t\t// use settings passed through the module definition in your override or the default options passed with the function call\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t\tconst moduleData = this._definition?.data ?? {};\n\t\t\tconst logger = this._logger;\n\t\t\tconst helpers = this._helpers;\n\t\t\t/**\n\t\t\t * Extend the Platform Override.\n\t\t\t */\n\t\t\treturn class CustomPlatformOverride extends Base {\n\t\t\t\t/**\n\t\t\t\t * Constructor for the interop override.\n\t\t\t\t */\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper();\n\t\t\t\t\t// this is just an example to show a reference to the options, module data and local reference to the passed helpers.\n\t\t\t\t\tlogger?.info(\n\t\t\t\t\t\t`Options passed: ${JSON.stringify(options)} and module data: ${JSON.stringify(moduleData)} with session id: ${helpers?.sessionId}`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * Creates a window with the given options.\n\t\t\t\t * @param windowOptions The options for the window.\n\t\t\t\t * @param identity The identity of the window.\n\t\t\t\t * @returns The created window.\n\t\t\t\t */\n\t\t\t\tpublic async createWindow(\n\t\t\t\t\twindowOptions: OpenFin.PlatformWindowCreationOptions,\n\t\t\t\t\tidentity?: OpenFin.Identity\n\t\t\t\t): Promise<OpenFin.Window> {\n\t\t\t\t\tconst createdWindow = await super.createWindow(windowOptions, identity);\n\t\t\t\t\t// This example is for cases where snap autoWindowRegistration is disabled and you want to have custom logic to determine if a window should be tracked or not by snap.\n\t\t\t\t\t// This function is only called for the creation of platform windows and not native applications.\n\t\t\t\t\tconst getSnapClient = await helpers?.getSnapClient();\n\t\t\t\t\tconst snapEnabled = await getSnapClient?.isEnabled();\n\t\t\t\t\tconst snapServer = await getSnapClient?.getSnapServer();\n\t\t\t\t\tif (!snapEnabled || !snapServer) {\n\t\t\t\t\t\treturn createdWindow;\n\t\t\t\t\t}\n\t\t\t\t\tlet track = true;\n\t\t\t\t\t// Check if the window should be excluded from snap tracking\n\t\t\t\t\tif (\n\t\t\t\t\t\tArray.isArray(moduleData?.excludeUrls) &&\n\t\t\t\t\t\tmoduleData.excludeUrls.length > 0 &&\n\t\t\t\t\t\twindowOptions.url\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Check if the entry in the array is part of the current url of windowOptions.url\n\t\t\t\t\t\tconst url = windowOptions.url;\n\t\t\t\t\t\ttrack = !moduleData.excludeUrls.some((pattern) => {\n\t\t\t\t\t\t\tconst regex = new RegExp(pattern.replace(/\\*/g, \".*\"));\n\t\t\t\t\t\t\treturn regex.test(url);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (track) {\n\t\t\t\t\t\tconst nativeId = await createdWindow.getNativeId();\n\t\t\t\t\t\tawait snapServer.registerWindow(createdWindow.identity.name, nativeId);\n\t\t\t\t\t}\n\t\t\t\t\treturn createdWindow;\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}\n}\n"],"names":["entryPoints","platformOverride","initialize","definition","loggerCreator","helpers","this","_definition","_logger","_helpers","info","closedown","getConstructorOverride","options","Base","moduleData","data","logger","constructor","super","JSON","stringify","sessionId","createWindow","windowOptions","identity","createdWindow","getSnapClient","snapEnabled","isEnabled","snapServer","getSnapServer","track","Array","isArray","excludeUrls","length","url","some","pattern","RegExp","replace","test","nativeId","getNativeId","registerWindow","name"],"sourceRoot":""}