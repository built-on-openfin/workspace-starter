const e={platformOverride:new class{async initialize(e,s,n){this._definition=e,this._logger=s("ApplicationUrlAndAccessValidatorPlatformOverride"),this._helpers=n,this._logger.info("Initializing")}async closedown(){this._logger?.info("Closedown")}async getConstructorOverride(e){return s=>{if(void 0===this._helpers)throw new Error("Helpers are required for the the application validator platform override. Please ensure that the platform has been initialized correctly.");const n=this._definition?.data??{},t=this._logger,i=this._helpers,r=i.getUtilClient(),a=r.general.isStringValue,o=r.general.isEmpty,l=r.general.randomUUID;return class extends s{constructor(){super(),t?.info(`Options passed: ${JSON.stringify(e)} and module data: ${JSON.stringify(n)} with session id: ${i.sessionId}`)}async getSavedPage(e){t?.info(`Requesting saved page with id: ${e}`);const s=await super.getSavedPage(e);if(s&&s.layout){t?.info(`Processing page layout for page with id: ${e}`);const n=await this.validateAppUrlAndAccess(s.layout);s.layout=JSON.parse(n)}return s}async applySnapshot(e,s){t?.info("Processing snapshot windows for app url changes or access updates");const n=await this.validateAppUrlAndAccess(e.snapshot.windows);return e.snapshot.windows=JSON.parse(n),t?.info("Passing processed snapshot to base applySnapshot."),super.applySnapshot(e,s)}async validateAppUrlAndAccess(e){const s={},t={};let r;const p=[];i.getApps&&p.push(...await i.getApps());let c=JSON.stringify(e,(e,i)=>{if(Array.isArray(i))return i;if(a(i?.name)&&!i.name.startsWith("internal-generated-")&&!o(i.url)){const e=i.name.split("/")[0];let a;if(r={exists:!1},s[e])r=s[e];else{if(a=p.find(s=>s.appId===e),a)if(r={exists:!0},"window"===a.launchPreference?.options?.type)Array.isArray(a.launchPreference.options?.updatable)&&a.launchPreference.options?.updatable.findIndex(e=>"url"===e.name)>-1?r={exists:!0}:a.launchPreference.options.window?.url&&(r={url:a.launchPreference.options.window.url,exists:!0});else if("view"===a.launchPreference?.options?.type)Array.isArray(a.launchPreference.options?.updatable)&&a.launchPreference.options?.updatable.findIndex(e=>"url"===e.name)>-1?r={exists:!0}:a.launchPreference.options.view?.url&&(r={url:a.launchPreference.options.view.url,exists:!0});else if("inline-view"!==a?.manifestType&&"inline-window"!==a?.manifestType||!a.manifest.url){if("view"===a?.manifestType||"window"===a?.manifestType){const e=`[[${a.appId}]]`;if(o(t[e])){const s={manifest:a.manifest,originalUrl:i.url};t[e]=s}r={url:`[[${a.appId}]]`,exists:!0}}}else r={url:a.manifest.url,exists:!0};else r={exists:!1};s[e]=r}r.exists?i.url=r.url??i.url:n.deniedAccessUrl&&(i.url=n.deniedAccessUrl,i.customData={appId:e},i.name=`internal-generated-${l()}`)}return i});const f=Object.keys(t);if(f.length>0)for(const e of f){const s=await this.getUrlFromManifest(t[e].manifest,t[e].originalUrl);c=c.replaceAll(e,s)}return c}async getUrlFromManifest(e,s){try{const n=await fin.System.fetchManifest(e);return n.url?n.url:(t?.warn(`No url found in manifest for ${s}`),s)}catch(e){return t?.error(`Error fetching manifest for ${s}`,e),s}}}}}}};export{e as entryPoints};
//# sourceMappingURL=application-url-and-access-validator.bundle.js.map