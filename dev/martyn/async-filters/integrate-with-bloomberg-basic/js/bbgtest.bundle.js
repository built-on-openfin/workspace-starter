/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../../node_modules/@openfin/bloomberg/openfin.bloomberg.mjs":
/*!*******************************************************************!*\
  !*** ../../node_modules/@openfin/bloomberg/openfin.bloomberg.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApiError: () => (/* binding */ Y),
/* harmony export */   AppNotAuthorizedError: () => (/* binding */ H),
/* harmony export */   InteropError: () => (/* binding */ Q),
/* harmony export */   TerminalCommandError: () => (/* binding */ K),
/* harmony export */   TerminalConnectionError: () => (/* binding */ X),
/* harmony export */   connect: () => (/* binding */ ee),
/* harmony export */   disableLogging: () => (/* binding */ te),
/* harmony export */   enableLogging: () => (/* binding */ ne),
/* harmony export */   getDefaultActions: () => (/* binding */ re),
/* harmony export */   isBloombergTerminalReady: () => (/* binding */ se),
/* harmony export */   isCusip: () => (/* binding */ oe),
/* harmony export */   isEquity: () => (/* binding */ ie),
/* harmony export */   isFigi: () => (/* binding */ ce),
/* harmony export */   isIsin: () => (/* binding */ ae)
/* harmony export */ });
var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{MS:()=>ApiError,xc:()=>AppNotAuthorizedError,BT:()=>InteropError,ez:()=>TerminalCommandError,yW:()=>TerminalConnectionError,$j:()=>Z,U$:()=>i,U7:()=>c,U5:()=>D,GS:()=>M,hN:()=>y,Yc:()=>v,eE:()=>E,C1:()=>S});const n=e=>{if(e instanceof ApiError)return e;switch(!0){case e?.message?.indexOf("APPLICATION_VALIDATION")>=0:return new AppNotAuthorizedError;case e?.message?.indexOf("INVALID_COMMAND")>=0:case e?.message?.indexOf("INVALID_GROUP_VALUE")>=0:case e?.message?.indexOf("MNEMONIC_NOT_ALLOWED")>=0:return new TerminalCommandError(void 0,e);case"Connection Error"===e?.message:return new TerminalConnectionError;default:return new ApiError(void 0,e)}};class ApiError extends Error{constructor(e="An unexpected error has occurred",t){super(e),t&&(this.innerError=t),this.stack=this.stack?.replace(/^(\w*Error)/,`${this.constructor.name}`)}}class AppNotAuthorizedError extends ApiError{constructor(e="App not authorized to use Terminal Connect API",t){super(e,t)}}class InteropError extends ApiError{constructor(e="Failed to execute the interop function",t){super(e,t)}}class TerminalCommandError extends ApiError{constructor(e="Failed to execute the terminal command",t){super(e,t)}}class TerminalConnectionError extends ApiError{constructor(e="Failed to connect to local terminal service",t){super(e,t)}}const r="1.2.0";let s=!1;const o="[@openfin/bloomberg]",i=()=>{s=!1},c=()=>{s=!0,u(`v${r}`)},a=(e,t)=>{s&&(e.innerError?console.error(t?`${o} ${t}`:o,e,"\n\n(inner)",e.innerError):console.error(t?`${o} ${t}`:o,e))},u=(...e)=>{s&&console.log(o,...e)},l=(...e)=>{s&&console.warn(o,...e)};"undefined"==typeof fin&&Object.assign(window,{fin:{}}),Object.assign(fin,{Integrations:{Bloomberg:{enableLogging:c,disableLogging:i}}});class p{constructor(e,t,n){this._lastUpdate=0,this._securityCacheExpiration=15e3,this._securityCache="",this._name=t,this._type=n,this._terminalProxy=e}get name(){return this._name}get type(){return this._type}getSecurity(){return new Promise(((e,t)=>{this._terminalProxy.getAllGroups((n=>{const r=n.find((e=>e.name===this._name));r?(this._securityCache=r.security,this._lastUpdate=(new Date).getTime(),e(this._securityCache)):t(new Error(`Group ${name} is not found.`))}),((e,n)=>{t(this.getErrorFromErrorMessage(e,n))}))}))}getCachedSecurity(){return new Promise((async(e,t)=>{const n=(new Date).getTime();(!this._securityCache||!this._lastUpdate||n-this._lastUpdate>this._securityCacheExpiration)&&await this.getSecurity(),e(this._securityCache)}))}setSecurity(e,t){return new Promise(((n,r)=>{this._terminalProxy.setGroupSecurity((()=>{this._securityCache=e,this._lastUpdate=(new Date).getTime(),n()}),((e,t)=>{r(this.getErrorFromErrorMessage(e,t))}),this._name,e,t)}))}}function d(e){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";let n,r,s,o,i,c,a,u="",l=0;for(;l<e.length;)n=e.charCodeAt(l++),r=e.charCodeAt(l++),s=e.charCodeAt(l++),o=n>>2,i=(3&n)<<4|r>>4,c=(15&r)<<2|s>>6,a=63&s,isNaN(r)?c=a=64:isNaN(s)&&(a=64),u=u+t.charAt(o)+t.charAt(i)+t.charAt(c)+t.charAt(a);return u}class g{constructor(){this._seqNumber=0,this._isConnecting=!1,this._isConnected=!1,this._isRegistered=!1,this._sessionId="",this._queuedRequests=[],this._pendingRequests={},this._minPortRange=51800,this._maxPortRange=51800,this._currentPort=51800,this._responseTimeout=15e3,this._disconnectEventSubscriptions={},this._groupEventSubscriptions={},this.sendRemoteMessage=(e,t,n,r)=>{if(this._isRegistered||e.register||this.sendRemoteMessage({register:{}},12,null,console.error),this._sessionId||(this._sessionId=`{${function(){const e="0123456789ABCDEF".split("");let t,n=[],r=Math.random;n[8]=n[13]=n[18]=n[23]="-",n[14]="4";for(var s=0;s<36;s++)n[s]||(t=0|16*r(),n[s]=e[19==s?3&t|8:15&t]);return n.join("")}()}}`),e.setGroupValue&&!e.setGroupValue.cookie&&(e.setGroupValue.cookie=this._sessionId),e.subscribeGroupEvents){const t=e.subscribeGroupEvents.subId;delete e.subscribeGroupEvents.subId,r=e=>{delete this._groupEventSubscriptions[t],r&&r(e)}}const s={sessionId:this._sessionId,correlationId:++this._seqNumber,request:e},o=JSON.stringify(s),i=t>12,c=i?{appId:s.appId,sessionId:s.sessionId,correlationId:s.correlationId,payloadSchemaName:"ap3g_internal",payloadSchemaVersion:2,payloadMsgType:t,payload:d(o)}:void 0,a={envelope:{schemaName:i?"blp_lpad_msg":"blp_remote_controller",schemaVersion:2,message:i?JSON.stringify(c):o},correlationId:s.correlationId,expectResponse:!0,onsuccess:n,onerror:r};this._pendingRequests[s.correlationId]=a,this._isConnected?this.sendRequest(a):(this._queuedRequests.push(a),this.connect())}}addEventListener(e){const t=Object.keys(this._groupEventSubscriptions).length+1;return this._groupEventSubscriptions[t]=e,t}removeEventListener(e){return delete this._groupEventSubscriptions[e],Object.keys(this._groupEventSubscriptions).length}addDisconnectEventListener(e){const t=Object.keys(this._disconnectEventSubscriptions).length+1;return this._disconnectEventSubscriptions[t]=e,t}removeDisconnectEventListener(e){const t=Object.keys(this._disconnectEventSubscriptions).length;delete this._disconnectEventSubscriptions[e];return t!==Object.keys(this._disconnectEventSubscriptions).length}sendRequest(e){const t=JSON.stringify(e.envelope);this._webSocket&&this._webSocket.send(t),e.expectResponse?setTimeout((()=>{this._pendingRequests[e.correlationId]&&(delete this._pendingRequests[e.correlationId],e.onerror&&e.onerror(0,"Response Timeout"))}),this._responseTimeout):delete this._pendingRequests[e.correlationId]}connect(){try{if(this._isConnecting)return;this._isConnecting=!0,this._webSocket=new WebSocket("ws://localhost:"+this._currentPort,"terminal_api"),this._webSocket.onopen=this.onWebSocketOpen.bind(this),this._webSocket.onmessage=this.onWebSocketMessage.bind(this),this._webSocket.onclose=this.onWebSocketClose.bind(this),this._webSocket.onerror=this.onWebSocketError.bind(this)}catch(e){this._webSocket=void 0,this._queuedRequests=[],this.cancelPendingRequests("WebSocket Exception "+e),console.error(e)}}cancelPendingRequests(e){this._isConnected=!1,this._isConnecting=!1,this._isRegistered=!1,this._sessionId="";for(let t=0;t<this._queuedRequests.length;t+=1){const n=this._queuedRequests[t];n&&n.onerror&&n.onerror(0,e)}this._queuedRequests=[];for(let t in this._pendingRequests){const n=this._pendingRequests[t];n&&n.onerror&&n.onerror(0,e)}this._pendingRequests={}}onWebSocketClose(e){if(console.log("WebSocket Closed; Reason: "+e.reason+", Code: "+e.code+", WasClean: "+e.wasClean),this._isConnected){const t={};e&&void 0!==e.reason&&(t.reason=e.reason),e&&void 0!==e.code&&(t.code=e.code),e&&void 0!==e.wasClean&&(t.wasClean=e.wasClean),this._currentPort=this._minPortRange,this.cancelPendingRequests({status:"error",message:"Connection Closed",details:t});for(let e in this._disconnectEventSubscriptions){const t=this._disconnectEventSubscriptions[e];t&&t(e)}}}onWebSocketError(){if(console.log("WebSocket Error;  readyState: "+(this._webSocket&&this._webSocket.readyState)),this._isConnecting=!1,this._currentPort<this._maxPortRange)this._currentPort+=1,this.connect();else{this._currentPort=this._minPortRange;const e={readyState:this._webSocket&&this._webSocket.readyState};this.cancelPendingRequests({status:"error",message:"Connection Error",details:e})}}onWebSocketOpen(){for(this._isConnected=!0,this._isConnecting=!1;this._queuedRequests.length>0;)this.sendRequest(this._queuedRequests.shift())}onWebSocketMessage(e){var t=e&&e.data?e.data:"null",n=JSON.parse(t),r=n?JSON.parse(n.message):null,s=r&&r.response?this._pendingRequests[r.correlationId]:null;s&&delete this._pendingRequests[r.correlationId],this.processResponse(s,r.response)}getGroupInfo(e){return e?{name:e.name,type:e.type,security:"security"===e.type&&e.value?e.value:void 0}:{}}processResponse(e,t){if(t.success)e.onsuccess&&e.onsuccess();else if(t.registrationComplete)this._isRegistered=!0,console.log("Registration Complete; Session: "+this._sessionId),e.onsuccess&&e.onsuccess();else if(t.getAllGroups){const n=t.getAllGroups.group;e.onsuccess&&e.onsuccess(n?n.map(this.getGroupInfo):[])}else if(t.groupValue)e.onsuccess&&e.onsuccess(this.getGroupInfo(t.groupValue.group));else if(t.groupEvent){if(t.groupEvent.valueChanged){const e=t.groupEvent.valueChanged.group,n=t.groupEvent.valueChanged.cookie===this._sessionId?void 0:t.groupEvent.valueChanged.cookie;for(let t in this._groupEventSubscriptions){const r=this._groupEventSubscriptions[t];r&&r(e,n)}}}else e.onerror&&e.onerror(t.failure&&t.failure.code||0,t.failure?`${t.failure.message} ${t.failure.humanMessage}`:"Unknown Response")}}class h{constructor(){this._webSocket=new g}runFunction(e,t,n,r,s,o,i,c){let a="";if(n&&n.length?1!==r&&2!==r&&3!==r&&4!==r&&5!==r&&(a="Invalid Or Missing Parameter: panel"):a="Invalid Or Missing Parameter: mnemonic",a)return console.error("runFunctionInPanel error: "+a),void(t&&t(0,a));const u={runFunctionInPanel:{mnemonic:n,panel:r}};if(s){const e=[];e.push(s),o&&e.push(o),u.runFunctionInPanel.securities=e}i&&(u.runFunctionInPanel.tails=i),c&&(u.runFunctionInPanel.applicationProperties=c),this._webSocket.sendRemoteMessage(u,0,e,t)}getAllGroups(e,t){this._webSocket.sendRemoteMessage({getAllGroups:{}},13,e,t)}getGroup(e,t,n){if(!n||!n.length){const e="Invalid Or Missing Parameter: name";return console.error(e),void(t&&t(0,e))}this._webSocket.sendRemoteMessage({getGroupValue:{name:n}},15,e,t)}setGroupSecurity(e,t,n,r,s){let o="";if(n&&n.length?r&&r.length||(o="Invalid Or Missing Parameter: security"):o="Invalid Or Missing Parameter: name",o)return console.error("setGroupContext error: "+o),void(t&&t(0,o));this._webSocket.sendRemoteMessage({setGroupValue:{name:n,value:r,cookie:s}},14,e,t)}subscribeGroupEvents(e,t,n){if(!n){const e="Invalid Or Missing Parameter: callback";return console.error("subscribeGroupEvents error: "+e),void(t&&t(0,e))}const r=this._webSocket.addEventListener(n);1===r?this._webSocket.sendRemoteMessage({subscribeGroupEvents:{subId:r}},16,(()=>{e&&e(r)}),(e=>{t&&t(0,e)})):e&&e(r)}unsubscribeGroupEvents(e,t,n){if(!n){const e="Invalid Or Missing Parameter: cookie";return console.error("unsubscribeGroupEvents error: "+e),void(t&&t(0,e))}0===this._webSocket.removeEventListener(n)?this._webSocket.sendRemoteMessage({unsubscribeGroupEvents:{}},17,e,t):e&&e()}subscribeDisconnectEvent(e,t,n){if(!n){const e="Invalid Or Missing Parameter: callback";return console.error("subscribeDisconnectEvent error: "+e),t&&t(0,e),null}const r=this._webSocket.addDisconnectEventListener(n);return e&&e(r),r}unsubscribeDisconnectEvent(e,t,n){if(!n){const e="Invalid Or Missing Parameter: cookie";return console.error("unsubscribeDisconnectEvent error: "+e),t&&t(0,e),!1}return this._webSocket.removeDisconnectEventListener(n)?(e&&e(),!0):(t&&t(0,"Invalid Subscription"),!1)}}class m{constructor(){this.runFunction=window.bb.apps.tc.runFunction,this.getGroup=window.bb.apps.tc.getGroup,this.setGroupSecurity=window.bb.apps.tc.setGroupSecurity,this.getAllGroups=window.bb.apps.tc.getAllGroups,this.subscribeGroupEvents=window.bb.apps.tc.subscribeGroupEvents,this.unsubscribeGroupEvents=window.bb.apps.tc.unsubscribeGroupEvents}subscribeDisconnectEvent(e,t,n){}unsubscribeDisconnectEvent(e,t,n){}}class b{constructor(e=!function(){return!!(window.bb&&window.bb.apps&&window.bb.apps.app&&window.bb.apps.event)}()){this._helperSetGroupValues=e=>{const t=new p(this._terminalProxy,e.name,e.type);return t._securityCache=e.security,t._lastUpdate=(new Date).getTime(),t},this._terminalProxy=e?new h:new m}runFunction(e,t,n,r,s){return new Promise(((o,i)=>{this._terminalProxy.runFunction(o,((e,t)=>{i(this.getErrorFromErrorMessage(e,t))}),e,t,n||null,r||null,s||null)}))}getAllGroups(){return new Promise(((e,t)=>{this._terminalProxy.getAllGroups((t=>{e(Array.from(t,this._helperSetGroupValues))}),((e,n)=>{t(this.getErrorFromErrorMessage(e,n))}))}))}getErrorFromErrorMessage(e,t){let n=null;if("object"==typeof t)if(t.stack)n=t;else{const{details:e,message:r}=t;n=new Error(r??"Unknown error"),e&&(n.details=e)}else n="string"==typeof t?new Error(t):new Error("Unknown error");return n.code=e,n}getGroup(e){return new Promise(((t,n)=>{this._terminalProxy.getAllGroups((r=>{const s=r.find((t=>t.name===e));s?t(this._helperSetGroupValues(s)):n(new Error(`Group ${e} is not found.`))}),((e,t)=>{n(this.getErrorFromErrorMessage(e,t))}))}))}subscribeGroupEvents(e){return new Promise(((t,n)=>{this._terminalProxy.subscribeGroupEvents((e=>{t(e)}),((e,t)=>{n(this.getErrorFromErrorMessage(e,t))}),((t,n)=>{e(this._helperSetGroupValues(t),n)}))}))}unsubscribeGroupEvents(e){return new Promise(((t,n)=>{this._terminalProxy.unsubscribeGroupEvents((()=>{t()}),((e,t)=>{n(this.getErrorFromErrorMessage(e,t))}),e)}))}}const f=(window.BB=window.BB||{},window.BB.Apps=window.BB.Apps||{},window.BB.Apps.Terminal=window.BB.Apps.Terminal||new b,window.BB.Apps.Terminal),w="fdc3.contact",_="fdc3.instrument",y=e=>!!e&&/^([A-Z0-9]{5})([A-Z0-9*@#]{3})(\d)$/i.test(e),v=e=>!!e&&/\b(EQUITY)$/i.test(e),E=e=>!!e&&/^(?!B[SM]|G[GBH]|KY|VG)([A-Z]{2})(G)(((?![AEIOU_])\w){8})(\d)$/i.test(e),S=e=>!!e&&/^([A-Z]{2})([A-Z0-9]{9})(\d)$/i.test(e),I="OF_BBG_API",A=(e,t,r)=>async(s,o)=>{if(void 0===(s?.name??void 0)){const e=new ApiError(void 0,"Group event source is undefined");throw a(e),r?.(e),e}if("*"!==e&&s.name!==e||o===I)return;let i;try{i=await s.getSecurity()}catch(e){const t=n(e);throw a(t),r?.(t),t}u(`Launchpad group ${s.name} security changed to:`,i);const c=(e=>{const t={type:_,id:{BBG:e}},n=(e=>{if(e?.trim())return(e.match(/^\w+/)??[])[0]})(e);if(!n)return t;switch(!0){case y(n):t.id.CUSIP=n;break;case E(n):t.id.FIGI=n;break;case S(n):t.id.ISIN=n;break;case v(e):t.id.ticker=n}return t})(i);c.openfinBbgApi=!0,t?.(c),u("Setting new context: ",c);try{await fin.me.interop.setContext(c)}catch(e){const t=new InteropError(void 0,e);a(t),r?.(t)}},M=async()=>{let e=!0;try{await f.getAllGroups()}catch(t){const r=n(t);if(!(r instanceof TerminalConnectionError))throw a(r),r;e=!1}return u("Bloomberg terminal ready: ",e),e},C=async(e,t,r,s,o)=>{if("number"==typeof e){u(`Running terminal function in panel ${e}: `,t,r,s,o);try{await f.runFunction(t,e,r,s,o)}catch(e){const t=n(e);throw a(t),t}}else u(`Unable to run function as target ${e} is not a panel`,t,r,s,o)},G={defaultMerge:Symbol("deepmerge-ts: default merge"),skip:Symbol("deepmerge-ts: skip")};G.defaultMerge;function k(e,t){return t}function O(e){return"object"!=typeof e||null===e?0:Array.isArray(e)?2:function(e){if(!F.has(Object.prototype.toString.call(e)))return!1;const{constructor:t}=e;if(void 0===t)return!0;const n=t.prototype;if(null===n||"object"!=typeof n||!F.has(Object.prototype.toString.call(n)))return!1;if(!n.hasOwnProperty("isPrototypeOf"))return!1;return!0}(e)?1:e instanceof Set?3:e instanceof Map?4:5}function P(e){const t=new Set;for(const n of e)for(const e of[...Object.keys(n),...Object.getOwnPropertySymbols(n)])t.add(e);return t}function R(e,t){return"object"==typeof e&&Object.prototype.propertyIsEnumerable.call(e,t)}function x(e){return{*[Symbol.iterator](){for(const t of e)for(const e of t)yield e}}}const F=new Set(["[object Object]","[object Module]"]);function q(e){return e.at(-1)}var N=Object.freeze({__proto__:null,mergeArrays:function(e){return e.flat()},mergeMaps:function(e){return new Map(x(e))},mergeOthers:q,mergeRecords:function(e,t,n){const r={};for(const s of P(e)){const o=[];for(const t of e)R(t,s)&&o.push(t[s]);if(0===o.length)continue;const i=t.metaDataUpdater(n,{key:s,parents:e}),c=B(o,t,i);c!==G.skip&&("__proto__"===s?Object.defineProperty(r,s,{value:c,configurable:!0,enumerable:!0,writable:!0}):r[s]=c)}return r},mergeSets:function(e){return new Set(x(e))}});function T(...e){return function(e,t){const n=function(e,t){return{defaultMergeFunctions:N,mergeFunctions:{...N,...Object.fromEntries(Object.entries(e).filter((([e,t])=>Object.hasOwn(N,e))).map((([e,t])=>!1===t?[e,q]:[e,t])))},metaDataUpdater:e.metaDataUpdater??k,deepmerge:t,useImplicitDefaultMerging:e.enableImplicitDefaultMerging??!1,actions:G}}(e,r);function r(...e){return B(e,n,t)}return r}({})(...e)}function B(e,t,n){if(0===e.length)return;if(1===e.length)return $(e,t,n);const r=O(e[0]);if(0!==r&&5!==r)for(let s=1;s<e.length;s++)if(O(e[s])!==r)return $(e,t,n);switch(r){case 1:return function(e,t,n){const r=t.mergeFunctions.mergeRecords(e,t,n);if(r===G.defaultMerge||t.useImplicitDefaultMerging&&void 0===r&&t.mergeFunctions.mergeRecords!==t.defaultMergeFunctions.mergeRecords)return t.defaultMergeFunctions.mergeRecords(e,t,n);return r}(e,t,n);case 2:return function(e,t,n){const r=t.mergeFunctions.mergeArrays(e,t,n);if(r===G.defaultMerge||t.useImplicitDefaultMerging&&void 0===r&&t.mergeFunctions.mergeArrays!==t.defaultMergeFunctions.mergeArrays)return t.defaultMergeFunctions.mergeArrays(e);return r}(e,t,n);case 3:return function(e,t,n){const r=t.mergeFunctions.mergeSets(e,t,n);if(r===G.defaultMerge||t.useImplicitDefaultMerging&&void 0===r&&t.mergeFunctions.mergeSets!==t.defaultMergeFunctions.mergeSets)return t.defaultMergeFunctions.mergeSets(e);return r}(e,t,n);case 4:return function(e,t,n){const r=t.mergeFunctions.mergeMaps(e,t,n);if(r===G.defaultMerge||t.useImplicitDefaultMerging&&void 0===r&&t.mergeFunctions.mergeMaps!==t.defaultMergeFunctions.mergeMaps)return t.defaultMergeFunctions.mergeMaps(e);return r}(e,t,n);default:return $(e,t,n)}}function $(e,t,n){const r=t.mergeFunctions.mergeOthers(e,t,n);return r===G.defaultMerge||t.useImplicitDefaultMerging&&void 0===r&&t.mergeFunctions.mergeOthers!==t.defaultMergeFunctions.mergeOthers?t.defaultMergeFunctions.mergeOthers(e):r}const D=()=>{const e=new Map,t=new Map,n={target:1,mnemonic:"DES"},r={target:1,mnemonic:"GP"},s={target:1,mnemonic:"Q"},o={target:1,mnemonic:"BIO"},i={target:1,mnemonic:"SEAR"};e.set(_,{...n}),e.set(w,{...o}),e.set("fdc3.organization",{...i});const c=new Map;c.set(_,{...r}),t.set("ViewChart",c);const a=new Map;a.set(w,{...o}),t.set("ViewContact",a);const u=new Map;u.set(_,{...n}),t.set("ViewInstrument",u);const l=new Map;return l.set(_,{...s}),t.set("ViewQuote",l),{contexts:e,intents:t}},U=async(e,t,n)=>{const r=D(),s=(e=>{const t=e=>{const[t]=e;return!!(t??"").trim()},n=[...e?.contexts?.entries()??[]].filter(t),r=[...e?.intents?.entries()??[]].filter((e=>{const[n,r]=e,s=[...r?.entries()??[]].filter(t);return!!(n??"").trim()&&s.length>0}));return{contexts:new Map(n),intents:new Map(r)}})(e),o=T(r,s),i=o.contexts,c=o.intents,p=[];let d;p.push(fin.me.interop.addContextHandler(((e,t,n)=>async r=>{r?await j(r,e,t,n):u("No context info provided, ignoring")})(i,t,n))),c.forEach(((e,r)=>{p.push(fin.me.interop.registerIntentHandler(((e,t,n)=>async r=>{u("Intent received",r);const{context:s}=r;s?e?await j(s,e,t,n):l(`No actions have been provided for intent ${r.name}, ignoring`):l("No context info provided with intent, ignoring")})(e,t,n),r))}));try{d=await Promise.all(p)}catch(e){const t=new ApiError("Failed to register interop handlers",e);throw a(t),t}return d},j=async(e,t,n,r)=>{if(n?.(e),!0===e.openfinBbgApi)return;if(u("Processing context",e),!t.has(e.type)||!t.get(e.type))return void l(`No action has been defined for context type ${e.type}, ignoring`);const s=t.get(e.type);try{switch(!0){case e.type.toUpperCase().endsWith("CONTACT"):await V(e,s);break;case e.type.toUpperCase().endsWith("INSTRUMENT"):await L(e,s);break;case e.type.toUpperCase().endsWith("ORGANIZATION"):await W(e,s);break;default:l(`Context type ${e.type} is not supported, ignoring`)}}catch(e){let t;e instanceof ApiError?t=e:(t=new ApiError(void 0,e),a(t)),r?.(t)}},V=async(e,t)=>{const{name:n}=e;if(!n)return void l("Contact context did not include a name, ignoring");if("string"==typeof t)return void l("Contact context is not compatible with group actions, ignoring");const{mnemonic:r,tails:s,target:o}=t,i=`${n} ${s??""}`.trim();await C(o,r,void 0,void 0,i)},L=async(e,t)=>{const r=(e=>{const{BBG:t,ticker:n}=e.id;return t||(n?`${n} US Equity`:void u("Instrument context does not contain a supported id",e))})(e);if(!r)return void l("Instrument context did not contain a valid security, ignoring");if("string"==typeof t)return void await(async(e,t)=>{if(u(`Setting ${"*"===e?"every group":`group ${e}`} security to ${t}`),"*"===e){const e=await f.getAllGroups();await Promise.all(e.map((e=>e.setSecurity(t,I))))}else try{const n=await f.getGroup(e);await n.setSecurity(t,I)}catch(e){const t=n(e);throw a(t),t}})(t,r);const{mnemonic:s,tails:o,target:i}=t;await C(i,s,r,void 0,o)},W=async(e,t)=>{const{name:n}=e;if(!n)return void l("Organization context did not include a name, ignoring");if("string"==typeof t)return void l("Organization context is not compatible with group actions, ignoring");const{mnemonic:r,tails:s,target:o}=t,i=`${n} ${s??""}`.trim();await C(o,r,void 0,void 0,i)};var z;!function(e){e.Bloomberg="BLOOMBERG"}(z||(z={}));const Z=async e=>{(async e=>{try{await fin.System.registerUsage({type:"integration-feature",data:{apiVersion:r,componentName:e}})}catch(t){l(`Unable to register usage for feature ${e}: ${t?.message}`)}})(z.Bloomberg);const{group:t,actions:n,onContextChanged:s,onError:o}=e??{};if(u("Creating interop connection",t,n),!await M()){const e=new TerminalConnectionError;throw a(e),e}let i;void 0!==(t??void 0)&&(i=await f.subscribeGroupEvents(A(t,s,o)),u("Launchpad group subscription created: ",i));const c=await U(n,s,o);return{disconnect:J(c,i)}},J=(e,t)=>async()=>{if(u("Disconnecting interop connection"),e&&await Promise.all(e.map((async e=>{await e.unsubscribe()}))),void 0!==(t??void 0))try{await f.unsubscribeGroupEvents(t)}catch(e){const t=new TerminalConnectionError("An error occurred during disconnection",e);a(t)}};var Y=t.MS,H=t.xc,Q=t.BT,K=t.ez,X=t.yW,ee=t.$j,te=t.U$,ne=t.U7,re=t.U5,se=t.GS,oe=t.hN,ie=t.Yc,ce=t.eE,ae=t.C1;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*******************************!*\
  !*** ./client/src/bbgtest.ts ***!
  \*******************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _openfin_bloomberg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openfin/bloomberg */ "../../node_modules/@openfin/bloomberg/openfin.bloomberg.mjs");

let bbgConnection;
let selectedIntentType = "";
let selectedIntentValue = "";
let fdc3Denomination = "";
let bbgMnemonic = "";
let btnConnect;
let btnDisconnect;
let btnClearLogs;
let btnQuery;
let intentTypeElement;
let intentValueElement;
let logOutput;
window.addEventListener("DOMContentLoaded", async () => {
    // Enable logging in the BBG package
    (0,_openfin_bloomberg__WEBPACK_IMPORTED_MODULE_0__.enableLogging)();
    // Initialize the DOM elements.
    initializeDOM();
});
/**
 * Initialize the DOM.
 */
function initializeDOM() {
    btnConnect = document.querySelector("#btnConnect");
    btnDisconnect = document.querySelector("#btnDisconnect");
    btnClearLogs = document.querySelector("#btnClear");
    btnQuery = document.querySelector("#btnQuery");
    intentTypeElement = document.querySelector("#intentType");
    intentValueElement = document.querySelector("#intentValue");
    logOutput = document.querySelector("#logOutput");
    if (btnConnect) {
        btnConnect.addEventListener("click", async () => {
            if (btnConnect) {
                btnConnect.disabled = true;
            }
            await connectToBBGTerminal();
            updateState();
        });
    }
    if (btnDisconnect) {
        btnDisconnect.addEventListener("click", async () => {
            if (btnDisconnect) {
                btnDisconnect.disabled = true;
            }
            await disconnectFromBBGTerminal();
            updateState();
        });
    }
    if (btnClearLogs) {
        btnClearLogs.addEventListener("click", clearLogs);
    }
    if (btnQuery) {
        btnQuery.addEventListener("click", fireIntentForBBG);
    }
    if (intentTypeElement) {
        intentTypeElement.addEventListener("change", (event) => {
            if (intentTypeElement?.value) {
                if (btnQuery) {
                    btnQuery.disabled = true;
                }
                switch (intentTypeElement?.value) {
                    case "ViewChart":
                        logInformation("Intent to be fired is ViewChart. Content Type is fdc3.instrument. Bloomberg Terminal Mnemonic: GP");
                        selectedIntentType = "ViewChart";
                        fdc3Denomination = "fdc3.instrument";
                        bbgMnemonic = "GP";
                        populateSelect(intentValueElement, [
                            {
                                value: "ORCL",
                                label: "Oracle Corp"
                            },
                            {
                                value: "MSFT",
                                label: "Microsoft"
                            },
                            {
                                value: "IBM",
                                label: "IBM"
                            }
                        ]);
                        break;
                    case "ViewContact":
                        logInformation("Intent to be fired is ViewContact. Content Type is fdc3.contact. Bloomberg Terminal Mnemonic: BIO");
                        selectedIntentType = "ViewContact";
                        fdc3Denomination = "fdc3.contact";
                        bbgMnemonic = "BIO";
                        populateSelect(intentValueElement, [
                            {
                                value: "William Henry Gates",
                                label: "William Henry Gates"
                            },
                            {
                                value: "Larry Ellison",
                                label: "Larry Ellison"
                            },
                            {
                                value: "Robert Iger",
                                label: "Robert Iger"
                            }
                        ]);
                        break;
                    case "ViewInstrument":
                        logInformation("Intent to be fired is ViewInstrument. Content Type is fdc3.instrument. Bloomberg Terminal Mnemonic: DES");
                        selectedIntentType = "ViewInstrument";
                        fdc3Denomination = "fdc3.instrument";
                        bbgMnemonic = "DES";
                        populateSelect(intentValueElement, [
                            {
                                value: "ORCL",
                                label: "Oracle Corp"
                            },
                            {
                                value: "MSFT",
                                label: "Microsoft"
                            },
                            {
                                value: "IBM",
                                label: "IBM"
                            }
                        ]);
                        break;
                    case "ViewQuote":
                        logInformation("Intent to be fired is ViewQuote. Content Type is fdc3.instrument. Bloomberg Terminal Mnemonic: Q");
                        selectedIntentType = "ViewQuote";
                        fdc3Denomination = "fdc3.instrument";
                        bbgMnemonic = "Q";
                        populateSelect(intentValueElement, [
                            {
                                value: "ORCL",
                                label: "Oracle Corp"
                            },
                            {
                                value: "MSFT",
                                label: "Microsoft"
                            },
                            {
                                value: "IBM",
                                label: "IBM"
                            }
                        ]);
                        break;
                }
                updateState();
            }
        });
    }
    if (intentValueElement) {
        intentValueElement.addEventListener("change", () => {
            if (intentValueElement) {
                selectedIntentValue = intentValueElement.value;
                if (selectedIntentValue.length > 0) {
                    logInformation(`action: ${selectedIntentType}, type: ${fdc3Denomination}, bbg mnemonic: ${bbgMnemonic}, search value: ${selectedIntentValue}`);
                }
                updateState();
            }
        });
    }
    updateState();
}
/**
 * Connect to Bloomberg Terminal.
 */
async function connectToBBGTerminal() {
    try {
        logInformation("Checking Bloomberg Terminal Status");
        if (!(await (0,_openfin_bloomberg__WEBPACK_IMPORTED_MODULE_0__.isBloombergTerminalReady)())) {
            const error = new Error("Failed to connect to Bloomberg terminal.");
            console.log(error);
            logInformation("Failed to connect to Bloomberg terminal.");
            throw error;
        }
        bbgConnection = await (0,_openfin_bloomberg__WEBPACK_IMPORTED_MODULE_0__.connect)();
        logInformation("Connection successful");
    }
    catch (error) {
        bbgConnection = undefined;
        console.log(error);
        logInformation(errorToString(error));
    }
}
/**
 * Disconnect from Bloomberg Terminal.
 */
async function disconnectFromBBGTerminal() {
    if (bbgConnection) {
        try {
            logInformation("Disconnecting from Bloomberg Terminal");
            await bbgConnection.disconnect();
        }
        finally {
            bbgConnection = undefined;
            logInformation("Disconnected from Bloomberg Terminal");
        }
    }
}
/**
 * Fire an intent.
 */
async function fireIntentForBBG() {
    if (bbgConnection) {
        try {
            logInformation(`action: ${selectedIntentType}, type: ${fdc3Denomination}, bbg mnemonic: ${bbgMnemonic}, search value: ${selectedIntentValue}`);
            let intent;
            switch (selectedIntentType) {
                case "ViewContact":
                    intent = {
                        name: selectedIntentType,
                        context: {
                            type: fdc3Denomination,
                            name: selectedIntentValue,
                            id: {}
                        }
                    };
                    break;
                default:
                    intent = {
                        name: selectedIntentType,
                        context: {
                            type: fdc3Denomination,
                            id: {
                                ticker: selectedIntentValue
                            }
                        }
                    };
                    break;
            }
            await fin.me.interop.fireIntent(intent);
        }
        catch (error) {
            logInformation(`Error while trying to raise intent: ${errorToString(error)}`);
        }
    }
    else {
        logInformation("Not connected to the Bloomberg Terminal. Please check your status or log in again.");
    }
}
/**
 * Update the state of the DOM.
 */
function updateState() {
    const isConnected = bbgConnection !== undefined;
    if (btnConnect) {
        btnConnect.disabled = isConnected;
    }
    if (btnDisconnect) {
        btnDisconnect.disabled = !isConnected;
    }
    if (intentTypeElement) {
        intentTypeElement.disabled = !isConnected;
    }
    if (intentValueElement) {
        intentValueElement.disabled = !isConnected || selectedIntentType.length === 0;
    }
    if (btnQuery) {
        btnQuery.disabled = !isConnected || selectedIntentValue.length === 0;
    }
}
/**
 * Log information to the output element.
 * @param info The information to log.
 */
function logInformation(info) {
    if (logOutput) {
        logOutput.textContent = `${logOutput.textContent}${info}\n\n`;
        logOutput.scrollTop = logOutput.scrollHeight;
    }
}
/**
 * Convert and error to a string.
 * @param err The error to convert.
 * @returns The error as a string.
 */
function errorToString(err) {
    if (err instanceof Error) {
        return err.message;
    }
    else if (typeof err === "string") {
        return err;
    }
    return JSON.stringify(err);
}
/**
 * Clear the logs.
 */
function clearLogs() {
    if (logOutput) {
        logOutput.textContent = "";
        logOutput.scrollTop = 0;
    }
}
/**
 * Populate a select control with a list of items.
 * @param select The select element to populate.
 * @param values The values to populate the element with.
 */
function populateSelect(select, values) {
    if (select) {
        select.innerHTML = "";
        const opt = document.createElement("option");
        opt.value = "";
        opt.text = "Please select value";
        opt.disabled = true;
        opt.selected = true;
        select.append(opt);
        for (const val of values) {
            const optVal = document.createElement("option");
            optVal.value = val.value;
            optVal.text = val.label;
            select.append(optVal);
        }
    }
}

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,