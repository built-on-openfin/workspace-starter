{"version":3,"file":"fdc3.mapper.bundle.js","mappings":"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","sources":["webpack://openfin-workspace--workspace-platform-starter/webpack/bootstrap","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/define property getters","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/hasOwnProperty shorthand","webpack://openfin-workspace--workspace-platform-starter/webpack/runtime/make namespace object","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/fdc3/1.2/mapper.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/fdc3/2.0/mapper.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? (undefined as T) : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n","import type { Image } from \"@openfin/workspace\";\nimport type { PlatformApp } from \"../../shapes/app-shapes\";\nimport type {\n\tAppDefinition,\n\tAppIcon,\n\tAppImage,\n\tAppIntents,\n\tAppMetadata,\n\tCustomConfig\n} from \"../../shapes/fdc3-1-2-shapes\";\nimport type { AppInterop, AppIntents as FDC3TwoPointZeroAppIntents } from \"../../shapes/fdc3-2-0-shapes\";\nimport { isBoolean, isEmpty, isStringValue } from \"../../utils\";\n\n/**\n * Map the app definition to a platform app.\n * @param app The app definition to map.\n * @returns The platform app.\n */\nexport function mapToPlatformApp(app: AppDefinition): PlatformApp {\n\tconst platformApp: PlatformApp = {\n\t\tappId: app.appId,\n\t\tname: app.name ?? app.appId,\n\t\ttitle: app.title ?? app.name,\n\t\tmanifestType: app.manifestType,\n\t\tmanifest: getManifestFromFDC3(app) as string,\n\t\tdescription: app.description,\n\t\tcustomConfig: app.customConfig,\n\t\tintents: app.intents,\n\t\tinterop: mapInteropFromFDC3(app.intents),\n\t\ttags: mapTagsFromFDC3(app),\n\t\tversion: app.version,\n\t\tpublisher: app.publisher ?? \"\",\n\t\tcontactEmail: app.contactEmail,\n\t\tsupportEmail: app.supportEmail,\n\t\ticons: mapIconsFromFDC3(app.icons),\n\t\timages: mapImagesFromFDC3(app.images),\n\t\tprivate: mapPrivateFromFDC3(app),\n\t\tautostart: mapAutostartFromFDC3(app),\n\t\tinstanceMode: app.customConfig?.instanceMode,\n\t\ttooltip: app.tooltip,\n\t\tlaunchPreference: app.customConfig?.launchPreference\n\t};\n\treturn platformApp;\n}\n\n/**\n * Map a platform app to an FDC3 1.2 app definition.\n * @param app The app definition to map.\n * @returns The fdc3 1.2 app.\n */\nexport function mapToFDC3App(app: PlatformApp): AppDefinition {\n\tconst manifestType: string = `${app.manifestType}`;\n\n\tconst fdc3App: AppDefinition = {\n\t\tappId: app.appId,\n\t\tname: app.name ?? app.appId,\n\t\ttitle: app.title ?? app.name,\n\t\tmanifestType,\n\t\tmanifest: app.manifest as string,\n\t\tdescription: app.description,\n\t\tcustomConfig: mapCustomConfigFromPlatformApp(app),\n\t\tintents: mapIntentsFromPlatformApp(app),\n\t\tcategories: app.tags ?? [],\n\t\tversion: app.version,\n\t\tpublisher: app.publisher ?? \"\",\n\t\tcontactEmail: app.contactEmail,\n\t\tsupportEmail: app.supportEmail,\n\t\ticons: mapIconsFromPlatformApp(app),\n\t\timages: mapImagesFromPlatformApp(app),\n\t\ttooltip: app.tooltip\n\t};\n\treturn fdc3App;\n}\n\n/**\n * Map the platform app to app metadata.\n * @param app The application to map.\n * @returns The app metadata.\n */\nexport function mapToAppMetaData(app: PlatformApp): AppMetadata {\n\tconst icons: string[] = [];\n\tconst images: string[] = [];\n\tif (Array.isArray(app.icons)) {\n\t\tfor (const icon of app.icons) {\n\t\t\tif (!isEmpty(icon.src)) {\n\t\t\t\ticons.push(icon.src);\n\t\t\t}\n\t\t}\n\t}\n\tif (Array.isArray(app.images)) {\n\t\tfor (const image of app.images) {\n\t\t\tif (!isEmpty(image.src)) {\n\t\t\t\timages.push(image.src);\n\t\t\t}\n\t\t}\n\t}\n\tconst appMetaData: AppMetadata = {\n\t\tappId: app.appId,\n\t\tdescription: app.description,\n\t\ticons,\n\t\timages,\n\t\tname: app.appId,\n\t\ttitle: app.title,\n\t\ttooltip: app.tooltip,\n\t\tversion: app.version\n\t};\n\treturn appMetaData;\n}\n\n/**\n * Map the app definition interop data to app interop format.\n * @param intents The intents to map.\n * @returns The app interop.\n */\nexport function mapInteropFromFDC3(intents: AppIntents[] | undefined): AppInterop | undefined {\n\tif (isEmpty(intents)) {\n\t\treturn;\n\t}\n\n\tconst listensFor: { [key: string]: FDC3TwoPointZeroAppIntents } = {};\n\n\tfor (const intent of intents) {\n\t\tlistensFor[intent.name] = {\n\t\t\tcontexts: intent.contexts,\n\t\t\tcustomConfig: intent.customConfig,\n\t\t\tdisplayName: intent.displayName\n\t\t};\n\t}\n\n\tconst interop: AppInterop = {\n\t\tintents: { listensFor }\n\t};\n\n\treturn interop;\n}\n\n/**\n * Maps the intents from a platform app to an FDC3 1.2 intents array.\n * @param app The platform app to use as a source\n * @returns an Array of Intents in FDC3 1.2 format\n */\nfunction mapIntentsFromPlatformApp(app: PlatformApp): AppIntents[] {\n\tconst intents: AppIntents[] = [];\n\tconst passedIntents = app.interop?.intents?.listensFor;\n\tif (!isEmpty(passedIntents)) {\n\t\tconst keys = Object.keys(passedIntents);\n\t\tfor (const key of keys) {\n\t\t\tconst displayName: string = passedIntents[key].displayName ?? key;\n\t\t\tintents.push({\n\t\t\t\tname: key,\n\t\t\t\tdisplayName,\n\t\t\t\tcontexts: passedIntents[key].contexts,\n\t\t\t\tcustomConfig: passedIntents[key].customConfig\n\t\t\t});\n\t\t}\n\t}\n\tif (intents.length === 0 && !isEmpty(app.intents)) {\n\t\treturn app.intents;\n\t}\n\treturn intents;\n}\n\n/**\n * Takes a platform app and returns an FDC3 custom config object.\n * @param app The platform app to map into a customConfig object.\n * @returns an FDC3 1.2 customConfig object based on the platform app settings.\n */\nfunction mapCustomConfigFromPlatformApp(app: PlatformApp): CustomConfig {\n\tconst config: CustomConfig = {\n\t\tautostart: mapBooleanValue(app?.autostart, false).toString(),\n\t\tinstanceMode: app.instanceMode,\n\t\tprivate: mapBooleanValue(app.private, false).toString(),\n\t\tlaunchPreference: app.launchPreference\n\t};\n\treturn config;\n}\n\n/**\n * Map the icon format.\n * @param icons The icons to map.\n * @returns The mapped icons.\n */\nfunction mapIconsFromFDC3(icons: AppIcon[] | undefined): Image[] {\n\tif (!Array.isArray(icons)) {\n\t\treturn [];\n\t}\n\tconst appIcons: Image[] = [];\n\tfor (const appIcon of icons) {\n\t\tappIcons.push({ src: appIcon.icon });\n\t}\n\treturn appIcons;\n}\n\n/**\n * Takes a Platform App and converts icons so they are in FDC3 1.2 format.\n * @param app The platform app to use as a source.\n * @returns The array of app icons in FDC3 1.2 format.\n */\nfunction mapIconsFromPlatformApp(app: PlatformApp): AppIcon[] {\n\tif (!Array.isArray(app.icons)) {\n\t\treturn [];\n\t}\n\tconst appIcons: AppIcon[] = [];\n\tfor (const appIcon of app.icons) {\n\t\tappIcons.push({ icon: appIcon.src });\n\t}\n\treturn appIcons;\n}\n\n/**\n * Map the image format.\n * @param images The images to map.\n * @returns The mapped images.\n */\nfunction mapImagesFromFDC3(images: AppImage[] | undefined): Image[] {\n\tif (!Array.isArray(images)) {\n\t\treturn [];\n\t}\n\tconst appImages: Image[] = [];\n\tfor (const appImage of images) {\n\t\tappImages.push({ src: appImage.url });\n\t}\n\treturn appImages;\n}\n\n/**\n * Returns an array of images in FDC3 1.2 format from a Platform App.\n * @param app The platform app to use as a source.\n * @returns The mapped images.\n */\nfunction mapImagesFromPlatformApp(app: PlatformApp): AppImage[] {\n\tif (!Array.isArray(app.images)) {\n\t\treturn [];\n\t}\n\tconst appImages: AppImage[] = [];\n\tfor (const appImage of app.images) {\n\t\tappImages.push({ url: appImage.src });\n\t}\n\treturn appImages;\n}\n\n/**\n * Get the manifest which can be plain string or JSON.\n * @param app The app to get the manifest from.\n * @returns The manifest.\n */\nfunction getManifestFromFDC3(app: AppDefinition): unknown {\n\tif (isStringValue(app.manifest) && app.manifest.startsWith(\"{\")) {\n\t\treturn JSON.parse(app.manifest);\n\t}\n\n\treturn app.manifest;\n}\n\n/**\n * Map the tags.\n * @param app The app definition to map the tags for.\n * @returns The mapped tags,\n */\nfunction mapTagsFromFDC3(app: AppDefinition & { tags?: string[] }): string[] {\n\tconst tags: string[] = app.tags ?? app.categories ?? [];\n\tif (tags.length === 0) {\n\t\ttags.push(app.manifestType);\n\t}\n\n\treturn tags;\n}\n\n/**\n * Map the private flag.\n * @param app The app containing the app.\n * @returns The flag or false if not found.\n */\nfunction mapPrivateFromFDC3(app: AppDefinition): boolean {\n\treturn mapBooleanValue(app?.customConfig?.private, false);\n}\n\n/**\n * Map the autostart flag.\n * @param app The app containing the app.\n * @returns The flag or false if not found.\n */\nfunction mapAutostartFromFDC3(app: AppDefinition): boolean {\n\treturn mapBooleanValue(app?.customConfig?.autostart, false);\n}\n\n/**\n * Map a boolean or string to a real boolean value.\n * @param flag The flag to convert.\n * @param defaultFlag The default value if missing.\n * @returns The mapped flag.\n */\nfunction mapBooleanValue(flag: string | boolean | undefined, defaultFlag: boolean): boolean {\n\tif (isStringValue(flag) || isBoolean(flag)) {\n\t\tswitch (flag) {\n\t\t\tcase \"False\":\n\t\t\tcase \"false\":\n\t\t\tcase false:\n\t\t\t\treturn false;\n\t\t\tcase \"True\":\n\t\t\tcase \"true\":\n\t\t\tcase true:\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\t// if someone has defined a flag then the likely hood was to override the default value\n\t\t\t\treturn !defaultFlag;\n\t\t}\n\t}\n\treturn defaultFlag;\n}\n","import type { AppMetadata } from \"@finos/fdc3\";\nimport type { AppIntent } from \"@openfin/workspace\";\nimport type { PlatformApp } from \"../../shapes/app-shapes\";\nimport type {\n\tAppDefinition,\n\tWebAppDetails,\n\tNativeAppDetails,\n\tOnlineNativeAppDetails,\n\tAppInterop,\n\tAppDefinitionType,\n\tAppIntents,\n\tHostManifests\n} from \"../../shapes/fdc3-2-0-shapes\";\nimport { isEmpty, isObject } from \"../../utils\";\n\n/**\n * Map the app definition to a platform app.\n * @param app The app definition to map.\n * @returns The platform app.\n */\nexport function mapToPlatformApp(app: AppDefinition): PlatformApp {\n\tconst platformApp: PlatformApp = {\n\t\tappId: app.appId,\n\t\tname: app.name ?? app.appId,\n\t\ttitle: app.title ?? app.name,\n\t\tmanifestType: mapManifestTypeFromFDC3(app),\n\t\tmanifest: getManifestFromFDC3(app) as string,\n\t\tdescription: app.description,\n\t\tinstanceMode: app?.hostManifests?.OpenFin?.config?.instanceMode,\n\t\tintents: mapIntentsFromFDC3(app.interop),\n\t\tinterop: app.interop,\n\t\tcustomConfig: app.customConfig,\n\t\ttags: app.categories,\n\t\tversion: app.version,\n\t\tpublisher: app.publisher ?? \"\",\n\t\tcontactEmail: app.contactEmail,\n\t\tsupportEmail: app.supportEmail,\n\t\ticons: app.icons ?? [],\n\t\timages: app.screenshots,\n\t\tprivate: app?.hostManifests?.OpenFin?.config?.private,\n\t\tautostart: app?.hostManifests?.OpenFin?.config?.autostart,\n\t\tlaunchPreference: app?.hostManifests?.OpenFin?.config?.launchPreference\n\t};\n\treturn platformApp;\n}\n\n/**\n * Map a platform app to an FDC3 2.0 app definition.\n * @param app The app definition to map.\n * @returns The fdc3 2.0 app.\n */\nexport function mapToFDC3App(app: PlatformApp): AppDefinition {\n\tconst fdc3App: AppDefinition = {\n\t\tappId: app.appId,\n\t\tname: app.name ?? app.appId,\n\t\ttitle: app.title ?? app.name,\n\t\ttype: mapTypeFromPlatformApp(app),\n\t\tdetails: {},\n\t\tdescription: app.description,\n\t\tcategories: app.tags ?? [],\n\t\tversion: app.version,\n\t\tpublisher: app.publisher ?? \"\",\n\t\tcontactEmail: app.contactEmail,\n\t\tsupportEmail: app.supportEmail,\n\t\ticons: app.icons,\n\t\tscreenshots: app.images,\n\t\ttooltip: app.tooltip,\n\t\tinterop: getInteropFromPlatformApp(app),\n\t\thostManifests: getHostManifestsFromPlatformApp(app)\n\t};\n\treturn fdc3App;\n}\n\n/**\n * Map the platform app to app metadata.\n * @param app The application to map.\n * @param resultType The result type to include in the data.\n * @returns The app metadata.\n */\nexport function mapToAppMetaData(app: PlatformApp, resultType?: string): AppMetadata {\n\tconst appMetaData: AppMetadata = {\n\t\tappId: app.appId,\n\t\tdescription: app.description,\n\t\ticons: app.icons,\n\t\tname: app.name,\n\t\tscreenshots: app.images,\n\t\ttitle: app.title,\n\t\ttooltip: app.tooltip,\n\t\tversion: app.version,\n\t\tresultType\n\t};\n\treturn appMetaData;\n}\n\n/**\n * Map the app definition interop data to app interop format.\n * @param interop The interop to map.\n * @returns The app interop.\n */\nexport function mapIntentsFromFDC3(interop: AppInterop | undefined): AppIntent[] {\n\tconst intents: AppIntent[] = [];\n\n\tconst listensFor = interop?.intents?.listensFor;\n\tif (isEmpty(listensFor)) {\n\t\treturn intents;\n\t}\n\n\tconst intentIds = Object.keys(listensFor);\n\tfor (const intentName of intentIds) {\n\t\tintents.push({\n\t\t\tname: intentName,\n\t\t\tdisplayName: listensFor[intentName].displayName ?? \"\",\n\t\t\tcontexts: listensFor[intentName].contexts\n\t\t});\n\t}\n\n\treturn intents;\n}\n\n/**\n * Get the interop data from a Platform App in FDC3 2.0 format.\n * @param app The platform app to use as a source.\n * @returns The app interop definition.\n */\nfunction getInteropFromPlatformApp(app: PlatformApp): AppInterop {\n\tif (!isEmpty(app.interop)) {\n\t\treturn app.interop;\n\t}\n\tconst interop: AppInterop = {\n\t\tintents: {\n\t\t\tlistensFor: {}\n\t\t}\n\t};\n\n\tif (Array.isArray(app.intents) && app.intents.length > 0) {\n\t\tconst listensFor: { [key: string]: AppIntents } = {};\n\t\tfor (const intent of app.intents) {\n\t\t\tlistensFor[intent.name] = { displayName: intent.displayName, contexts: intent.contexts };\n\t\t}\n\t\tif (!isEmpty(interop.intents)) {\n\t\t\tinterop.intents.listensFor = listensFor;\n\t\t}\n\t}\n\n\treturn interop;\n}\n\n/**\n * Map the manifest type.\n * @param app The app definition to map the manifest type for.\n * @returns The mapped manifest type.\n */\nfunction mapManifestTypeFromFDC3(app: AppDefinition): string {\n\tlet manifestType: string;\n\n\tswitch (app.type) {\n\t\tcase \"web\": {\n\t\t\tmanifestType = \"inline-view\";\n\t\t\tbreak;\n\t\t}\n\t\tcase \"native\": {\n\t\t\tmanifestType = \"inline-external\";\n\t\t\tbreak;\n\t\t}\n\t\tcase \"onlineNative\": {\n\t\t\tmanifestType = \"desktop-browser\";\n\t\t\tbreak;\n\t\t}\n\t\tcase \"other\": {\n\t\t\tmanifestType = app.hostManifests?.OpenFin?.type ?? \"\";\n\t\t\tbreak;\n\t\t}\n\t\tdefault: {\n\t\t\tmanifestType = app.type;\n\t\t}\n\t}\n\treturn manifestType;\n}\n\n/**\n * Maps to an FDC3 2.0 type from the manifest type specified by a platform app.\n * @param app the platform app to use as a source\n * @returns the FDC3 2.0 app definition type\n */\nfunction mapTypeFromPlatformApp(app: PlatformApp): AppDefinitionType {\n\tlet type: AppDefinitionType = \"other\";\n\tif (isEmpty(app.manifestType)) {\n\t\treturn type;\n\t}\n\tswitch (app.manifestType) {\n\t\tcase \"inline-view\": {\n\t\t\ttype = \"web\";\n\t\t\tbreak;\n\t\t}\n\t\tcase \"inline-external\": {\n\t\t\ttype = \"native\";\n\t\t\tbreak;\n\t\t}\n\t\tcase \"desktop-browser\": {\n\t\t\ttype = \"onlineNative\";\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn type;\n}\n\n/**\n * Get the manifest which can be plain string or JSON.\n * @param app The app to get the manifest from.\n * @returns The manifest.\n */\nfunction getManifestFromFDC3(app: AppDefinition): string | unknown {\n\tlet manifest: string | unknown;\n\n\tswitch (app.type) {\n\t\tcase \"web\": {\n\t\t\tif (!isEmpty(app?.details)) {\n\t\t\t\tconst hostDetails = app.hostManifests?.OpenFin?.details;\n\t\t\t\tif (isObject(hostDetails)) {\n\t\t\t\t\tmanifest = {\n\t\t\t\t\t\turl: (app?.details as WebAppDetails).url,\n\t\t\t\t\t\tfdc3InteropApi: \"2.0\",\n\t\t\t\t\t\t...hostDetails\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tmanifest = {\n\t\t\t\t\t\turl: (app?.details as WebAppDetails).url,\n\t\t\t\t\t\tfdc3InteropApi: \"2.0\"\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase \"native\": {\n\t\t\tif (!isEmpty(app?.details)) {\n\t\t\t\t// our native api supports path and arguments.\n\t\t\t\tmanifest = app.details as NativeAppDetails;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase \"onlineNative\": {\n\t\t\tif (!isEmpty(app?.details)) {\n\t\t\t\tmanifest = (app?.details as OnlineNativeAppDetails).url;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase \"other\": {\n\t\t\tmanifest = app.hostManifests?.OpenFin?.details;\n\t\t\tbreak;\n\t\t}\n\t\tdefault: {\n\t\t\tmanifest = app.details;\n\t\t}\n\t}\n\treturn manifest;\n}\n\n/**\n * Get the Host Details from the platform app for this FDC3 2.0 App Definition.\n * @param app The platform app to get the information from.\n * @returns The host specific details.\n */\nfunction getHostManifestsFromPlatformApp(app: PlatformApp): HostManifests {\n\tconst hostManifests: HostManifests = {\n\t\tOpenFin: {\n\t\t\ttype: app.manifestType,\n\t\t\tdetails: app.manifest,\n\t\t\tconfig: {\n\t\t\t\tautostart: app.autostart,\n\t\t\t\tprivate: app.private,\n\t\t\t\tinstanceMode: app.instanceMode,\n\t\t\t\tlaunchPreference: app.launchPreference\n\t\t\t}\n\t\t}\n\t};\n\treturn hostManifests;\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","isEmpty","isStringValue","isString","trim","length","mapToPlatformApp","app","appId","name","title","manifestType","manifest","getManifestFromFDC3","description","customConfig","intents","interop","mapInteropFromFDC3","tags","mapTagsFromFDC3","version","publisher","contactEmail","supportEmail","icons","mapIconsFromFDC3","images","mapImagesFromFDC3","private","mapPrivateFromFDC3","autostart","mapAutostartFromFDC3","instanceMode","tooltip","launchPreference","mapToFDC3App","mapCustomConfigFromPlatformApp","mapIntentsFromPlatformApp","categories","mapIconsFromPlatformApp","mapImagesFromPlatformApp","mapToAppMetaData","Array","isArray","icon","src","push","image","listensFor","intent","contexts","displayName","passedIntents","keys","mapBooleanValue","toString","appIcons","appIcon","appImages","appImage","url","startsWith","JSON","parse","flag","defaultFlag","mapManifestTypeFromFDC3","hostManifests","OpenFin","config","mapIntentsFromFDC3","screenshots","type","mapTypeFromPlatformApp","details","getInteropFromPlatformApp","getHostManifestsFromPlatformApp","resultType","intentIds","intentName","hostDetails","fdc3InteropApi"],"sourceRoot":""}