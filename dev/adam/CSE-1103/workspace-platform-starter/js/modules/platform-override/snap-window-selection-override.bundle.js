const e={platformOverride:new class{async initialize(e,i,t){this._definition=e,this._logger=i("SnapWindowSelectionOverride"),this._helpers=t,this._logger.info("Initializing")}async closedown(){this._logger?.info("Closedown")}async getConstructorOverride(e){return i=>{const t=this._definition?.data??{},n=this._logger,s=this._helpers;return class extends i{constructor(){super(),n?.info(`Options passed: ${JSON.stringify(e)} and module data: ${JSON.stringify(t)} with session id: ${s?.sessionId}`)}async createWindow(e,i){const n=await super.createWindow(e,i),r=await(s?.getSnapClient()),a=await(r?.isEnabled()),o=await(r?.getSnapServer());if(!a||!o)return n;let l=!0;if(Array.isArray(t?.excludeUrls)&&t.excludeUrls.length>0&&e.url){const i=e.url;l=!t.excludeUrls.some((e=>new RegExp(e.replace(/\*/g,".*")).test(i)))}if(l){const e=await n.getNativeId();await o.registerWindow(n.identity.name,e)}return n}}}}}};export{e as entryPoints};
//# sourceMappingURL=snap-window-selection-override.bundle.js.map