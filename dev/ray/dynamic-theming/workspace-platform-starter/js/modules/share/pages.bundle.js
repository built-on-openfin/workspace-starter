function e(e){return null==e}function t(e){return function(e){return null!=e&&"string"==typeof e}(e)&&e.trim().length>0}const a={share:new class{async initialize(e,t,a){this._definition=e,this._logger=t("PagesShareProvider"),this._helpers=a,this._logger.info("Initializing")}async closedown(){this._logger?.info("Closedown")}async getShareTypes(){return["page"]}async getEntries(e){const t=await(this._helpers?.getPlatform?.());if(t){const a=t.Browser.wrapSync(e),i=await a.getPages();let n;for(const e of i)if(e.isActive){n=e.pageId;break}if(n)return[{label:"Share Page",type:"page",payload:{windowIdentity:e,pageId:n}}]}}async share(a,i){if("page"===a){const n=await(this._helpers?.getPlatform?.());if(n&&!e(i)){let s=i?.page;if(e(i?.page)&&t(i.pageId)){let t=!0;try{if(!e(i.windowIdentity)){const a=n.Browser.wrapSync(i.windowIdentity);s=await a.getPage(i.pageId),e(s?.customData)&&(s.customData={}),s.customData.windowBounds=await a.openfinWindow.getBounds(),t=!1}}catch{}if(e(s)&&e(i.windowIdentity)){const a=await n.Browser.getAllAttachedPages();for(const r of a)if(r.pageId===i.pageId){if(s={...r},!e(r.parentIdentity)){const t=n.Browser.wrapSync(r.parentIdentity);e(s.customData)&&(s.customData={}),s.customData.windowBounds=await t.openfinWindow.getBounds()}t=!1;break}}t&&(s=await n.Storage.getPage(i.pageId))}if(!e(s)){const r=await async function(a,i,n,s,r,o){if(e(n))i?.warn("Endpoint client is not available.");else if(e(n.requestResponse))i?.warn("Endpoint client requestResponse is not available.");else{if(!e(s)){try{const l=24,d=await n.requestResponse(s,{type:r,data:o});if(d){let n=d.id;if(e(n)){const e=d.url.lastIndexOf("/");-1!==e&&(n=d.url.slice(e+1))}if(!e(n)){const e=await a.Application.getInfo();let s;if(e.manifestUrl.startsWith("http")?s=`${e.manifestUrl.replace("http","fin")}?$$shareType=${r}&$$payload=${btoa(JSON.stringify({id:n}))}`:i?.error("We do not support file based manifest launches. The manifest has to be served over http/https:",e.manifestUrl),t(s))return await fin.Clipboard.writeText({data:s}),{title:"Share Request Raised",message:`The share request you raised has been copied to the **clipboard** and will be valid for ${l} hours. \n Share Url: \n * **${s}**`,status:"shared"}}}}catch(e){i?.error("Error saving share request:",e)}return{title:"Share Request Failed",message:"The share request you raised could not be generated.",status:"error"}}i?.warn("Endpoint id is not available.")}}(n,this._logger,await(this._helpers?.getEndpointClient?.()),this._definition?.data?.setEndpointId,a,s);await this.showConfirmation(r,i.windowIdentity)}}}}async handle(t,a){if("page"===t){const i=await async function(t,a,i,n,s){if(e(a))t?.warn("Endpoint client is not available.");else if(e(a.requestResponse))t?.warn("Endpoint client requestResponse is not available.");else{if(!e(i)){try{const i=await a.requestResponse("share-get",{id:s});return e(i)?{confirmation:{title:"Share Load Expired",message:"The share request has expired and is no longer available.",status:"error"}}:n!==i.type?(t?.warn(`Share entry of mismatched type specified: ${i.type} it should be ${n}`),{confirmation:{title:"Share Load Failed",message:"The specified share link does not contain the correct data for the share type.",status:"error"}}):{payload:i.data,confirmation:{title:"Share Request Applied",message:"The share request has been fetched and applied.",status:"loaded"}}}catch(e){t?.error("There has been an error trying to load and apply the share link.",e)}return{confirmation:{title:"Share Load Failed",message:"The specified share link cannot be loaded.",status:"error"}}}t?.warn("Endpoint id is not available.")}}(this._logger,await(this._helpers?.getEndpointClient?.()),this._definition?.data?.getEndpointId,t,a.id),n=await(this._helpers?.getPlatform?.());if(n){const t=i?.payload;!e(t)&&this._helpers?.launchPage&&(await n.Storage.savePage(t),await this._helpers.launchPage(t.pageId,void 0,this._logger))}await this.showConfirmation(i?.confirmation)}}async showConfirmation(t,a){if(!e(t)&&this._helpers?.getShareClient){this._logger?.info(t);const i=await this._helpers.getShareClient();if(i){const n="error"===t.status?"error":"success";if(t.iconUrl=this._definition?.data?.images[n],this._helpers?.getThemeClient&&!e(t.iconUrl)){const e=await this._helpers.getThemeClient();t.iconUrl=await e.themeUrl(t.iconUrl)}await i.confirmation(t,this._definition?.data?.confirmationMode,a)}}}}};export{a as entryPoints};
//# sourceMappingURL=pages.bundle.js.map