{"version":3,"file":"about.bundle.js","mappings":"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","sources":["webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/shapes/actions-shapes.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/framework/utils.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/about/integration.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/about/index.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/about/conditions.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/about/actions.ts","webpack://openfin-workspace--workspace-platform-starter/./client/src/modules/composite/about/menus.ts"],"sourcesContent":["import type { CustomActionsMap, ToolbarButton, WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport type { ModuleHelpers, ModuleImplementation, ModuleList } from \"./module-shapes\";\n\n/**\n * Definition for an action.\n */\nexport interface Actions<O = unknown> extends ModuleImplementation<O, ActionHelpers> {\n\t/**\n\t * Get the actions from the module.\n\t * @param platform The platform module.\n\t * @returns The map of custom actions.\n\t */\n\tget(platform: WorkspacePlatformModule): Promise<CustomActionsMap>;\n}\n\n/**\n * A list of modules that provide actions that can be used by the platform.\n */\nexport type ActionsProviderOptions = ModuleList;\n\n/**\n * Extended helpers used by action modules.\n */\nexport interface ActionHelpers extends ModuleHelpers {\n\t/**\n\t * Update toolbar buttons.\n\t * @param buttons The list of all buttons.\n\t * @param buttonId The button to update.\n\t * @param replacementButtonId The replacement for the button.\n\t * @returns The updated buttons.\n\t */\n\tupdateToolbarButtons: (\n\t\tbuttons: ToolbarButton[],\n\t\tbuttonId: string,\n\t\treplacementButtonId: string\n\t) => Promise<ToolbarButton[]>;\n}\n\n/**\n * Use this in preference to CustomActionCallerType from workspace-platform to avoid the import of the whole of workspace package in modules.\n */\nexport enum CustomActionCallerType {\n\tCustomButton = \"CustomButton\",\n\tStoreCustomButton = \"StoreCustomButton\",\n\tCustomDropdownItem = \"CustomDropdownItem\",\n\tGlobalContextMenu = \"GlobalContextMenu\",\n\tViewTabContextMenu = \"ViewTabContextMenu\",\n\tPageTabContextMenu = \"PageTabContextMenu\",\n\tSaveButtonContextMenu = \"SaveButtonContextMenu\",\n\tAPI = \"API\"\n}\n","/**\n * Test if a value is a undefined or null.\n * @param value The value to test.\n * @returns True if the value is null or undefined.\n */\nexport function isEmpty(value: unknown): value is null | undefined {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value === undefined || value === null;\n}\n\n/**\n * Test if a value is an object.\n * @param value The value to test.\n * @returns True if the value is an object.\n */\nexport function isObject(value: unknown): value is object {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * Test if a value is a string.\n * @param value The value to test.\n * @returns True if the value is a string.\n */\nexport function isString(value: unknown): value is string {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"string\";\n}\n\n/**\n * Test if a value is a string that is not empty.\n * @param value The value to test.\n * @returns True if the value is a string that is not empty.\n */\nexport function isStringValue(value: unknown): value is string {\n\treturn isString(value) && value.trim().length > 0;\n}\n\n/**\n * Test if a value is a number.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumber(value: unknown): value is number {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"number\";\n}\n\n/**\n * Test if a value is a number with a real value i.e. not NaN or Infinite.\n * @param value The value to test.\n * @returns True if the value is a number.\n */\nexport function isNumberValue(value: unknown): value is number {\n\treturn isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n}\n\n/**\n * Test if a value is a boolean.\n * @param value The value to test.\n * @returns True if the value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn value !== undefined && value !== null && typeof value === \"boolean\";\n}\n\n/**\n * Test if a value is an integer.\n * @param value The value to test.\n * @returns True if the value is an integer.\n */\nexport function isInteger(value: unknown): value is number {\n\treturn isNumber(value) && Number.isInteger(value);\n}\n\n/**\n * Deep clone an object.\n * @param obj The object to clone.\n * @returns The clone of the object.\n */\nexport function objectClone<T>(obj: T): T {\n\t// eslint-disable-next-line no-restricted-syntax\n\treturn obj === undefined ? (undefined as T) : JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Do a deep comparison of the objects.\n * @param obj1 The first object to compare.\n * @param obj2 The second object to compare.\n * @param matchPropertyOrder If true the properties must be in the same order.\n * @returns True if the objects are the same.\n */\nexport function deepEqual(obj1: unknown, obj2: unknown, matchPropertyOrder: boolean = true): boolean {\n\tif (isObject(obj1) && isObject(obj2)) {\n\t\tconst objKeys1 = Object.keys(obj1);\n\t\tconst objKeys2 = Object.keys(obj2);\n\n\t\tif (objKeys1.length !== objKeys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (matchPropertyOrder && JSON.stringify(objKeys1) !== JSON.stringify(objKeys2)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const key of objKeys1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value1 = (obj1 as any)[key];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tconst value2 = (obj2 as any)[key];\n\n\t\t\tif (!deepEqual(value1, value2, matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tif (obj1.length !== obj2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < obj1.length; i++) {\n\t\t\tif (!deepEqual(obj1[i], obj2[i], matchPropertyOrder)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\n/**\n * Deep merge two objects.\n * @param target The object to be merged into.\n * @param sources The objects to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T = unknown>(target: T, ...sources: T[]): T {\n\tif (!Array.isArray(sources) || sources.length === 0) {\n\t\treturn target;\n\t}\n\n\tconst targetAsMap = target as { [id: string]: unknown };\n\tconst source = sources.shift();\n\n\tlet keys;\n\tif (isObject(targetAsMap) && isObject(source)) {\n\t\tkeys = Object.keys(source);\n\t} else if (Array.isArray(source)) {\n\t\tif (!Array.isArray(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tkeys = Object.keys(source).map((k) => Number.parseInt(k, 10));\n\t}\n\n\tif (keys) {\n\t\tconst sourceAsMap = source as { [id: string]: unknown };\n\t\tfor (const key of keys) {\n\t\t\tconst value = sourceAsMap[key];\n\t\t\tif (isObject(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = {};\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (isEmpty(targetAsMap[key])) {\n\t\t\t\t\ttargetAsMap[key] = [];\n\t\t\t\t}\n\t\t\t\tdeepMerge(targetAsMap[key], value);\n\t\t\t} else {\n\t\t\t\ttargetAsMap[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Polyfills randomUUID if running in a non-secure context.\n * @returns The random UUID.\n */\nexport function randomUUID(): string {\n\tif (\"randomUUID\" in globalThis.crypto) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\treturn globalThis.crypto.randomUUID();\n\t}\n\t// Polyfill the window.crypto.randomUUID if we are running in a non secure context that doesn't have it\n\t// we are still using window.crypto.getRandomValues which is always available\n\t// https://stackoverflow.com/a/2117523/2800218\n\t/**\n\t * Get random hex value.\n\t * @param c The number to base the random value on.\n\t * @returns The random value.\n\t */\n\tfunction getRandomHex(c: string): string {\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst rnd = globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4));\n\t\treturn (\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t(Number(c) ^ rnd).toString(16)\n\t\t);\n\t}\n\treturn \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, getRandomHex);\n}\n\n/**\n * Format an error to a readable string.\n * @param err The error to format.\n * @returns The formatted error.\n */\nexport function formatError(err: unknown): string {\n\tif (isEmpty(err)) {\n\t\treturn \"\";\n\t} else if (err instanceof Error) {\n\t\treturn err.message;\n\t} else if (isStringValue(err)) {\n\t\treturn err;\n\t} else if (isObject(err) && \"message\" in err && isString(err.message)) {\n\t\treturn err.message;\n\t}\n\treturn JSON.stringify(err);\n}\n\n/**\n * A basic string sanitize function that removes angle brackets <> from a string.\n * @param content the content to sanitize\n * @returns a string without angle brackets <>\n */\nexport function sanitizeString(content: unknown): string {\n\tif (isStringValue(content)) {\n\t\treturn content\n\t\t\t.replace(/<[^>]*>?/gm, \"\")\n\t\t\t.replace(/&gt;/g, \">\")\n\t\t\t.replace(/&lt;/g, \"<\")\n\t\t\t.replace(/&amp;/g, \"&\")\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/\\n\\s*\\n/g, \"\\n\");\n\t}\n\treturn \"\";\n}\n\n/**\n * Get the command line arguments from a command line string.\n * Examples of command line strings: arg1 key1=value1 key2=\"value with spaces\" key3='value3' key4='value with more spaces'`.\n * @param commandLine The command line string.\n * @returns The command line arguments or an empty array if none\n */\nexport function getCommandLineArgs(commandLine: string): string[] {\n\tif (!isStringValue(commandLine)) {\n\t\treturn [];\n\t}\n\tconst matches = commandLine.match(/(\\w+=)?(\"[^\"]*\"|'[^']*'|[^ ]+)/g);\n\tif (isEmpty(matches)) {\n\t\treturn [];\n\t}\n\treturn matches;\n}\n","import type {\n\tCLIFilter,\n\tCLITemplate,\n\tHomeAction,\n\tHomeDispatchedSearchResult,\n\tHomeSearchListenerResponse,\n\tHomeSearchResponse,\n\tHomeSearchResult,\n\tTemplateFragment\n} from \"@openfin/workspace\";\nimport type {\n\tIntegrationHelpers,\n\tIntegrationModule,\n\tIntegrationModuleDefinition\n} from \"workspace-platform-starter/shapes/integrations-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition } from \"workspace-platform-starter/shapes/module-shapes\";\nimport type { VersionInfo } from \"workspace-platform-starter/shapes/version-shapes\";\nimport { isEmpty } from \"workspace-platform-starter/utils\";\nimport type { AboutProviderSettings } from \"./shapes\";\n\n/**\n * Implement the integration provider for about info.\n */\nexport class AboutProvider implements IntegrationModule<AboutProviderSettings> {\n\t/**\n\t * The default base score for ordering.\n\t * @internal\n\t */\n\tprivate static readonly _DEFAULT_BASE_SCORE = 3000;\n\n\t/**\n\t * The command to display the about information.\n\t * @internal\n\t */\n\tprivate static readonly _ABOUT_COMMAND = \"/about\";\n\n\t/**\n\t * The settings for the integration.\n\t * @internal\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * The integration helpers.\n\t * @internal\n\t */\n\tprivate _integrationHelpers: IntegrationHelpers | undefined;\n\n\t/**\n\t * The module definition.\n\t * @internal\n\t */\n\tprivate _definition: IntegrationModuleDefinition | undefined;\n\n\t/**\n\t * The settings from config.\n\t */\n\tprivate _settings?: AboutProviderSettings;\n\n\t/**\n\t * Provided alternate labels for the version types\n\t * @internal\n\t */\n\tprivate _versionTypeMap?: { [key: string]: string };\n\n\t/**\n\t * Provided alternate labels for the version types\n\t * @internal\n\t */\n\tprivate _excludeVersionType?: string[];\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<AboutProviderSettings>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: IntegrationHelpers\n\t): Promise<void> {\n\t\tthis._integrationHelpers = helpers;\n\t\tthis._definition = definition;\n\t\tthis._settings = definition.data;\n\t\tthis._versionTypeMap = definition?.data?.versionTypeMap ?? {};\n\t\tthis._excludeVersionType = definition?.data?.excludeVersionType ?? [];\n\t\tthis._logger = loggerCreator(\"AboutProvider\");\n\t}\n\n\t/**\n\t * Get a list of the static help entries.\n\t * @returns The list of help entries.\n\t */\n\tpublic async getHelpSearchEntries(): Promise<HomeSearchResult[]> {\n\t\tif (this._integrationHelpers) {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tkey: `${this._definition?.id}-help`,\n\t\t\t\t\tscore: this._definition?.baseScore ?? AboutProvider._DEFAULT_BASE_SCORE,\n\t\t\t\t\ttitle: AboutProvider._ABOUT_COMMAND,\n\t\t\t\t\tlabel: \"Help\",\n\t\t\t\t\ticon: this._definition?.icon,\n\t\t\t\t\tactions: [],\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tproviderId: this._definition?.id,\n\t\t\t\t\t\tpopulateQuery: AboutProvider._ABOUT_COMMAND\n\t\t\t\t\t},\n\t\t\t\t\ttemplate: \"Custom\" as CLITemplate.Custom,\n\t\t\t\t\ttemplateContent: await this._integrationHelpers.templateHelpers.createHelp(\n\t\t\t\t\t\tAboutProvider._ABOUT_COMMAND,\n\t\t\t\t\t\t[\"The about command lists the version information related to this platform.\"],\n\t\t\t\t\t\t[AboutProvider._ABOUT_COMMAND]\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t];\n\t\t}\n\n\t\treturn [];\n\t}\n\n\t/**\n\t * Get a list of search results based on the query and filters.\n\t * @param query The query to search for.\n\t * @param filters The filters to apply.\n\t * @param lastResponse The last search response used for updating existing results.\n\t * @param options Options for the search query.\n\t * @param options.queryMinLength The minimum length before a query is actioned.\n\t * @param options.queryAgainst The fields in the data to query against.\n\t * @param options.isSuggestion Is the query from a suggestion.\n\t * @returns The list of results and new filters.\n\t */\n\tpublic async getSearchResults(\n\t\tquery: string,\n\t\tfilters: CLIFilter[],\n\t\tlastResponse: HomeSearchListenerResponse,\n\t\toptions: {\n\t\t\tqueryMinLength?: number;\n\t\t\tqueryAgainst?: string[];\n\t\t\tisSuggestion?: boolean;\n\t\t}\n\t): Promise<HomeSearchResponse> {\n\t\tif (query.length < 2 || !AboutProvider._ABOUT_COMMAND.startsWith(query)) {\n\t\t\treturn {\n\t\t\t\tresults: []\n\t\t\t};\n\t\t}\n\n\t\tif (this._integrationHelpers?.getVersionInfo) {\n\t\t\tconst themeClient = await this._integrationHelpers.getThemeClient();\n\t\t\tconst palette = await themeClient.getPalette();\n\n\t\t\tconst versionInfo = await this._integrationHelpers.getVersionInfo();\n\n\t\t\tconst actions: HomeAction[] = [];\n\n\t\t\tconst data: { [id: string]: string } = {};\n\n\t\t\tconst tableData: string[][] = [];\n\t\t\ttableData.push([\"Version Type\", \"Version\"]);\n\n\t\t\tif (versionInfo && this._versionTypeMap && this._excludeVersionType) {\n\t\t\t\tconst keys = Object.keys(versionInfo);\n\n\t\t\t\tfor (const key of keys) {\n\t\t\t\t\tconst versionForKey = versionInfo[key as keyof VersionInfo];\n\t\t\t\t\tif (!this._excludeVersionType.includes(key) && versionForKey) {\n\t\t\t\t\t\tconst label = this._versionTypeMap[key] ?? key;\n\t\t\t\t\t\ttableData.push([label, versionForKey ?? \"unknown\"]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdata.title = this._settings?.title ?? \"Versions\";\n\n\t\t\tconst children: TemplateFragment[] = [];\n\t\t\tconst titleFragment = (await this._integrationHelpers.templateHelpers.createTitle(\n\t\t\t\t\"title\",\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\t{\n\t\t\t\t\tmarginBottom: \"10px\",\n\t\t\t\t\tborderBottom: `1px solid ${palette.background6}`\n\t\t\t\t}\n\t\t\t)) as TemplateFragment;\n\n\t\t\tchildren.push(titleFragment);\n\n\t\t\tconst desc = this._settings?.description;\n\t\t\tif (!isEmpty(desc)) {\n\t\t\t\tdata.description = desc;\n\t\t\t\tconst descriptionFragment = (await this._integrationHelpers.templateHelpers.createText(\n\t\t\t\t\t\"description\",\n\t\t\t\t\tundefined,\n\t\t\t\t\t{\n\t\t\t\t\t\tmarginBottom: \"10px\"\n\t\t\t\t\t}\n\t\t\t\t)) as TemplateFragment;\n\t\t\t\tchildren.push(descriptionFragment);\n\t\t\t}\n\n\t\t\tconst tableFragment = await this._integrationHelpers.templateHelpers.createTable(\n\t\t\t\ttableData,\n\t\t\t\t[],\n\t\t\t\t0,\n\t\t\t\tdata\n\t\t\t);\n\n\t\t\tchildren.push(tableFragment);\n\n\t\t\tconst result: HomeSearchResult = {\n\t\t\t\tkey: \"about-info\",\n\t\t\t\tscore: this._definition?.baseScore ?? AboutProvider._DEFAULT_BASE_SCORE,\n\t\t\t\ttitle: AboutProvider._ABOUT_COMMAND,\n\t\t\t\tlabel: \"Version\",\n\t\t\t\ticon: this._definition?.icon,\n\t\t\t\tactions,\n\t\t\t\tdata: {\n\t\t\t\t\tproviderId: this._definition?.id\n\t\t\t\t},\n\t\t\t\ttemplate: \"Custom\" as CLITemplate.Custom,\n\t\t\t\ttemplateContent: {\n\t\t\t\t\tlayout: await this._integrationHelpers.templateHelpers.createContainer(\"column\", children, {\n\t\t\t\t\t\tpadding: \"10px\"\n\t\t\t\t\t}),\n\t\t\t\t\tdata\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn {\n\t\t\t\tresults: [result]\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tresults: []\n\t\t};\n\t}\n\n\t/**\n\t * An entry has been selected.\n\t * @param result The dispatched result.\n\t * @param lastResponse The last response.\n\t * @returns True if the item was handled.\n\t */\n\tpublic async itemSelection(\n\t\tresult: HomeDispatchedSearchResult,\n\t\tlastResponse: HomeSearchListenerResponse\n\t): Promise<boolean> {\n\t\treturn true;\n\t}\n}\n","import type { ModuleImplementation, ModuleTypes } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { AboutActions } from \"./actions\";\nimport { AboutConditions } from \"./conditions\";\nimport { AboutProvider } from \"./integration\";\nimport { AboutMenus } from \"./menus\";\nimport type { SharedState } from \"./shapes\";\n\nconst sharedState: SharedState = {};\nexport const entryPoints: { [type in ModuleTypes]?: ModuleImplementation } = {\n\tintegrations: new AboutProvider(),\n\tconditions: new AboutConditions(sharedState),\n\tactions: new AboutActions(sharedState),\n\tmenus: new AboutMenus()\n};\n","import type { ConditionMap, Conditions } from \"workspace-platform-starter/shapes/conditions-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty } from \"workspace-platform-starter/utils\";\nimport type { SharedState } from \"./shapes\";\n/**\n * Implement the conditions.\n */\nexport class AboutConditions implements Conditions {\n\t/**\n\t * The helper methods to use.\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * The settings for the conditions.\n\t * @internal\n\t */\n\tprivate _definition: ModuleDefinition<unknown> | undefined;\n\n\t/**\n\t * The shared state passed to these implementations.\n\t */\n\tprivate readonly _sharedState: SharedState;\n\n\t/**\n\t * Create a new instance of AboutConditions.\n\t * @param sharedState The shared state data.\n\t */\n\tconstructor(sharedState: SharedState) {\n\t\tthis._sharedState = sharedState;\n\t}\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<unknown>,\n\t\tloggerCreator: LoggerCreator\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"AboutCondition\");\n\t\tthis._definition = definition;\n\t\tthis._logger.info(\"Condition Initialized\");\n\t}\n\n\t/**\n\t * Get the conditions from the module.\n\t * @returns Map of the conditions from the module.\n\t */\n\tpublic async get(): Promise<ConditionMap> {\n\t\tconst conditionMap: ConditionMap = {};\n\n\t\tconditionMap[\"has-about\"] = async (): Promise<boolean> => !isEmpty(this._sharedState.aboutWindow);\n\n\t\treturn conditionMap;\n\t}\n}\n","import type OpenFin from \"@openfin/core\";\nimport type {\n\tCustomActionPayload,\n\tCustomActionsMap,\n\tWorkspacePlatformModule\n} from \"@openfin/workspace-platform\";\nimport {\n\tCustomActionCallerType,\n\ttype ActionHelpers,\n\ttype Actions\n} from \"workspace-platform-starter/shapes/actions-shapes\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { ModuleDefinition } from \"workspace-platform-starter/shapes/module-shapes\";\nimport { isEmpty } from \"workspace-platform-starter/utils\";\nimport type { AboutActionSettings, SharedState } from \"./shapes\";\n/**\n * Implement the actions.\n */\nexport class AboutActions implements Actions {\n\t/**\n\t * The helper methods to use.\n\t */\n\tprivate _helpers?: ActionHelpers;\n\n\t/**\n\t * The helper methods to use.\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * The settings for the action.\n\t * @internal\n\t */\n\tprivate _definition: ModuleDefinition<AboutActionSettings> | undefined;\n\n\t/**\n\t * The shared state passed to these implementations.\n\t */\n\tprivate readonly _sharedState: SharedState;\n\n\t/**\n\t * Create a new instance of AccountActions.\n\t * @param sharedState The shared state data.\n\t */\n\tconstructor(sharedState: SharedState) {\n\t\tthis._sharedState = sharedState;\n\t}\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<AboutActionSettings>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ActionHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"AboutAction\");\n\t\tthis._helpers = helpers;\n\t\tthis._definition = definition;\n\t\tthis._sharedState.aboutWindow = await this.getAboutWindow();\n\t}\n\n\t/**\n\t * Get the actions from the module.\n\t * @param platform The platform module.\n\t * @returns The map of custom actions.\n\t */\n\tpublic async get(platform: WorkspacePlatformModule): Promise<CustomActionsMap> {\n\t\tconst actionMap: CustomActionsMap = {};\n\n\t\tactionMap[\"show-about\"] = async (payload: CustomActionPayload): Promise<void> => {\n\t\t\tif (\n\t\t\t\tpayload.callerType === CustomActionCallerType.GlobalContextMenu &&\n\t\t\t\t!isEmpty(this._sharedState?.aboutWindow)\n\t\t\t) {\n\t\t\t\tconst aboutWindow = fin.Window.wrapSync({\n\t\t\t\t\tuuid: fin.me.identity.uuid,\n\t\t\t\t\tname: this._sharedState.aboutWindow.name\n\t\t\t\t});\n\t\t\t\tlet windowExists = false;\n\t\t\t\ttry {\n\t\t\t\t\tawait aboutWindow.getInfo();\n\t\t\t\t\twindowExists = true;\n\t\t\t\t} catch {\n\t\t\t\t\tthis._logger?.info(\"Cannot see existing about window. Will create an about window.\");\n\t\t\t\t}\n\n\t\t\t\tif (windowExists) {\n\t\t\t\t\tawait aboutWindow.setAsForeground();\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait fin.Window.create(this._sharedState.aboutWindow);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis._logger?.error(\"Error launching show about action window.\", error);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn actionMap;\n\t}\n\n\t/**\n\t * Gets about window options enriched with VersionInfo.\n\t * @returns The window options to show.\n\t */\n\tprivate async getAboutWindow(): Promise<OpenFin.WindowOptions | undefined> {\n\t\tif (isEmpty(this._definition?.data?.windowOptions)) {\n\t\t\tthis._logger?.info(\"No about window configuration provided.\");\n\t\t\treturn;\n\t\t}\n\n\t\tconst validatedWindowOptions: Partial<OpenFin.WindowOptions> = {\n\t\t\t...this._definition?.data?.windowOptions\n\t\t};\n\n\t\tif (isEmpty(validatedWindowOptions.url)) {\n\t\t\tthis._logger?.error(\n\t\t\t\t\"An about version window configuration was set but a url was not provided. A window cannot be launched.\"\n\t\t\t);\n\t\t\treturn undefined;\n\t\t}\n\t\tif (isEmpty(validatedWindowOptions.name)) {\n\t\t\tvalidatedWindowOptions.name = `${fin.me.identity.uuid}-versioning-about`;\n\t\t}\n\n\t\tif (this._helpers?.getVersionInfo) {\n\t\t\tif (!isEmpty(validatedWindowOptions?.customData?.versionInfo)) {\n\t\t\t\tthis._logger?.info(\n\t\t\t\t\t\"Enriching customData versionInfo provided by about version window configuration.\"\n\t\t\t\t);\n\t\t\t\tvalidatedWindowOptions.customData.versionInfo = {\n\t\t\t\t\t...validatedWindowOptions.customData.versionInfo,\n\t\t\t\t\t...(await this._helpers.getVersionInfo())\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthis._logger?.info(\"Setting customData versionInfo for about version window configuration.\");\n\t\t\t\tif (isEmpty(validatedWindowOptions.customData)) {\n\t\t\t\t\tvalidatedWindowOptions.customData = {};\n\t\t\t\t}\n\t\t\t\tvalidatedWindowOptions.customData.versionInfo = await this._helpers.getVersionInfo();\n\t\t\t}\n\t\t}\n\n\t\tthis._logger?.info(\"Returning about version window configuration.\");\n\t\treturn validatedWindowOptions as OpenFin.WindowOptions;\n\t}\n}\n","import type { WorkspacePlatformModule } from \"@openfin/workspace-platform\";\nimport type { Logger, LoggerCreator } from \"workspace-platform-starter/shapes/logger-shapes\";\nimport type { MenuEntry, MenuType, Menus } from \"workspace-platform-starter/shapes/menu-shapes\";\nimport type { ModuleDefinition, ModuleHelpers } from \"workspace-platform-starter/shapes/module-shapes\";\nimport type { AboutMenusSettings } from \"./shapes\";\n\n/**\n * Implement the menus.\n */\nexport class AboutMenus implements Menus<AboutMenusSettings> {\n\t/**\n\t * The helper methods to use.\n\t */\n\tprivate _logger?: Logger;\n\n\t/**\n\t * The helper methods to use.\n\t */\n\tprivate _settings?: AboutMenusSettings;\n\n\t/**\n\t * Initialize the module.\n\t * @param definition The definition of the module from configuration include custom options.\n\t * @param loggerCreator For logging entries.\n\t * @param helpers Helper methods for the module to interact with the application core.\n\t * @returns Nothing.\n\t */\n\tpublic async initialize(\n\t\tdefinition: ModuleDefinition<AboutMenusSettings>,\n\t\tloggerCreator: LoggerCreator,\n\t\thelpers: ModuleHelpers\n\t): Promise<void> {\n\t\tthis._logger = loggerCreator(\"DeveloperMenus\");\n\t\tthis._settings = definition.data;\n\t}\n\n\t/**\n\t * Get the menus from the module.\n\t * @param menuType The type of menu to get the entries for.\n\t * @param platform The current platform.\n\t * @returns The menu entries.\n\t */\n\tpublic async get(menuType: MenuType, platform: WorkspacePlatformModule): Promise<MenuEntry[] | undefined> {\n\t\tif (menuType === \"global\") {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tlabel: this._settings?.entries?.about?.label ?? \"About\",\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttype: \"Custom\",\n\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\tid: \"show-about\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tposition: this._settings?.entries?.about?.position ?? {\n\t\t\t\t\t\ttype: \"Quit\",\n\t\t\t\t\t\toperation: \"before\"\n\t\t\t\t\t},\n\t\t\t\t\tconditions: [\"has-about\"]\n\t\t\t\t}\n\t\t\t];\n\t\t}\n\t}\n}\n"],"names":["CustomActionCallerType","isEmpty","value","AboutProvider","initialize","definition","loggerCreator","helpers","this","_integrationHelpers","_definition","_settings","data","_versionTypeMap","versionTypeMap","_excludeVersionType","excludeVersionType","_logger","getHelpSearchEntries","key","id","score","baseScore","_DEFAULT_BASE_SCORE","title","_ABOUT_COMMAND","label","icon","actions","providerId","populateQuery","template","templateContent","templateHelpers","createHelp","getSearchResults","query","filters","lastResponse","options","length","startsWith","results","getVersionInfo","themeClient","getThemeClient","palette","getPalette","versionInfo","tableData","push","keys","Object","versionForKey","includes","children","titleFragment","createTitle","undefined","marginBottom","borderBottom","background6","desc","description","descriptionFragment","createText","tableFragment","createTable","layout","createContainer","padding","itemSelection","result","sharedState","entryPoints","integrations","conditions","constructor","_sharedState","info","get","conditionMap","async","aboutWindow","_helpers","getAboutWindow","platform","actionMap","payload","callerType","GlobalContextMenu","fin","Window","wrapSync","uuid","me","identity","name","windowExists","getInfo","setAsForeground","create","error","windowOptions","validatedWindowOptions","url","customData","menus","menuType","entries","about","type","action","position","operation"],"sourceRoot":""}